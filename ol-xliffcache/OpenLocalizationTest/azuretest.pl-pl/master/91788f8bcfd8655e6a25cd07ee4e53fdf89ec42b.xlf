<?xml version="1.0" encoding="utf-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" source-language="en-us" target-language="pl-pl" original="2/20/2016 11:32:16 PM" tool-id="MarkdownTransformer" product-name="N/A" product-version="N/A" build-num="1">
    <header>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">91788f8bcfd8655e6a25cd07ee4e53fdf89ec42b</xliffext:olfilehash>
      <tool tool-id="MarkdownTransformer" tool-name="MarkdownToXliff" tool-version="1.0" tool-company="Microsoft" />
    </header>
    <body>
      <group extype="content">
        <group id="101">
          <trans-unit id="101" xml:space="preserve">
            <source>In order to support the offline features of mobile services, we used the <bpt id="2">&lt;code&gt;</bpt>IMobileServiceSyncTable<ept id="2">&lt;/code&gt;</ept> interface and initialized <bpt id="4">&lt;code&gt;</bpt>MobileServiceClient.SyncContext<ept id="4">&lt;/code&gt;</ept> with a local store.</source>
            <target state="new">In order to support the offline features of mobile services, we used the <bpt id="2">&lt;code&gt;</bpt>IMobileServiceSyncTable<ept id="2">&lt;/code&gt;</ept> interface and initialized <bpt id="4">&lt;code&gt;</bpt>MobileServiceClient.SyncContext<ept id="4">&lt;/code&gt;</ept> with a local store.</target>
          </trans-unit>
          <trans-unit id="102" xml:space="preserve">
            <source>In this case the local store was a SQLite database.</source>
            <target state="new">In this case the local store was a SQLite database.</target>
          </trans-unit>
          <trans-unit id="103" xml:space="preserve">
            <source>The normal CRUD operations for mobile services work as if the app is still connected but, all the operations occur against the local store.</source>
            <target state="new">The normal CRUD operations for mobile services work as if the app is still connected but, all the operations occur against the local store.</target>
          </trans-unit>
          <trans-unit id="104" xml:space="preserve">
            <source>When we wanted to synchronize the local store with the server, we used the <bpt id="2">&lt;code&gt;</bpt>IMobileServiceSyncTable.PullAsync<ept id="2">&lt;/code&gt;</ept> and <bpt id="4">&lt;code&gt;</bpt>MobileServiceClient.SyncContext.PushAsync<ept id="4">&lt;/code&gt;</ept> methods.</source>
            <target state="new">When we wanted to synchronize the local store with the server, we used the <bpt id="2">&lt;code&gt;</bpt>IMobileServiceSyncTable.PullAsync<ept id="2">&lt;/code&gt;</ept> and <bpt id="4">&lt;code&gt;</bpt>MobileServiceClient.SyncContext.PushAsync<ept id="4">&lt;/code&gt;</ept> methods.</target>
          </trans-unit>
          <trans-unit id="105" xml:space="preserve">
            <source>To push changes to the server, we called <bpt id="2">&lt;code&gt;</bpt>IMobileServiceSyncContext.PushAsync()<ept id="2">&lt;/code&gt;</ept>.</source>
            <target state="new">To push changes to the server, we called <bpt id="2">&lt;code&gt;</bpt>IMobileServiceSyncContext.PushAsync()<ept id="2">&lt;/code&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="106" xml:space="preserve">
            <source>This method is a member of <bpt id="2">&lt;code&gt;</bpt>IMobileServicesSyncContext<ept id="2">&lt;/code&gt;</ept> instead of the sync table because it will push changes across all tables.</source>
            <target state="new">This method is a member of <bpt id="2">&lt;code&gt;</bpt>IMobileServicesSyncContext<ept id="2">&lt;/code&gt;</ept> instead of the sync table because it will push changes across all tables.</target>
          </trans-unit>
          <trans-unit id="107" xml:space="preserve">
            <source>Only records that have been modified in some way locally (through CUD operations) will be sent to the server.</source>
            <target state="new">Only records that have been modified in some way locally (through CUD operations) will be sent to the server.</target>
          </trans-unit>
          <trans-unit id="108" xml:space="preserve">
            <source>To pull data from a table on the server to the app, we called <bpt id="2">&lt;code&gt;</bpt>IMobileServiceSyncTable.PullAsync<ept id="2">&lt;/code&gt;</ept>.</source>
            <target state="new">To pull data from a table on the server to the app, we called <bpt id="2">&lt;code&gt;</bpt>IMobileServiceSyncTable.PullAsync<ept id="2">&lt;/code&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="109" xml:space="preserve">
            <source>A pull always issues a push first.</source>
            <target state="new">A pull always issues a push first.</target>
          </trans-unit>
          <trans-unit id="110" xml:space="preserve">
            <source>This is to ensure all tables in the local store along with relationships remain consistent.</source>
            <target state="new">This is to ensure all tables in the local store along with relationships remain consistent.</target>
          </trans-unit>
          <trans-unit id="111" xml:space="preserve">
            <source>There are also overloads of <bpt id="2">&lt;code&gt;</bpt>PullAsync()<ept id="2">&lt;/code&gt;</ept> that allow a query to be specified in order to filter the data that is stored on the client.</source>
            <target state="new">There are also overloads of <bpt id="2">&lt;code&gt;</bpt>PullAsync()<ept id="2">&lt;/code&gt;</ept> that allow a query to be specified in order to filter the data that is stored on the client.</target>
          </trans-unit>
          <trans-unit id="112" xml:space="preserve">
            <source>If a query is not passed, <bpt id="2">&lt;code&gt;</bpt>PullAsync()<ept id="2">&lt;/code&gt;</ept> will pull all rows in the corresponding table (or query).</source>
            <target state="new">If a query is not passed, <bpt id="2">&lt;code&gt;</bpt>PullAsync()<ept id="2">&lt;/code&gt;</ept> will pull all rows in the corresponding table (or query).</target>
          </trans-unit>
          <trans-unit id="113" xml:space="preserve">
            <source>You can pass the query to filter only the changes your app needs to sync with.</source>
            <target state="new">You can pass the query to filter only the changes your app needs to sync with.</target>
          </trans-unit>
          <trans-unit id="114" xml:space="preserve">
            <source>To enable incremental sync, pass a query ID to <bpt id="2">&lt;code&gt;</bpt>PullAsync()<ept id="2">&lt;/code&gt;</ept>.</source>
            <target state="new">To enable incremental sync, pass a query ID to <bpt id="2">&lt;code&gt;</bpt>PullAsync()<ept id="2">&lt;/code&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="115" xml:space="preserve">
            <source>The query ID is used to store the last updated timestamp from the results of the last pull operation.</source>
            <target state="new">The query ID is used to store the last updated timestamp from the results of the last pull operation.</target>
          </trans-unit>
          <trans-unit id="116" xml:space="preserve">
            <source>The query ID should be a descriptive string that is unique for each logical query in your app.</source>
            <target state="new">The query ID should be a descriptive string that is unique for each logical query in your app.</target>
          </trans-unit>
          <trans-unit id="117" xml:space="preserve">
            <source>If the query has a parameter, then the same parameter value has to be part of the query ID.</source>
            <target state="new">If the query has a parameter, then the same parameter value has to be part of the query ID.</target>
          </trans-unit>
          <trans-unit id="118" xml:space="preserve">
            <source>For instance, if you are filtering on userid, it needs to be part of the query ID:</source>
            <target state="new">For instance, if you are filtering on userid, it needs to be part of the query ID:</target>
          </trans-unit>
          <trans-unit id="119" xml:space="preserve">
            <source>If you want to opt out of incremental sync, pass <bpt id="2">&lt;code&gt;</bpt>null<ept id="2">&lt;/code&gt;</ept> as the query ID.</source>
            <target state="new">If you want to opt out of incremental sync, pass <bpt id="2">&lt;code&gt;</bpt>null<ept id="2">&lt;/code&gt;</ept> as the query ID.</target>
          </trans-unit>
          <trans-unit id="120" xml:space="preserve">
            <source>In this case, all records will be retrieved on every call to <bpt id="2">&lt;code&gt;</bpt>PullAsync<ept id="2">&lt;/code&gt;</ept>, which is potentially inefficient.</source>
            <target state="new">In this case, all records will be retrieved on every call to <bpt id="2">&lt;code&gt;</bpt>PullAsync<ept id="2">&lt;/code&gt;</ept>, which is potentially inefficient.</target>
          </trans-unit>
          <trans-unit id="121" xml:space="preserve">
            <source>To remove records from the device local store when they have been deleted in your mobile service database, you should enable [Soft Delete].</source>
            <target state="new">To remove records from the device local store when they have been deleted in your mobile service database, you should enable [Soft Delete].</target>
          </trans-unit>
          <trans-unit id="122" xml:space="preserve">
            <source>Otherwise, your app should periodically call <bpt id="2">&lt;code&gt;</bpt>IMobileServiceSyncTable.PurgeAsync()<ept id="2">&lt;/code&gt;</ept> to purge the local store.</source>
            <target state="new">Otherwise, your app should periodically call <bpt id="2">&lt;code&gt;</bpt>IMobileServiceSyncTable.PurgeAsync()<ept id="2">&lt;/code&gt;</ept> to purge the local store.</target>
          </trans-unit>
        </group>
      </group>
    </body>
  </file>
</xliff>