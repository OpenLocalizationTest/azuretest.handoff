<?xml version="1.0" encoding="utf-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" source-language="en-us" target-language="pl-pl" original="2/20/2016 11:35:22 PM" tool-id="MarkdownTransformer" product-name="N/A" product-version="N/A" build-num="1">
    <header>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c7b584c5ab25923edcde15469d66dc45f2f1c125</xliffext:olfilehash>
      <tool tool-id="MarkdownTransformer" tool-name="MarkdownToXliff" tool-version="1.0" tool-company="Microsoft" />
    </header>
    <body>
      <group extype="content">
        <group id="101">
          <trans-unit id="101" xml:space="preserve">
            <source>The previous example showed a standard sign-in, which requires the client to contact both the identity provider and the mobile service every time that the app starts.</source>
            <target state="new">The previous example showed a standard sign-in, which requires the client to contact both the identity provider and the mobile service every time that the app starts.</target>
          </trans-unit>
          <trans-unit id="102" xml:space="preserve">
            <source>Not only is this method inefficient, you can run into usage-relates issues should many customers try to start you app at the same time.</source>
            <target state="new">Not only is this method inefficient, you can run into usage-relates issues should many customers try to start you app at the same time.</target>
          </trans-unit>
          <trans-unit id="103" xml:space="preserve">
            <source>A better approach is to cache the authorization token returned by Mobile Services and try to use this first before using a provider-based sign-in.</source>
            <target state="new">A better approach is to cache the authorization token returned by Mobile Services and try to use this first before using a provider-based sign-in.</target>
          </trans-unit>
          <trans-unit id="104" xml:space="preserve">
            <source>You can cache the token issued by Mobile Services regardless of whether you are using client-managed or service-managed authentication.</source>
            <target state="new">You can cache the token issued by Mobile Services regardless of whether you are using client-managed or service-managed authentication.</target>
          </trans-unit>
          <trans-unit id="105" xml:space="preserve">
            <source>This tutorial uses service-managed authentication.</source>
            <target state="new">This tutorial uses service-managed authentication.</target>
          </trans-unit>
          <trans-unit id="106" xml:space="preserve">
            <source>In the MainPage.xaml.cs project file, add the following <bpt id="2">&lt;strong&gt;</bpt>using<ept id="2">&lt;/strong&gt;</ept> statements:</source>
            <target state="new">In the MainPage.xaml.cs project file, add the following <bpt id="2">&lt;strong&gt;</bpt>using<ept id="2">&lt;/strong&gt;</ept> statements:</target>
          </trans-unit>
          <trans-unit id="107" xml:space="preserve">
            <source>Replace the <bpt id="2">&lt;strong&gt;</bpt>AuthenticateAsync<ept id="2">&lt;/strong&gt;</ept> method with the following code:</source>
            <target state="new">Replace the <bpt id="2">&lt;strong&gt;</bpt>AuthenticateAsync<ept id="2">&lt;/strong&gt;</ept> method with the following code:</target>
          </trans-unit>
          <trans-unit id="108" xml:space="preserve">
            <source>In this version of <bpt id="2">&lt;strong&gt;</bpt>AuthenticateAsync<ept id="2">&lt;/strong&gt;</ept>, the app tries to use credentials stored in the <bpt id="4">&lt;strong&gt;</bpt>PasswordVault<ept id="4">&lt;/strong&gt;</ept> to access the mobile service.</source>
            <target state="new">In this version of <bpt id="2">&lt;strong&gt;</bpt>AuthenticateAsync<ept id="2">&lt;/strong&gt;</ept>, the app tries to use credentials stored in the <bpt id="4">&lt;strong&gt;</bpt>PasswordVault<ept id="4">&lt;/strong&gt;</ept> to access the mobile service.</target>
          </trans-unit>
          <trans-unit id="109" xml:space="preserve">
            <source>A simple query is sent to verify that the stored token is not expired.</source>
            <target state="new">A simple query is sent to verify that the stored token is not expired.</target>
          </trans-unit>
          <trans-unit id="110" xml:space="preserve">
            <source>When a 401 is returned, a regular provider-based sign-in is attempted.</source>
            <target state="new">When a 401 is returned, a regular provider-based sign-in is attempted.</target>
          </trans-unit>
          <trans-unit id="111" xml:space="preserve">
            <source>A regular sign-in is also performed when there is no stored credential.</source>
            <target state="new">A regular sign-in is also performed when there is no stored credential.</target>
          </trans-unit>
          <trans-unit id="112" xml:space="preserve">
            <source>This app tests for expired tokens during login, but token expiration can occur after authentication when the app is in use.</source>
            <target state="new">This app tests for expired tokens during login, but token expiration can occur after authentication when the app is in use.</target>
          </trans-unit>
          <trans-unit id="113" xml:space="preserve">
            <source>For a solution to handling authorization errors related to expiring tokens, see the post <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Caching and handling expired tokens in Azure Mobile Services managed SDK<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">For a solution to handling authorization errors related to expiring tokens, see the post <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Caching and handling expired tokens in Azure Mobile Services managed SDK<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="114" xml:space="preserve">
            <source>Restart the app twice.</source>
            <target state="new">Restart the app twice.</target>
          </trans-unit>
          <trans-unit id="115" xml:space="preserve">
            <source>Notice that on the first start-up, sign-in with the provider is again required.</source>
            <target state="new">Notice that on the first start-up, sign-in with the provider is again required.</target>
          </trans-unit>
          <trans-unit id="116" xml:space="preserve">
            <source>However, on the second restart the cached credentials are used and sign-in is bypassed.</source>
            <target state="new">However, on the second restart the cached credentials are used and sign-in is bypassed.</target>
          </trans-unit>
        </group>
      </group>
    </body>
  </file>
</xliff>