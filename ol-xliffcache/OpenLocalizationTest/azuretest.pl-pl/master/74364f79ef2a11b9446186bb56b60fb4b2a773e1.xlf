<?xml version="1.0" encoding="utf-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" source-language="en-us" target-language="pl-pl" original="2/22/2016 7:40:01 AM" tool-id="MarkdownTransformer" product-name="N/A" product-version="N/A" build-num="1">
    <header>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">74364f79ef2a11b9446186bb56b60fb4b2a773e1</xliffext:olfilehash>
      <tool tool-id="MarkdownTransformer" tool-name="MarkdownToXliff" tool-version="1.0" tool-company="Microsoft" />
    </header>
    <body>
      <group extype="content">
        <group id="101">
          <trans-unit id="101" xml:space="preserve">
            <source>How to Check Job Progress using .NET</source>
            <target state="new">How to Check Job Progress using .NET</target>
          </trans-unit>
          <trans-unit id="102" xml:space="preserve">
            <source>Learn how to use event handler code to track job progress and send status updates. Code samples are written in C# and use the Media Services SDK for .NET.</source>
            <target state="new">Learn how to use event handler code to track job progress and send status updates. Code samples are written in C# and use the Media Services SDK for .NET.</target>
          </trans-unit>
          <trans-unit id="103" xml:space="preserve">
            <source>How to: Check Job Progress</source>
            <target state="new">How to: Check Job Progress</target>
          </trans-unit>
          <trans-unit id="104" xml:space="preserve">
            <source>When you run jobs, you often require a way to track job progress.</source>
            <target state="new">When you run jobs, you often require a way to track job progress.</target>
          </trans-unit>
          <trans-unit id="105" xml:space="preserve">
            <source>You can check the progress by <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>defining a StateChanged event handler<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> or <bpt id="4CapsExtId1">&lt;link&gt;</bpt><bpt id="4CapsExtId2">&lt;linkText&gt;</bpt>using Azure Queue storage to monitor Media Services job notifications<ept id="4CapsExtId2">&lt;/linkText&gt;</ept><bpt id="4CapsExtId3">&lt;title&gt;</bpt><ept id="4CapsExtId3">&lt;/title&gt;</ept><ept id="4CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">You can check the progress by <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>defining a StateChanged event handler<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> or <bpt id="4CapsExtId1">&lt;link&gt;</bpt><bpt id="4CapsExtId2">&lt;linkText&gt;</bpt>using Azure Queue storage to monitor Media Services job notifications<ept id="4CapsExtId2">&lt;/linkText&gt;</ept><bpt id="4CapsExtId3">&lt;title&gt;</bpt><ept id="4CapsExtId3">&lt;/title&gt;</ept><ept id="4CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="106" xml:space="preserve">
            <source>Both methods are described in this topic.</source>
            <target state="new">Both methods are described in this topic.</target>
          </trans-unit>
          <trans-unit id="107" xml:space="preserve">
            <source><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>Define StateChanged event handler to monitor job progress</source>
            <target state="new"><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>Define StateChanged event handler to monitor job progress</target>
          </trans-unit>
          <trans-unit id="108" xml:space="preserve">
            <source>The following code example defines the StateChanged event handler.</source>
            <target state="new">The following code example defines the StateChanged event handler.</target>
          </trans-unit>
          <trans-unit id="109" xml:space="preserve">
            <source>This event handler tracks job progress and provides updated status, depending on the state.</source>
            <target state="new">This event handler tracks job progress and provides updated status, depending on the state.</target>
          </trans-unit>
          <trans-unit id="110" xml:space="preserve">
            <source>The code also defines the LogJobStop method.</source>
            <target state="new">The code also defines the LogJobStop method.</target>
          </trans-unit>
          <trans-unit id="111" xml:space="preserve">
            <source>This helper method logs error details.</source>
            <target state="new">This helper method logs error details.</target>
          </trans-unit>
          <trans-unit id="112" xml:space="preserve">
            <source><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>Use Azure Queue storage to monitor Media Services job notifications</source>
            <target state="new"><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>Use Azure Queue storage to monitor Media Services job notifications</target>
          </trans-unit>
          <trans-unit id="113" xml:space="preserve">
            <source>Microsoft Azure Media Services has the ability to deliver notification messages to the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Azure Queue storage<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> when processing media jobs.</source>
            <target state="new">Microsoft Azure Media Services has the ability to deliver notification messages to the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Azure Queue storage<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> when processing media jobs.</target>
          </trans-unit>
          <trans-unit id="114" xml:space="preserve">
            <source>This topic shows how to get these notification messages from Queue storage.</source>
            <target state="new">This topic shows how to get these notification messages from Queue storage.</target>
          </trans-unit>
          <trans-unit id="115" xml:space="preserve">
            <source>Messages delivered to Queue storage can be accessed from anywhere in the world.</source>
            <target state="new">Messages delivered to Queue storage can be accessed from anywhere in the world.</target>
          </trans-unit>
          <trans-unit id="116" xml:space="preserve">
            <source>The Azure Queue messaging architecture is reliable and highly scalable.</source>
            <target state="new">The Azure Queue messaging architecture is reliable and highly scalable.</target>
          </trans-unit>
          <trans-unit id="117" xml:space="preserve">
            <source>Polling Queue storage is recommended over using other methods.</source>
            <target state="new">Polling Queue storage is recommended over using other methods.</target>
          </trans-unit>
          <trans-unit id="118" xml:space="preserve">
            <source>One common scenario for listening to Media Services notifications is if you are developing a content management system that needs to perform some additional task after an encoding job completes (for example, trigger the next step in a workflow, or publish content).</source>
            <target state="new">One common scenario for listening to Media Services notifications is if you are developing a content management system that needs to perform some additional task after an encoding job completes (for example, trigger the next step in a workflow, or publish content).</target>
          </trans-unit>
          <trans-unit id="119" xml:space="preserve">
            <source>Considerations</source>
            <target state="new">Considerations</target>
          </trans-unit>
          <trans-unit id="120" xml:space="preserve">
            <source>Consider the following when developing Media Services applications that use Azure storage queue.</source>
            <target state="new">Consider the following when developing Media Services applications that use Azure storage queue.</target>
          </trans-unit>
          <trans-unit id="121" xml:space="preserve">
            <source>The Queues service does not provide a guarantee of first-in-first-out (FIFO) ordered delivery.</source>
            <target state="new">The Queues service does not provide a guarantee of first-in-first-out (FIFO) ordered delivery.</target>
          </trans-unit>
          <trans-unit id="122" xml:space="preserve">
            <source>For more information, see <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Azure Queues and Azure Service Bus Queues Compared and Contrasted<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">For more information, see <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Azure Queues and Azure Service Bus Queues Compared and Contrasted<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="123" xml:space="preserve">
            <source>Azure Storage Queues is not a push service; you have to poll the queue.</source>
            <target state="new">Azure Storage Queues is not a push service; you have to poll the queue.</target>
          </trans-unit>
          <trans-unit id="124" xml:space="preserve">
            <source>You can have any number of queues.</source>
            <target state="new">You can have any number of queues.</target>
          </trans-unit>
          <trans-unit id="125" xml:space="preserve">
            <source>For more information, see <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Queue Service REST API<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">For more information, see <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Queue Service REST API<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="126" xml:space="preserve">
            <source>Azure Storage Queues has some limitations and specifics that are described in the following article: <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Azure Queues and Azure Service Bus Queues Compared and Contrasted<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">Azure Storage Queues has some limitations and specifics that are described in the following article: <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Azure Queues and Azure Service Bus Queues Compared and Contrasted<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="127" xml:space="preserve">
            <source>Code Example</source>
            <target state="new">Code Example</target>
          </trans-unit>
          <trans-unit id="128" xml:space="preserve">
            <source>The code example in this section does the following:</source>
            <target state="new">The code example in this section does the following:</target>
          </trans-unit>
          <trans-unit id="129" xml:space="preserve">
            <source>Defines the <bpt id="2">&lt;strong&gt;</bpt>EncodingJobMessage<ept id="2">&lt;/strong&gt;</ept> class that maps to the notification message format.</source>
            <target state="new">Defines the <bpt id="2">&lt;strong&gt;</bpt>EncodingJobMessage<ept id="2">&lt;/strong&gt;</ept> class that maps to the notification message format.</target>
          </trans-unit>
          <trans-unit id="130" xml:space="preserve">
            <source>The code deserializes messages received from the queue into objects of the <bpt id="2">&lt;strong&gt;</bpt>EncodingJobMessage<ept id="2">&lt;/strong&gt;</ept> type.</source>
            <target state="new">The code deserializes messages received from the queue into objects of the <bpt id="2">&lt;strong&gt;</bpt>EncodingJobMessage<ept id="2">&lt;/strong&gt;</ept> type.</target>
          </trans-unit>
          <trans-unit id="131" xml:space="preserve">
            <source>Loads the Media Services and Storage account information from the app.config file.</source>
            <target state="new">Loads the Media Services and Storage account information from the app.config file.</target>
          </trans-unit>
          <trans-unit id="132" xml:space="preserve">
            <source>Uses this information to create the <bpt id="2">&lt;strong&gt;</bpt>CloudMediaContext<ept id="2">&lt;/strong&gt;</ept> and <bpt id="4">&lt;strong&gt;</bpt>CloudQueue<ept id="4">&lt;/strong&gt;</ept> objects.</source>
            <target state="new">Uses this information to create the <bpt id="2">&lt;strong&gt;</bpt>CloudMediaContext<ept id="2">&lt;/strong&gt;</ept> and <bpt id="4">&lt;strong&gt;</bpt>CloudQueue<ept id="4">&lt;/strong&gt;</ept> objects.</target>
          </trans-unit>
          <trans-unit id="133" xml:space="preserve">
            <source>Creates the queue that will be receiving notification messages about the encoding job.</source>
            <target state="new">Creates the queue that will be receiving notification messages about the encoding job.</target>
          </trans-unit>
          <trans-unit id="134" xml:space="preserve">
            <source>Creates the notification end point that is mapped to the queue.</source>
            <target state="new">Creates the notification end point that is mapped to the queue.</target>
          </trans-unit>
          <trans-unit id="135" xml:space="preserve">
            <source>Attaches the notification end point to the job and submits the encoding job.</source>
            <target state="new">Attaches the notification end point to the job and submits the encoding job.</target>
          </trans-unit>
          <trans-unit id="136" xml:space="preserve">
            <source>You can have multiple notification end points attached to a job.</source>
            <target state="new">You can have multiple notification end points attached to a job.</target>
          </trans-unit>
          <trans-unit id="137" xml:space="preserve">
            <source>In this example we are only interested in final states of the job processing, so we pass <bpt id="2">&lt;strong&gt;</bpt>NotificationJobState.FinalStatesOnly<ept id="2">&lt;/strong&gt;</ept> to the <bpt id="4">&lt;strong&gt;</bpt>AddNew<ept id="4">&lt;/strong&gt;</ept> method.</source>
            <target state="new">In this example we are only interested in final states of the job processing, so we pass <bpt id="2">&lt;strong&gt;</bpt>NotificationJobState.FinalStatesOnly<ept id="2">&lt;/strong&gt;</ept> to the <bpt id="4">&lt;strong&gt;</bpt>AddNew<ept id="4">&lt;/strong&gt;</ept> method.</target>
          </trans-unit>
          <trans-unit id="138" xml:space="preserve">
            <source>If you pass NotificationJobState.All you should expect to get all state change notifications: Queued -&gt; Scheduled -&gt; Processing -&gt; Finished.</source>
            <target state="new">If you pass NotificationJobState.All you should expect to get all state change notifications: Queued -&gt; Scheduled -&gt; Processing -&gt; Finished.</target>
          </trans-unit>
          <trans-unit id="139" xml:space="preserve">
            <source>However, as noted earlier, the Azure Storage Queues service does not guarantee ordered delivery.</source>
            <target state="new">However, as noted earlier, the Azure Storage Queues service does not guarantee ordered delivery.</target>
          </trans-unit>
          <trans-unit id="140" xml:space="preserve">
            <source>You can use the Timestamp property (defined on the EncodingJobMessage type in the example below) to order messages.</source>
            <target state="new">You can use the Timestamp property (defined on the EncodingJobMessage type in the example below) to order messages.</target>
          </trans-unit>
          <trans-unit id="141" xml:space="preserve">
            <source>It is possible that you will get duplicate notification messages.</source>
            <target state="new">It is possible that you will get duplicate notification messages.</target>
          </trans-unit>
          <trans-unit id="142" xml:space="preserve">
            <source>Use the ETag property (defined on the EncodingJobMessage type) to check for duplicates.</source>
            <target state="new">Use the ETag property (defined on the EncodingJobMessage type) to check for duplicates.</target>
          </trans-unit>
          <trans-unit id="143" xml:space="preserve">
            <source>Note that it is also possible that some state change notifications will be skipped.</source>
            <target state="new">Note that it is also possible that some state change notifications will be skipped.</target>
          </trans-unit>
          <trans-unit id="144" xml:space="preserve">
            <source>Waits for the job to get to the Finished state by checking the queue every 10 seconds.</source>
            <target state="new">Waits for the job to get to the Finished state by checking the queue every 10 seconds.</target>
          </trans-unit>
          <trans-unit id="145" xml:space="preserve">
            <source>Deletes messages after they have been processed.</source>
            <target state="new">Deletes messages after they have been processed.</target>
          </trans-unit>
          <trans-unit id="146" xml:space="preserve">
            <source>Deletes the queue and the notification end point.</source>
            <target state="new">Deletes the queue and the notification end point.</target>
          </trans-unit>
          <trans-unit id="147" xml:space="preserve">
            <source>The recommended way to monitor a job’s state is by listening to notification messages, as shown in the following example.</source>
            <target state="new">The recommended way to monitor a job’s state is by listening to notification messages, as shown in the following example.</target>
          </trans-unit>
          <trans-unit id="148" xml:space="preserve">
            <source>Alternatively, you could check on a job’s state by using the <bpt id="2">&lt;strong&gt;</bpt>IJob.State<ept id="2">&lt;/strong&gt;</ept> property.</source>
            <target state="new">Alternatively, you could check on a job’s state by using the <bpt id="2">&lt;strong&gt;</bpt>IJob.State<ept id="2">&lt;/strong&gt;</ept> property.</target>
          </trans-unit>
          <trans-unit id="149" xml:space="preserve">
            <source>Note that a notification message about a job’s completion may arrive before the State on <bpt id="2">&lt;strong&gt;</bpt>IJob<ept id="2">&lt;/strong&gt;</ept> is set to <bpt id="4">&lt;strong&gt;</bpt>Finished<ept id="4">&lt;/strong&gt;</ept>.</source>
            <target state="new">Note that a notification message about a job’s completion may arrive before the State on <bpt id="2">&lt;strong&gt;</bpt>IJob<ept id="2">&lt;/strong&gt;</ept> is set to <bpt id="4">&lt;strong&gt;</bpt>Finished<ept id="4">&lt;/strong&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="150" xml:space="preserve">
            <source>The <bpt id="2">&lt;strong&gt;</bpt>IJob.State<ept id="2">&lt;/strong&gt;</ept>  property will reflect the accurate state with a slight delay.</source>
            <target state="new">The <bpt id="2">&lt;strong&gt;</bpt>IJob.State<ept id="2">&lt;/strong&gt;</ept>  property will reflect the accurate state with a slight delay.</target>
          </trans-unit>
          <trans-unit id="151" xml:space="preserve">
            <source>The example above produced the following output.</source>
            <target state="new">The example above produced the following output.</target>
          </trans-unit>
          <trans-unit id="152" xml:space="preserve">
            <source>You values will vary.</source>
            <target state="new">You values will vary.</target>
          </trans-unit>
          <trans-unit id="153" xml:space="preserve">
            <source>test</source>
            <target state="new">test</target>
          </trans-unit>
        </group>
      </group>
    </body>
  </file>
</xliff>