<?xml version="1.0" encoding="utf-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" source-language="en-us" target-language="pl-pl" original="2/20/2016 7:16:40 PM" tool-id="MarkdownTransformer" product-name="N/A" product-version="N/A" build-num="1">
    <header>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e7cf50514d5aa4b545747c995764914c96d86954</xliffext:olfilehash>
      <tool tool-id="MarkdownTransformer" tool-name="MarkdownToXliff" tool-version="1.0" tool-company="Microsoft" />
    </header>
    <body>
      <group extype="content">
        <group id="101">
          <trans-unit id="101" xml:space="preserve">
            <source>App Model v2.0 | Microsoft Azure</source>
            <target state="new">App Model v2.0 | Microsoft Azure</target>
          </trans-unit>
          <trans-unit id="102" xml:space="preserve">
            <source>How to build a .NET native app that signs users in with both personal Microsoft Account and work or school accounts.</source>
            <target state="new">How to build a .NET native app that signs users in with both personal Microsoft Account and work or school accounts.</target>
          </trans-unit>
          <trans-unit id="103" xml:space="preserve">
            <source>App model v2.0 preview: Add sign-in to a Windows Desktop app</source>
            <target state="new">App model v2.0 preview: Add sign-in to a Windows Desktop app</target>
          </trans-unit>
          <trans-unit id="104" xml:space="preserve">
            <source>With the v2.0 app model, you can quickly add authentication to your desktop apps with support for both personal Microsoft accounts and work or school accounts.</source>
            <target state="new">With the v2.0 app model, you can quickly add authentication to your desktop apps with support for both personal Microsoft accounts and work or school accounts.</target>
          </trans-unit>
          <trans-unit id="105" xml:space="preserve">
            <source>It also enables your app to securely communicate with a backend web api, as well as a few of the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Office 365 Unified APIs<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">It also enables your app to securely communicate with a backend web api, as well as a few of the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Office 365 Unified APIs<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="106" xml:space="preserve">
            <source>This information applies to the v2.0 app model public preview.</source>
            <target state="new">This information applies to the v2.0 app model public preview.</target>
          </trans-unit>
          <trans-unit id="107" xml:space="preserve">
            <source>For instructions on how to integrate with the generally available Azure AD service, please refer to the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Azure Active Directory Developer Guide<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">For instructions on how to integrate with the generally available Azure AD service, please refer to the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Azure Active Directory Developer Guide<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="108" xml:space="preserve">
            <source>For <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>.NET native apps that run on a device<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>, Azure AD provides the Active Directory Authentication Library, or ADAL.</source>
            <target state="new">For <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>.NET native apps that run on a device<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>, Azure AD provides the Active Directory Authentication Library, or ADAL.</target>
          </trans-unit>
          <trans-unit id="109" xml:space="preserve">
            <source>ADAL's sole purpose in life is to make it easy for your app to get tokens for calling web services.</source>
            <target state="new">ADAL's sole purpose in life is to make it easy for your app to get tokens for calling web services.</target>
          </trans-unit>
          <trans-unit id="110" xml:space="preserve">
            <source>To demonstrate just how easy it is, here we'll build a .NET WPF To-Do List app that:</source>
            <target state="new">To demonstrate just how easy it is, here we'll build a .NET WPF To-Do List app that:</target>
          </trans-unit>
          <trans-unit id="111" xml:space="preserve">
            <source>Signs the user in &amp; gets access tokens using the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>OAuth 2.0 authentication protocol<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">Signs the user in &amp; gets access tokens using the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>OAuth 2.0 authentication protocol<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="112" xml:space="preserve">
            <source>Securely calls a backend To-Do List web service, which is also secured by OAuth 2.0.</source>
            <target state="new">Securely calls a backend To-Do List web service, which is also secured by OAuth 2.0.</target>
          </trans-unit>
          <trans-unit id="113" xml:space="preserve">
            <source>Signs users out.</source>
            <target state="new">Signs users out.</target>
          </trans-unit>
          <trans-unit id="114" xml:space="preserve">
            <source>To build the complete working app, you'll need to:</source>
            <target state="new">To build the complete working app, you'll need to:</target>
          </trans-unit>
          <trans-unit id="115" xml:space="preserve">
            <source>Register your app.</source>
            <target state="new">Register your app.</target>
          </trans-unit>
          <trans-unit id="116" xml:space="preserve">
            <source>Install &amp; Configure ADAL.</source>
            <target state="new">Install &amp; Configure ADAL.</target>
          </trans-unit>
          <trans-unit id="117" xml:space="preserve">
            <source>Use ADAL to get tokens from Azure AD.</source>
            <target state="new">Use ADAL to get tokens from Azure AD.</target>
          </trans-unit>
          <trans-unit id="118" xml:space="preserve">
            <source>The code for this tutorial is maintained <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>on GitHub<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">The code for this tutorial is maintained <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>on GitHub<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="119" xml:space="preserve">
            <source>To follow along, you can <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>download the app's skeleton as a .zip<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> or clone the skeleton:</source>
            <target state="new">To follow along, you can <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>download the app's skeleton as a .zip<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> or clone the skeleton:</target>
          </trans-unit>
          <trans-unit id="120" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>git clone --branch skeleton https://github.com/AzureADQuickStarts/AppModelv2-NativeClient-DotNet.git<ept id="1">&lt;/code&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>git clone --branch skeleton https://github.com/AzureADQuickStarts/AppModelv2-NativeClient-DotNet.git<ept id="1">&lt;/code&gt;</ept></target>
          </trans-unit>
          <trans-unit id="121" xml:space="preserve">
            <source>The completed app is provided at the end of this tutorial as well.</source>
            <target state="new">The completed app is provided at the end of this tutorial as well.</target>
          </trans-unit>
          <trans-unit id="122" xml:space="preserve">
            <source>1. Register an App</source>
            <target state="new">1. Register an App</target>
          </trans-unit>
          <trans-unit id="123" xml:space="preserve">
            <source>Create a new app at <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>apps.dev.microsoft.com<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>, or follow these <bpt id="4CapsExtId1">&lt;link&gt;</bpt><bpt id="4CapsExtId2">&lt;linkText&gt;</bpt>detailed steps<ept id="4CapsExtId2">&lt;/linkText&gt;</ept><bpt id="4CapsExtId3">&lt;title&gt;</bpt><ept id="4CapsExtId3">&lt;/title&gt;</ept><ept id="4CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">Create a new app at <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>apps.dev.microsoft.com<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>, or follow these <bpt id="4CapsExtId1">&lt;link&gt;</bpt><bpt id="4CapsExtId2">&lt;linkText&gt;</bpt>detailed steps<ept id="4CapsExtId2">&lt;/linkText&gt;</ept><bpt id="4CapsExtId3">&lt;title&gt;</bpt><ept id="4CapsExtId3">&lt;/title&gt;</ept><ept id="4CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="124" xml:space="preserve">
            <source>Make sure to:</source>
            <target state="new">Make sure to:</target>
          </trans-unit>
          <trans-unit id="125" xml:space="preserve">
            <source>Copy down the <bpt id="2">&lt;strong&gt;</bpt>Application Id<ept id="2">&lt;/strong&gt;</ept> assigned to your app, you'll need it soon.</source>
            <target state="new">Copy down the <bpt id="2">&lt;strong&gt;</bpt>Application Id<ept id="2">&lt;/strong&gt;</ept> assigned to your app, you'll need it soon.</target>
          </trans-unit>
          <trans-unit id="126" xml:space="preserve">
            <source>Add the <bpt id="2">&lt;strong&gt;</bpt>Mobile<ept id="2">&lt;/strong&gt;</ept> platform for your app.</source>
            <target state="new">Add the <bpt id="2">&lt;strong&gt;</bpt>Mobile<ept id="2">&lt;/strong&gt;</ept> platform for your app.</target>
          </trans-unit>
          <trans-unit id="127" xml:space="preserve">
            <source>Copy down the <bpt id="2">&lt;strong&gt;</bpt>Redirect URI<ept id="2">&lt;/strong&gt;</ept> from the portal.</source>
            <target state="new">Copy down the <bpt id="2">&lt;strong&gt;</bpt>Redirect URI<ept id="2">&lt;/strong&gt;</ept> from the portal.</target>
          </trans-unit>
          <trans-unit id="128" xml:space="preserve">
            <source>You must use the default value of <bpt id="2">&lt;code&gt;</bpt>urn:ietf:wg:oauth:2.0:oob<ept id="2">&lt;/code&gt;</ept>.</source>
            <target state="new">You must use the default value of <bpt id="2">&lt;code&gt;</bpt>urn:ietf:wg:oauth:2.0:oob<ept id="2">&lt;/code&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="129" xml:space="preserve">
            <source>2. Install &amp; Configure ADAL</source>
            <target state="new">2. Install &amp; Configure ADAL</target>
          </trans-unit>
          <trans-unit id="130" xml:space="preserve">
            <source>Now that you have an app registered with Microsoft, you can install ADAL and write your identity-related code.</source>
            <target state="new">Now that you have an app registered with Microsoft, you can install ADAL and write your identity-related code.</target>
          </trans-unit>
          <trans-unit id="131" xml:space="preserve">
            <source>In order for ADAL to be able to communicate the v2.0 endpoint, you need to provide it with some information about your app registration.</source>
            <target state="new">In order for ADAL to be able to communicate the v2.0 endpoint, you need to provide it with some information about your app registration.</target>
          </trans-unit>
          <trans-unit id="132" xml:space="preserve">
            <source>Begin by adding ADAL to the TodoListClient project using the Package Manager Console.</source>
            <target state="new">Begin by adding ADAL to the TodoListClient project using the Package Manager Console.</target>
          </trans-unit>
          <trans-unit id="133" xml:space="preserve">
            <source>In the TodoListClient project, open <bpt id="2">&lt;code&gt;</bpt>app.config<ept id="2">&lt;/code&gt;</ept>.  Replace the values of the elements in the <bpt id="4">&lt;code&gt;</bpt>&lt;appSettings&gt;<ept id="4">&lt;/code&gt;</ept> section to reflect the values you input into the app registration portal.  Your code will reference these values whenever it uses ADAL.</source>
            <target state="new">In the TodoListClient project, open <bpt id="2">&lt;code&gt;</bpt>app.config<ept id="2">&lt;/code&gt;</ept>.  Replace the values of the elements in the <bpt id="4">&lt;code&gt;</bpt>&lt;appSettings&gt;<ept id="4">&lt;/code&gt;</ept> section to reflect the values you input into the app registration portal.  Your code will reference these values whenever it uses ADAL.</target>
          </trans-unit>
          <trans-unit id="134" xml:space="preserve">
            <source>The <bpt id="2">&lt;code&gt;</bpt>ida:ClientId<ept id="2">&lt;/code&gt;</ept> is the <bpt id="4">&lt;strong&gt;</bpt>Application Id<ept id="4">&lt;/strong&gt;</ept> of your app you copied from the portal.</source>
            <target state="new">The <bpt id="2">&lt;code&gt;</bpt>ida:ClientId<ept id="2">&lt;/code&gt;</ept> is the <bpt id="4">&lt;strong&gt;</bpt>Application Id<ept id="4">&lt;/strong&gt;</ept> of your app you copied from the portal.</target>
          </trans-unit>
          <trans-unit id="135" xml:space="preserve">
            <source>The <bpt id="2">&lt;code&gt;</bpt>ida:RedirectUri<ept id="2">&lt;/code&gt;</ept> is the <bpt id="4">&lt;strong&gt;</bpt>Redirect Uri<ept id="4">&lt;/strong&gt;</ept> from the portal.</source>
            <target state="new">The <bpt id="2">&lt;code&gt;</bpt>ida:RedirectUri<ept id="2">&lt;/code&gt;</ept> is the <bpt id="4">&lt;strong&gt;</bpt>Redirect Uri<ept id="4">&lt;/strong&gt;</ept> from the portal.</target>
          </trans-unit>
          <trans-unit id="136" xml:space="preserve">
            <source>In the TodoList-Service project, open <bpt id="2">&lt;code&gt;</bpt>web.config<ept id="2">&lt;/code&gt;</ept> in the root of the project.</source>
            <target state="new">In the TodoList-Service project, open <bpt id="2">&lt;code&gt;</bpt>web.config<ept id="2">&lt;/code&gt;</ept> in the root of the project.</target>
          </trans-unit>
          <trans-unit id="137" xml:space="preserve">
            <source>Replace the <bpt id="2">&lt;code&gt;</bpt>ida:Audience<ept id="2">&lt;/code&gt;</ept> value with the same <bpt id="4">&lt;strong&gt;</bpt>Application Id<ept id="4">&lt;/strong&gt;</ept> from the portal.</source>
            <target state="new">Replace the <bpt id="2">&lt;code&gt;</bpt>ida:Audience<ept id="2">&lt;/code&gt;</ept> value with the same <bpt id="4">&lt;strong&gt;</bpt>Application Id<ept id="4">&lt;/strong&gt;</ept> from the portal.</target>
          </trans-unit>
          <trans-unit id="138" xml:space="preserve">
            <source>3. Use ADAL to Get Tokens</source>
            <target state="new">3. Use ADAL to Get Tokens</target>
          </trans-unit>
          <trans-unit id="139" xml:space="preserve">
            <source>The basic principle behind ADAL is that whenever your app needs an access token, you simply call <bpt id="2">&lt;code&gt;</bpt>authContext.AcquireToken(...)<ept id="2">&lt;/code&gt;</ept>, and ADAL does the rest.</source>
            <target state="new">The basic principle behind ADAL is that whenever your app needs an access token, you simply call <bpt id="2">&lt;code&gt;</bpt>authContext.AcquireToken(...)<ept id="2">&lt;/code&gt;</ept>, and ADAL does the rest.</target>
          </trans-unit>
          <trans-unit id="140" xml:space="preserve">
            <source>In the <bpt id="2">&lt;code&gt;</bpt>TodoListClient<ept id="2">&lt;/code&gt;</ept> project, open <bpt id="4">&lt;code&gt;</bpt>MainWindow.xaml.cs<ept id="4">&lt;/code&gt;</ept> and locate the <bpt id="6">&lt;code&gt;</bpt>OnInitialized(...)<ept id="6">&lt;/code&gt;</ept> method.</source>
            <target state="new">In the <bpt id="2">&lt;code&gt;</bpt>TodoListClient<ept id="2">&lt;/code&gt;</ept> project, open <bpt id="4">&lt;code&gt;</bpt>MainWindow.xaml.cs<ept id="4">&lt;/code&gt;</ept> and locate the <bpt id="6">&lt;code&gt;</bpt>OnInitialized(...)<ept id="6">&lt;/code&gt;</ept> method.</target>
          </trans-unit>
          <trans-unit id="141" xml:space="preserve">
            <source>The first step is to initialize your app's <bpt id="2">&lt;code&gt;</bpt>AuthenticationContext<ept id="2">&lt;/code&gt;</ept> - ADAL's primary class.</source>
            <target state="new">The first step is to initialize your app's <bpt id="2">&lt;code&gt;</bpt>AuthenticationContext<ept id="2">&lt;/code&gt;</ept> - ADAL's primary class.</target>
          </trans-unit>
          <trans-unit id="142" xml:space="preserve">
            <source>This is where you pass ADAL the coordinates it needs to communicate with Azure AD and tell it how to cache tokens.</source>
            <target state="new">This is where you pass ADAL the coordinates it needs to communicate with Azure AD and tell it how to cache tokens.</target>
          </trans-unit>
          <trans-unit id="143" xml:space="preserve">
            <source>When the app starts up, we want to check and see if the user is already signed into the app.</source>
            <target state="new">When the app starts up, we want to check and see if the user is already signed into the app.</target>
          </trans-unit>
          <trans-unit id="144" xml:space="preserve">
            <source>However, we don't want to invoke a sign-in UI just yet - we'll make the user click "Sign In" to do so.</source>
            <target state="new">However, we don't want to invoke a sign-in UI just yet - we'll make the user click "Sign In" to do so.</target>
          </trans-unit>
          <trans-unit id="145" xml:space="preserve">
            <source>Also in the <bpt id="2">&lt;code&gt;</bpt>OnInitialized(...)<ept id="2">&lt;/code&gt;</ept> method:</source>
            <target state="new">Also in the <bpt id="2">&lt;code&gt;</bpt>OnInitialized(...)<ept id="2">&lt;/code&gt;</ept> method:</target>
          </trans-unit>
          <trans-unit id="146" xml:space="preserve">
            <source>If the user is not signed in and they click the "Sign In" button, we want to invoke a login UI and have the user enter their credentials.</source>
            <target state="new">If the user is not signed in and they click the "Sign In" button, we want to invoke a login UI and have the user enter their credentials.</target>
          </trans-unit>
          <trans-unit id="147" xml:space="preserve">
            <source>Implement the Sign-In button handler:</source>
            <target state="new">Implement the Sign-In button handler:</target>
          </trans-unit>
          <trans-unit id="148" xml:space="preserve">
            <source>If the user successfully signs-in, ADAL will receive and cache a token for you, and you can proceed to call the <bpt id="2">&lt;code&gt;</bpt>GetTodoList()<ept id="2">&lt;/code&gt;</ept> method with confidence.</source>
            <target state="new">If the user successfully signs-in, ADAL will receive and cache a token for you, and you can proceed to call the <bpt id="2">&lt;code&gt;</bpt>GetTodoList()<ept id="2">&lt;/code&gt;</ept> method with confidence.</target>
          </trans-unit>
          <trans-unit id="149" xml:space="preserve">
            <source>All that's left to get a user's tasks is to implement the <bpt id="2">&lt;code&gt;</bpt>GetTodoList()<ept id="2">&lt;/code&gt;</ept> method.</source>
            <target state="new">All that's left to get a user's tasks is to implement the <bpt id="2">&lt;code&gt;</bpt>GetTodoList()<ept id="2">&lt;/code&gt;</ept> method.</target>
          </trans-unit>
          <trans-unit id="150" xml:space="preserve">
            <source>Congratulations! You now have a working .NET WPF app that has the ability to authenticate users &amp; securely call Web APIs using OAuth 2.0.  Run your both projects, and sign in with either a personal Microsoft account or a work or school account.  Add tasks to that user's To-Do list.  Sign out, and sign back in as another user to view their To-Do list.  Close the app, and re-run it.  Notice how the user's session remains intact - that is becuase the app caches tokens in a local file.</source>
            <target state="new">Congratulations! You now have a working .NET WPF app that has the ability to authenticate users &amp; securely call Web APIs using OAuth 2.0.  Run your both projects, and sign in with either a personal Microsoft account or a work or school account.  Add tasks to that user's To-Do list.  Sign out, and sign back in as another user to view their To-Do list.  Close the app, and re-run it.  Notice how the user's session remains intact - that is becuase the app caches tokens in a local file.</target>
          </trans-unit>
          <trans-unit id="151" xml:space="preserve">
            <source>ADAL makes it easy to incorporate common identity features into your app, using both personal and work accounts.</source>
            <target state="new">ADAL makes it easy to incorporate common identity features into your app, using both personal and work accounts.</target>
          </trans-unit>
          <trans-unit id="152" xml:space="preserve">
            <source>It takes care of all the dirty work for you - cache management, OAuth protocol support, presenting the user with a login UI, refreshing expired tokens, and more.</source>
            <target state="new">It takes care of all the dirty work for you - cache management, OAuth protocol support, presenting the user with a login UI, refreshing expired tokens, and more.</target>
          </trans-unit>
          <trans-unit id="153" xml:space="preserve">
            <source>All you really need to know is a single API call, <bpt id="2">&lt;code&gt;</bpt>authContext.AcquireTokenAsync(...)<ept id="2">&lt;/code&gt;</ept>.</source>
            <target state="new">All you really need to know is a single API call, <bpt id="2">&lt;code&gt;</bpt>authContext.AcquireTokenAsync(...)<ept id="2">&lt;/code&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="154" xml:space="preserve">
            <source>For reference, the completed sample (without your configuration values) <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>is provided as a .zip here<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>, or you can clone it from GitHub:</source>
            <target state="new">For reference, the completed sample (without your configuration values) <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>is provided as a .zip here<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>, or you can clone it from GitHub:</target>
          </trans-unit>
          <trans-unit id="155" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>git clone --branch complete https://github.com/AzureADQuickStarts/AppModelv2-NativeClient-DotNet.git<ept id="1">&lt;/code&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>git clone --branch complete https://github.com/AzureADQuickStarts/AppModelv2-NativeClient-DotNet.git<ept id="1">&lt;/code&gt;</ept></target>
          </trans-unit>
          <trans-unit id="156" xml:space="preserve">
            <source>Next Steps</source>
            <target state="new">Next Steps</target>
          </trans-unit>
          <trans-unit id="157" xml:space="preserve">
            <source>You can now move onto more advanced topics.</source>
            <target state="new">You can now move onto more advanced topics.</target>
          </trans-unit>
          <trans-unit id="158" xml:space="preserve">
            <source>You may want to try:</source>
            <target state="new">You may want to try:</target>
          </trans-unit>
          <trans-unit id="159" xml:space="preserve">
            <source><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Securing the TodoListService Web API with the v2.0 app model &gt;&gt;<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></source>
            <target state="new"><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Securing the TodoListService Web API with the v2.0 app model &gt;&gt;<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></target>
          </trans-unit>
          <trans-unit id="160" xml:space="preserve">
            <source>For additional resources, check out:</source>
            <target state="new">For additional resources, check out:</target>
          </trans-unit>
          <trans-unit id="161" xml:space="preserve">
            <source><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>The App Model v2.0 Preview &gt;&gt;<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></source>
            <target state="new"><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>The App Model v2.0 Preview &gt;&gt;<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></target>
          </trans-unit>
          <trans-unit id="162" xml:space="preserve">
            <source><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>StackOverflow "adal" tag &gt;&gt;<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></source>
            <target state="new"><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>StackOverflow "adal" tag &gt;&gt;<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></target>
          </trans-unit>
        </group>
      </group>
    </body>
  </file>
</xliff>