<?xml version="1.0" encoding="utf-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" source-language="en-us" target-language="pl-pl" original="2/20/2016 8:48:36 PM" tool-id="MarkdownTransformer" product-name="N/A" product-version="N/A" build-num="1">
    <header>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">30eba51eff19125affb90afd13602f6a4efbe8eb</xliffext:olfilehash>
      <tool tool-id="MarkdownTransformer" tool-name="MarkdownToXliff" tool-version="1.0" tool-company="Microsoft" />
    </header>
    <body>
      <group extype="content">
        <group id="101">
          <trans-unit id="101" xml:space="preserve">
            <source>Twitter trending topics with Apache Storm on HDInsight | Microsoft Azure</source>
            <target state="new">Twitter trending topics with Apache Storm on HDInsight | Microsoft Azure</target>
          </trans-unit>
          <trans-unit id="102" xml:space="preserve">
            <source>Learn how to use Trident to create an Apache Storm topology that determines trending topics on Twitter based on hashtags.</source>
            <target state="new">Learn how to use Trident to create an Apache Storm topology that determines trending topics on Twitter based on hashtags.</target>
          </trans-unit>
          <trans-unit id="103" xml:space="preserve">
            <source>Determine Twitter trending topics with Apache Storm on HDInsight</source>
            <target state="new">Determine Twitter trending topics with Apache Storm on HDInsight</target>
          </trans-unit>
          <trans-unit id="104" xml:space="preserve">
            <source>Learn how to use Trident to create a Storm topology that determines trending topics (hash tags) on Twitter.</source>
            <target state="new">Learn how to use Trident to create a Storm topology that determines trending topics (hash tags) on Twitter.</target>
          </trans-unit>
          <trans-unit id="105" xml:space="preserve">
            <source>Trident is a high-level abstraction that provides tools such as joins, aggregations, grouping, functions, and filters.</source>
            <target state="new">Trident is a high-level abstraction that provides tools such as joins, aggregations, grouping, functions, and filters.</target>
          </trans-unit>
          <trans-unit id="106" xml:space="preserve">
            <source>Additionally, Trident adds primitives for doing stateful, incremental processing.</source>
            <target state="new">Additionally, Trident adds primitives for doing stateful, incremental processing.</target>
          </trans-unit>
          <trans-unit id="107" xml:space="preserve">
            <source>This example demonstrates how you can build a topology using a custom spout, function, and several built-in functions provided by Trident.</source>
            <target state="new">This example demonstrates how you can build a topology using a custom spout, function, and several built-in functions provided by Trident.</target>
          </trans-unit>
          <trans-unit id="108" xml:space="preserve">
            <source>This example is heavily based on the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Trident Storm<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> example by Juan Alonso.</source>
            <target state="new">This example is heavily based on the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Trident Storm<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> example by Juan Alonso.</target>
          </trans-unit>
          <trans-unit id="109" xml:space="preserve">
            <source>Requirements</source>
            <target state="new">Requirements</target>
          </trans-unit>
          <trans-unit id="110" xml:space="preserve">
            <source><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept>Java and the JDK 1.7<bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept>Java and the JDK 1.7<bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="111" xml:space="preserve">
            <source><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept>Maven<bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept>Maven<bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="112" xml:space="preserve">
            <source><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept>Git<bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept>Git<bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="113" xml:space="preserve">
            <source>A Twitter developer account</source>
            <target state="new">A Twitter developer account</target>
          </trans-unit>
          <trans-unit id="114" xml:space="preserve">
            <source>Download the project</source>
            <target state="new">Download the project</target>
          </trans-unit>
          <trans-unit id="115" xml:space="preserve">
            <source>Use the following code to clone the project locally.</source>
            <target state="new">Use the following code to clone the project locally.</target>
          </trans-unit>
          <trans-unit id="116" xml:space="preserve">
            <source>Topology</source>
            <target state="new">Topology</target>
          </trans-unit>
          <trans-unit id="117" xml:space="preserve">
            <source>The topology for this example is as follows:</source>
            <target state="new">The topology for this example is as follows:</target>
          </trans-unit>
          <trans-unit id="118" xml:space="preserve">
            <source><bpt id="1">&lt;linkText&gt;</bpt>topology<ept id="1">&lt;/linkText&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;linkText&gt;</bpt>topology<ept id="1">&lt;/linkText&gt;</ept></target>
          </trans-unit>
          <trans-unit id="119" xml:space="preserve">
            <source>This is a simplified view of the topology.</source>
            <target state="new">This is a simplified view of the topology.</target>
          </trans-unit>
          <trans-unit id="120" xml:space="preserve">
            <source>Multiple instances of the components will be distributed across the nodes in the cluster.</source>
            <target state="new">Multiple instances of the components will be distributed across the nodes in the cluster.</target>
          </trans-unit>
          <trans-unit id="121" xml:space="preserve">
            <source>The Trident code that implements the topology is as follows:</source>
            <target state="new">The Trident code that implements the topology is as follows:</target>
          </trans-unit>
          <trans-unit id="122" xml:space="preserve">
            <source>This code does the following:</source>
            <target state="new">This code does the following:</target>
          </trans-unit>
          <trans-unit id="123" xml:space="preserve">
            <source>Creates a new stream from the spout.</source>
            <target state="new">Creates a new stream from the spout.</target>
          </trans-unit>
          <trans-unit id="124" xml:space="preserve">
            <source>The spout retrieves tweets from Twitter, and filters them for specific keywords (love, music, and coffee in this example).</source>
            <target state="new">The spout retrieves tweets from Twitter, and filters them for specific keywords (love, music, and coffee in this example).</target>
          </trans-unit>
          <trans-unit id="125" xml:space="preserve">
            <source>HashtagExtractor, a custom function, is used to extract hash tags from each tweet.</source>
            <target state="new">HashtagExtractor, a custom function, is used to extract hash tags from each tweet.</target>
          </trans-unit>
          <trans-unit id="126" xml:space="preserve">
            <source>These are emitted to the stream.</source>
            <target state="new">These are emitted to the stream.</target>
          </trans-unit>
          <trans-unit id="127" xml:space="preserve">
            <source>The stream is grouped by hash tag, and passed to an aggregator.</source>
            <target state="new">The stream is grouped by hash tag, and passed to an aggregator.</target>
          </trans-unit>
          <trans-unit id="128" xml:space="preserve">
            <source>This aggregator creates a count of how many times each hash tag has occurred.</source>
            <target state="new">This aggregator creates a count of how many times each hash tag has occurred.</target>
          </trans-unit>
          <trans-unit id="129" xml:space="preserve">
            <source>This data is persisted in memory.</source>
            <target state="new">This data is persisted in memory.</target>
          </trans-unit>
          <trans-unit id="130" xml:space="preserve">
            <source>Finally, a new stream is emitted that contains the hash tag and the count.</source>
            <target state="new">Finally, a new stream is emitted that contains the hash tag and the count.</target>
          </trans-unit>
          <trans-unit id="131" xml:space="preserve">
            <source>Because we are only interested in the most popular hash tags for a given batch of tweets, the <bpt id="2">&lt;strong&gt;</bpt>FirstN<ept id="2">&lt;/strong&gt;</ept> assembly is applied to return only the top 10 values, based on the count field.</source>
            <target state="new">Because we are only interested in the most popular hash tags for a given batch of tweets, the <bpt id="2">&lt;strong&gt;</bpt>FirstN<ept id="2">&lt;/strong&gt;</ept> assembly is applied to return only the top 10 values, based on the count field.</target>
          </trans-unit>
          <trans-unit id="132" xml:space="preserve">
            <source>Other than the spout and HashtagExtractor, we are using built-in Trident functionality.</source>
            <target state="new">Other than the spout and HashtagExtractor, we are using built-in Trident functionality.</target>
          </trans-unit>
          <trans-unit id="133" xml:space="preserve">
            <source>For information about built-in operations, see <bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>Package storm.trident.operation.builtin<bpt id="4">&lt;html&gt;</bpt><ept id="4">&lt;/html&gt;</ept>.</source>
            <target state="new">For information about built-in operations, see <bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>Package storm.trident.operation.builtin<bpt id="4">&lt;html&gt;</bpt><ept id="4">&lt;/html&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="134" xml:space="preserve">
            <source>For Trident-state implementations other than MemoryMapState, see the following:</source>
            <target state="new">For Trident-state implementations other than MemoryMapState, see the following:</target>
          </trans-unit>
          <trans-unit id="135" xml:space="preserve">
            <source>* <bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>Storm Trident elastic search<bpt id="4">&lt;html&gt;</bpt><ept id="4">&lt;/html&gt;</ept></source>
            <target state="new">* <bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>Storm Trident elastic search<bpt id="4">&lt;html&gt;</bpt><ept id="4">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="136" xml:space="preserve">
            <source>* <bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>trident-redis<bpt id="4">&lt;html&gt;</bpt><ept id="4">&lt;/html&gt;</ept></source>
            <target state="new">* <bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>trident-redis<bpt id="4">&lt;html&gt;</bpt><ept id="4">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="137" xml:space="preserve">
            <source>The spout</source>
            <target state="new">The spout</target>
          </trans-unit>
          <trans-unit id="138" xml:space="preserve">
            <source>The spout, <bpt id="2">&lt;strong&gt;</bpt>TwitterSpout<ept id="2">&lt;/strong&gt;</ept>, uses <bpt id="4">&lt;html&gt;</bpt><ept id="4">&lt;/html&gt;</ept>Twitter4j<bpt id="6">&lt;html&gt;</bpt><ept id="6">&lt;/html&gt;</ept> to retrieve tweets from Twitter.</source>
            <target state="new">The spout, <bpt id="2">&lt;strong&gt;</bpt>TwitterSpout<ept id="2">&lt;/strong&gt;</ept>, uses <bpt id="4">&lt;html&gt;</bpt><ept id="4">&lt;/html&gt;</ept>Twitter4j<bpt id="6">&lt;html&gt;</bpt><ept id="6">&lt;/html&gt;</ept> to retrieve tweets from Twitter.</target>
          </trans-unit>
          <trans-unit id="139" xml:space="preserve">
            <source>A filter is created (love, music, and coffee in this example), and the incoming tweets (status) that match the filter are stored in a linked blocking queue.</source>
            <target state="new">A filter is created (love, music, and coffee in this example), and the incoming tweets (status) that match the filter are stored in a linked blocking queue.</target>
          </trans-unit>
          <trans-unit id="140" xml:space="preserve">
            <source>(For more information, see <bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>Class LinkedBlockingQueue<bpt id="4">&lt;html&gt;</bpt><ept id="4">&lt;/html&gt;</ept>.)</source>
            <target state="new">(For more information, see <bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>Class LinkedBlockingQueue<bpt id="4">&lt;html&gt;</bpt><ept id="4">&lt;/html&gt;</ept>.)</target>
          </trans-unit>
          <trans-unit id="141" xml:space="preserve">
            <source>Finally, items are pulled off the queue and emitted to the topology.</source>
            <target state="new">Finally, items are pulled off the queue and emitted to the topology.</target>
          </trans-unit>
          <trans-unit id="142" xml:space="preserve">
            <source>The HashtagExtractor</source>
            <target state="new">The HashtagExtractor</target>
          </trans-unit>
          <trans-unit id="143" xml:space="preserve">
            <source>To extract hash tags, <bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>getHashtagEntities<bpt id="4">&lt;html&gt;</bpt><ept id="4">&lt;/html&gt;</ept> is used to retrieve all hash tags that are contained in the tweet.</source>
            <target state="new">To extract hash tags, <bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>getHashtagEntities<bpt id="4">&lt;html&gt;</bpt><ept id="4">&lt;/html&gt;</ept> is used to retrieve all hash tags that are contained in the tweet.</target>
          </trans-unit>
          <trans-unit id="144" xml:space="preserve">
            <source>These are then emitted to the stream.</source>
            <target state="new">These are then emitted to the stream.</target>
          </trans-unit>
          <trans-unit id="145" xml:space="preserve">
            <source>Enable Twitter</source>
            <target state="new">Enable Twitter</target>
          </trans-unit>
          <trans-unit id="146" xml:space="preserve">
            <source>Use the following steps to register a new Twitter application and obtain the consumer and access token information needed to read from Twitter:</source>
            <target state="new">Use the following steps to register a new Twitter application and obtain the consumer and access token information needed to read from Twitter:</target>
          </trans-unit>
          <trans-unit id="147" xml:space="preserve">
            <source>Go to <bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>Twitter Apps<bpt id="4">&lt;html&gt;</bpt><ept id="4">&lt;/html&gt;</ept> and click the <bpt id="6">&lt;strong&gt;</bpt>Create new app<ept id="6">&lt;/strong&gt;</ept> button.</source>
            <target state="new">Go to <bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>Twitter Apps<bpt id="4">&lt;html&gt;</bpt><ept id="4">&lt;/html&gt;</ept> and click the <bpt id="6">&lt;strong&gt;</bpt>Create new app<ept id="6">&lt;/strong&gt;</ept> button.</target>
          </trans-unit>
          <trans-unit id="148" xml:space="preserve">
            <source>When filling in the form, leave the <bpt id="2">&lt;strong&gt;</bpt>Callback URL<ept id="2">&lt;/strong&gt;</ept> field empty.</source>
            <target state="new">When filling in the form, leave the <bpt id="2">&lt;strong&gt;</bpt>Callback URL<ept id="2">&lt;/strong&gt;</ept> field empty.</target>
          </trans-unit>
          <trans-unit id="149" xml:space="preserve">
            <source>When the app is created, click the <bpt id="2">&lt;strong&gt;</bpt>Keys and Access Tokens<ept id="2">&lt;/strong&gt;</ept> tab.</source>
            <target state="new">When the app is created, click the <bpt id="2">&lt;strong&gt;</bpt>Keys and Access Tokens<ept id="2">&lt;/strong&gt;</ept> tab.</target>
          </trans-unit>
          <trans-unit id="150" xml:space="preserve">
            <source>Copy the <bpt id="2">&lt;strong&gt;</bpt>Consumer Key<ept id="2">&lt;/strong&gt;</ept> and <bpt id="4">&lt;strong&gt;</bpt>Consumer Secret<ept id="4">&lt;/strong&gt;</ept> information.</source>
            <target state="new">Copy the <bpt id="2">&lt;strong&gt;</bpt>Consumer Key<ept id="2">&lt;/strong&gt;</ept> and <bpt id="4">&lt;strong&gt;</bpt>Consumer Secret<ept id="4">&lt;/strong&gt;</ept> information.</target>
          </trans-unit>
          <trans-unit id="151" xml:space="preserve">
            <source>At the bottom of the page, select <bpt id="2">&lt;strong&gt;</bpt>Create my access token<ept id="2">&lt;/strong&gt;</ept> if no tokens exist.</source>
            <target state="new">At the bottom of the page, select <bpt id="2">&lt;strong&gt;</bpt>Create my access token<ept id="2">&lt;/strong&gt;</ept> if no tokens exist.</target>
          </trans-unit>
          <trans-unit id="152" xml:space="preserve">
            <source>When the tokens have been created, copy the <bpt id="2">&lt;strong&gt;</bpt>Access Token<ept id="2">&lt;/strong&gt;</ept> and <bpt id="4">&lt;strong&gt;</bpt>Access Token Secret<ept id="4">&lt;/strong&gt;</ept> information.</source>
            <target state="new">When the tokens have been created, copy the <bpt id="2">&lt;strong&gt;</bpt>Access Token<ept id="2">&lt;/strong&gt;</ept> and <bpt id="4">&lt;strong&gt;</bpt>Access Token Secret<ept id="4">&lt;/strong&gt;</ept> information.</target>
          </trans-unit>
          <trans-unit id="153" xml:space="preserve">
            <source>In the <bpt id="2">&lt;strong&gt;</bpt>TwitterSpoutTopology<ept id="2">&lt;/strong&gt;</ept> project you previously cloned, open the <bpt id="4">&lt;strong&gt;</bpt>resources/twitter4j.properties<ept id="4">&lt;/strong&gt;</ept> file, add the information you gathered in the previous steps, and then save the file.</source>
            <target state="new">In the <bpt id="2">&lt;strong&gt;</bpt>TwitterSpoutTopology<ept id="2">&lt;/strong&gt;</ept> project you previously cloned, open the <bpt id="4">&lt;strong&gt;</bpt>resources/twitter4j.properties<ept id="4">&lt;/strong&gt;</ept> file, add the information you gathered in the previous steps, and then save the file.</target>
          </trans-unit>
          <trans-unit id="154" xml:space="preserve">
            <source>Build the topology</source>
            <target state="new">Build the topology</target>
          </trans-unit>
          <trans-unit id="155" xml:space="preserve">
            <source>Use the following code to build the project:</source>
            <target state="new">Use the following code to build the project:</target>
          </trans-unit>
          <trans-unit id="156" xml:space="preserve">
            <source>Test the topology</source>
            <target state="new">Test the topology</target>
          </trans-unit>
          <trans-unit id="157" xml:space="preserve">
            <source>Use the following command to test the topology locally:</source>
            <target state="new">Use the following command to test the topology locally:</target>
          </trans-unit>
          <trans-unit id="158" xml:space="preserve">
            <source>After the topology starts, you should see debug information that contains the hash tags and counts emitted by the topology.</source>
            <target state="new">After the topology starts, you should see debug information that contains the hash tags and counts emitted by the topology.</target>
          </trans-unit>
          <trans-unit id="159" xml:space="preserve">
            <source>The output should appear similar to the following:</source>
            <target state="new">The output should appear similar to the following:</target>
          </trans-unit>
          <trans-unit id="160" xml:space="preserve">
            <source>Next steps</source>
            <target state="new">Next steps</target>
          </trans-unit>
          <trans-unit id="161" xml:space="preserve">
            <source>Now that you have tested the topology locally, discover how to deploy the topology: <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Deploy and manage Apache Storm topologies on HDInsight<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">Now that you have tested the topology locally, discover how to deploy the topology: <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Deploy and manage Apache Storm topologies on HDInsight<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="162" xml:space="preserve">
            <source>You may also be interested in the following Storm topics:</source>
            <target state="new">You may also be interested in the following Storm topics:</target>
          </trans-unit>
          <trans-unit id="163" xml:space="preserve">
            <source><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Develop Java topologies for Storm on HDInsight using Maven<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></source>
            <target state="new"><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Develop Java topologies for Storm on HDInsight using Maven<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></target>
          </trans-unit>
          <trans-unit id="164" xml:space="preserve">
            <source><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Develop C# topologies for Storm on HDInsight using Visual Studio<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></source>
            <target state="new"><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Develop C# topologies for Storm on HDInsight using Visual Studio<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></target>
          </trans-unit>
          <trans-unit id="165" xml:space="preserve">
            <source>For more Storm examples for HDinsight:</source>
            <target state="new">For more Storm examples for HDinsight:</target>
          </trans-unit>
          <trans-unit id="166" xml:space="preserve">
            <source><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Example topologies for Storm on HDInsight<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></source>
            <target state="new"><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Example topologies for Storm on HDInsight<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></target>
          </trans-unit>
        </group>
      </group>
    </body>
  </file>
</xliff>