<?xml version="1.0" encoding="utf-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" source-language="en-us" target-language="pl-pl" original="2/22/2016 6:18:27 AM" tool-id="MarkdownTransformer" product-name="N/A" product-version="N/A" build-num="1">
    <header>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d9bd77405888fc6d38ac34ef2e0f7bb5391c4217</xliffext:olfilehash>
      <tool tool-id="MarkdownTransformer" tool-name="MarkdownToXliff" tool-version="1.0" tool-company="Microsoft" />
    </header>
    <body>
      <group extype="content">
        <group id="101">
          <trans-unit id="101" xml:space="preserve">
            <source>Monitor your Logic Apps</source>
            <target state="new">Monitor your Logic Apps</target>
          </trans-unit>
          <trans-unit id="102" xml:space="preserve">
            <source>How to see what your Logic Apps have done.</source>
            <target state="new">How to see what your Logic Apps have done.</target>
          </trans-unit>
          <trans-unit id="103" xml:space="preserve">
            <source>Monitor your Logic Apps</source>
            <target state="new">Monitor your Logic Apps</target>
          </trans-unit>
          <trans-unit id="104" xml:space="preserve">
            <source>After you created a Logic App by following the steps described in  <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Created a Logic App<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>, you can see the full history of its execution in the Azure portal.</source>
            <target state="new">After you created a Logic App by following the steps described in  <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Created a Logic App<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>, you can see the full history of its execution in the Azure portal.</target>
          </trans-unit>
          <trans-unit id="105" xml:space="preserve">
            <source>To view the history, click on <bpt id="2">&lt;strong&gt;</bpt>Browse<ept id="2">&lt;/strong&gt;</ept> at the left side of the portal screen and select <bpt id="4">&lt;strong&gt;</bpt>Logic Apps<ept id="4">&lt;/strong&gt;</ept>.</source>
            <target state="new">To view the history, click on <bpt id="2">&lt;strong&gt;</bpt>Browse<ept id="2">&lt;/strong&gt;</ept> at the left side of the portal screen and select <bpt id="4">&lt;strong&gt;</bpt>Logic Apps<ept id="4">&lt;/strong&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="106" xml:space="preserve">
            <source>A list of Logic Apps in your subscription will appear.</source>
            <target state="new">A list of Logic Apps in your subscription will appear.</target>
          </trans-unit>
          <trans-unit id="107" xml:space="preserve">
            <source>A Logic App can be <bpt id="2">&lt;strong&gt;</bpt>Enabled<ept id="2">&lt;/strong&gt;</ept> or <bpt id="4">&lt;strong&gt;</bpt>Disabled<ept id="4">&lt;/strong&gt;</ept>.</source>
            <target state="new">A Logic App can be <bpt id="2">&lt;strong&gt;</bpt>Enabled<ept id="2">&lt;/strong&gt;</ept> or <bpt id="4">&lt;strong&gt;</bpt>Disabled<ept id="4">&lt;/strong&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="108" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Enabled<ept id="1">&lt;/strong&gt;</ept> Logic Apps means that triggers will run your Logic App in response to trigger events, <bpt id="3">&lt;strong&gt;</bpt>Disabled<ept id="3">&lt;/strong&gt;</ept> Logic App will not run in response to events.</source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Enabled<ept id="1">&lt;/strong&gt;</ept> Logic Apps means that triggers will run your Logic App in response to trigger events, <bpt id="3">&lt;strong&gt;</bpt>Disabled<ept id="3">&lt;/strong&gt;</ept> Logic App will not run in response to events.</target>
          </trans-unit>
          <trans-unit id="109" xml:space="preserve">
            <source><bpt id="1">&lt;linkText&gt;</bpt>Overview<ept id="1">&lt;/linkText&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;linkText&gt;</bpt>Overview<ept id="1">&lt;/linkText&gt;</ept></target>
          </trans-unit>
          <trans-unit id="110" xml:space="preserve">
            <source>When the blade for your Logic App appears, there are 2 sections that are useful:</source>
            <target state="new">When the blade for your Logic App appears, there are 2 sections that are useful:</target>
          </trans-unit>
          <trans-unit id="111" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Summary<ept id="1">&lt;/strong&gt;</ept>, which tells you the latest status and is an entry point to editing your Logic App.</source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Summary<ept id="1">&lt;/strong&gt;</ept>, which tells you the latest status and is an entry point to editing your Logic App.</target>
          </trans-unit>
          <trans-unit id="112" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>All runs<ept id="1">&lt;/strong&gt;</ept>, which shows you a list of the runs this Logic App has had.</source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>All runs<ept id="1">&lt;/strong&gt;</ept>, which shows you a list of the runs this Logic App has had.</target>
          </trans-unit>
          <trans-unit id="113" xml:space="preserve">
            <source>Runs</source>
            <target state="new">Runs</target>
          </trans-unit>
          <trans-unit id="114" xml:space="preserve">
            <source><bpt id="1">&lt;linkText&gt;</bpt>All Runs<ept id="1">&lt;/linkText&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;linkText&gt;</bpt>All Runs<ept id="1">&lt;/linkText&gt;</ept></target>
          </trans-unit>
          <trans-unit id="115" xml:space="preserve">
            <source>This list of runs shows the <bpt id="2">&lt;strong&gt;</bpt>Start time<ept id="2">&lt;/strong&gt;</ept>, the <bpt id="4">&lt;strong&gt;</bpt>Run identifier<ept id="4">&lt;/strong&gt;</ept> (you can use this when calling the REST API), and the <bpt id="6">&lt;strong&gt;</bpt>Duration<ept id="6">&lt;/strong&gt;</ept> of the particular runs.</source>
            <target state="new">This list of runs shows the <bpt id="2">&lt;strong&gt;</bpt>Start time<ept id="2">&lt;/strong&gt;</ept>, the <bpt id="4">&lt;strong&gt;</bpt>Run identifier<ept id="4">&lt;/strong&gt;</ept> (you can use this when calling the REST API), and the <bpt id="6">&lt;strong&gt;</bpt>Duration<ept id="6">&lt;/strong&gt;</ept> of the particular runs.</target>
          </trans-unit>
          <trans-unit id="116" xml:space="preserve">
            <source>Click any row to see details on that run.</source>
            <target state="new">Click any row to see details on that run.</target>
          </trans-unit>
          <trans-unit id="117" xml:space="preserve">
            <source>The details blade shows a graph with the execution time and sequence of all of the actions in the run.</source>
            <target state="new">The details blade shows a graph with the execution time and sequence of all of the actions in the run.</target>
          </trans-unit>
          <trans-unit id="118" xml:space="preserve">
            <source>Below that, is the full list of all of the actions that were executed.</source>
            <target state="new">Below that, is the full list of all of the actions that were executed.</target>
          </trans-unit>
          <trans-unit id="119" xml:space="preserve">
            <source><bpt id="1">&lt;linkText&gt;</bpt>Run and Actions<ept id="1">&lt;/linkText&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;linkText&gt;</bpt>Run and Actions<ept id="1">&lt;/linkText&gt;</ept></target>
          </trans-unit>
          <trans-unit id="120" xml:space="preserve">
            <source>Finally, on a particular action, you can get all of the data that was passed to the action, and that was received from the action in the <bpt id="2">&lt;strong&gt;</bpt>Inputs<ept id="2">&lt;/strong&gt;</ept> and <bpt id="4">&lt;strong&gt;</bpt>Outputs<ept id="4">&lt;/strong&gt;</ept> sections.</source>
            <target state="new">Finally, on a particular action, you can get all of the data that was passed to the action, and that was received from the action in the <bpt id="2">&lt;strong&gt;</bpt>Inputs<ept id="2">&lt;/strong&gt;</ept> and <bpt id="4">&lt;strong&gt;</bpt>Outputs<ept id="4">&lt;/strong&gt;</ept> sections.</target>
          </trans-unit>
          <trans-unit id="121" xml:space="preserve">
            <source>Click on the links to see the full content (you can also copy the links to download the content).</source>
            <target state="new">Click on the links to see the full content (you can also copy the links to download the content).</target>
          </trans-unit>
          <trans-unit id="122" xml:space="preserve">
            <source>Another important piece of information is the <bpt id="2">&lt;strong&gt;</bpt>Tracking ID<ept id="2">&lt;/strong&gt;</ept>.</source>
            <target state="new">Another important piece of information is the <bpt id="2">&lt;strong&gt;</bpt>Tracking ID<ept id="2">&lt;/strong&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="123" xml:space="preserve">
            <source>This identifier is passed in the headers of all action calls.</source>
            <target state="new">This identifier is passed in the headers of all action calls.</target>
          </trans-unit>
          <trans-unit id="124" xml:space="preserve">
            <source>If you have logging inside of your own service, we recommend logging the Tracking ID, and then you can cross-reference your own logs with this identifier.</source>
            <target state="new">If you have logging inside of your own service, we recommend logging the Tracking ID, and then you can cross-reference your own logs with this identifier.</target>
          </trans-unit>
          <trans-unit id="125" xml:space="preserve">
            <source>Trigger history</source>
            <target state="new">Trigger history</target>
          </trans-unit>
          <trans-unit id="126" xml:space="preserve">
            <source>Polling triggers check an API on some interval but don't necessarily start a run, depending on the response (for example a <bpt id="2">&lt;code&gt;</bpt>200<ept id="2">&lt;/code&gt;</ept> means to run and a <bpt id="4">&lt;code&gt;</bpt>202<ept id="4">&lt;/code&gt;</ept> means to not run).</source>
            <target state="new">Polling triggers check an API on some interval but don't necessarily start a run, depending on the response (for example a <bpt id="2">&lt;code&gt;</bpt>200<ept id="2">&lt;/code&gt;</ept> means to run and a <bpt id="4">&lt;code&gt;</bpt>202<ept id="4">&lt;/code&gt;</ept> means to not run).</target>
          </trans-unit>
          <trans-unit id="127" xml:space="preserve">
            <source>The trigger history gives you a way to see all of the calls that happen but that don't run the Logic App (the <bpt id="2">&lt;code&gt;</bpt>202<ept id="2">&lt;/code&gt;</ept> responses).</source>
            <target state="new">The trigger history gives you a way to see all of the calls that happen but that don't run the Logic App (the <bpt id="2">&lt;code&gt;</bpt>202<ept id="2">&lt;/code&gt;</ept> responses).</target>
          </trans-unit>
          <trans-unit id="128" xml:space="preserve">
            <source><bpt id="1">&lt;linkText&gt;</bpt>Trigger History<ept id="1">&lt;/linkText&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;linkText&gt;</bpt>Trigger History<ept id="1">&lt;/linkText&gt;</ept></target>
          </trans-unit>
          <trans-unit id="129" xml:space="preserve">
            <source>For each trigger you can see if it <bpt id="2">&lt;strong&gt;</bpt>Fired<ept id="2">&lt;/strong&gt;</ept>, if it didn't fire, or, if it had some sort of error (it <bpt id="4">&lt;strong&gt;</bpt>Failed<ept id="4">&lt;/strong&gt;</ept>).</source>
            <target state="new">For each trigger you can see if it <bpt id="2">&lt;strong&gt;</bpt>Fired<ept id="2">&lt;/strong&gt;</ept>, if it didn't fire, or, if it had some sort of error (it <bpt id="4">&lt;strong&gt;</bpt>Failed<ept id="4">&lt;/strong&gt;</ept>).</target>
          </trans-unit>
          <trans-unit id="130" xml:space="preserve">
            <source>To inspect why your trigger failed you can click on the <bpt id="2">&lt;strong&gt;</bpt>Outputs<ept id="2">&lt;/strong&gt;</ept> link.</source>
            <target state="new">To inspect why your trigger failed you can click on the <bpt id="2">&lt;strong&gt;</bpt>Outputs<ept id="2">&lt;/strong&gt;</ept> link.</target>
          </trans-unit>
          <trans-unit id="131" xml:space="preserve">
            <source>If it did fire, click the <bpt id="2">&lt;strong&gt;</bpt>Run<ept id="2">&lt;/strong&gt;</ept> link to see what happened after it fired.</source>
            <target state="new">If it did fire, click the <bpt id="2">&lt;strong&gt;</bpt>Run<ept id="2">&lt;/strong&gt;</ept> link to see what happened after it fired.</target>
          </trans-unit>
          <trans-unit id="132" xml:space="preserve">
            <source>Note that for <bpt id="2">&lt;em&gt;</bpt>Push<ept id="2">&lt;/em&gt;</ept> triggers, you will <bpt id="4">&lt;em&gt;</bpt>not<ept id="4">&lt;/em&gt;</ept> see the times that the runs started here, instead you will see the <bpt id="6">&lt;em&gt;</bpt>callback registration<ept id="6">&lt;/em&gt;</ept> calls - these are when the Logic app registers to get called back.</source>
            <target state="new">Note that for <bpt id="2">&lt;em&gt;</bpt>Push<ept id="2">&lt;/em&gt;</ept> triggers, you will <bpt id="4">&lt;em&gt;</bpt>not<ept id="4">&lt;/em&gt;</ept> see the times that the runs started here, instead you will see the <bpt id="6">&lt;em&gt;</bpt>callback registration<ept id="6">&lt;/em&gt;</ept> calls - these are when the Logic app registers to get called back.</target>
          </trans-unit>
          <trans-unit id="133" xml:space="preserve">
            <source>If your push trigger is not working, it may be a problem with the registration (which you can see on the Outputs), but otherwise you many need to investigate that API specifically.</source>
            <target state="new">If your push trigger is not working, it may be a problem with the registration (which you can see on the Outputs), but otherwise you many need to investigate that API specifically.</target>
          </trans-unit>
          <trans-unit id="134" xml:space="preserve">
            <source>Versioning</source>
            <target state="new">Versioning</target>
          </trans-unit>
          <trans-unit id="135" xml:space="preserve">
            <source>There is an additional capability that is not currently possible in the UI (coming soon) but is available via <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>the REST api<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>. When you update the definition of a Logic App, the previous version of the definition is stored. This is because if you already have a run in progress, that run will reference the version of the Logic App that existed when the run started. Definitions of runs cannot change while they are in progress. The Version history REST api gives you access to this information.</source>
            <target state="new">There is an additional capability that is not currently possible in the UI (coming soon) but is available via <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>the REST api<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>. When you update the definition of a Logic App, the previous version of the definition is stored. This is because if you already have a run in progress, that run will reference the version of the Logic App that existed when the run started. Definitions of runs cannot change while they are in progress. The Version history REST api gives you access to this information.</target>
          </trans-unit>
          <trans-unit id="136" xml:space="preserve">
            <source>test</source>
            <target state="new">test</target>
          </trans-unit>
        </group>
      </group>
    </body>
  </file>
</xliff>