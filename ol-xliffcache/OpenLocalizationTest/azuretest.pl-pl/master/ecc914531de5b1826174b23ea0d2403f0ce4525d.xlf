<?xml version="1.0" encoding="utf-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" source-language="en-us" target-language="pl-pl" original="2/22/2016 6:17:41 AM" tool-id="MarkdownTransformer" product-name="N/A" product-version="N/A" build-num="1">
    <header>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ecc914531de5b1826174b23ea0d2403f0ce4525d</xliffext:olfilehash>
      <tool tool-id="MarkdownTransformer" tool-name="MarkdownToXliff" tool-version="1.0" tool-company="Microsoft" />
    </header>
    <body>
      <group extype="content">
        <group id="101">
          <trans-unit id="101" xml:space="preserve">
            <source>Create EAI Logic App using VETR | Microsoft Azure</source>
            <target state="new">Create EAI Logic App using VETR | Microsoft Azure</target>
          </trans-unit>
          <trans-unit id="102" xml:space="preserve">
            <source>This topic covers the Validate, Encode and Transform features of BizTalk XML services.</source>
            <target state="new">This topic covers the Validate, Encode and Transform features of BizTalk XML services.</target>
          </trans-unit>
          <trans-unit id="103" xml:space="preserve">
            <source>Create EAI Logic App Using VETR</source>
            <target state="new">Create EAI Logic App Using VETR</target>
          </trans-unit>
          <trans-unit id="104" xml:space="preserve">
            <source>Most Enterprise Application Integration (EAI) scenarios mediate data between a source and a destination.</source>
            <target state="new">Most Enterprise Application Integration (EAI) scenarios mediate data between a source and a destination.</target>
          </trans-unit>
          <trans-unit id="105" xml:space="preserve">
            <source>Such scenarios often have a common set of requirements:</source>
            <target state="new">Such scenarios often have a common set of requirements:</target>
          </trans-unit>
          <trans-unit id="106" xml:space="preserve">
            <source>Ensure that data from different systems are correctly formatted</source>
            <target state="new">Ensure that data from different systems are correctly formatted</target>
          </trans-unit>
          <trans-unit id="107" xml:space="preserve">
            <source>Perform “look-up” on incoming data to make decisions</source>
            <target state="new">Perform “look-up” on incoming data to make decisions</target>
          </trans-unit>
          <trans-unit id="108" xml:space="preserve">
            <source>Convert data from one format to another (for example, from a CRM system's data format to an ERP system's data format)</source>
            <target state="new">Convert data from one format to another (for example, from a CRM system's data format to an ERP system's data format)</target>
          </trans-unit>
          <trans-unit id="109" xml:space="preserve">
            <source>Route data to desired application or system</source>
            <target state="new">Route data to desired application or system</target>
          </trans-unit>
          <trans-unit id="110" xml:space="preserve">
            <source>This article shows you a common integration pattern: "one-way message mediation" or VETR (Validate, Enrich, Transform, Route) The VETR pattern mediates data between a source entity and a destination entity.</source>
            <target state="new">This article shows you a common integration pattern: "one-way message mediation" or VETR (Validate, Enrich, Transform, Route) The VETR pattern mediates data between a source entity and a destination entity.</target>
          </trans-unit>
          <trans-unit id="111" xml:space="preserve">
            <source>Usually the source and destination are data sources.</source>
            <target state="new">Usually the source and destination are data sources.</target>
          </trans-unit>
          <trans-unit id="112" xml:space="preserve">
            <source>Consider a website that accepts orders.</source>
            <target state="new">Consider a website that accepts orders.</target>
          </trans-unit>
          <trans-unit id="113" xml:space="preserve">
            <source>Users post orders to the system using HTTP.</source>
            <target state="new">Users post orders to the system using HTTP.</target>
          </trans-unit>
          <trans-unit id="114" xml:space="preserve">
            <source>Behind the scenes, the system validates the incoming data for correctness, normalizes it, and persists it in a Service Bus queue for further processing.</source>
            <target state="new">Behind the scenes, the system validates the incoming data for correctness, normalizes it, and persists it in a Service Bus queue for further processing.</target>
          </trans-unit>
          <trans-unit id="115" xml:space="preserve">
            <source>The system takes orders off the queue, expecting it in a particular format.</source>
            <target state="new">The system takes orders off the queue, expecting it in a particular format.</target>
          </trans-unit>
          <trans-unit id="116" xml:space="preserve">
            <source>Thus, the end-to-end flow is:</source>
            <target state="new">Thus, the end-to-end flow is:</target>
          </trans-unit>
          <trans-unit id="117" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>HTTP<ept id="1">&lt;/strong&gt;</ept> &gt; <bpt id="3">&lt;strong&gt;</bpt>Validate<ept id="3">&lt;/strong&gt;</ept> &gt; <bpt id="5">&lt;strong&gt;</bpt>Transform<ept id="5">&lt;/strong&gt;</ept> &gt; <bpt id="7">&lt;strong&gt;</bpt>Service Bus<ept id="7">&lt;/strong&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>HTTP<ept id="1">&lt;/strong&gt;</ept> &gt; <bpt id="3">&lt;strong&gt;</bpt>Validate<ept id="3">&lt;/strong&gt;</ept> &gt; <bpt id="5">&lt;strong&gt;</bpt>Transform<ept id="5">&lt;/strong&gt;</ept> &gt; <bpt id="7">&lt;strong&gt;</bpt>Service Bus<ept id="7">&lt;/strong&gt;</ept></target>
          </trans-unit>
          <trans-unit id="118" xml:space="preserve">
            <source><bpt id="1">&lt;linkText&gt;</bpt>Basic VETR Flow<ept id="1">&lt;/linkText&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;linkText&gt;</bpt>Basic VETR Flow<ept id="1">&lt;/linkText&gt;</ept></target>
          </trans-unit>
          <trans-unit id="119" xml:space="preserve">
            <source>The following BizTalk API Apps help build this pattern:</source>
            <target state="new">The following BizTalk API Apps help build this pattern:</target>
          </trans-unit>
          <trans-unit id="120" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>HTTP Trigger<ept id="1">&lt;/strong&gt;</ept> - Source to trigger message event</source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>HTTP Trigger<ept id="1">&lt;/strong&gt;</ept> - Source to trigger message event</target>
          </trans-unit>
          <trans-unit id="121" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Validate<ept id="1">&lt;/strong&gt;</ept> - Validates correctness of incoming data</source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Validate<ept id="1">&lt;/strong&gt;</ept> - Validates correctness of incoming data</target>
          </trans-unit>
          <trans-unit id="122" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Transform<ept id="1">&lt;/strong&gt;</ept> - Transforms data from incoming format to format required by downstream system</source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Transform<ept id="1">&lt;/strong&gt;</ept> - Transforms data from incoming format to format required by downstream system</target>
          </trans-unit>
          <trans-unit id="123" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Service Bus Connector<ept id="1">&lt;/strong&gt;</ept> - Destination entity where data is sent</source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Service Bus Connector<ept id="1">&lt;/strong&gt;</ept> - Destination entity where data is sent</target>
          </trans-unit>
          <trans-unit id="124" xml:space="preserve">
            <source>Constructing basic VETR pattern</source>
            <target state="new">Constructing basic VETR pattern</target>
          </trans-unit>
          <trans-unit id="125" xml:space="preserve">
            <source>The basics</source>
            <target state="new">The basics</target>
          </trans-unit>
          <trans-unit id="126" xml:space="preserve">
            <source>In the Azure Management Portal, click the <bpt id="2">&lt;strong&gt;</bpt>+New<ept id="2">&lt;/strong&gt;</ept> button at the bottom-left of the screen and click <bpt id="4">&lt;strong&gt;</bpt>Logic App<ept id="4">&lt;/strong&gt;</ept>.</source>
            <target state="new">In the Azure Management Portal, click the <bpt id="2">&lt;strong&gt;</bpt>+New<ept id="2">&lt;/strong&gt;</ept> button at the bottom-left of the screen and click <bpt id="4">&lt;strong&gt;</bpt>Logic App<ept id="4">&lt;/strong&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="127" xml:space="preserve">
            <source>Choose a name, location, subscription, resource group, and location that works.</source>
            <target state="new">Choose a name, location, subscription, resource group, and location that works.</target>
          </trans-unit>
          <trans-unit id="128" xml:space="preserve">
            <source>Resource groups act as containers for your apps and all of the resources for your app go to the same resource group.</source>
            <target state="new">Resource groups act as containers for your apps and all of the resources for your app go to the same resource group.</target>
          </trans-unit>
          <trans-unit id="129" xml:space="preserve">
            <source>Next, let's add triggers and actions.</source>
            <target state="new">Next, let's add triggers and actions.</target>
          </trans-unit>
          <trans-unit id="130" xml:space="preserve">
            <source>Add HTTP Trigger</source>
            <target state="new">Add HTTP Trigger</target>
          </trans-unit>
          <trans-unit id="131" xml:space="preserve">
            <source>Select <bpt id="2">&lt;strong&gt;</bpt>HTTP Listener<ept id="2">&lt;/strong&gt;</ept> from the gallery to create a new listener.</source>
            <target state="new">Select <bpt id="2">&lt;strong&gt;</bpt>HTTP Listener<ept id="2">&lt;/strong&gt;</ept> from the gallery to create a new listener.</target>
          </trans-unit>
          <trans-unit id="132" xml:space="preserve">
            <source>Call it <bpt id="2">&lt;strong&gt;</bpt>HTTP1<ept id="2">&lt;/strong&gt;</ept>.</source>
            <target state="new">Call it <bpt id="2">&lt;strong&gt;</bpt>HTTP1<ept id="2">&lt;/strong&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="133" xml:space="preserve">
            <source>Leave <bpt id="2">&lt;strong&gt;</bpt>Send response automatically?<ept id="2">&lt;/strong&gt;</ept> setting as false.</source>
            <target state="new">Leave <bpt id="2">&lt;strong&gt;</bpt>Send response automatically?<ept id="2">&lt;/strong&gt;</ept> setting as false.</target>
          </trans-unit>
          <trans-unit id="134" xml:space="preserve">
            <source>Configure the trigger action by setting _HTTP Method_ to <bpt id="2">&lt;em&gt;</bpt>POST<ept id="2">&lt;/em&gt;</ept> and setting _Relative URL_ to <bpt id="4">&lt;em&gt;</bpt>/OneWayPipeline<ept id="4">&lt;/em&gt;</ept>.</source>
            <target state="new">Configure the trigger action by setting _HTTP Method_ to <bpt id="2">&lt;em&gt;</bpt>POST<ept id="2">&lt;/em&gt;</ept> and setting _Relative URL_ to <bpt id="4">&lt;em&gt;</bpt>/OneWayPipeline<ept id="4">&lt;/em&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="135" xml:space="preserve">
            <source><bpt id="1">&lt;linkText&gt;</bpt>HTTP Trigger<ept id="1">&lt;/linkText&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;linkText&gt;</bpt>HTTP Trigger<ept id="1">&lt;/linkText&gt;</ept></target>
          </trans-unit>
          <trans-unit id="136" xml:space="preserve">
            <source>Add Validate Action</source>
            <target state="new">Add Validate Action</target>
          </trans-unit>
          <trans-unit id="137" xml:space="preserve">
            <source>Now, let’s enter actions that run whenever the trigger fires--that is, whenever a call is received on the HTTP endpoint.</source>
            <target state="new">Now, let’s enter actions that run whenever the trigger fires--that is, whenever a call is received on the HTTP endpoint.</target>
          </trans-unit>
          <trans-unit id="138" xml:space="preserve">
            <source>Add <bpt id="2">&lt;strong&gt;</bpt>BizTalk XML Validator<ept id="2">&lt;/strong&gt;</ept> from the gallery and name it <bpt id="4">&lt;em&gt;</bpt>(Validate1)<ept id="4">&lt;/em&gt;</ept> to create an instance.</source>
            <target state="new">Add <bpt id="2">&lt;strong&gt;</bpt>BizTalk XML Validator<ept id="2">&lt;/strong&gt;</ept> from the gallery and name it <bpt id="4">&lt;em&gt;</bpt>(Validate1)<ept id="4">&lt;/em&gt;</ept> to create an instance.</target>
          </trans-unit>
          <trans-unit id="139" xml:space="preserve">
            <source>Configure an XSD schema to validate the incoming XML messages.</source>
            <target state="new">Configure an XSD schema to validate the incoming XML messages.</target>
          </trans-unit>
          <trans-unit id="140" xml:space="preserve">
            <source>Select the <bpt id="2">&lt;em&gt;</bpt>Validate<ept id="2">&lt;/em&gt;</ept> action and select <bpt id="4">&lt;em&gt;</bpt>triggers(‘httplistener’).outputs.Content<ept id="4">&lt;/em&gt;</ept> as the value for the <bpt id="6">&lt;em&gt;</bpt>inputXml<ept id="6">&lt;/em&gt;</ept> parameter.</source>
            <target state="new">Select the <bpt id="2">&lt;em&gt;</bpt>Validate<ept id="2">&lt;/em&gt;</ept> action and select <bpt id="4">&lt;em&gt;</bpt>triggers(‘httplistener’).outputs.Content<ept id="4">&lt;/em&gt;</ept> as the value for the <bpt id="6">&lt;em&gt;</bpt>inputXml<ept id="6">&lt;/em&gt;</ept> parameter.</target>
          </trans-unit>
          <trans-unit id="141" xml:space="preserve">
            <source>Now, the validate action is the first action after the HTTP listener.</source>
            <target state="new">Now, the validate action is the first action after the HTTP listener.</target>
          </trans-unit>
          <trans-unit id="142" xml:space="preserve">
            <source>Similarly, let's add the rest of the actions.</source>
            <target state="new">Similarly, let's add the rest of the actions.</target>
          </trans-unit>
          <trans-unit id="143" xml:space="preserve">
            <source><bpt id="1">&lt;linkText&gt;</bpt>BizTalk XML Validator<ept id="1">&lt;/linkText&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;linkText&gt;</bpt>BizTalk XML Validator<ept id="1">&lt;/linkText&gt;</ept></target>
          </trans-unit>
          <trans-unit id="144" xml:space="preserve">
            <source>Add Transform action</source>
            <target state="new">Add Transform action</target>
          </trans-unit>
          <trans-unit id="145" xml:space="preserve">
            <source>Let's configure transforms to normalize the incoming data.</source>
            <target state="new">Let's configure transforms to normalize the incoming data.</target>
          </trans-unit>
          <trans-unit id="146" xml:space="preserve">
            <source>Add <bpt id="2">&lt;strong&gt;</bpt>Transform<ept id="2">&lt;/strong&gt;</ept> from the gallery.</source>
            <target state="new">Add <bpt id="2">&lt;strong&gt;</bpt>Transform<ept id="2">&lt;/strong&gt;</ept> from the gallery.</target>
          </trans-unit>
          <trans-unit id="147" xml:space="preserve">
            <source>To configure a transform to transform the incoming XML messages, select the <bpt id="2">&lt;strong&gt;</bpt>Transform<ept id="2">&lt;/strong&gt;</ept> action as the action to carry out when this API is called and select <bpt id="4">&lt;code&gt;</bpt>triggers(‘httplistener’).outputs.Content<ept id="4">&lt;/code&gt;</ept> as the value for <bpt id="6">&lt;em&gt;</bpt>inputXml<ept id="6">&lt;/em&gt;</ept>.</source>
            <target state="new">To configure a transform to transform the incoming XML messages, select the <bpt id="2">&lt;strong&gt;</bpt>Transform<ept id="2">&lt;/strong&gt;</ept> action as the action to carry out when this API is called and select <bpt id="4">&lt;code&gt;</bpt>triggers(‘httplistener’).outputs.Content<ept id="4">&lt;/code&gt;</ept> as the value for <bpt id="6">&lt;em&gt;</bpt>inputXml<ept id="6">&lt;/em&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="148" xml:space="preserve">
            <source>Map is an optional parameter since the incoming data is matched with all configured transforms, and only those that match the schema are applied.</source>
            <target state="new">Map is an optional parameter since the incoming data is matched with all configured transforms, and only those that match the schema are applied.</target>
          </trans-unit>
          <trans-unit id="149" xml:space="preserve">
            <source>Lastly, the Transform runs only if Validate succeeds.</source>
            <target state="new">Lastly, the Transform runs only if Validate succeeds.</target>
          </trans-unit>
          <trans-unit id="150" xml:space="preserve">
            <source>To configure this condition, click the gear icon on the top right and select _Add a condition to be met_.</source>
            <target state="new">To configure this condition, click the gear icon on the top right and select _Add a condition to be met_.</target>
          </trans-unit>
          <trans-unit id="151" xml:space="preserve">
            <source>Set the condition to <bpt id="2">&lt;code&gt;</bpt>equals(actions('xmlvalidator').status,'Succeeded')<ept id="2">&lt;/code&gt;</ept></source>
            <target state="new">Set the condition to <bpt id="2">&lt;code&gt;</bpt>equals(actions('xmlvalidator').status,'Succeeded')<ept id="2">&lt;/code&gt;</ept></target>
          </trans-unit>
          <trans-unit id="152" xml:space="preserve">
            <source><bpt id="1">&lt;linkText&gt;</bpt>BizTalk Transforms<ept id="1">&lt;/linkText&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;linkText&gt;</bpt>BizTalk Transforms<ept id="1">&lt;/linkText&gt;</ept></target>
          </trans-unit>
          <trans-unit id="153" xml:space="preserve">
            <source>Add Service Bus Connector</source>
            <target state="new">Add Service Bus Connector</target>
          </trans-unit>
          <trans-unit id="154" xml:space="preserve">
            <source>Next, let's add the destination--a Service Bus Queu--to write data to.</source>
            <target state="new">Next, let's add the destination--a Service Bus Queu--to write data to.</target>
          </trans-unit>
          <trans-unit id="155" xml:space="preserve">
            <source>Add a <bpt id="2">&lt;strong&gt;</bpt>Service Bus Connector<ept id="2">&lt;/strong&gt;</ept> from the gallery.</source>
            <target state="new">Add a <bpt id="2">&lt;strong&gt;</bpt>Service Bus Connector<ept id="2">&lt;/strong&gt;</ept> from the gallery.</target>
          </trans-unit>
          <trans-unit id="156" xml:space="preserve">
            <source>Set the <bpt id="2">&lt;strong&gt;</bpt>Name<ept id="2">&lt;/strong&gt;</ept> to <bpt id="4">&lt;em&gt;</bpt>Servicebus1<ept id="4">&lt;/em&gt;</ept>, set <bpt id="6">&lt;strong&gt;</bpt>Connection String* to the connection string to your service bus instance, set **Entity Name<ept id="6">&lt;/strong&gt;</ept> to <bpt id="8">&lt;em&gt;</bpt>Queue<ept id="8">&lt;/em&gt;</ept>, and skip <bpt id="10">&lt;strong&gt;</bpt>Subscription name<ept id="10">&lt;/strong&gt;</ept>.</source>
            <target state="new">Set the <bpt id="2">&lt;strong&gt;</bpt>Name<ept id="2">&lt;/strong&gt;</ept> to <bpt id="4">&lt;em&gt;</bpt>Servicebus1<ept id="4">&lt;/em&gt;</ept>, set <bpt id="6">&lt;strong&gt;</bpt>Connection String* to the connection string to your service bus instance, set **Entity Name<ept id="6">&lt;/strong&gt;</ept> to <bpt id="8">&lt;em&gt;</bpt>Queue<ept id="8">&lt;/em&gt;</ept>, and skip <bpt id="10">&lt;strong&gt;</bpt>Subscription name<ept id="10">&lt;/strong&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="157" xml:space="preserve">
            <source>Select the <bpt id="2">&lt;strong&gt;</bpt>Send Message<ept id="2">&lt;/strong&gt;</ept> action and set the <bpt id="4">&lt;strong&gt;</bpt>Message<ept id="4">&lt;/strong&gt;</ept> field for the action to <bpt id="6">&lt;em&gt;</bpt>actions('transformservice').outputs.OutputXml<ept id="6">&lt;/em&gt;</ept></source>
            <target state="new">Select the <bpt id="2">&lt;strong&gt;</bpt>Send Message<ept id="2">&lt;/strong&gt;</ept> action and set the <bpt id="4">&lt;strong&gt;</bpt>Message<ept id="4">&lt;/strong&gt;</ept> field for the action to <bpt id="6">&lt;em&gt;</bpt>actions('transformservice').outputs.OutputXml<ept id="6">&lt;/em&gt;</ept></target>
          </trans-unit>
          <trans-unit id="158" xml:space="preserve">
            <source><bpt id="1">&lt;linkText&gt;</bpt>Service Bus<ept id="1">&lt;/linkText&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;linkText&gt;</bpt>Service Bus<ept id="1">&lt;/linkText&gt;</ept></target>
          </trans-unit>
          <trans-unit id="159" xml:space="preserve">
            <source>Send HTTP Response</source>
            <target state="new">Send HTTP Response</target>
          </trans-unit>
          <trans-unit id="160" xml:space="preserve">
            <source>Once pipeline processing is done, send back an HTTP response for both success and failure with the following steps:</source>
            <target state="new">Once pipeline processing is done, send back an HTTP response for both success and failure with the following steps:</target>
          </trans-unit>
          <trans-unit id="161" xml:space="preserve">
            <source>Add an <bpt id="2">&lt;strong&gt;</bpt>HTTP Listener<ept id="2">&lt;/strong&gt;</ept> from the gallery and select the <bpt id="4">&lt;strong&gt;</bpt>Send HTTP Response<ept id="4">&lt;/strong&gt;</ept> action.</source>
            <target state="new">Add an <bpt id="2">&lt;strong&gt;</bpt>HTTP Listener<ept id="2">&lt;/strong&gt;</ept> from the gallery and select the <bpt id="4">&lt;strong&gt;</bpt>Send HTTP Response<ept id="4">&lt;/strong&gt;</ept> action.</target>
          </trans-unit>
          <trans-unit id="162" xml:space="preserve">
            <source>Set <bpt id="2">&lt;strong&gt;</bpt>Response Content<ept id="2">&lt;/strong&gt;</ept> to <bpt id="4">&lt;em&gt;</bpt>Pipeline processing completed<ept id="4">&lt;/em&gt;</ept>, <bpt id="6">&lt;strong&gt;</bpt>Response Status Code<ept id="6">&lt;/strong&gt;</ept> to <bpt id="8">&lt;em&gt;</bpt>200<ept id="8">&lt;/em&gt;</ept> to indicate HTTP 200 OK, and <bpt id="10">&lt;strong&gt;</bpt>Condition<ept id="10">&lt;/strong&gt;</ept> to the expression <bpt id="12">&lt;code&gt;</bpt>@equals(actions('servicebusconnector').status,'Succeeded')<ept id="12">&lt;/code&gt;</ept></source>
            <target state="new">Set <bpt id="2">&lt;strong&gt;</bpt>Response Content<ept id="2">&lt;/strong&gt;</ept> to <bpt id="4">&lt;em&gt;</bpt>Pipeline processing completed<ept id="4">&lt;/em&gt;</ept>, <bpt id="6">&lt;strong&gt;</bpt>Response Status Code<ept id="6">&lt;/strong&gt;</ept> to <bpt id="8">&lt;em&gt;</bpt>200<ept id="8">&lt;/em&gt;</ept> to indicate HTTP 200 OK, and <bpt id="10">&lt;strong&gt;</bpt>Condition<ept id="10">&lt;/strong&gt;</ept> to the expression <bpt id="12">&lt;code&gt;</bpt>@equals(actions('servicebusconnector').status,'Succeeded')<ept id="12">&lt;/code&gt;</ept></target>
          </trans-unit>
          <trans-unit id="163" xml:space="preserve">
            <source>Repeat the above steps to send an HTTP response on failure as well.</source>
            <target state="new">Repeat the above steps to send an HTTP response on failure as well.</target>
          </trans-unit>
          <trans-unit id="164" xml:space="preserve">
            <source>Change <bpt id="2">&lt;strong&gt;</bpt>Condition<ept id="2">&lt;/strong&gt;</ept> to <bpt id="4">&lt;code&gt;</bpt>@not(equals(actions('servicebusconnector').status,'Succeeded')).<ept id="4">&lt;/code&gt;</ept></source>
            <target state="new">Change <bpt id="2">&lt;strong&gt;</bpt>Condition<ept id="2">&lt;/strong&gt;</ept> to <bpt id="4">&lt;code&gt;</bpt>@not(equals(actions('servicebusconnector').status,'Succeeded')).<ept id="4">&lt;/code&gt;</ept></target>
          </trans-unit>
          <trans-unit id="165" xml:space="preserve">
            <source>Completion</source>
            <target state="new">Completion</target>
          </trans-unit>
          <trans-unit id="166" xml:space="preserve">
            <source>Every time someone sends a message to the HTTP endpoint, it triggers the app and executes the actions you just created.</source>
            <target state="new">Every time someone sends a message to the HTTP endpoint, it triggers the app and executes the actions you just created.</target>
          </trans-unit>
          <trans-unit id="167" xml:space="preserve">
            <source>To manage any such logic apps you create, click <bpt id="2">&lt;strong&gt;</bpt>Browse<ept id="2">&lt;/strong&gt;</ept> in the Azure Management Portal and click <bpt id="4">&lt;strong&gt;</bpt>Logic Apps<ept id="4">&lt;/strong&gt;</ept>.</source>
            <target state="new">To manage any such logic apps you create, click <bpt id="2">&lt;strong&gt;</bpt>Browse<ept id="2">&lt;/strong&gt;</ept> in the Azure Management Portal and click <bpt id="4">&lt;strong&gt;</bpt>Logic Apps<ept id="4">&lt;/strong&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="168" xml:space="preserve">
            <source>Click on your app to see more information.</source>
            <target state="new">Click on your app to see more information.</target>
          </trans-unit>
          <trans-unit id="169" xml:space="preserve">
            <source>test</source>
            <target state="new">test</target>
          </trans-unit>
        </group>
      </group>
    </body>
  </file>
</xliff>