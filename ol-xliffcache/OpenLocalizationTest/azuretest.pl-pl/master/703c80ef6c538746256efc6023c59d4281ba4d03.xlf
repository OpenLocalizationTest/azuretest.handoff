<?xml version="1.0" encoding="utf-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" source-language="en-us" target-language="pl-pl" original="2/22/2016 7:17:36 AM" tool-id="MarkdownTransformer" product-name="N/A" product-version="N/A" build-num="1">
    <header>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">703c80ef6c538746256efc6023c59d4281ba4d03</xliffext:olfilehash>
      <tool tool-id="MarkdownTransformer" tool-name="MarkdownToXliff" tool-version="1.0" tool-company="Microsoft" />
    </header>
    <body>
      <group extype="content">
        <group id="101">
          <trans-unit id="101" xml:space="preserve">
            <source>Access Hadoop YARN application logs programmatically | Microsoft Azure</source>
            <target state="new">Access Hadoop YARN application logs programmatically | Microsoft Azure</target>
          </trans-unit>
          <trans-unit id="102" xml:space="preserve">
            <source>Access application logs programmatically on a Hadoop cluster in HDInsight.</source>
            <target state="new">Access application logs programmatically on a Hadoop cluster in HDInsight.</target>
          </trans-unit>
          <trans-unit id="103" xml:space="preserve">
            <source>Access YARN application logs on Hadoop in HDInsight programmatically</source>
            <target state="new">Access YARN application logs on Hadoop in HDInsight programmatically</target>
          </trans-unit>
          <trans-unit id="104" xml:space="preserve">
            <source>This topic explains how to programmatically enumerate the YARN (Yet Another Resource Negotiator) applications that have finished on a Hadoop cluster in Azure HDInsight, and how to programmatically access the application logs without having to connect to your clusters by using Remote Desktop Protocol (RDP).</source>
            <target state="new">This topic explains how to programmatically enumerate the YARN (Yet Another Resource Negotiator) applications that have finished on a Hadoop cluster in Azure HDInsight, and how to programmatically access the application logs without having to connect to your clusters by using Remote Desktop Protocol (RDP).</target>
          </trans-unit>
          <trans-unit id="105" xml:space="preserve">
            <source>Specifically, a new component and a new API have been added:</source>
            <target state="new">Specifically, a new component and a new API have been added:</target>
          </trans-unit>
          <trans-unit id="106" xml:space="preserve">
            <source>The generic application history server on HDInsight clusters is enabled.</source>
            <target state="new">The generic application history server on HDInsight clusters is enabled.</target>
          </trans-unit>
          <trans-unit id="107" xml:space="preserve">
            <source>It is a component within the YARN Timeline Server that handles the storage and retrieval of generic information about completed applications.</source>
            <target state="new">It is a component within the YARN Timeline Server that handles the storage and retrieval of generic information about completed applications.</target>
          </trans-unit>
          <trans-unit id="108" xml:space="preserve">
            <source>APIs in the Azure HDInsight .NET SDK are available to programmatically enumerate applications that have run on your clusters and to download the relevant application-specific or container-specific logs (in plain text) to help with debugging any application problems that occur.</source>
            <target state="new">APIs in the Azure HDInsight .NET SDK are available to programmatically enumerate applications that have run on your clusters and to download the relevant application-specific or container-specific logs (in plain text) to help with debugging any application problems that occur.</target>
          </trans-unit>
          <trans-unit id="109" xml:space="preserve">
            <source>Prerequisites</source>
            <target state="new">Prerequisites</target>
          </trans-unit>
          <trans-unit id="110" xml:space="preserve">
            <source>The Azure HDInsight SDK is required to use the code presented in this topic in a .NET Framework application.</source>
            <target state="new">The Azure HDInsight SDK is required to use the code presented in this topic in a .NET Framework application.</target>
          </trans-unit>
          <trans-unit id="111" xml:space="preserve">
            <source>The most recently published build of the SDK is available at <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>NuGet<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">The most recently published build of the SDK is available at <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>NuGet<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="112" xml:space="preserve">
            <source>To install the HDInsight SDK from a Visual Studio application, go the <bpt id="2">&lt;strong&gt;</bpt>Tools<ept id="2">&lt;/strong&gt;</ept> menu, click <bpt id="4">&lt;strong&gt;</bpt>Nuget Package Manager<ept id="4">&lt;/strong&gt;</ept>, and then click <bpt id="6">&lt;strong&gt;</bpt>Package Manager Console<ept id="6">&lt;/strong&gt;</ept>.</source>
            <target state="new">To install the HDInsight SDK from a Visual Studio application, go the <bpt id="2">&lt;strong&gt;</bpt>Tools<ept id="2">&lt;/strong&gt;</ept> menu, click <bpt id="4">&lt;strong&gt;</bpt>Nuget Package Manager<ept id="4">&lt;/strong&gt;</ept>, and then click <bpt id="6">&lt;strong&gt;</bpt>Package Manager Console<ept id="6">&lt;/strong&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="113" xml:space="preserve">
            <source>Run the following command in the console to install the packages:</source>
            <target state="new">Run the following command in the console to install the packages:</target>
          </trans-unit>
          <trans-unit id="114" xml:space="preserve">
            <source>This command adds .NET libraries for HDInsight and adds references to them to the current Visual Studio project.</source>
            <target state="new">This command adds .NET libraries for HDInsight and adds references to them to the current Visual Studio project.</target>
          </trans-unit>
          <trans-unit id="115" xml:space="preserve">
            <source><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>YARN Timeline Server</source>
            <target state="new"><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>YARN Timeline Server</target>
          </trans-unit>
          <trans-unit id="116" xml:space="preserve">
            <source>The <bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>YARN Timeline Server<bpt id="4">&lt;html&gt;</bpt><ept id="4">&lt;/html&gt;</ept> provides generic information on completed applications as well as framework-specific application information through two different interfaces.</source>
            <target state="new">The <bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>YARN Timeline Server<bpt id="4">&lt;html&gt;</bpt><ept id="4">&lt;/html&gt;</ept> provides generic information on completed applications as well as framework-specific application information through two different interfaces.</target>
          </trans-unit>
          <trans-unit id="117" xml:space="preserve">
            <source>Specifically:</source>
            <target state="new">Specifically:</target>
          </trans-unit>
          <trans-unit id="118" xml:space="preserve">
            <source>Storage and retrieval of generic application information on HDInsight clusters has been enabled with version 3.1.1.374 or higher.</source>
            <target state="new">Storage and retrieval of generic application information on HDInsight clusters has been enabled with version 3.1.1.374 or higher.</target>
          </trans-unit>
          <trans-unit id="119" xml:space="preserve">
            <source>The framework-specific application information component of the Timeline Server is not currently available on HDInsight clusters.</source>
            <target state="new">The framework-specific application information component of the Timeline Server is not currently available on HDInsight clusters.</target>
          </trans-unit>
          <trans-unit id="120" xml:space="preserve">
            <source>Generic information on applications includes the following sorts of data:</source>
            <target state="new">Generic information on applications includes the following sorts of data:</target>
          </trans-unit>
          <trans-unit id="121" xml:space="preserve">
            <source>The application ID, a unique identifier of an application</source>
            <target state="new">The application ID, a unique identifier of an application</target>
          </trans-unit>
          <trans-unit id="122" xml:space="preserve">
            <source>The user who started the application</source>
            <target state="new">The user who started the application</target>
          </trans-unit>
          <trans-unit id="123" xml:space="preserve">
            <source>Information on attempts made to complete the application</source>
            <target state="new">Information on attempts made to complete the application</target>
          </trans-unit>
          <trans-unit id="124" xml:space="preserve">
            <source>The containers used by any given application attempt</source>
            <target state="new">The containers used by any given application attempt</target>
          </trans-unit>
          <trans-unit id="125" xml:space="preserve">
            <source>On your HDInsight clusters, this information will be stored by Azure Resource Manager to a history store in the default container of your default Azure Storage account.</source>
            <target state="new">On your HDInsight clusters, this information will be stored by Azure Resource Manager to a history store in the default container of your default Azure Storage account.</target>
          </trans-unit>
          <trans-unit id="126" xml:space="preserve">
            <source>This generic data on completed applications can be retrieved through a REST API:</source>
            <target state="new">This generic data on completed applications can be retrieved through a REST API:</target>
          </trans-unit>
          <trans-unit id="127" xml:space="preserve">
            <source>We have added new APIs to the HDInsight .NET SDK to make it easy to retrieve this data programmatically.</source>
            <target state="new">We have added new APIs to the HDInsight .NET SDK to make it easy to retrieve this data programmatically.</target>
          </trans-unit>
          <trans-unit id="128" xml:space="preserve">
            <source>Note that the generic data can also be retrieved by running YARN command-line interface (CLI) commands directly on your cluster nodes (after connecting to the cluster by using RDP).</source>
            <target state="new">Note that the generic data can also be retrieved by running YARN command-line interface (CLI) commands directly on your cluster nodes (after connecting to the cluster by using RDP).</target>
          </trans-unit>
          <trans-unit id="129" xml:space="preserve">
            <source><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>YARN applications and logs</source>
            <target state="new"><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>YARN applications and logs</target>
          </trans-unit>
          <trans-unit id="130" xml:space="preserve">
            <source>YARN supports multiple programming models (MapReduce being one of them) by decoupling resource management from application scheduling/monitoring.</source>
            <target state="new">YARN supports multiple programming models (MapReduce being one of them) by decoupling resource management from application scheduling/monitoring.</target>
          </trans-unit>
          <trans-unit id="131" xml:space="preserve">
            <source>This is done through a global <bpt id="2">&lt;em&gt;</bpt>ResourceManager<ept id="2">&lt;/em&gt;</ept> (RM), per-worker-node <bpt id="4">&lt;em&gt;</bpt>NodeManagers<ept id="4">&lt;/em&gt;</ept> (NMs), and per-application <bpt id="6">&lt;em&gt;</bpt>ApplicationMasters<ept id="6">&lt;/em&gt;</ept> (AMs).</source>
            <target state="new">This is done through a global <bpt id="2">&lt;em&gt;</bpt>ResourceManager<ept id="2">&lt;/em&gt;</ept> (RM), per-worker-node <bpt id="4">&lt;em&gt;</bpt>NodeManagers<ept id="4">&lt;/em&gt;</ept> (NMs), and per-application <bpt id="6">&lt;em&gt;</bpt>ApplicationMasters<ept id="6">&lt;/em&gt;</ept> (AMs).</target>
          </trans-unit>
          <trans-unit id="132" xml:space="preserve">
            <source>The per-application AM negotiates resources (CPU, memory, disk, network) for running your application with the RM.</source>
            <target state="new">The per-application AM negotiates resources (CPU, memory, disk, network) for running your application with the RM.</target>
          </trans-unit>
          <trans-unit id="133" xml:space="preserve">
            <source>The RM works with NMs to grant these resources, which are granted as <bpt id="2">&lt;em&gt;</bpt>containers<ept id="2">&lt;/em&gt;</ept>.</source>
            <target state="new">The RM works with NMs to grant these resources, which are granted as <bpt id="2">&lt;em&gt;</bpt>containers<ept id="2">&lt;/em&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="134" xml:space="preserve">
            <source>The AM is responsible for tracking the progress of the containers assigned to it by the RM.</source>
            <target state="new">The AM is responsible for tracking the progress of the containers assigned to it by the RM.</target>
          </trans-unit>
          <trans-unit id="135" xml:space="preserve">
            <source>An application may require many containers depending on the nature of the application.</source>
            <target state="new">An application may require many containers depending on the nature of the application.</target>
          </trans-unit>
          <trans-unit id="136" xml:space="preserve">
            <source>Furthermore, each application may consist of multiple <bpt id="2">&lt;em&gt;</bpt>application attempts<ept id="2">&lt;/em&gt;</ept> in order to finish in the presence of crashes or due to the loss of communication between an AM and an RM.</source>
            <target state="new">Furthermore, each application may consist of multiple <bpt id="2">&lt;em&gt;</bpt>application attempts<ept id="2">&lt;/em&gt;</ept> in order to finish in the presence of crashes or due to the loss of communication between an AM and an RM.</target>
          </trans-unit>
          <trans-unit id="137" xml:space="preserve">
            <source>Hence, containers are granted to a specific attempt of an application.</source>
            <target state="new">Hence, containers are granted to a specific attempt of an application.</target>
          </trans-unit>
          <trans-unit id="138" xml:space="preserve">
            <source>In a sense, a container provides the context for basic unit of work performed by a YARN application, and all work that is done within the context of a container is performed on the single worker node on which the container was allocated.</source>
            <target state="new">In a sense, a container provides the context for basic unit of work performed by a YARN application, and all work that is done within the context of a container is performed on the single worker node on which the container was allocated.</target>
          </trans-unit>
          <trans-unit id="139" xml:space="preserve">
            <source>See <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>YARN Concepts[yarn-concepts]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> for further reference.</source>
            <target state="new">See <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>YARN Concepts[yarn-concepts]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> for further reference.</target>
          </trans-unit>
          <trans-unit id="140" xml:space="preserve">
            <source>Application logs (and the associated container logs) are critical in debugging problematic Hadoop applications.</source>
            <target state="new">Application logs (and the associated container logs) are critical in debugging problematic Hadoop applications.</target>
          </trans-unit>
          <trans-unit id="141" xml:space="preserve">
            <source>YARN provides a nice framework for collecting, aggregating, and storing application logs with the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Log Aggregation[log-aggregation]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> feature.</source>
            <target state="new">YARN provides a nice framework for collecting, aggregating, and storing application logs with the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Log Aggregation[log-aggregation]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> feature.</target>
          </trans-unit>
          <trans-unit id="142" xml:space="preserve">
            <source>The Log Aggregation feature makes accessing application logs more deterministic, as it aggregates logs across all containers on a worker node and stores them as one aggregated log file per worker node on the default file system after an application finishes.</source>
            <target state="new">The Log Aggregation feature makes accessing application logs more deterministic, as it aggregates logs across all containers on a worker node and stores them as one aggregated log file per worker node on the default file system after an application finishes.</target>
          </trans-unit>
          <trans-unit id="143" xml:space="preserve">
            <source>Your application may use hundreds or thousands of containers, but logs for all containers run on a single worker node will always be aggregated to a single file, resulting in one log file per worker node used by your application.</source>
            <target state="new">Your application may use hundreds or thousands of containers, but logs for all containers run on a single worker node will always be aggregated to a single file, resulting in one log file per worker node used by your application.</target>
          </trans-unit>
          <trans-unit id="144" xml:space="preserve">
            <source>Log Aggregation is enabled by default on HDInsight clusters (version 3.0 and above), and aggregated logs can be found in the default container of your cluster at the following location:</source>
            <target state="new">Log Aggregation is enabled by default on HDInsight clusters (version 3.0 and above), and aggregated logs can be found in the default container of your cluster at the following location:</target>
          </trans-unit>
          <trans-unit id="145" xml:space="preserve">
            <source>In that location, <bpt id="2">&lt;em&gt;</bpt>user<ept id="2">&lt;/em&gt;</ept> is the name of the user who started the application, and <bpt id="4">&lt;em&gt;</bpt>applicationId<ept id="4">&lt;/em&gt;</ept> is the unique identifier of an application as assigned by the YARN RM.</source>
            <target state="new">In that location, <bpt id="2">&lt;em&gt;</bpt>user<ept id="2">&lt;/em&gt;</ept> is the name of the user who started the application, and <bpt id="4">&lt;em&gt;</bpt>applicationId<ept id="4">&lt;/em&gt;</ept> is the unique identifier of an application as assigned by the YARN RM.</target>
          </trans-unit>
          <trans-unit id="146" xml:space="preserve">
            <source>The aggregated logs are not directly readable, as they are written in a <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>TFile[t-file]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>, <bpt id="4CapsExtId1">&lt;link&gt;</bpt><bpt id="4CapsExtId2">&lt;linkText&gt;</bpt>binary format[binary-format]<ept id="4CapsExtId2">&lt;/linkText&gt;</ept><bpt id="4CapsExtId3">&lt;title&gt;</bpt><ept id="4CapsExtId3">&lt;/title&gt;</ept><ept id="4CapsExtId1">&lt;/link&gt;</ept> indexed by container.</source>
            <target state="new">The aggregated logs are not directly readable, as they are written in a <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>TFile[t-file]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>, <bpt id="4CapsExtId1">&lt;link&gt;</bpt><bpt id="4CapsExtId2">&lt;linkText&gt;</bpt>binary format[binary-format]<ept id="4CapsExtId2">&lt;/linkText&gt;</ept><bpt id="4CapsExtId3">&lt;title&gt;</bpt><ept id="4CapsExtId3">&lt;/title&gt;</ept><ept id="4CapsExtId1">&lt;/link&gt;</ept> indexed by container.</target>
          </trans-unit>
          <trans-unit id="147" xml:space="preserve">
            <source>YARN provides CLI tools to dump these logs as plain text for applications or containers of interest.</source>
            <target state="new">YARN provides CLI tools to dump these logs as plain text for applications or containers of interest.</target>
          </trans-unit>
          <trans-unit id="148" xml:space="preserve">
            <source>You can view these logs as plain text by running one of the following YARN commands directly on the cluster nodes (after connecting to it through RDP):</source>
            <target state="new">You can view these logs as plain text by running one of the following YARN commands directly on the cluster nodes (after connecting to it through RDP):</target>
          </trans-unit>
          <trans-unit id="149" xml:space="preserve">
            <source>The next section talks about how you can access application-specific or container-specific logs programmatically, without having to use RDP to connect to your HDInsight clusters.</source>
            <target state="new">The next section talks about how you can access application-specific or container-specific logs programmatically, without having to use RDP to connect to your HDInsight clusters.</target>
          </trans-unit>
          <trans-unit id="150" xml:space="preserve">
            <source><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>Enumerating applications and downloading logs programmatically</source>
            <target state="new"><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>Enumerating applications and downloading logs programmatically</target>
          </trans-unit>
          <trans-unit id="151" xml:space="preserve">
            <source>To use the following code samples, you must satisfy the prerequisites outlined above by downloading the latest version of the HDInsight .NET SDK.</source>
            <target state="new">To use the following code samples, you must satisfy the prerequisites outlined above by downloading the latest version of the HDInsight .NET SDK.</target>
          </trans-unit>
          <trans-unit id="152" xml:space="preserve">
            <source>See the instructions provided there.</source>
            <target state="new">See the instructions provided there.</target>
          </trans-unit>
          <trans-unit id="153" xml:space="preserve">
            <source>The code below illustrates how to use the new APIs to enumerate applications and download the logs for completed applications.</source>
            <target state="new">The code below illustrates how to use the new APIs to enumerate applications and download the logs for completed applications.</target>
          </trans-unit>
          <trans-unit id="154" xml:space="preserve">
            <source>The APIs below will work only against "Running" Hadoop clusters with version 3.1.1.374 or greater.</source>
            <target state="new">The APIs below will work only against "Running" Hadoop clusters with version 3.1.1.374 or greater.</target>
          </trans-unit>
          <trans-unit id="155" xml:space="preserve">
            <source>Add the following directives:</source>
            <target state="new">Add the following directives:</target>
          </trans-unit>
          <trans-unit id="156" xml:space="preserve">
            <source>These reference the newly defined APIs in the code below.</source>
            <target state="new">These reference the newly defined APIs in the code below.</target>
          </trans-unit>
          <trans-unit id="157" xml:space="preserve">
            <source>The following code snippet creates an Application History client against a "Running" cluster in your subscription:</source>
            <target state="new">The following code snippet creates an Application History client against a "Running" cluster in your subscription:</target>
          </trans-unit>
          <trans-unit id="158" xml:space="preserve">
            <source>You can now use the Application History client to list completed applications, filter applications based on your criteria, and download relevant application logs.</source>
            <target state="new">You can now use the Application History client to list completed applications, filter applications based on your criteria, and download relevant application logs.</target>
          </trans-unit>
          <trans-unit id="159" xml:space="preserve">
            <source>The following code snippet shows how this is done programmatically:</source>
            <target state="new">The following code snippet shows how this is done programmatically:</target>
          </trans-unit>
          <trans-unit id="160" xml:space="preserve">
            <source>The above code lists/finds applications of interest by using the Application History client, and then downloads logs for those applications to a local folder.</source>
            <target state="new">The above code lists/finds applications of interest by using the Application History client, and then downloads logs for those applications to a local folder.</target>
          </trans-unit>
          <trans-unit id="161" xml:space="preserve">
            <source>Alternatively, the code snippet below downloads logs for an application whose application ID is known.</source>
            <target state="new">Alternatively, the code snippet below downloads logs for an application whose application ID is known.</target>
          </trans-unit>
          <trans-unit id="162" xml:space="preserve">
            <source>The application ID is a globally unique identifier of an application, as assigned to it by the RM.</source>
            <target state="new">The application ID is a globally unique identifier of an application, as assigned to it by the RM.</target>
          </trans-unit>
          <trans-unit id="163" xml:space="preserve">
            <source>It is constructed by using the start time of the RM, along with a monotonically increasing counter for applications submitted to it.</source>
            <target state="new">It is constructed by using the start time of the RM, along with a monotonically increasing counter for applications submitted to it.</target>
          </trans-unit>
          <trans-unit id="164" xml:space="preserve">
            <source>The application ID is of the form "application\<bpt id="2">&lt;em&gt;</bpt>&lt;RM-start-time&gt;\<ept id="2">&lt;/em&gt;</ept>&lt;Counter&gt;".</source>
            <target state="new">The application ID is of the form "application\<bpt id="2">&lt;em&gt;</bpt>&lt;RM-start-time&gt;\<ept id="2">&lt;/em&gt;</ept>&lt;Counter&gt;".</target>
          </trans-unit>
          <trans-unit id="165" xml:space="preserve">
            <source>Please note that the application ID and job ID are distinct.</source>
            <target state="new">Please note that the application ID and job ID are distinct.</target>
          </trans-unit>
          <trans-unit id="166" xml:space="preserve">
            <source>The job ID is a concept specific to the MapReduce framework, whereas the application ID is a framework-agnostic YARN concept.</source>
            <target state="new">The job ID is a concept specific to the MapReduce framework, whereas the application ID is a framework-agnostic YARN concept.</target>
          </trans-unit>
          <trans-unit id="167" xml:space="preserve">
            <source>In YARN, a job ID identifies a specific MapReduce job, as handled by the AM of a MapReduce application submitted to the RM.</source>
            <target state="new">In YARN, a job ID identifies a specific MapReduce job, as handled by the AM of a MapReduce application submitted to the RM.</target>
          </trans-unit>
          <trans-unit id="168" xml:space="preserve">
            <source>If needed, you can also download logs for each container (or any specific container) used by an application, as shown below.</source>
            <target state="new">If needed, you can also download logs for each container (or any specific container) used by an application, as shown below.</target>
          </trans-unit>
          <trans-unit id="169" xml:space="preserve">
            <source>test</source>
            <target state="new">test</target>
          </trans-unit>
        </group>
      </group>
    </body>
  </file>
</xliff>