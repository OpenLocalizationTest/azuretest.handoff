<?xml version="1.0" encoding="utf-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" source-language="en-us" target-language="zh-cn" original="2/18/2016 5:25:48 PM" tool-id="MarkdownTransformer" product-name="N/A" product-version="N/A" build-num="1">
    <header>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">df06347a769c6c3c03c3856772a845df685effbd</xliffext:olfilehash>
      <tool tool-id="MarkdownTransformer" tool-name="MarkdownToXliff" tool-version="1.0" tool-company="Microsoft" />
    </header>
    <body>
      <group extype="content">
        <group id="101">
          <trans-unit id="101" xml:space="preserve">
            <source>How to use Service Bus topics (Java) | Microsoft Azure</source>
            <target state="new">How to use Service Bus topics (Java) | Microsoft Azure</target>
          </trans-unit>
          <trans-unit id="102" xml:space="preserve">
            <source>Learn how to use Service Bus topics and subscriptions in Azure. Code samples are written for Java applications.</source>
            <target state="new">Learn how to use Service Bus topics and subscriptions in Azure. Code samples are written for Java applications.</target>
          </trans-unit>
          <trans-unit id="103" xml:space="preserve">
            <source>How to use Service Bus topics/subscriptions</source>
            <target state="new">How to use Service Bus topics/subscriptions</target>
          </trans-unit>
          <trans-unit id="104" xml:space="preserve">
            <source>This guide describes how to use Service Bus topics and</source>
            <target state="new">This guide describes how to use Service Bus topics and</target>
          </trans-unit>
          <trans-unit id="105" xml:space="preserve">
            <source>subscriptions.</source>
            <target state="new">subscriptions.</target>
          </trans-unit>
          <trans-unit id="106" xml:space="preserve">
            <source>The samples are written in Java and use the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Azure SDK for Java[]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">The samples are written in Java and use the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Azure SDK for Java[]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="107" xml:space="preserve">
            <source>The scenarios covered include **creating topics</source>
            <target state="new">The scenarios covered include **creating topics</target>
          </trans-unit>
          <trans-unit id="108" xml:space="preserve">
            <source>and subscriptions<bpt id="2">&lt;strong&gt;</bpt>, **creating subscription filters<ept id="2">&lt;/strong&gt;</ept>, **sending</source>
            <target state="new">and subscriptions<bpt id="2">&lt;strong&gt;</bpt>, **creating subscription filters<ept id="2">&lt;/strong&gt;</ept>, **sending</target>
          </trans-unit>
          <trans-unit id="109" xml:space="preserve">
            <source>messages to a topic<bpt id="2">&lt;strong&gt;</bpt>, **receiving messages from a subscription<ept id="2">&lt;/strong&gt;</ept>, and</source>
            <target state="new">messages to a topic<bpt id="2">&lt;strong&gt;</bpt>, **receiving messages from a subscription<ept id="2">&lt;/strong&gt;</ept>, and</target>
          </trans-unit>
          <trans-unit id="110" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>deleting topics and subscriptions<ept id="1">&lt;/strong&gt;</ept>.</source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>deleting topics and subscriptions<ept id="1">&lt;/strong&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="111" xml:space="preserve">
            <source><ph id="1">&lt;token href="../../includes/service-bus-java-how-to-create-topic.md"/&gt;</ph></source>
            <target state="new"><ph id="1">&lt;token href="../../includes/service-bus-java-how-to-create-topic.md"/&gt;</ph></target>
          </trans-unit>
          <trans-unit id="112" xml:space="preserve">
            <source>Configure your application to use Service Bus</source>
            <target state="new">Configure your application to use Service Bus</target>
          </trans-unit>
          <trans-unit id="113" xml:space="preserve">
            <source>Make sure you have installed the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Azure SDK for Java[]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> before building this sample.</source>
            <target state="new">Make sure you have installed the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Azure SDK for Java[]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> before building this sample.</target>
          </trans-unit>
          <trans-unit id="114" xml:space="preserve">
            <source>If you are using Eclipse, you can install the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Azure Toolkit for Eclipse[]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> that includes the Azure SDK for Java.</source>
            <target state="new">If you are using Eclipse, you can install the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Azure Toolkit for Eclipse[]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> that includes the Azure SDK for Java.</target>
          </trans-unit>
          <trans-unit id="115" xml:space="preserve">
            <source>You can then add the <bpt id="2">&lt;strong&gt;</bpt>Microsoft Azure Libraries for Java<ept id="2">&lt;/strong&gt;</ept> to your project:</source>
            <target state="new">You can then add the <bpt id="2">&lt;strong&gt;</bpt>Microsoft Azure Libraries for Java<ept id="2">&lt;/strong&gt;</ept> to your project:</target>
          </trans-unit>
          <trans-unit id="116" xml:space="preserve">
            <source><bpt id="1">&lt;linkText&gt;</bpt><ept id="1">&lt;/linkText&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;linkText&gt;</bpt><ept id="1">&lt;/linkText&gt;</ept></target>
          </trans-unit>
          <trans-unit id="117" xml:space="preserve">
            <source>Add the following import statements to the top of the Java file:</source>
            <target state="new">Add the following import statements to the top of the Java file:</target>
          </trans-unit>
          <trans-unit id="118" xml:space="preserve">
            <source>Add the Azure Libraries for Java to your build path and include it in your project deployment assembly.</source>
            <target state="new">Add the Azure Libraries for Java to your build path and include it in your project deployment assembly.</target>
          </trans-unit>
          <trans-unit id="119" xml:space="preserve">
            <source>How to create a topic</source>
            <target state="new">How to create a topic</target>
          </trans-unit>
          <trans-unit id="120" xml:space="preserve">
            <source>Management operations for Service Bus topics can be performed via the</source>
            <target state="new">Management operations for Service Bus topics can be performed via the</target>
          </trans-unit>
          <trans-unit id="121" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>ServiceBusContract<ept id="1">&lt;/strong&gt;</ept> class.</source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>ServiceBusContract<ept id="1">&lt;/strong&gt;</ept> class.</target>
          </trans-unit>
          <trans-unit id="122" xml:space="preserve">
            <source>A <bpt id="2">&lt;strong&gt;</bpt>ServiceBusContract<ept id="2">&lt;/strong&gt;</ept> object is</source>
            <target state="new">A <bpt id="2">&lt;strong&gt;</bpt>ServiceBusContract<ept id="2">&lt;/strong&gt;</ept> object is</target>
          </trans-unit>
          <trans-unit id="123" xml:space="preserve">
            <source>constructed with an appropriate configuration that encapsulates the</source>
            <target state="new">constructed with an appropriate configuration that encapsulates the</target>
          </trans-unit>
          <trans-unit id="124" xml:space="preserve">
            <source>SAS token with permissions to manage it, and the <bpt id="2">&lt;strong&gt;</bpt>ServiceBusContract<ept id="2">&lt;/strong&gt;</ept> class is</source>
            <target state="new">SAS token with permissions to manage it, and the <bpt id="2">&lt;strong&gt;</bpt>ServiceBusContract<ept id="2">&lt;/strong&gt;</ept> class is</target>
          </trans-unit>
          <trans-unit id="125" xml:space="preserve">
            <source>the sole point of communication with Azure.</source>
            <target state="new">the sole point of communication with Azure.</target>
          </trans-unit>
          <trans-unit id="126" xml:space="preserve">
            <source>The <bpt id="2">&lt;strong&gt;</bpt>ServiceBusService<ept id="2">&lt;/strong&gt;</ept> class provides methods to create, enumerate,</source>
            <target state="new">The <bpt id="2">&lt;strong&gt;</bpt>ServiceBusService<ept id="2">&lt;/strong&gt;</ept> class provides methods to create, enumerate,</target>
          </trans-unit>
          <trans-unit id="127" xml:space="preserve">
            <source>and delete topics.</source>
            <target state="new">and delete topics.</target>
          </trans-unit>
          <trans-unit id="128" xml:space="preserve">
            <source>The example below shows how a <bpt id="2">&lt;strong&gt;</bpt>ServiceBusService<ept id="2">&lt;/strong&gt;</ept> object</source>
            <target state="new">The example below shows how a <bpt id="2">&lt;strong&gt;</bpt>ServiceBusService<ept id="2">&lt;/strong&gt;</ept> object</target>
          </trans-unit>
          <trans-unit id="129" xml:space="preserve">
            <source>can be used to create a topic named "TestTopic", with a namespace named "HowToSample":</source>
            <target state="new">can be used to create a topic named "TestTopic", with a namespace named "HowToSample":</target>
          </trans-unit>
          <trans-unit id="130" xml:space="preserve">
            <source>There are methods on <bpt id="2">&lt;strong&gt;</bpt>TopicInfo<ept id="2">&lt;/strong&gt;</ept> that enable properties of the topic to</source>
            <target state="new">There are methods on <bpt id="2">&lt;strong&gt;</bpt>TopicInfo<ept id="2">&lt;/strong&gt;</ept> that enable properties of the topic to</target>
          </trans-unit>
          <trans-unit id="131" xml:space="preserve">
            <source>be tuned (for example: to set the default "time-to-live" value to be</source>
            <target state="new">be tuned (for example: to set the default "time-to-live" value to be</target>
          </trans-unit>
          <trans-unit id="132" xml:space="preserve">
            <source>applied to messages sent to the topic).</source>
            <target state="new">applied to messages sent to the topic).</target>
          </trans-unit>
          <trans-unit id="133" xml:space="preserve">
            <source>The following example shows how</source>
            <target state="new">The following example shows how</target>
          </trans-unit>
          <trans-unit id="134" xml:space="preserve">
            <source>to create a topic named "TestTopic" with a maximum size of 5GB:</source>
            <target state="new">to create a topic named "TestTopic" with a maximum size of 5GB:</target>
          </trans-unit>
          <trans-unit id="135" xml:space="preserve">
            <source>Note that you can use the <bpt id="2">&lt;strong&gt;</bpt>listTopics<ept id="2">&lt;/strong&gt;</ept> method on</source>
            <target state="new">Note that you can use the <bpt id="2">&lt;strong&gt;</bpt>listTopics<ept id="2">&lt;/strong&gt;</ept> method on</target>
          </trans-unit>
          <trans-unit id="136" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>ServiceBusContract<ept id="1">&lt;/strong&gt;</ept> objects to check if a topic with a specified name</source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>ServiceBusContract<ept id="1">&lt;/strong&gt;</ept> objects to check if a topic with a specified name</target>
          </trans-unit>
          <trans-unit id="137" xml:space="preserve">
            <source>already exists within a service namespace.</source>
            <target state="new">already exists within a service namespace.</target>
          </trans-unit>
          <trans-unit id="138" xml:space="preserve">
            <source>How to create subscriptions</source>
            <target state="new">How to create subscriptions</target>
          </trans-unit>
          <trans-unit id="139" xml:space="preserve">
            <source>Topic subscriptions are also created with the <bpt id="2">&lt;strong&gt;</bpt>ServiceBusService<ept id="2">&lt;/strong&gt;</ept></source>
            <target state="new">Topic subscriptions are also created with the <bpt id="2">&lt;strong&gt;</bpt>ServiceBusService<ept id="2">&lt;/strong&gt;</ept></target>
          </trans-unit>
          <trans-unit id="140" xml:space="preserve">
            <source>class.</source>
            <target state="new">class.</target>
          </trans-unit>
          <trans-unit id="141" xml:space="preserve">
            <source>Subscriptions are named and can have an optional filter that</source>
            <target state="new">Subscriptions are named and can have an optional filter that</target>
          </trans-unit>
          <trans-unit id="142" xml:space="preserve">
            <source>restricts the set of messages passed to the subscription's virtual</source>
            <target state="new">restricts the set of messages passed to the subscription's virtual</target>
          </trans-unit>
          <trans-unit id="143" xml:space="preserve">
            <source>queue.</source>
            <target state="new">queue.</target>
          </trans-unit>
          <trans-unit id="144" xml:space="preserve">
            <source>Create a subscription with the default (MatchAll) filter</source>
            <target state="new">Create a subscription with the default (MatchAll) filter</target>
          </trans-unit>
          <trans-unit id="145" xml:space="preserve">
            <source>The <bpt id="2">&lt;strong&gt;</bpt>MatchAll<ept id="2">&lt;/strong&gt;</ept> filter is the default filter that is used if no filter</source>
            <target state="new">The <bpt id="2">&lt;strong&gt;</bpt>MatchAll<ept id="2">&lt;/strong&gt;</ept> filter is the default filter that is used if no filter</target>
          </trans-unit>
          <trans-unit id="146" xml:space="preserve">
            <source>is specified when a new subscription is created.</source>
            <target state="new">is specified when a new subscription is created.</target>
          </trans-unit>
          <trans-unit id="147" xml:space="preserve">
            <source>When the <bpt id="2">&lt;strong&gt;</bpt>MatchAll<ept id="2">&lt;/strong&gt;</ept></source>
            <target state="new">When the <bpt id="2">&lt;strong&gt;</bpt>MatchAll<ept id="2">&lt;/strong&gt;</ept></target>
          </trans-unit>
          <trans-unit id="148" xml:space="preserve">
            <source>filter is used, all messages published to the topic are placed in the</source>
            <target state="new">filter is used, all messages published to the topic are placed in the</target>
          </trans-unit>
          <trans-unit id="149" xml:space="preserve">
            <source>subscription's virtual queue.</source>
            <target state="new">subscription's virtual queue.</target>
          </trans-unit>
          <trans-unit id="150" xml:space="preserve">
            <source>The following example creates a</source>
            <target state="new">The following example creates a</target>
          </trans-unit>
          <trans-unit id="151" xml:space="preserve">
            <source>subscription named "AllMessages" and uses the default <bpt id="2">&lt;strong&gt;</bpt>MatchAll<ept id="2">&lt;/strong&gt;</ept></source>
            <target state="new">subscription named "AllMessages" and uses the default <bpt id="2">&lt;strong&gt;</bpt>MatchAll<ept id="2">&lt;/strong&gt;</ept></target>
          </trans-unit>
          <trans-unit id="152" xml:space="preserve">
            <source>filter.</source>
            <target state="new">filter.</target>
          </trans-unit>
          <trans-unit id="153" xml:space="preserve">
            <source>Create subscriptions with filters</source>
            <target state="new">Create subscriptions with filters</target>
          </trans-unit>
          <trans-unit id="154" xml:space="preserve">
            <source>You can also setup filters that allow you to scope which messages sent</source>
            <target state="new">You can also setup filters that allow you to scope which messages sent</target>
          </trans-unit>
          <trans-unit id="155" xml:space="preserve">
            <source>to a topic should show up within a specific topic subscription.</source>
            <target state="new">to a topic should show up within a specific topic subscription.</target>
          </trans-unit>
          <trans-unit id="156" xml:space="preserve">
            <source>The most flexible type of filter supported by subscriptions is the</source>
            <target state="new">The most flexible type of filter supported by subscriptions is the</target>
          </trans-unit>
          <trans-unit id="157" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>SqlFilter<ept id="1">&lt;/strong&gt;</ept>, which implements a subset of SQL92.</source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>SqlFilter<ept id="1">&lt;/strong&gt;</ept>, which implements a subset of SQL92.</target>
          </trans-unit>
          <trans-unit id="158" xml:space="preserve">
            <source>SQL filters operate</source>
            <target state="new">SQL filters operate</target>
          </trans-unit>
          <trans-unit id="159" xml:space="preserve">
            <source>on the properties of the messages that are published to the topic.</source>
            <target state="new">on the properties of the messages that are published to the topic.</target>
          </trans-unit>
          <trans-unit id="160" xml:space="preserve">
            <source>For</source>
            <target state="new">For</target>
          </trans-unit>
          <trans-unit id="161" xml:space="preserve">
            <source>more details about the expressions that can be used with a SQL filter,</source>
            <target state="new">more details about the expressions that can be used with a SQL filter,</target>
          </trans-unit>
          <trans-unit id="162" xml:space="preserve">
            <source>review the SqlFilter.SqlExpression syntax.</source>
            <target state="new">review the SqlFilter.SqlExpression syntax.</target>
          </trans-unit>
          <trans-unit id="163" xml:space="preserve">
            <source>The example below creates a subscription named "HighMessages" with a</source>
            <target state="new">The example below creates a subscription named "HighMessages" with a</target>
          </trans-unit>
          <trans-unit id="164" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>SqlFilter<ept id="1">&lt;/strong&gt;</ept> that only selects messages that have a custom</source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>SqlFilter<ept id="1">&lt;/strong&gt;</ept> that only selects messages that have a custom</target>
          </trans-unit>
          <trans-unit id="165" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>MessageNumber<ept id="1">&lt;/strong&gt;</ept> property greater than 3:</source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>MessageNumber<ept id="1">&lt;/strong&gt;</ept> property greater than 3:</target>
          </trans-unit>
          <trans-unit id="166" xml:space="preserve">
            <source>Similarly, the following example creates a subscription named</source>
            <target state="new">Similarly, the following example creates a subscription named</target>
          </trans-unit>
          <trans-unit id="167" xml:space="preserve">
            <source>"LowMessages" with</source>
            <target state="new">"LowMessages" with</target>
          </trans-unit>
          <trans-unit id="168" xml:space="preserve">
            <source>a SqlFilter that only selects messages that have a MessageNumber</source>
            <target state="new">a SqlFilter that only selects messages that have a MessageNumber</target>
          </trans-unit>
          <trans-unit id="169" xml:space="preserve">
            <source>property less</source>
            <target state="new">property less</target>
          </trans-unit>
          <trans-unit id="170" xml:space="preserve">
            <source>than or equal to 3:</source>
            <target state="new">than or equal to 3:</target>
          </trans-unit>
          <trans-unit id="171" xml:space="preserve">
            <source>When a message is now sent to the "TestTopic", it will always be</source>
            <target state="new">When a message is now sent to the "TestTopic", it will always be</target>
          </trans-unit>
          <trans-unit id="172" xml:space="preserve">
            <source>delivered to receivers subscribed to the "AllMessages" topic</source>
            <target state="new">delivered to receivers subscribed to the "AllMessages" topic</target>
          </trans-unit>
          <trans-unit id="173" xml:space="preserve">
            <source>subscription, and selectively delivered to receivers subscribed to the</source>
            <target state="new">subscription, and selectively delivered to receivers subscribed to the</target>
          </trans-unit>
          <trans-unit id="174" xml:space="preserve">
            <source>"HighMessages" and "LowMessages" topic subscriptions (depending upon the</source>
            <target state="new">"HighMessages" and "LowMessages" topic subscriptions (depending upon the</target>
          </trans-unit>
          <trans-unit id="175" xml:space="preserve">
            <source>message content).</source>
            <target state="new">message content).</target>
          </trans-unit>
          <trans-unit id="176" xml:space="preserve">
            <source>How to send messages to a topic</source>
            <target state="new">How to send messages to a topic</target>
          </trans-unit>
          <trans-unit id="177" xml:space="preserve">
            <source>To send a message to a Service Bus Topic, your application will obtain a</source>
            <target state="new">To send a message to a Service Bus Topic, your application will obtain a</target>
          </trans-unit>
          <trans-unit id="178" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>ServiceBusContract<ept id="1">&lt;/strong&gt;</ept> object.</source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>ServiceBusContract<ept id="1">&lt;/strong&gt;</ept> object.</target>
          </trans-unit>
          <trans-unit id="179" xml:space="preserve">
            <source>The below code demonstrates how to send a</source>
            <target state="new">The below code demonstrates how to send a</target>
          </trans-unit>
          <trans-unit id="180" xml:space="preserve">
            <source>message for the "TestTopic" topic we created above within our</source>
            <target state="new">message for the "TestTopic" topic we created above within our</target>
          </trans-unit>
          <trans-unit id="181" xml:space="preserve">
            <source>"HowToSample" service namespace:</source>
            <target state="new">"HowToSample" service namespace:</target>
          </trans-unit>
          <trans-unit id="182" xml:space="preserve">
            <source>Messages sent to Service Bus Topics are instances of the</source>
            <target state="new">Messages sent to Service Bus Topics are instances of the</target>
          </trans-unit>
          <trans-unit id="183" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>BrokeredMessage<ept id="1">&lt;/strong&gt;</ept> class.</source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>BrokeredMessage<ept id="1">&lt;/strong&gt;</ept> class.</target>
          </trans-unit>
          <trans-unit id="184" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>BrokeredMessage<ept id="1">&lt;/strong&gt;</ept> objects have a set of</source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>BrokeredMessage<ept id="1">&lt;/strong&gt;</ept> objects have a set of</target>
          </trans-unit>
          <trans-unit id="185" xml:space="preserve">
            <source>standard methods (such as <bpt id="2">&lt;strong&gt;</bpt>setLabel<ept id="2">&lt;/strong&gt;</ept> and <bpt id="4">&lt;strong&gt;</bpt>TimeToLive<ept id="4">&lt;/strong&gt;</ept>), a dictionary</source>
            <target state="new">standard methods (such as <bpt id="2">&lt;strong&gt;</bpt>setLabel<ept id="2">&lt;/strong&gt;</ept> and <bpt id="4">&lt;strong&gt;</bpt>TimeToLive<ept id="4">&lt;/strong&gt;</ept>), a dictionary</target>
          </trans-unit>
          <trans-unit id="186" xml:space="preserve">
            <source>that is used to hold custom application specific properties, and a body</source>
            <target state="new">that is used to hold custom application specific properties, and a body</target>
          </trans-unit>
          <trans-unit id="187" xml:space="preserve">
            <source>of arbitrary application data.</source>
            <target state="new">of arbitrary application data.</target>
          </trans-unit>
          <trans-unit id="188" xml:space="preserve">
            <source>An application can set the body of the</source>
            <target state="new">An application can set the body of the</target>
          </trans-unit>
          <trans-unit id="189" xml:space="preserve">
            <source>message by passing any serializable object into the constructor of the</source>
            <target state="new">message by passing any serializable object into the constructor of the</target>
          </trans-unit>
          <trans-unit id="190" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>BrokeredMessage<ept id="1">&lt;/strong&gt;</ept>, and the appropriate <bpt id="3">&lt;strong&gt;</bpt>DataContractSerializer<ept id="3">&lt;/strong&gt;</ept> will</source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>BrokeredMessage<ept id="1">&lt;/strong&gt;</ept>, and the appropriate <bpt id="3">&lt;strong&gt;</bpt>DataContractSerializer<ept id="3">&lt;/strong&gt;</ept> will</target>
          </trans-unit>
          <trans-unit id="191" xml:space="preserve">
            <source>then be used to serialize the object.</source>
            <target state="new">then be used to serialize the object.</target>
          </trans-unit>
          <trans-unit id="192" xml:space="preserve">
            <source>Alternatively, a</source>
            <target state="new">Alternatively, a</target>
          </trans-unit>
          <trans-unit id="193" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>java.io.InputStream<ept id="1">&lt;/strong&gt;</ept> can be provided.</source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>java.io.InputStream<ept id="1">&lt;/strong&gt;</ept> can be provided.</target>
          </trans-unit>
          <trans-unit id="194" xml:space="preserve">
            <source>The following example demonstrates how to send five test messages to the</source>
            <target state="new">The following example demonstrates how to send five test messages to the</target>
          </trans-unit>
          <trans-unit id="195" xml:space="preserve">
            <source>"TestTopic" <bpt id="2">&lt;strong&gt;</bpt>MessageSender<ept id="2">&lt;/strong&gt;</ept> we obtained in the code snippet above.</source>
            <target state="new">"TestTopic" <bpt id="2">&lt;strong&gt;</bpt>MessageSender<ept id="2">&lt;/strong&gt;</ept> we obtained in the code snippet above.</target>
          </trans-unit>
          <trans-unit id="196" xml:space="preserve">
            <source>Note how the <bpt id="2">&lt;strong&gt;</bpt>MessageNumber<ept id="2">&lt;/strong&gt;</ept> property value of each message varies on</source>
            <target state="new">Note how the <bpt id="2">&lt;strong&gt;</bpt>MessageNumber<ept id="2">&lt;/strong&gt;</ept> property value of each message varies on</target>
          </trans-unit>
          <trans-unit id="197" xml:space="preserve">
            <source>the iteration of the loop (this will determine which subscriptions</source>
            <target state="new">the iteration of the loop (this will determine which subscriptions</target>
          </trans-unit>
          <trans-unit id="198" xml:space="preserve">
            <source>receive it):</source>
            <target state="new">receive it):</target>
          </trans-unit>
          <trans-unit id="199" xml:space="preserve">
            <source>Service Bus topics support a maximum message size of 256 MB (the header,</source>
            <target state="new">Service Bus topics support a maximum message size of 256 MB (the header,</target>
          </trans-unit>
          <trans-unit id="200" xml:space="preserve">
            <source>which includes the standard and custom application properties, can have</source>
            <target state="new">which includes the standard and custom application properties, can have</target>
          </trans-unit>
          <trans-unit id="201" xml:space="preserve">
            <source>a maximum size of 64 MB).</source>
            <target state="new">a maximum size of 64 MB).</target>
          </trans-unit>
          <trans-unit id="202" xml:space="preserve">
            <source>There is no limit on the number of messages</source>
            <target state="new">There is no limit on the number of messages</target>
          </trans-unit>
          <trans-unit id="203" xml:space="preserve">
            <source>held in a topic but there is a cap on the total size of the messages</source>
            <target state="new">held in a topic but there is a cap on the total size of the messages</target>
          </trans-unit>
          <trans-unit id="204" xml:space="preserve">
            <source>held by a topic.</source>
            <target state="new">held by a topic.</target>
          </trans-unit>
          <trans-unit id="205" xml:space="preserve">
            <source>This topic size is defined at creation time, with an</source>
            <target state="new">This topic size is defined at creation time, with an</target>
          </trans-unit>
          <trans-unit id="206" xml:space="preserve">
            <source>upper limit of 5 GB.</source>
            <target state="new">upper limit of 5 GB.</target>
          </trans-unit>
          <trans-unit id="207" xml:space="preserve">
            <source>How to receive messages from a subscription</source>
            <target state="new">How to receive messages from a subscription</target>
          </trans-unit>
          <trans-unit id="208" xml:space="preserve">
            <source>The primary way to receive messages from a subscription is to use a</source>
            <target state="new">The primary way to receive messages from a subscription is to use a</target>
          </trans-unit>
          <trans-unit id="209" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>ServiceBusContract<ept id="1">&lt;/strong&gt;</ept> object.</source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>ServiceBusContract<ept id="1">&lt;/strong&gt;</ept> object.</target>
          </trans-unit>
          <trans-unit id="210" xml:space="preserve">
            <source>Received messages can work in two</source>
            <target state="new">Received messages can work in two</target>
          </trans-unit>
          <trans-unit id="211" xml:space="preserve">
            <source>different modes: <bpt id="2">&lt;strong&gt;</bpt>ReceiveAndDelete<ept id="2">&lt;/strong&gt;</ept> and <bpt id="4">&lt;strong&gt;</bpt>PeekLock<ept id="4">&lt;/strong&gt;</ept>.</source>
            <target state="new">different modes: <bpt id="2">&lt;strong&gt;</bpt>ReceiveAndDelete<ept id="2">&lt;/strong&gt;</ept> and <bpt id="4">&lt;strong&gt;</bpt>PeekLock<ept id="4">&lt;/strong&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="212" xml:space="preserve">
            <source>When using the <bpt id="2">&lt;strong&gt;</bpt>ReceiveAndDelete<ept id="2">&lt;/strong&gt;</ept> mode, receive is a single-shot</source>
            <target state="new">When using the <bpt id="2">&lt;strong&gt;</bpt>ReceiveAndDelete<ept id="2">&lt;/strong&gt;</ept> mode, receive is a single-shot</target>
          </trans-unit>
          <trans-unit id="213" xml:space="preserve">
            <source>operation - that is, when Service Bus receives a read request for a</source>
            <target state="new">operation - that is, when Service Bus receives a read request for a</target>
          </trans-unit>
          <trans-unit id="214" xml:space="preserve">
            <source>message, it marks the message as being consumed and returns it to the</source>
            <target state="new">message, it marks the message as being consumed and returns it to the</target>
          </trans-unit>
          <trans-unit id="215" xml:space="preserve">
            <source>application.</source>
            <target state="new">application.</target>
          </trans-unit>
          <trans-unit id="216" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>ReceiveAndDelete<ept id="1">&lt;/strong&gt;</ept> mode is the simplest model and works</source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>ReceiveAndDelete<ept id="1">&lt;/strong&gt;</ept> mode is the simplest model and works</target>
          </trans-unit>
          <trans-unit id="217" xml:space="preserve">
            <source>best for scenarios in which an application can tolerate not processing a</source>
            <target state="new">best for scenarios in which an application can tolerate not processing a</target>
          </trans-unit>
          <trans-unit id="218" xml:space="preserve">
            <source>message in the event of a failure.</source>
            <target state="new">message in the event of a failure.</target>
          </trans-unit>
          <trans-unit id="219" xml:space="preserve">
            <source>To understand this, consider a</source>
            <target state="new">To understand this, consider a</target>
          </trans-unit>
          <trans-unit id="220" xml:space="preserve">
            <source>scenario in which the consumer issues the receive request and then</source>
            <target state="new">scenario in which the consumer issues the receive request and then</target>
          </trans-unit>
          <trans-unit id="221" xml:space="preserve">
            <source>crashes before processing it.</source>
            <target state="new">crashes before processing it.</target>
          </trans-unit>
          <trans-unit id="222" xml:space="preserve">
            <source>Because Service Bus will have marked the</source>
            <target state="new">Because Service Bus will have marked the</target>
          </trans-unit>
          <trans-unit id="223" xml:space="preserve">
            <source>message as being consumed, then when the application restarts and begins</source>
            <target state="new">message as being consumed, then when the application restarts and begins</target>
          </trans-unit>
          <trans-unit id="224" xml:space="preserve">
            <source>consuming messages again, it will have missed the message that was</source>
            <target state="new">consuming messages again, it will have missed the message that was</target>
          </trans-unit>
          <trans-unit id="225" xml:space="preserve">
            <source>consumed prior to the crash.</source>
            <target state="new">consumed prior to the crash.</target>
          </trans-unit>
          <trans-unit id="226" xml:space="preserve">
            <source>In <bpt id="2">&lt;strong&gt;</bpt>PeekLock<ept id="2">&lt;/strong&gt;</ept> mode, receive becomes a two stage operation, which makes</source>
            <target state="new">In <bpt id="2">&lt;strong&gt;</bpt>PeekLock<ept id="2">&lt;/strong&gt;</ept> mode, receive becomes a two stage operation, which makes</target>
          </trans-unit>
          <trans-unit id="227" xml:space="preserve">
            <source>it possible to support applications that cannot tolerate missing</source>
            <target state="new">it possible to support applications that cannot tolerate missing</target>
          </trans-unit>
          <trans-unit id="228" xml:space="preserve">
            <source>messages.</source>
            <target state="new">messages.</target>
          </trans-unit>
          <trans-unit id="229" xml:space="preserve">
            <source>When Service Bus receives a request, it finds the next message</source>
            <target state="new">When Service Bus receives a request, it finds the next message</target>
          </trans-unit>
          <trans-unit id="230" xml:space="preserve">
            <source>to be consumed, locks it to prevent other consumers receiving it, and</source>
            <target state="new">to be consumed, locks it to prevent other consumers receiving it, and</target>
          </trans-unit>
          <trans-unit id="231" xml:space="preserve">
            <source>then returns it to the application.</source>
            <target state="new">then returns it to the application.</target>
          </trans-unit>
          <trans-unit id="232" xml:space="preserve">
            <source>After the application finishes</source>
            <target state="new">After the application finishes</target>
          </trans-unit>
          <trans-unit id="233" xml:space="preserve">
            <source>processing the message (or stores it reliably for future processing), it</source>
            <target state="new">processing the message (or stores it reliably for future processing), it</target>
          </trans-unit>
          <trans-unit id="234" xml:space="preserve">
            <source>completes the second stage of the receive process by calling <bpt id="2">&lt;strong&gt;</bpt>Delete<ept id="2">&lt;/strong&gt;</ept></source>
            <target state="new">completes the second stage of the receive process by calling <bpt id="2">&lt;strong&gt;</bpt>Delete<ept id="2">&lt;/strong&gt;</ept></target>
          </trans-unit>
          <trans-unit id="235" xml:space="preserve">
            <source>on the received message.</source>
            <target state="new">on the received message.</target>
          </trans-unit>
          <trans-unit id="236" xml:space="preserve">
            <source>When Service Bus sees the <bpt id="2">&lt;strong&gt;</bpt>Delete<ept id="2">&lt;/strong&gt;</ept> call, it</source>
            <target state="new">When Service Bus sees the <bpt id="2">&lt;strong&gt;</bpt>Delete<ept id="2">&lt;/strong&gt;</ept> call, it</target>
          </trans-unit>
          <trans-unit id="237" xml:space="preserve">
            <source>will mark the message as being consumed and remove it from the topic.</source>
            <target state="new">will mark the message as being consumed and remove it from the topic.</target>
          </trans-unit>
          <trans-unit id="238" xml:space="preserve">
            <source>The example below demonstrates how messages can be received and</source>
            <target state="new">The example below demonstrates how messages can be received and</target>
          </trans-unit>
          <trans-unit id="239" xml:space="preserve">
            <source>processed using <bpt id="2">&lt;strong&gt;</bpt>PeekLock<ept id="2">&lt;/strong&gt;</ept> mode (not the default mode).</source>
            <target state="new">processed using <bpt id="2">&lt;strong&gt;</bpt>PeekLock<ept id="2">&lt;/strong&gt;</ept> mode (not the default mode).</target>
          </trans-unit>
          <trans-unit id="240" xml:space="preserve">
            <source>The example</source>
            <target state="new">The example</target>
          </trans-unit>
          <trans-unit id="241" xml:space="preserve">
            <source>below performs a loop and processes messages in the "HighMessages" subscription and then exits when there are no more messages (alternatively, it could be set to wait for new messages).</source>
            <target state="new">below performs a loop and processes messages in the "HighMessages" subscription and then exits when there are no more messages (alternatively, it could be set to wait for new messages).</target>
          </trans-unit>
          <trans-unit id="242" xml:space="preserve">
            <source>How to handle application crashes and unreadable messages</source>
            <target state="new">How to handle application crashes and unreadable messages</target>
          </trans-unit>
          <trans-unit id="243" xml:space="preserve">
            <source>Service Bus provides functionality to help you gracefully recover from</source>
            <target state="new">Service Bus provides functionality to help you gracefully recover from</target>
          </trans-unit>
          <trans-unit id="244" xml:space="preserve">
            <source>errors in your application or difficulties processing a message.</source>
            <target state="new">errors in your application or difficulties processing a message.</target>
          </trans-unit>
          <trans-unit id="245" xml:space="preserve">
            <source>If a</source>
            <target state="new">If a</target>
          </trans-unit>
          <trans-unit id="246" xml:space="preserve">
            <source>receiver application is unable to process the message for some reason,</source>
            <target state="new">receiver application is unable to process the message for some reason,</target>
          </trans-unit>
          <trans-unit id="247" xml:space="preserve">
            <source>then it can call the <bpt id="2">&lt;strong&gt;</bpt>unlockMessage<ept id="2">&lt;/strong&gt;</ept> method on the received message</source>
            <target state="new">then it can call the <bpt id="2">&lt;strong&gt;</bpt>unlockMessage<ept id="2">&lt;/strong&gt;</ept> method on the received message</target>
          </trans-unit>
          <trans-unit id="248" xml:space="preserve">
            <source>(instead of the <bpt id="2">&lt;strong&gt;</bpt>deleteMessage<ept id="2">&lt;/strong&gt;</ept> method).</source>
            <target state="new">(instead of the <bpt id="2">&lt;strong&gt;</bpt>deleteMessage<ept id="2">&lt;/strong&gt;</ept> method).</target>
          </trans-unit>
          <trans-unit id="249" xml:space="preserve">
            <source>This will cause Service Bus</source>
            <target state="new">This will cause Service Bus</target>
          </trans-unit>
          <trans-unit id="250" xml:space="preserve">
            <source>to unlock the message within the topic and make it available to be</source>
            <target state="new">to unlock the message within the topic and make it available to be</target>
          </trans-unit>
          <trans-unit id="251" xml:space="preserve">
            <source>received again, either by the same consuming application or by another</source>
            <target state="new">received again, either by the same consuming application or by another</target>
          </trans-unit>
          <trans-unit id="252" xml:space="preserve">
            <source>consuming application.</source>
            <target state="new">consuming application.</target>
          </trans-unit>
          <trans-unit id="253" xml:space="preserve">
            <source>There is also a timeout associated with a message locked within the</source>
            <target state="new">There is also a timeout associated with a message locked within the</target>
          </trans-unit>
          <trans-unit id="254" xml:space="preserve">
            <source>topic, and if the application fails to process the message before the</source>
            <target state="new">topic, and if the application fails to process the message before the</target>
          </trans-unit>
          <trans-unit id="255" xml:space="preserve">
            <source>lock timeout expires (e.g., if the application crashes), then Service</source>
            <target state="new">lock timeout expires (e.g., if the application crashes), then Service</target>
          </trans-unit>
          <trans-unit id="256" xml:space="preserve">
            <source>Bus will unlock the message automatically and make it available to be</source>
            <target state="new">Bus will unlock the message automatically and make it available to be</target>
          </trans-unit>
          <trans-unit id="257" xml:space="preserve">
            <source>received again.</source>
            <target state="new">received again.</target>
          </trans-unit>
          <trans-unit id="258" xml:space="preserve">
            <source>In the event that the application crashes after processing the message</source>
            <target state="new">In the event that the application crashes after processing the message</target>
          </trans-unit>
          <trans-unit id="259" xml:space="preserve">
            <source>but before the <bpt id="2">&lt;strong&gt;</bpt>deleteMessage<ept id="2">&lt;/strong&gt;</ept> request is issued, then the message</source>
            <target state="new">but before the <bpt id="2">&lt;strong&gt;</bpt>deleteMessage<ept id="2">&lt;/strong&gt;</ept> request is issued, then the message</target>
          </trans-unit>
          <trans-unit id="260" xml:space="preserve">
            <source>will be redelivered to the application when it restarts.</source>
            <target state="new">will be redelivered to the application when it restarts.</target>
          </trans-unit>
          <trans-unit id="261" xml:space="preserve">
            <source>This is often</source>
            <target state="new">This is often</target>
          </trans-unit>
          <trans-unit id="262" xml:space="preserve">
            <source>called <bpt id="2">&lt;strong&gt;</bpt>At Least Once Processing<ept id="2">&lt;/strong&gt;</ept>, that is, each message will be</source>
            <target state="new">called <bpt id="2">&lt;strong&gt;</bpt>At Least Once Processing<ept id="2">&lt;/strong&gt;</ept>, that is, each message will be</target>
          </trans-unit>
          <trans-unit id="263" xml:space="preserve">
            <source>processed at least once but in certain situations the same message may</source>
            <target state="new">processed at least once but in certain situations the same message may</target>
          </trans-unit>
          <trans-unit id="264" xml:space="preserve">
            <source>be redelivered.</source>
            <target state="new">be redelivered.</target>
          </trans-unit>
          <trans-unit id="265" xml:space="preserve">
            <source>If the scenario cannot tolerate duplicate processing,</source>
            <target state="new">If the scenario cannot tolerate duplicate processing,</target>
          </trans-unit>
          <trans-unit id="266" xml:space="preserve">
            <source>then application developers should add additional logic to their</source>
            <target state="new">then application developers should add additional logic to their</target>
          </trans-unit>
          <trans-unit id="267" xml:space="preserve">
            <source>application to handle duplicate message delivery.</source>
            <target state="new">application to handle duplicate message delivery.</target>
          </trans-unit>
          <trans-unit id="268" xml:space="preserve">
            <source>This is often achieved</source>
            <target state="new">This is often achieved</target>
          </trans-unit>
          <trans-unit id="269" xml:space="preserve">
            <source>using the <bpt id="2">&lt;strong&gt;</bpt>getMessageId<ept id="2">&lt;/strong&gt;</ept> method of the message, which will remain</source>
            <target state="new">using the <bpt id="2">&lt;strong&gt;</bpt>getMessageId<ept id="2">&lt;/strong&gt;</ept> method of the message, which will remain</target>
          </trans-unit>
          <trans-unit id="270" xml:space="preserve">
            <source>constant across delivery attempts.</source>
            <target state="new">constant across delivery attempts.</target>
          </trans-unit>
          <trans-unit id="271" xml:space="preserve">
            <source>How to delete topics and subscriptions</source>
            <target state="new">How to delete topics and subscriptions</target>
          </trans-unit>
          <trans-unit id="272" xml:space="preserve">
            <source>The primary way to delete topics and subscriptions is to use a</source>
            <target state="new">The primary way to delete topics and subscriptions is to use a</target>
          </trans-unit>
          <trans-unit id="273" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>ServiceBusContract<ept id="1">&lt;/strong&gt;</ept> object.</source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>ServiceBusContract<ept id="1">&lt;/strong&gt;</ept> object.</target>
          </trans-unit>
          <trans-unit id="274" xml:space="preserve">
            <source>Deleting a topic will also delete any subscriptions that are registered</source>
            <target state="new">Deleting a topic will also delete any subscriptions that are registered</target>
          </trans-unit>
          <trans-unit id="275" xml:space="preserve">
            <source>with the topic.</source>
            <target state="new">with the topic.</target>
          </trans-unit>
          <trans-unit id="276" xml:space="preserve">
            <source>Subscriptions can also be deleted independently.</source>
            <target state="new">Subscriptions can also be deleted independently.</target>
          </trans-unit>
          <trans-unit id="277" xml:space="preserve">
            <source>Next Steps</source>
            <target state="new">Next Steps</target>
          </trans-unit>
          <trans-unit id="278" xml:space="preserve">
            <source>Now that you've learned the basics of Service Bus queues, see the MSDN</source>
            <target state="new">Now that you've learned the basics of Service Bus queues, see the MSDN</target>
          </trans-unit>
          <trans-unit id="279" xml:space="preserve">
            <source>topic <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Service Bus Queues, Topics, and Subscriptions[]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> for more information.</source>
            <target state="new">topic <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Service Bus Queues, Topics, and Subscriptions[]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> for more information.</target>
          </trans-unit>
        </group>
      </group>
    </body>
  </file>
</xliff>