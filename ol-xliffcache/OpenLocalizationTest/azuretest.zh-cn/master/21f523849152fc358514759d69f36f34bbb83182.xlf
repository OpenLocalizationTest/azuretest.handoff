<?xml version="1.0" encoding="utf-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" source-language="en-us" target-language="zh-cn" original="2/17/2016 2:54:00 PM" tool-id="MarkdownTransformer" product-name="N/A" product-version="N/A" build-num="1">
    <header>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">21f523849152fc358514759d69f36f34bbb83182</xliffext:olfilehash>
      <tool tool-id="MarkdownTransformer" tool-name="MarkdownToXliff" tool-version="1.0" tool-company="Microsoft" />
    </header>
    <body>
      <group extype="content">
        <group id="101">
          <trans-unit id="101" xml:space="preserve">
            <source>Retry general guidance | Microsoft Azure</source>
            <target state="new">Retry general guidance | Microsoft Azure</target>
          </trans-unit>
          <trans-unit id="102" xml:space="preserve">
            <source>Guidance on retry for transient fault handling.</source>
            <target state="new">Guidance on retry for transient fault handling.</target>
          </trans-unit>
          <trans-unit id="103" xml:space="preserve">
            <source>重试的一般指导</source>
            <target state="new">重试的一般指导</target>
          </trans-unit>
          <trans-unit id="104" xml:space="preserve">
            <source><bpt id="1">&lt;linkText&gt;</bpt><ept id="1">&lt;/linkText&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;linkText&gt;</bpt><ept id="1">&lt;/linkText&gt;</ept></target>
          </trans-unit>
          <trans-unit id="105" xml:space="preserve">
            <source>概述</source>
            <target state="new">概述</target>
          </trans-unit>
          <trans-unit id="106" xml:space="preserve">
            <source>沟通与远程服务和资源的所有应用程序必须对瞬时故障敏感。这是运行在云中，哪里的环境和通过互联网连接的性质意味着这些类型的错误都可能会遇到更多的应用程序的情况尤其如此。瞬时故障包括到组件和服务的网络连接瞬间损失、 临时不可用的服务或当服务正忙时出现的超时。这些故障往往自我纠正，而且如果操作重复后适当的延迟就有可能获得成功。</source>
            <target state="new">沟通与远程服务和资源的所有应用程序必须对瞬时故障敏感。这是运行在云中，哪里的环境和通过互联网连接的性质意味着这些类型的错误都可能会遇到更多的应用程序的情况尤其如此。瞬时故障包括到组件和服务的网络连接瞬间损失、 临时不可用的服务或当服务正忙时出现的超时。这些故障往往自我纠正，而且如果操作重复后适当的延迟就有可能获得成功。</target>
          </trans-unit>
          <trans-unit id="107" xml:space="preserve">
            <source>本文档介绍瞬态故障处理的通用指南。有关处理瞬时性故障时使用微软 Azure 服务的信息，请参阅 <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>蔚蓝的特定于服务的重试的指导方针<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">本文档介绍瞬态故障处理的通用指南。有关处理瞬时性故障时使用微软 Azure 服务的信息，请参阅 <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>蔚蓝的特定于服务的重试的指导方针<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="108" xml:space="preserve">
            <source>为什么瞬时性故障发生在云计算?</source>
            <target state="new">为什么瞬时性故障发生在云计算?</target>
          </trans-unit>
          <trans-unit id="109" xml:space="preserve">
            <source>瞬时故障可以发生在任何环境中，在任何平台或操作系统，和任何类型的应用程序。在本地运行的解决方案，在内部部署基础结构、 性能和可用性的应用程序和其组件通过昂贵的和经常使用的硬件冗余，通常维持和组件和资源都位于每个另一个。虽然这使得故障不太可能，它仍然可以导致瞬时故障-和甚至中断通过不可预见的事件，如外接电源或网络问题或其他灾难场景。</source>
            <target state="new">瞬时故障可以发生在任何环境中，在任何平台或操作系统，和任何类型的应用程序。在本地运行的解决方案，在内部部署基础结构、 性能和可用性的应用程序和其组件通过昂贵的和经常使用的硬件冗余，通常维持和组件和资源都位于每个另一个。虽然这使得故障不太可能，它仍然可以导致瞬时故障-和甚至中断通过不可预见的事件，如外接电源或网络问题或其他灾难场景。</target>
          </trans-unit>
          <trans-unit id="110" xml:space="preserve">
            <source>云托管，包括私有云系统，可以通过使用共享的资源、 冗余、 自动故障转移，提供更高的总体可用性和跨大量商品的动态资源分配计算节点。然而，这些环境的性质可以意味着瞬时故障是更有可能发生。有几个原因:</source>
            <target state="new">云托管，包括私有云系统，可以通过使用共享的资源、 冗余、 自动故障转移，提供更高的总体可用性和跨大量商品的动态资源分配计算节点。然而，这些环境的性质可以意味着瞬时故障是更有可能发生。有几个原因:</target>
          </trans-unit>
          <trans-unit id="111" xml:space="preserve">
            <source>在云环境中的很多资源共享的并对这些资源的访问受限制为了保护资源。一些服务将拒绝连接，当装载上升到一个特定的水平，或达到最大吞吐量速率，允许现有的请求处理，维持为所有用户服务的性能。节流有助于保持邻居和其他租户使用共享的资源的服务质量。</source>
            <target state="new">在云环境中的很多资源共享的并对这些资源的访问受限制为了保护资源。一些服务将拒绝连接，当装载上升到一个特定的水平，或达到最大吞吐量速率，允许现有的请求处理，维持为所有用户服务的性能。节流有助于保持邻居和其他租户使用共享的资源的服务质量。</target>
          </trans-unit>
          <trans-unit id="112" xml:space="preserve">
            <source>使用大量的商品硬件单元构建云环境。他们通过动态分配负载跨多个计算单位和基础结构组件，提供的性能，通过自动回收或取代失败的单位来提供可靠性。这种动态性质意味着可能偶尔出现瞬时性故障和临时连接失败。</source>
            <target state="new">使用大量的商品硬件单元构建云环境。他们通过动态分配负载跨多个计算单位和基础结构组件，提供的性能，通过自动回收或取代失败的单位来提供可靠性。这种动态性质意味着可能偶尔出现瞬时性故障和临时连接失败。</target>
          </trans-unit>
          <trans-unit id="113" xml:space="preserve">
            <source>经常有更多的硬件组件，包括网络基础设施，如路由器和负载平衡器之间的应用程序和资源使用的服务。这额外的基础架构可以偶尔引入额外的连接延迟和瞬态连接故障。</source>
            <target state="new">经常有更多的硬件组件，包括网络基础设施，如路由器和负载平衡器之间的应用程序和资源使用的服务。这额外的基础架构可以偶尔引入额外的连接延迟和瞬态连接故障。</target>
          </trans-unit>
          <trans-unit id="114" xml:space="preserve">
            <source>客户端和服务器之间的网络条件可能是变量，尤其是通信跨越 Internet。甚至在房地上的位置，非常沉重的交通负荷可能慢通信，而且会导致间歇性连接失败。</source>
            <target state="new">客户端和服务器之间的网络条件可能是变量，尤其是通信跨越 Internet。甚至在房地上的位置，非常沉重的交通负荷可能慢通信，而且会导致间歇性连接失败。</target>
          </trans-unit>
          <trans-unit id="115" xml:space="preserve">
            <source>挑战</source>
            <target state="new">挑战</target>
          </trans-unit>
          <trans-unit id="116" xml:space="preserve">
            <source>即使它已被彻底测试所有可预见情况下瞬时故障会产生巨大的影响的应用程序，可感知的可用性。为了确保云承载的应用程序可靠地运作，他们必须能够应对以下挑战:</source>
            <target state="new">即使它已被彻底测试所有可预见情况下瞬时故障会产生巨大的影响的应用程序，可感知的可用性。为了确保云承载的应用程序可靠地运作，他们必须能够应对以下挑战:</target>
          </trans-unit>
          <trans-unit id="117" xml:space="preserve">
            <source>应用程序必须能够检测出故障，当他们发生，并确定是否在这些故障可能是瞬态的持续更久，或终端故障。不同的资源很可能返回不同的响应，当发生故障时，和这些反应也可能随上下文的操作;例如，从存储中读取时出错的响应可能不同从错误响应写入存储时。很多的资源和服务有翔实的暂态故障合同。然而，这类信息不可用，可能很难发现的故障和是否有可能是暂时性质。</source>
            <target state="new">应用程序必须能够检测出故障，当他们发生，并确定是否在这些故障可能是瞬态的持续更久，或终端故障。不同的资源很可能返回不同的响应，当发生故障时，和这些反应也可能随上下文的操作;例如，从存储中读取时出错的响应可能不同从错误响应写入存储时。很多的资源和服务有翔实的暂态故障合同。然而，这类信息不可用，可能很难发现的故障和是否有可能是暂时性质。</target>
          </trans-unit>
          <trans-unit id="118" xml:space="preserve">
            <source>应用程序必须能够重试操作，如果它确定故障很可能是短暂的和跟踪操作的重试次数。</source>
            <target state="new">应用程序必须能够重试操作，如果它确定故障很可能是短暂的和跟踪操作的重试次数。</target>
          </trans-unit>
          <trans-unit id="119" xml:space="preserve">
            <source>应用程序必须使用适当的战略以重试。此策略指定每次尝试和行动采取尝试失败后之间的延迟，它应重试的次数。适当数量的尝试和之间每个延迟往往难以确定，并根据资源的类型以及当前的操作条件下的资源和应用程序本身会有所不同。</source>
            <target state="new">应用程序必须使用适当的战略以重试。此策略指定每次尝试和行动采取尝试失败后之间的延迟，它应重试的次数。适当数量的尝试和之间每个延迟往往难以确定，并根据资源的类型以及当前的操作条件下的资源和应用程序本身会有所不同。</target>
          </trans-unit>
          <trans-unit id="120" xml:space="preserve">
            <source>一般准则</source>
            <target state="new">一般准则</target>
          </trans-unit>
          <trans-unit id="121" xml:space="preserve">
            <source>以下指南将帮助您设计合适的暂态故障处理机制为您的应用程序:</source>
            <target state="new">以下指南将帮助您设计合适的暂态故障处理机制为您的应用程序:</target>
          </trans-unit>
          <trans-unit id="122" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Determine if there is a built-in retry mechanism:<ept id="1">&lt;/strong&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Determine if there is a built-in retry mechanism:<ept id="1">&lt;/strong&gt;</ept></target>
          </trans-unit>
          <trans-unit id="123" xml:space="preserve">
            <source>Many services provide an SDK or client library that contains a transient fault handling mechanism.</source>
            <target state="new">Many services provide an SDK or client library that contains a transient fault handling mechanism.</target>
          </trans-unit>
          <trans-unit id="124" xml:space="preserve">
            <source>The retry policy it uses is typically tailored to the nature and requirements of the target service.</source>
            <target state="new">The retry policy it uses is typically tailored to the nature and requirements of the target service.</target>
          </trans-unit>
          <trans-unit id="125" xml:space="preserve">
            <source>Alternatively, REST interfaces for services may return information that is useful in determining whether a retry is appropriate, and how long to wait before the next retry attempt.</source>
            <target state="new">Alternatively, REST interfaces for services may return information that is useful in determining whether a retry is appropriate, and how long to wait before the next retry attempt.</target>
          </trans-unit>
          <trans-unit id="126" xml:space="preserve">
            <source>Use the built-in retry mechanism where one is available unless you have specific and well-understood requirements that mean a different retry behavior is more appropriate.</source>
            <target state="new">Use the built-in retry mechanism where one is available unless you have specific and well-understood requirements that mean a different retry behavior is more appropriate.</target>
          </trans-unit>
          <trans-unit id="127" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Determine if the operation is suitable for retrying<ept id="1">&lt;/strong&gt;</ept>:</source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Determine if the operation is suitable for retrying<ept id="1">&lt;/strong&gt;</ept>:</target>
          </trans-unit>
          <trans-unit id="128" xml:space="preserve">
            <source>You should only retry operations where the faults are transient (typically indicated by the nature of the error), and if there is at least some likelihood that the operation will succeed when reattempted.</source>
            <target state="new">You should only retry operations where the faults are transient (typically indicated by the nature of the error), and if there is at least some likelihood that the operation will succeed when reattempted.</target>
          </trans-unit>
          <trans-unit id="129" xml:space="preserve">
            <source>There is no point in reattempting operations that indicate an invalid operation such as a database update to an item that does not exist, or requests to a service or resource that has suffered a fatal error</source>
            <target state="new">There is no point in reattempting operations that indicate an invalid operation such as a database update to an item that does not exist, or requests to a service or resource that has suffered a fatal error</target>
          </trans-unit>
          <trans-unit id="130" xml:space="preserve">
            <source>In general, you should implement retries only where the full impact of this can be determined, and the conditions are well understood and can be validated.</source>
            <target state="new">In general, you should implement retries only where the full impact of this can be determined, and the conditions are well understood and can be validated.</target>
          </trans-unit>
          <trans-unit id="131" xml:space="preserve">
            <source>If not, leave it to the calling code to implement retries.</source>
            <target state="new">If not, leave it to the calling code to implement retries.</target>
          </trans-unit>
          <trans-unit id="132" xml:space="preserve">
            <source>Remember that the errors returned from resources and services outside your control may evolve over time, and you may need to revisit your transient fault detection logic.</source>
            <target state="new">Remember that the errors returned from resources and services outside your control may evolve over time, and you may need to revisit your transient fault detection logic.</target>
          </trans-unit>
          <trans-unit id="133" xml:space="preserve">
            <source>When you create services or components, consider implementing error codes and messages that will help clients determine whether they should retry failed operations.</source>
            <target state="new">When you create services or components, consider implementing error codes and messages that will help clients determine whether they should retry failed operations.</target>
          </trans-unit>
          <trans-unit id="134" xml:space="preserve">
            <source>In particular, indicate if the client should retry the operation (perhaps by returning an <bpt id="2">&lt;strong&gt;</bpt>isTransient<ept id="2">&lt;/strong&gt;</ept> value) and suggest a suitable delay before the next retry attempt.</source>
            <target state="new">In particular, indicate if the client should retry the operation (perhaps by returning an <bpt id="2">&lt;strong&gt;</bpt>isTransient<ept id="2">&lt;/strong&gt;</ept> value) and suggest a suitable delay before the next retry attempt.</target>
          </trans-unit>
          <trans-unit id="135" xml:space="preserve">
            <source>If you build a web service, consider returning custom errors defined within your service contracts.</source>
            <target state="new">If you build a web service, consider returning custom errors defined within your service contracts.</target>
          </trans-unit>
          <trans-unit id="136" xml:space="preserve">
            <source>Even though generic clients may not be able to read these, they will be useful when building custom clients.</source>
            <target state="new">Even though generic clients may not be able to read these, they will be useful when building custom clients.</target>
          </trans-unit>
          <trans-unit id="137" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Determine an appropriate retry count and interval:<ept id="1">&lt;/strong&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Determine an appropriate retry count and interval:<ept id="1">&lt;/strong&gt;</ept></target>
          </trans-unit>
          <trans-unit id="138" xml:space="preserve">
            <source>It is vital to optimize the retry count and the interval to the type of use case.</source>
            <target state="new">It is vital to optimize the retry count and the interval to the type of use case.</target>
          </trans-unit>
          <trans-unit id="139" xml:space="preserve">
            <source>If you do not retry a sufficient number of times, the application will be unable to complete the operation and is likely to experience a failure.</source>
            <target state="new">If you do not retry a sufficient number of times, the application will be unable to complete the operation and is likely to experience a failure.</target>
          </trans-unit>
          <trans-unit id="140" xml:space="preserve">
            <source>If you retry too many times, or with too short an interval between tries, the application can potentially hold resources such as threads, connections, and memory for long periods, which will adversely affect the health of the application.</source>
            <target state="new">If you retry too many times, or with too short an interval between tries, the application can potentially hold resources such as threads, connections, and memory for long periods, which will adversely affect the health of the application.</target>
          </trans-unit>
          <trans-unit id="141" xml:space="preserve">
            <source>The appropriate values for the time interval and the number of retry attempts depend on the type of operation being attempted.</source>
            <target state="new">The appropriate values for the time interval and the number of retry attempts depend on the type of operation being attempted.</target>
          </trans-unit>
          <trans-unit id="142" xml:space="preserve">
            <source>For example, if the operation is part of a user interaction, the interval should be short and only a few retries attempted to avoid making users wait for a response (which holds open connections and can reduce availability for other users).</source>
            <target state="new">For example, if the operation is part of a user interaction, the interval should be short and only a few retries attempted to avoid making users wait for a response (which holds open connections and can reduce availability for other users).</target>
          </trans-unit>
          <trans-unit id="143" xml:space="preserve">
            <source>If the operation is part of a long running or critical workflow, where cancelling and restarting the process is expensive or time-consuming, it is appropriate to wait longer between attempts and retry more times.</source>
            <target state="new">If the operation is part of a long running or critical workflow, where cancelling and restarting the process is expensive or time-consuming, it is appropriate to wait longer between attempts and retry more times.</target>
          </trans-unit>
          <trans-unit id="144" xml:space="preserve">
            <source>Determining the appropriate intervals between retries is the most difficult part of designing a successful strategy.</source>
            <target state="new">Determining the appropriate intervals between retries is the most difficult part of designing a successful strategy.</target>
          </trans-unit>
          <trans-unit id="145" xml:space="preserve">
            <source>Typical strategies use the following types of retry interval:</source>
            <target state="new">Typical strategies use the following types of retry interval:</target>
          </trans-unit>
          <trans-unit id="146" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Exponential back-off<ept id="1">&lt;/strong&gt;</ept>.</source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Exponential back-off<ept id="1">&lt;/strong&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="147" xml:space="preserve">
            <source>The application waits a short time before the first retry, and then exponentially increasing times between each subsequent retry.</source>
            <target state="new">The application waits a short time before the first retry, and then exponentially increasing times between each subsequent retry.</target>
          </trans-unit>
          <trans-unit id="148" xml:space="preserve">
            <source>For example, it may retry the operation after 3 seconds, 12 seconds, 30 seconds, and so on.</source>
            <target state="new">For example, it may retry the operation after 3 seconds, 12 seconds, 30 seconds, and so on.</target>
          </trans-unit>
          <trans-unit id="149" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Incremental intervals<ept id="1">&lt;/strong&gt;</ept>.</source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Incremental intervals<ept id="1">&lt;/strong&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="150" xml:space="preserve">
            <source>The application waits a short time before the first retry, and then incrementally increasing times between each subsequent retry.</source>
            <target state="new">The application waits a short time before the first retry, and then incrementally increasing times between each subsequent retry.</target>
          </trans-unit>
          <trans-unit id="151" xml:space="preserve">
            <source>For example, it may retry the operation after 3 seconds, 7 seconds, 13 seconds, and so on.</source>
            <target state="new">For example, it may retry the operation after 3 seconds, 7 seconds, 13 seconds, and so on.</target>
          </trans-unit>
          <trans-unit id="152" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Regular intervals<ept id="1">&lt;/strong&gt;</ept>.</source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Regular intervals<ept id="1">&lt;/strong&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="153" xml:space="preserve">
            <source>The application waits for the same period of time between each attempt.</source>
            <target state="new">The application waits for the same period of time between each attempt.</target>
          </trans-unit>
          <trans-unit id="154" xml:space="preserve">
            <source>For example, it may retry the operation every 3 seconds.</source>
            <target state="new">For example, it may retry the operation every 3 seconds.</target>
          </trans-unit>
          <trans-unit id="155" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Immediate retry<ept id="1">&lt;/strong&gt;</ept>.</source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Immediate retry<ept id="1">&lt;/strong&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="156" xml:space="preserve">
            <source>Sometimes a transient fault is extremely short, perhaps caused by an event such as a network packet collision or a spike in a hardware component.</source>
            <target state="new">Sometimes a transient fault is extremely short, perhaps caused by an event such as a network packet collision or a spike in a hardware component.</target>
          </trans-unit>
          <trans-unit id="157" xml:space="preserve">
            <source>In this case, retrying the operation immediately is appropriate because it may succeed if the fault has cleared in the time it takes the application to assemble and send the next request.</source>
            <target state="new">In this case, retrying the operation immediately is appropriate because it may succeed if the fault has cleared in the time it takes the application to assemble and send the next request.</target>
          </trans-unit>
          <trans-unit id="158" xml:space="preserve">
            <source>However, there should never be more than one immediate retry attempt, and you should switch to alternative strategies, such as such as exponential back-off or fallback actions, if the immediate retry fails.</source>
            <target state="new">However, there should never be more than one immediate retry attempt, and you should switch to alternative strategies, such as such as exponential back-off or fallback actions, if the immediate retry fails.</target>
          </trans-unit>
          <trans-unit id="159" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Randomization<ept id="1">&lt;/strong&gt;</ept>.</source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Randomization<ept id="1">&lt;/strong&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="160" xml:space="preserve">
            <source>Any of the retry strategies listed above may include a randomization to prevent multiple instances of the client sending subsequent retry attempts at the same time.</source>
            <target state="new">Any of the retry strategies listed above may include a randomization to prevent multiple instances of the client sending subsequent retry attempts at the same time.</target>
          </trans-unit>
          <trans-unit id="161" xml:space="preserve">
            <source>For example, one instance may retry the operation after 3 seconds, 11 seconds, 28 seconds, and so on while another instance may retry the operation after 4 seconds, 12 seconds, 26 seconds, and so on.</source>
            <target state="new">For example, one instance may retry the operation after 3 seconds, 11 seconds, 28 seconds, and so on while another instance may retry the operation after 4 seconds, 12 seconds, 26 seconds, and so on.</target>
          </trans-unit>
          <trans-unit id="162" xml:space="preserve">
            <source>Randomization is a useful technique that may be combined with other strategies.</source>
            <target state="new">Randomization is a useful technique that may be combined with other strategies.</target>
          </trans-unit>
          <trans-unit id="163" xml:space="preserve">
            <source>As a general guideline, use an exponential back-off strategy for background operations, and immediate or regular interval retry strategies for interactive operations.</source>
            <target state="new">As a general guideline, use an exponential back-off strategy for background operations, and immediate or regular interval retry strategies for interactive operations.</target>
          </trans-unit>
          <trans-unit id="164" xml:space="preserve">
            <source>In both cases, you should choose the delay and the retry count so that the maximum latency for all retry attempts is within the required end-to-end latency requirement.</source>
            <target state="new">In both cases, you should choose the delay and the retry count so that the maximum latency for all retry attempts is within the required end-to-end latency requirement.</target>
          </trans-unit>
          <trans-unit id="165" xml:space="preserve">
            <source>Take into account the combination of all the factors that contribute to the overall maximum timeout for a retried operation.</source>
            <target state="new">Take into account the combination of all the factors that contribute to the overall maximum timeout for a retried operation.</target>
          </trans-unit>
          <trans-unit id="166" xml:space="preserve">
            <source>These factors include the time taken for a failed connection to produce a response (typically set by a timeout value in the client) as well as the delay between retry attempts and the maximum number of retries.</source>
            <target state="new">These factors include the time taken for a failed connection to produce a response (typically set by a timeout value in the client) as well as the delay between retry attempts and the maximum number of retries.</target>
          </trans-unit>
          <trans-unit id="167" xml:space="preserve">
            <source>The total of all these times can result in very large overall operation times, especially when using an exponential delay strategy where the interval between retries grows rapidly after each failure.</source>
            <target state="new">The total of all these times can result in very large overall operation times, especially when using an exponential delay strategy where the interval between retries grows rapidly after each failure.</target>
          </trans-unit>
          <trans-unit id="168" xml:space="preserve">
            <source>If a process must meet a specific service level agreement (SLA), the overall operation time, including all timeouts and delays, must be within that defined in the SLA</source>
            <target state="new">If a process must meet a specific service level agreement (SLA), the overall operation time, including all timeouts and delays, must be within that defined in the SLA</target>
          </trans-unit>
          <trans-unit id="169" xml:space="preserve">
            <source>Over-aggressive retry strategies, which have too short intervals or too may retries, can have an adverse effect on the target resource or service.</source>
            <target state="new">Over-aggressive retry strategies, which have too short intervals or too may retries, can have an adverse effect on the target resource or service.</target>
          </trans-unit>
          <trans-unit id="170" xml:space="preserve">
            <source>This may prevent the resource or service from recovering from its overloaded state, and it will continue to block or refuse requests.</source>
            <target state="new">This may prevent the resource or service from recovering from its overloaded state, and it will continue to block or refuse requests.</target>
          </trans-unit>
          <trans-unit id="171" xml:space="preserve">
            <source>This results in a vicious circle where more and more requests are sent to the resource or service, and consequently its ability to recover is further reduced.</source>
            <target state="new">This results in a vicious circle where more and more requests are sent to the resource or service, and consequently its ability to recover is further reduced.</target>
          </trans-unit>
          <trans-unit id="172" xml:space="preserve">
            <source>Take into account the timeout of the operations when choosing the retry intervals to avoid launching a subsequent attempt immediately (for example, if the timeout period is similar to the retry interval).</source>
            <target state="new">Take into account the timeout of the operations when choosing the retry intervals to avoid launching a subsequent attempt immediately (for example, if the timeout period is similar to the retry interval).</target>
          </trans-unit>
          <trans-unit id="173" xml:space="preserve">
            <source>Also consider if you need to keep the total possible period (the timeout plus the retry intervals) to below a specific total time.</source>
            <target state="new">Also consider if you need to keep the total possible period (the timeout plus the retry intervals) to below a specific total time.</target>
          </trans-unit>
          <trans-unit id="174" xml:space="preserve">
            <source>Operations that have unusually short or very long timeouts may influence how long to wait, and how often to retry the operation.</source>
            <target state="new">Operations that have unusually short or very long timeouts may influence how long to wait, and how often to retry the operation.</target>
          </trans-unit>
          <trans-unit id="175" xml:space="preserve">
            <source>Use the type of the exception and any data it contains, or the error codes and messages returned from the service, to optimize the interval and the number of retries.</source>
            <target state="new">Use the type of the exception and any data it contains, or the error codes and messages returned from the service, to optimize the interval and the number of retries.</target>
          </trans-unit>
          <trans-unit id="176" xml:space="preserve">
            <source>For example, some exceptions or error codes (such as the HTTP code 503 Service Unavailable with a Retry-After header in the response) may indicate how long the error might last, or that the service has failed and will not respond to any subsequent attempt.</source>
            <target state="new">For example, some exceptions or error codes (such as the HTTP code 503 Service Unavailable with a Retry-After header in the response) may indicate how long the error might last, or that the service has failed and will not respond to any subsequent attempt.</target>
          </trans-unit>
          <trans-unit id="177" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Avoid anti-patterns<ept id="1">&lt;/strong&gt;</ept>:</source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Avoid anti-patterns<ept id="1">&lt;/strong&gt;</ept>:</target>
          </trans-unit>
          <trans-unit id="178" xml:space="preserve">
            <source>In the vast majority of cases, you should avoid implementations that include duplicated layers of retry code.</source>
            <target state="new">In the vast majority of cases, you should avoid implementations that include duplicated layers of retry code.</target>
          </trans-unit>
          <trans-unit id="179" xml:space="preserve">
            <source>Avoid designs that include cascading retry mechanisms, or that implement retry at every stage of an operation that involves a hierarchy of requests, unless you have specific requirements that demand this.</source>
            <target state="new">Avoid designs that include cascading retry mechanisms, or that implement retry at every stage of an operation that involves a hierarchy of requests, unless you have specific requirements that demand this.</target>
          </trans-unit>
          <trans-unit id="180" xml:space="preserve">
            <source>In these exceptional circumstances, use policies that prevent excessive numbers of retries and delay periods, and make sure you understand the consequences.</source>
            <target state="new">In these exceptional circumstances, use policies that prevent excessive numbers of retries and delay periods, and make sure you understand the consequences.</target>
          </trans-unit>
          <trans-unit id="181" xml:space="preserve">
            <source>For example, if one component makes a request to another, which then accesses the target service, and you implement retry with a count of three on both calls there will be nine retry attempts in total against the service.</source>
            <target state="new">For example, if one component makes a request to another, which then accesses the target service, and you implement retry with a count of three on both calls there will be nine retry attempts in total against the service.</target>
          </trans-unit>
          <trans-unit id="182" xml:space="preserve">
            <source>Many services and resources implement a built-in retry mechanism and you should investigate how you can disable or modify this if you need to implement retries at a higher level.</source>
            <target state="new">Many services and resources implement a built-in retry mechanism and you should investigate how you can disable or modify this if you need to implement retries at a higher level.</target>
          </trans-unit>
          <trans-unit id="183" xml:space="preserve">
            <source>Never implement an endless retry mechanism.</source>
            <target state="new">Never implement an endless retry mechanism.</target>
          </trans-unit>
          <trans-unit id="184" xml:space="preserve">
            <source>This is likely to prevent the resource or service recovering from overload situations, and cause throttling and refused connections to continue for a longer period.</source>
            <target state="new">This is likely to prevent the resource or service recovering from overload situations, and cause throttling and refused connections to continue for a longer period.</target>
          </trans-unit>
          <trans-unit id="185" xml:space="preserve">
            <source>Use a finite number or retries, or implement a pattern such as <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Circuit Breaker<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> to allow the service to recover.</source>
            <target state="new">Use a finite number or retries, or implement a pattern such as <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Circuit Breaker<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> to allow the service to recover.</target>
          </trans-unit>
          <trans-unit id="186" xml:space="preserve">
            <source>Never perform an immediate retry more than once.</source>
            <target state="new">Never perform an immediate retry more than once.</target>
          </trans-unit>
          <trans-unit id="187" xml:space="preserve">
            <source>Avoid using a regular retry interval, especially when you have a large number of retry attempts, when accessing services and resources in Azure.</source>
            <target state="new">Avoid using a regular retry interval, especially when you have a large number of retry attempts, when accessing services and resources in Azure.</target>
          </trans-unit>
          <trans-unit id="188" xml:space="preserve">
            <source>The optimum approach is this scenario is an exponential back-off strategy with a circuit-breaking capability.</source>
            <target state="new">The optimum approach is this scenario is an exponential back-off strategy with a circuit-breaking capability.</target>
          </trans-unit>
          <trans-unit id="189" xml:space="preserve">
            <source>Prevent multiple instances of the same client, or multiple instances of different clients, from sending retries at the same times.</source>
            <target state="new">Prevent multiple instances of the same client, or multiple instances of different clients, from sending retries at the same times.</target>
          </trans-unit>
          <trans-unit id="190" xml:space="preserve">
            <source>If this is likely to occur, introduce randomization into the retry intervals.</source>
            <target state="new">If this is likely to occur, introduce randomization into the retry intervals.</target>
          </trans-unit>
          <trans-unit id="191" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Test your retry strategy and implementation:<ept id="1">&lt;/strong&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Test your retry strategy and implementation:<ept id="1">&lt;/strong&gt;</ept></target>
          </trans-unit>
          <trans-unit id="192" xml:space="preserve">
            <source>Ensure you fully test your retry strategy implementation under as wide a set of circumstances as possible, especially when both the application and the target resources or services it uses are under extreme load.</source>
            <target state="new">Ensure you fully test your retry strategy implementation under as wide a set of circumstances as possible, especially when both the application and the target resources or services it uses are under extreme load.</target>
          </trans-unit>
          <trans-unit id="193" xml:space="preserve">
            <source>To check behavior during testing, you can:</source>
            <target state="new">To check behavior during testing, you can:</target>
          </trans-unit>
          <trans-unit id="194" xml:space="preserve">
            <source>Inject transient and non-transient faults into the service.</source>
            <target state="new">Inject transient and non-transient faults into the service.</target>
          </trans-unit>
          <trans-unit id="195" xml:space="preserve">
            <source>For example, send invalid requests or add code that detects test requests and responds with different types of errors.</source>
            <target state="new">For example, send invalid requests or add code that detects test requests and responds with different types of errors.</target>
          </trans-unit>
          <trans-unit id="196" xml:space="preserve">
            <source>For an example using TestApi, see <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Fault Injection Testing with TestApi<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> 和 <bpt id="4CapsExtId1">&lt;link&gt;</bpt><bpt id="4CapsExtId2">&lt;linkText&gt;</bpt>Introduction to TestApi – Part 5: Managed Code Fault Injection APIs<ept id="4CapsExtId2">&lt;/linkText&gt;</ept><bpt id="4CapsExtId3">&lt;title&gt;</bpt><ept id="4CapsExtId3">&lt;/title&gt;</ept><ept id="4CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">For an example using TestApi, see <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Fault Injection Testing with TestApi<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> 和 <bpt id="4CapsExtId1">&lt;link&gt;</bpt><bpt id="4CapsExtId2">&lt;linkText&gt;</bpt>Introduction to TestApi – Part 5: Managed Code Fault Injection APIs<ept id="4CapsExtId2">&lt;/linkText&gt;</ept><bpt id="4CapsExtId3">&lt;title&gt;</bpt><ept id="4CapsExtId3">&lt;/title&gt;</ept><ept id="4CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="197" xml:space="preserve">
            <source>Create a mock of the resource or service that returns a range of errors that the real service may return.</source>
            <target state="new">Create a mock of the resource or service that returns a range of errors that the real service may return.</target>
          </trans-unit>
          <trans-unit id="198" xml:space="preserve">
            <source>Ensure you cover all the types of error that your retry strategy is designed to detect.</source>
            <target state="new">Ensure you cover all the types of error that your retry strategy is designed to detect.</target>
          </trans-unit>
          <trans-unit id="199" xml:space="preserve">
            <source>Force transient errors to occur by temporarily disabling or overloading the service if it is a custom service that you created and deployed (you should not, of course, attempt to overload any shared resources or shared services within Azure).</source>
            <target state="new">Force transient errors to occur by temporarily disabling or overloading the service if it is a custom service that you created and deployed (you should not, of course, attempt to overload any shared resources or shared services within Azure).</target>
          </trans-unit>
          <trans-unit id="200" xml:space="preserve">
            <source>For HTTP-based APIs, consider using the FiddlerCore library in your automated tests to change the outcome of HTTP requests, either by adding extra roundtrip times or by changing the response (such as the HTTP status code, headers, body, or other factors).</source>
            <target state="new">For HTTP-based APIs, consider using the FiddlerCore library in your automated tests to change the outcome of HTTP requests, either by adding extra roundtrip times or by changing the response (such as the HTTP status code, headers, body, or other factors).</target>
          </trans-unit>
          <trans-unit id="201" xml:space="preserve">
            <source>This enables deterministic testing of a subset of the failure conditions, whether transient faults or other types of failure.</source>
            <target state="new">This enables deterministic testing of a subset of the failure conditions, whether transient faults or other types of failure.</target>
          </trans-unit>
          <trans-unit id="202" xml:space="preserve">
            <source>For more information, see <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>FiddlerCore<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">For more information, see <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>FiddlerCore<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="203" xml:space="preserve">
            <source>For examples of how to use the library, particularly the <bpt id="2">&lt;strong&gt;</bpt>HttpMangler<ept id="2">&lt;/strong&gt;</ept> class, examine the <bpt id="4CapsExtId1">&lt;link&gt;</bpt><bpt id="4CapsExtId2">&lt;linkText&gt;</bpt>source code for the Azure Storage SDK<ept id="4CapsExtId2">&lt;/linkText&gt;</ept><bpt id="4CapsExtId3">&lt;title&gt;</bpt><ept id="4CapsExtId3">&lt;/title&gt;</ept><ept id="4CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">For examples of how to use the library, particularly the <bpt id="2">&lt;strong&gt;</bpt>HttpMangler<ept id="2">&lt;/strong&gt;</ept> class, examine the <bpt id="4CapsExtId1">&lt;link&gt;</bpt><bpt id="4CapsExtId2">&lt;linkText&gt;</bpt>source code for the Azure Storage SDK<ept id="4CapsExtId2">&lt;/linkText&gt;</ept><bpt id="4CapsExtId3">&lt;title&gt;</bpt><ept id="4CapsExtId3">&lt;/title&gt;</ept><ept id="4CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="204" xml:space="preserve">
            <source>Perform high load factor and concurrent tests to ensure that the retry mechanism and strategy works correctly under these conditions, and does not have an adverse effect on the operation of the client or cause cross-contamination between requests.</source>
            <target state="new">Perform high load factor and concurrent tests to ensure that the retry mechanism and strategy works correctly under these conditions, and does not have an adverse effect on the operation of the client or cause cross-contamination between requests.</target>
          </trans-unit>
          <trans-unit id="205" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Manage retry policy configurations:<ept id="1">&lt;/strong&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Manage retry policy configurations:<ept id="1">&lt;/strong&gt;</ept></target>
          </trans-unit>
          <trans-unit id="206" xml:space="preserve">
            <source>A _retry policy_ is a combination of all of the elements of your retry strategy.</source>
            <target state="new">A _retry policy_ is a combination of all of the elements of your retry strategy.</target>
          </trans-unit>
          <trans-unit id="207" xml:space="preserve">
            <source>It defines the detection mechanism that determines whether a fault is likely to be transient, the type of interval to use (such as regular, exponential back-off, and randomization), the actual interval value(s), and the number of times to retry.</source>
            <target state="new">It defines the detection mechanism that determines whether a fault is likely to be transient, the type of interval to use (such as regular, exponential back-off, and randomization), the actual interval value(s), and the number of times to retry.</target>
          </trans-unit>
          <trans-unit id="208" xml:space="preserve">
            <source>Retries must be implemented in many places within even the simplest application, and in every layer of more complex applications.</source>
            <target state="new">Retries must be implemented in many places within even the simplest application, and in every layer of more complex applications.</target>
          </trans-unit>
          <trans-unit id="209" xml:space="preserve">
            <source>Rather than hard-coding the elements of each policy at multiple locations, consider using a central point for storing all the policies.</source>
            <target state="new">Rather than hard-coding the elements of each policy at multiple locations, consider using a central point for storing all the policies.</target>
          </trans-unit>
          <trans-unit id="210" xml:space="preserve">
            <source>For example, store the values such as the interval and retry count in application configuration files, read them at runtime, and programmatically build the retry policies.</source>
            <target state="new">For example, store the values such as the interval and retry count in application configuration files, read them at runtime, and programmatically build the retry policies.</target>
          </trans-unit>
          <trans-unit id="211" xml:space="preserve">
            <source>This makes it easier to manage the settings, and to modify and fine tune the values in order to respond to changing requirements and scenarios.</source>
            <target state="new">This makes it easier to manage the settings, and to modify and fine tune the values in order to respond to changing requirements and scenarios.</target>
          </trans-unit>
          <trans-unit id="212" xml:space="preserve">
            <source>However, design the system to store the values rather than rereading a configuration file every time, and ensure suitable defaults are used if the values cannot be obtained from configuration.</source>
            <target state="new">However, design the system to store the values rather than rereading a configuration file every time, and ensure suitable defaults are used if the values cannot be obtained from configuration.</target>
          </trans-unit>
          <trans-unit id="213" xml:space="preserve">
            <source>In an Azure Cloud Services application, consider storing the values that are used to build the retry policies at runtime in the service configuration file so that they can be changed without needing to restart the application.</source>
            <target state="new">In an Azure Cloud Services application, consider storing the values that are used to build the retry policies at runtime in the service configuration file so that they can be changed without needing to restart the application.</target>
          </trans-unit>
          <trans-unit id="214" xml:space="preserve">
            <source>Take advantage of built-in or default retry strategies available in the client APIs you use, but only where they are appropriate for your scenario.</source>
            <target state="new">Take advantage of built-in or default retry strategies available in the client APIs you use, but only where they are appropriate for your scenario.</target>
          </trans-unit>
          <trans-unit id="215" xml:space="preserve">
            <source>These strategies are typically general-purpose.</source>
            <target state="new">These strategies are typically general-purpose.</target>
          </trans-unit>
          <trans-unit id="216" xml:space="preserve">
            <source>In some scenarios they may be all that is required, but in other scenarios they may not offer the full range of options to suit your specific requirements.</source>
            <target state="new">In some scenarios they may be all that is required, but in other scenarios they may not offer the full range of options to suit your specific requirements.</target>
          </trans-unit>
          <trans-unit id="217" xml:space="preserve">
            <source>You must understand how the settings will affect your application through testing to determine the most appropriate values.</source>
            <target state="new">You must understand how the settings will affect your application through testing to determine the most appropriate values.</target>
          </trans-unit>
          <trans-unit id="218" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Log and track transient and non-transient faults:<ept id="1">&lt;/strong&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Log and track transient and non-transient faults:<ept id="1">&lt;/strong&gt;</ept></target>
          </trans-unit>
          <trans-unit id="219" xml:space="preserve">
            <source>As part of your retry strategy, include exception handling and other instrumentation that logs when retry attempts are made.</source>
            <target state="new">As part of your retry strategy, include exception handling and other instrumentation that logs when retry attempts are made.</target>
          </trans-unit>
          <trans-unit id="220" xml:space="preserve">
            <source>While an occasional transient failure and retry are to be expected, and do not indicate a problem, regular and increasing numbers of retries are often an indicator of an issue that may cause a failure, or is currently impacting application performance and availability.</source>
            <target state="new">While an occasional transient failure and retry are to be expected, and do not indicate a problem, regular and increasing numbers of retries are often an indicator of an issue that may cause a failure, or is currently impacting application performance and availability.</target>
          </trans-unit>
          <trans-unit id="221" xml:space="preserve">
            <source>Log transient faults as Warning entries rather than Error entries so that monitoring systems do not detect them as application errors that may trigger false alerts.</source>
            <target state="new">Log transient faults as Warning entries rather than Error entries so that monitoring systems do not detect them as application errors that may trigger false alerts.</target>
          </trans-unit>
          <trans-unit id="222" xml:space="preserve">
            <source>Consider storing a value in your log entries that indicates if the retries were caused by throttling in the service, or by other types of faults such as connection failures, so that you can differentiate them during analysis of the data.</source>
            <target state="new">Consider storing a value in your log entries that indicates if the retries were caused by throttling in the service, or by other types of faults such as connection failures, so that you can differentiate them during analysis of the data.</target>
          </trans-unit>
          <trans-unit id="223" xml:space="preserve">
            <source>An increase in the number of throttling errors is often an indicator of a design flaw in the application or the need to switch to a premium service that offers dedicated hardware.</source>
            <target state="new">An increase in the number of throttling errors is often an indicator of a design flaw in the application or the need to switch to a premium service that offers dedicated hardware.</target>
          </trans-unit>
          <trans-unit id="224" xml:space="preserve">
            <source>Consider measuring and logging the overall time taken for operations that include a retry mechanism.</source>
            <target state="new">Consider measuring and logging the overall time taken for operations that include a retry mechanism.</target>
          </trans-unit>
          <trans-unit id="225" xml:space="preserve">
            <source>This is a good indicator of the overall effect of transient faults on user response times, process latency, and the efficiency of the application use cases.</source>
            <target state="new">This is a good indicator of the overall effect of transient faults on user response times, process latency, and the efficiency of the application use cases.</target>
          </trans-unit>
          <trans-unit id="226" xml:space="preserve">
            <source>Also log the number of retries occurred in order to understand the factors that contributed to the response time.</source>
            <target state="new">Also log the number of retries occurred in order to understand the factors that contributed to the response time.</target>
          </trans-unit>
          <trans-unit id="227" xml:space="preserve">
            <source>Consider implementing a telemetry and monitoring system that can raise alerts when the number and rate of failures, the average number of retries, or the overall times taken for operations to succeed, is increasing.</source>
            <target state="new">Consider implementing a telemetry and monitoring system that can raise alerts when the number and rate of failures, the average number of retries, or the overall times taken for operations to succeed, is increasing.</target>
          </trans-unit>
          <trans-unit id="228" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Manage operations that continually fail:<ept id="1">&lt;/strong&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Manage operations that continually fail:<ept id="1">&lt;/strong&gt;</ept></target>
          </trans-unit>
          <trans-unit id="229" xml:space="preserve">
            <source>There will be circumstances where the operation continues to fail at every attempt, and it is vital to consider how you will handle this situation:</source>
            <target state="new">There will be circumstances where the operation continues to fail at every attempt, and it is vital to consider how you will handle this situation:</target>
          </trans-unit>
          <trans-unit id="230" xml:space="preserve">
            <source>Although a retry strategy will define the maximum number of times that an operation should be retried, it does not prevent the application repeating the operation again, with the same number of retries.</source>
            <target state="new">Although a retry strategy will define the maximum number of times that an operation should be retried, it does not prevent the application repeating the operation again, with the same number of retries.</target>
          </trans-unit>
          <trans-unit id="231" xml:space="preserve">
            <source>For example, if an order processing service fails with a fatal error that puts it out of action permanently, the retry strategy may detect a connection timeout and consider it to be a transient fault.</source>
            <target state="new">For example, if an order processing service fails with a fatal error that puts it out of action permanently, the retry strategy may detect a connection timeout and consider it to be a transient fault.</target>
          </trans-unit>
          <trans-unit id="232" xml:space="preserve">
            <source>The code will retry the operation a specified number of times and then give up.</source>
            <target state="new">The code will retry the operation a specified number of times and then give up.</target>
          </trans-unit>
          <trans-unit id="233" xml:space="preserve">
            <source>However, when another customer places an order, the operation will be attempted again - even though it is sure to fail every time.</source>
            <target state="new">However, when another customer places an order, the operation will be attempted again - even though it is sure to fail every time.</target>
          </trans-unit>
          <trans-unit id="234" xml:space="preserve">
            <source>To prevent continual retries for operations that continually fail, consider implementing the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Circuit Breaker pattern<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">To prevent continual retries for operations that continually fail, consider implementing the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Circuit Breaker pattern<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="235" xml:space="preserve">
            <source>In this pattern, if the number of failures within a specified time window exceeds the threshold, requests are returned to the caller immediately as errors, without attempting to access the failed resource or service.</source>
            <target state="new">In this pattern, if the number of failures within a specified time window exceeds the threshold, requests are returned to the caller immediately as errors, without attempting to access the failed resource or service.</target>
          </trans-unit>
          <trans-unit id="236" xml:space="preserve">
            <source>The application can periodically test the service, on an intermittent basis and with very long intervals between requests, to detect when it becomes available.</source>
            <target state="new">The application can periodically test the service, on an intermittent basis and with very long intervals between requests, to detect when it becomes available.</target>
          </trans-unit>
          <trans-unit id="237" xml:space="preserve">
            <source>An appropriate interval will depend on the scenario, such as the criticality of the operation and the nature of the service, and might be anything between a few minutes and several hours.</source>
            <target state="new">An appropriate interval will depend on the scenario, such as the criticality of the operation and the nature of the service, and might be anything between a few minutes and several hours.</target>
          </trans-unit>
          <trans-unit id="238" xml:space="preserve">
            <source>At the point where the test succeeds, the application can resume normal operations and pass requests to the newly recovered service.</source>
            <target state="new">At the point where the test succeeds, the application can resume normal operations and pass requests to the newly recovered service.</target>
          </trans-unit>
          <trans-unit id="239" xml:space="preserve">
            <source>In the meantime, it may be possible to fall back to another instance of the service (perhaps in a different datacenter or application), use a similar service that offers compatible (perhaps simpler) functionality, or perform some alternative operations in the hope that the service will become available soon.</source>
            <target state="new">In the meantime, it may be possible to fall back to another instance of the service (perhaps in a different datacenter or application), use a similar service that offers compatible (perhaps simpler) functionality, or perform some alternative operations in the hope that the service will become available soon.</target>
          </trans-unit>
          <trans-unit id="240" xml:space="preserve">
            <source>For example, it may be appropriate to store requests for the service in a queue or data store and replay them later.</source>
            <target state="new">For example, it may be appropriate to store requests for the service in a queue or data store and replay them later.</target>
          </trans-unit>
          <trans-unit id="241" xml:space="preserve">
            <source>Otherwise you might be able to redirect the user to an alternative instance of the application, degrade the performance of the application but still offer acceptable functionality, or just return a message to the user indicating that the application is not available at present.</source>
            <target state="new">Otherwise you might be able to redirect the user to an alternative instance of the application, degrade the performance of the application but still offer acceptable functionality, or just return a message to the user indicating that the application is not available at present.</target>
          </trans-unit>
          <trans-unit id="242" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Other considerations<ept id="1">&lt;/strong&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Other considerations<ept id="1">&lt;/strong&gt;</ept></target>
          </trans-unit>
          <trans-unit id="243" xml:space="preserve">
            <source>When deciding on the values for the number of retries and the retry intervals for a policy, consider if the operation on the service or resource is part of a long-running or multi-step operation.</source>
            <target state="new">When deciding on the values for the number of retries and the retry intervals for a policy, consider if the operation on the service or resource is part of a long-running or multi-step operation.</target>
          </trans-unit>
          <trans-unit id="244" xml:space="preserve">
            <source>It may be difficult or expensive to compensate all the other operational steps that have already succeeded when one fails.</source>
            <target state="new">It may be difficult or expensive to compensate all the other operational steps that have already succeeded when one fails.</target>
          </trans-unit>
          <trans-unit id="245" xml:space="preserve">
            <source>In this case, a very long interval and a large number of retries may be acceptable as long as it does not block other operations by holding or locking scarce resources.</source>
            <target state="new">In this case, a very long interval and a large number of retries may be acceptable as long as it does not block other operations by holding or locking scarce resources.</target>
          </trans-unit>
          <trans-unit id="246" xml:space="preserve">
            <source>Consider if retrying the same operation may cause inconsistencies in data.</source>
            <target state="new">Consider if retrying the same operation may cause inconsistencies in data.</target>
          </trans-unit>
          <trans-unit id="247" xml:space="preserve">
            <source>If some parts of a multi-step process are repeated, and the operations are not idempotent, it may result in an inconsistency.</source>
            <target state="new">If some parts of a multi-step process are repeated, and the operations are not idempotent, it may result in an inconsistency.</target>
          </trans-unit>
          <trans-unit id="248" xml:space="preserve">
            <source>For example, an operation that increments a value, if repeated, will produce an invalid result.</source>
            <target state="new">For example, an operation that increments a value, if repeated, will produce an invalid result.</target>
          </trans-unit>
          <trans-unit id="249" xml:space="preserve">
            <source>Repeating an operation that sends a message to a queue may cause an inconsistency in the message consumer if it cannot detect duplicate messages.</source>
            <target state="new">Repeating an operation that sends a message to a queue may cause an inconsistency in the message consumer if it cannot detect duplicate messages.</target>
          </trans-unit>
          <trans-unit id="250" xml:space="preserve">
            <source>To prevent this, ensure that you design each step as an idempotent operation.</source>
            <target state="new">To prevent this, ensure that you design each step as an idempotent operation.</target>
          </trans-unit>
          <trans-unit id="251" xml:space="preserve">
            <source>For more information about idempotency, see <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>幂等性模式<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">For more information about idempotency, see <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>幂等性模式<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="252" xml:space="preserve">
            <source>Consider the scope of the operations that will be retried.</source>
            <target state="new">Consider the scope of the operations that will be retried.</target>
          </trans-unit>
          <trans-unit id="253" xml:space="preserve">
            <source>For example, it may be easier to implement retry code at a level that encompasses several operations, and retry them all if one fails.</source>
            <target state="new">For example, it may be easier to implement retry code at a level that encompasses several operations, and retry them all if one fails.</target>
          </trans-unit>
          <trans-unit id="254" xml:space="preserve">
            <source>However, doing this may result in idempotency issues or unnecessary rollback operations.</source>
            <target state="new">However, doing this may result in idempotency issues or unnecessary rollback operations.</target>
          </trans-unit>
          <trans-unit id="255" xml:space="preserve">
            <source>If you choose a retry scope that encompasses several operations, take into account the total latency of all of them when determining the retry intervals, when monitoring the time taken, and before raising alerts for failures.</source>
            <target state="new">If you choose a retry scope that encompasses several operations, take into account the total latency of all of them when determining the retry intervals, when monitoring the time taken, and before raising alerts for failures.</target>
          </trans-unit>
          <trans-unit id="256" xml:space="preserve">
            <source>Consider how your retry strategy may affect neighbors and other tenants in a shared application, or when using shared resources and services.</source>
            <target state="new">Consider how your retry strategy may affect neighbors and other tenants in a shared application, or when using shared resources and services.</target>
          </trans-unit>
          <trans-unit id="257" xml:space="preserve">
            <source>Aggressive retry policies can cause an increasing number of transient faults to occur for these other users and for applications that share the resources and services.</source>
            <target state="new">Aggressive retry policies can cause an increasing number of transient faults to occur for these other users and for applications that share the resources and services.</target>
          </trans-unit>
          <trans-unit id="258" xml:space="preserve">
            <source>Likewise, your application may be affected by the retry policies implemented by other users of the resources and services.</source>
            <target state="new">Likewise, your application may be affected by the retry policies implemented by other users of the resources and services.</target>
          </trans-unit>
          <trans-unit id="259" xml:space="preserve">
            <source>For mission-critical applications, you may decide to use premium services that are not shared.</source>
            <target state="new">For mission-critical applications, you may decide to use premium services that are not shared.</target>
          </trans-unit>
          <trans-unit id="260" xml:space="preserve">
            <source>This provides you with much more control over the load and consequent throttling of these resources and services, which can help to justify the additional cost.</source>
            <target state="new">This provides you with much more control over the load and consequent throttling of these resources and services, which can help to justify the additional cost.</target>
          </trans-unit>
          <trans-unit id="261" xml:space="preserve">
            <source>更多的信息</source>
            <target state="new">更多的信息</target>
          </trans-unit>
          <trans-unit id="262" xml:space="preserve">
            <source><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>蔚蓝的特定于服务的重试的指导方针<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></source>
            <target state="new"><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>蔚蓝的特定于服务的重试的指导方针<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></target>
          </trans-unit>
          <trans-unit id="263" xml:space="preserve">
            <source><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>The Transient Fault Handling Application Block<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></source>
            <target state="new"><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>The Transient Fault Handling Application Block<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></target>
          </trans-unit>
          <trans-unit id="264" xml:space="preserve">
            <source><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>电路断路器模式<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></source>
            <target state="new"><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>电路断路器模式<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></target>
          </trans-unit>
          <trans-unit id="265" xml:space="preserve">
            <source><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>补偿的交易模式<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></source>
            <target state="new"><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>补偿的交易模式<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></target>
          </trans-unit>
          <trans-unit id="266" xml:space="preserve">
            <source><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>幂等性模式<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></source>
            <target state="new"><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>幂等性模式<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></target>
          </trans-unit>
        </group>
      </group>
    </body>
  </file>
</xliff>