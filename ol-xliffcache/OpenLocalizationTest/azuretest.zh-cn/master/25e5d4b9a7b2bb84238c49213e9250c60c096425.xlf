<?xml version="1.0" encoding="utf-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" source-language="en-us" target-language="zh-cn" original="2/18/2016 5:27:39 PM" tool-id="MarkdownTransformer" product-name="N/A" product-version="N/A" build-num="1">
    <header>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">25e5d4b9a7b2bb84238c49213e9250c60c096425</xliffext:olfilehash>
      <tool tool-id="MarkdownTransformer" tool-name="MarkdownToXliff" tool-version="1.0" tool-company="Microsoft" />
    </header>
    <body>
      <group extype="content">
        <group id="101">
          <trans-unit id="101" xml:space="preserve">
            <source>Dynamic SQL in SQL Data Warehouse | Microsoft Azure</source>
            <target state="new">Dynamic SQL in SQL Data Warehouse | Microsoft Azure</target>
          </trans-unit>
          <trans-unit id="102" xml:space="preserve">
            <source>Tips for using dynamic SQL in Azure SQL Data Warehouse for developing solutions.</source>
            <target state="new">Tips for using dynamic SQL in Azure SQL Data Warehouse for developing solutions.</target>
          </trans-unit>
          <trans-unit id="103" xml:space="preserve">
            <source>Dynamic SQL in SQL Data Warehouse</source>
            <target state="new">Dynamic SQL in SQL Data Warehouse</target>
          </trans-unit>
          <trans-unit id="104" xml:space="preserve">
            <source>When developing application code for SQL Data Warehouse you may find yourself needing to use dynamic sql to help deliver flexible, generic and modular solutions.</source>
            <target state="new">When developing application code for SQL Data Warehouse you may find yourself needing to use dynamic sql to help deliver flexible, generic and modular solutions.</target>
          </trans-unit>
          <trans-unit id="105" xml:space="preserve">
            <source>However, SQL Data Warehouse does not support blob data types at this time.</source>
            <target state="new">However, SQL Data Warehouse does not support blob data types at this time.</target>
          </trans-unit>
          <trans-unit id="106" xml:space="preserve">
            <source>This may limit the size of your strings as blob types include both varchar(max) and nvarchar(max) types.</source>
            <target state="new">This may limit the size of your strings as blob types include both varchar(max) and nvarchar(max) types.</target>
          </trans-unit>
          <trans-unit id="107" xml:space="preserve">
            <source>You may find that you have used these types in your application code when building very large strings of dynamic SQL code you need to execute.</source>
            <target state="new">You may find that you have used these types in your application code when building very large strings of dynamic SQL code you need to execute.</target>
          </trans-unit>
          <trans-unit id="108" xml:space="preserve">
            <source>In these situations you will need to break the code into chunks and use the EXEC statement instead.</source>
            <target state="new">In these situations you will need to break the code into chunks and use the EXEC statement instead.</target>
          </trans-unit>
          <trans-unit id="109" xml:space="preserve">
            <source>A simplified example is available below:</source>
            <target state="new">A simplified example is available below:</target>
          </trans-unit>
          <trans-unit id="110" xml:space="preserve">
            <source>If the string is not particularly long then you can use <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>sp_executesql[]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> as normal.</source>
            <target state="new">If the string is not particularly long then you can use <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>sp_executesql[]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> as normal.</target>
          </trans-unit>
          <trans-unit id="111" xml:space="preserve">
            <source>Next steps</source>
            <target state="new">Next steps</target>
          </trans-unit>
          <trans-unit id="112" xml:space="preserve">
            <source>For more development tips, see <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>development overview[]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">For more development tips, see <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>development overview[]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
        </group>
      </group>
    </body>
  </file>
</xliff>