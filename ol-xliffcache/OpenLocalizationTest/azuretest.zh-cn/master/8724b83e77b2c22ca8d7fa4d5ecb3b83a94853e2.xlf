<?xml version="1.0" encoding="utf-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" source-language="en-us" target-language="zh-cn" original="2/19/2016 5:22:46 PM" tool-id="MarkdownTransformer" product-name="N/A" product-version="N/A" build-num="1">
    <header>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8724b83e77b2c22ca8d7fa4d5ecb3b83a94853e2</xliffext:olfilehash>
      <tool tool-id="MarkdownTransformer" tool-name="MarkdownToXliff" tool-version="1.0" tool-company="Microsoft" />
    </header>
    <body>
      <group extype="content">
        <group id="101">
          <trans-unit id="101" xml:space="preserve">
            <source>Multi-shard querying</source>
            <target state="new">Multi-shard querying</target>
          </trans-unit>
          <trans-unit id="102" xml:space="preserve">
            <source>Run queries across shards using the elastic database client library.</source>
            <target state="new">Run queries across shards using the elastic database client library.</target>
          </trans-unit>
          <trans-unit id="103" xml:space="preserve">
            <source>Multi-shard querying</source>
            <target state="new">Multi-shard querying</target>
          </trans-unit>
          <trans-unit id="104" xml:space="preserve">
            <source>Overview</source>
            <target state="new">Overview</target>
          </trans-unit>
          <trans-unit id="105" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Multi-shard querying<ept id="1">&lt;/strong&gt;</ept> is used for tasks such as data collection/reporting that require running a query that stretches across several shards.</source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Multi-shard querying<ept id="1">&lt;/strong&gt;</ept> is used for tasks such as data collection/reporting that require running a query that stretches across several shards.</target>
          </trans-unit>
          <trans-unit id="106" xml:space="preserve">
            <source>(Contrast this to <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>data-dependent routing<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>, which performs all work on a single shard.)</source>
            <target state="new">(Contrast this to <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>data-dependent routing<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>, which performs all work on a single shard.)</target>
          </trans-unit>
          <trans-unit id="107" xml:space="preserve">
            <source>To use SQL Server Management Studio, see <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Getting started with Elastic Database query<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">To use SQL Server Management Studio, see <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Getting started with Elastic Database query<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="108" xml:space="preserve">
            <source>The elastic database client library introduces a new namespace called <bpt id="2">&lt;strong&gt;</bpt>Microsoft.Azure.SqlDatabase.ElasticScale.Query<ept id="2">&lt;/strong&gt;</ept> that provides the ability to query multiple shards using a single query and result.</source>
            <target state="new">The elastic database client library introduces a new namespace called <bpt id="2">&lt;strong&gt;</bpt>Microsoft.Azure.SqlDatabase.ElasticScale.Query<ept id="2">&lt;/strong&gt;</ept> that provides the ability to query multiple shards using a single query and result.</target>
          </trans-unit>
          <trans-unit id="109" xml:space="preserve">
            <source>It provides a querying abstraction over a collection of shards.</source>
            <target state="new">It provides a querying abstraction over a collection of shards.</target>
          </trans-unit>
          <trans-unit id="110" xml:space="preserve">
            <source>It also provides alternative execution policies, in particular partial results, to deal with failures when querying over many shards.</source>
            <target state="new">It also provides alternative execution policies, in particular partial results, to deal with failures when querying over many shards.</target>
          </trans-unit>
          <trans-unit id="111" xml:space="preserve">
            <source>The main entry point into multi-shard querying is the <bpt id="2">&lt;strong&gt;</bpt>MultiShardConnection<ept id="2">&lt;/strong&gt;</ept> class.</source>
            <target state="new">The main entry point into multi-shard querying is the <bpt id="2">&lt;strong&gt;</bpt>MultiShardConnection<ept id="2">&lt;/strong&gt;</ept> class.</target>
          </trans-unit>
          <trans-unit id="112" xml:space="preserve">
            <source>As with data-dependent routing, the API follows the familiar experience of the **<bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>System.Data.SqlClient<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>** classes and methods.</source>
            <target state="new">As with data-dependent routing, the API follows the familiar experience of the **<bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>System.Data.SqlClient<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>** classes and methods.</target>
          </trans-unit>
          <trans-unit id="113" xml:space="preserve">
            <source>With the <bpt id="2">&lt;strong&gt;</bpt>SqlClient<ept id="2">&lt;/strong&gt;</ept> library, the first step is to create a <bpt id="4">&lt;strong&gt;</bpt>SqlConnection<ept id="4">&lt;/strong&gt;</ept>, then create a <bpt id="6">&lt;strong&gt;</bpt>SqlCommand<ept id="6">&lt;/strong&gt;</ept> for the connection, then execute the command through one of the <bpt id="8">&lt;strong&gt;</bpt>Execute<ept id="8">&lt;/strong&gt;</ept> methods.</source>
            <target state="new">With the <bpt id="2">&lt;strong&gt;</bpt>SqlClient<ept id="2">&lt;/strong&gt;</ept> library, the first step is to create a <bpt id="4">&lt;strong&gt;</bpt>SqlConnection<ept id="4">&lt;/strong&gt;</ept>, then create a <bpt id="6">&lt;strong&gt;</bpt>SqlCommand<ept id="6">&lt;/strong&gt;</ept> for the connection, then execute the command through one of the <bpt id="8">&lt;strong&gt;</bpt>Execute<ept id="8">&lt;/strong&gt;</ept> methods.</target>
          </trans-unit>
          <trans-unit id="114" xml:space="preserve">
            <source>Finally, <bpt id="2">&lt;strong&gt;</bpt>SqlDataReader<ept id="2">&lt;/strong&gt;</ept> iterates through the result sets returned from the command execution.</source>
            <target state="new">Finally, <bpt id="2">&lt;strong&gt;</bpt>SqlDataReader<ept id="2">&lt;/strong&gt;</ept> iterates through the result sets returned from the command execution.</target>
          </trans-unit>
          <trans-unit id="115" xml:space="preserve">
            <source>The experience with the multi-shard query APIs follows these steps:</source>
            <target state="new">The experience with the multi-shard query APIs follows these steps:</target>
          </trans-unit>
          <trans-unit id="116" xml:space="preserve">
            <source>Create a <bpt id="2">&lt;strong&gt;</bpt>MultiShardConnection<ept id="2">&lt;/strong&gt;</ept>.</source>
            <target state="new">Create a <bpt id="2">&lt;strong&gt;</bpt>MultiShardConnection<ept id="2">&lt;/strong&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="117" xml:space="preserve">
            <source>Create a <bpt id="2">&lt;strong&gt;</bpt>MultiShardCommand<ept id="2">&lt;/strong&gt;</ept> for a <bpt id="4">&lt;strong&gt;</bpt>MultiShardConnection<ept id="4">&lt;/strong&gt;</ept>.</source>
            <target state="new">Create a <bpt id="2">&lt;strong&gt;</bpt>MultiShardCommand<ept id="2">&lt;/strong&gt;</ept> for a <bpt id="4">&lt;strong&gt;</bpt>MultiShardConnection<ept id="4">&lt;/strong&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="118" xml:space="preserve">
            <source>Execute the command.</source>
            <target state="new">Execute the command.</target>
          </trans-unit>
          <trans-unit id="119" xml:space="preserve">
            <source>Consume the results through the <bpt id="2">&lt;strong&gt;</bpt>MultiShardDataReader<ept id="2">&lt;/strong&gt;</ept>.</source>
            <target state="new">Consume the results through the <bpt id="2">&lt;strong&gt;</bpt>MultiShardDataReader<ept id="2">&lt;/strong&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="120" xml:space="preserve">
            <source>A key difference is the construction of multi-shard connections.</source>
            <target state="new">A key difference is the construction of multi-shard connections.</target>
          </trans-unit>
          <trans-unit id="121" xml:space="preserve">
            <source>Where <bpt id="2">&lt;strong&gt;</bpt>SqlConnection<ept id="2">&lt;/strong&gt;</ept> operates on a single database, the <bpt id="4">&lt;strong&gt;</bpt>MultiShardConnection<ept id="4">&lt;/strong&gt;</ept> takes a <bpt id="6">&lt;strong&gt;</bpt>*collection of shards*<ept id="6">&lt;/strong&gt;</ept> as its input.</source>
            <target state="new">Where <bpt id="2">&lt;strong&gt;</bpt>SqlConnection<ept id="2">&lt;/strong&gt;</ept> operates on a single database, the <bpt id="4">&lt;strong&gt;</bpt>MultiShardConnection<ept id="4">&lt;/strong&gt;</ept> takes a <bpt id="6">&lt;strong&gt;</bpt>*collection of shards*<ept id="6">&lt;/strong&gt;</ept> as its input.</target>
          </trans-unit>
          <trans-unit id="122" xml:space="preserve">
            <source>One can populate the collection of shards from a shard map.</source>
            <target state="new">One can populate the collection of shards from a shard map.</target>
          </trans-unit>
          <trans-unit id="123" xml:space="preserve">
            <source>The query is then executed on the collection of shards using <bpt id="2">&lt;strong&gt;</bpt>UNION ALL<ept id="2">&lt;/strong&gt;</ept> semantics to assemble a single overall result.</source>
            <target state="new">The query is then executed on the collection of shards using <bpt id="2">&lt;strong&gt;</bpt>UNION ALL<ept id="2">&lt;/strong&gt;</ept> semantics to assemble a single overall result.</target>
          </trans-unit>
          <trans-unit id="124" xml:space="preserve">
            <source>Optionally, the name of the shard where the row originates from can be added to the output using the <bpt id="2">&lt;strong&gt;</bpt>ExecutionOptions<ept id="2">&lt;/strong&gt;</ept> property on command.</source>
            <target state="new">Optionally, the name of the shard where the row originates from can be added to the output using the <bpt id="2">&lt;strong&gt;</bpt>ExecutionOptions<ept id="2">&lt;/strong&gt;</ept> property on command.</target>
          </trans-unit>
          <trans-unit id="125" xml:space="preserve">
            <source>The following code illustrates the usage of multi-shard querying using a given <bpt id="2">&lt;strong&gt;</bpt>ShardMap<ept id="2">&lt;/strong&gt;</ept> named <bpt id="4">&lt;em&gt;</bpt>myShardMap<ept id="4">&lt;/em&gt;</ept>.</source>
            <target state="new">The following code illustrates the usage of multi-shard querying using a given <bpt id="2">&lt;strong&gt;</bpt>ShardMap<ept id="2">&lt;/strong&gt;</ept> named <bpt id="4">&lt;em&gt;</bpt>myShardMap<ept id="4">&lt;/em&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="126" xml:space="preserve">
            <source>Note the call to <bpt id="2">&lt;strong&gt;</bpt>myShardMap.GetShards()<ept id="2">&lt;/strong&gt;</ept>.</source>
            <target state="new">Note the call to <bpt id="2">&lt;strong&gt;</bpt>myShardMap.GetShards()<ept id="2">&lt;/strong&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="127" xml:space="preserve">
            <source>This method retrieves all shards from the shard map and provides an easy way to run a query across all relevant databases.</source>
            <target state="new">This method retrieves all shards from the shard map and provides an easy way to run a query across all relevant databases.</target>
          </trans-unit>
          <trans-unit id="128" xml:space="preserve">
            <source>The collection of shards for a multi-shard query can be refined further by performing a LINQ query over the collection returned from the call to <bpt id="2">&lt;strong&gt;</bpt>myShardMap.GetShards()<ept id="2">&lt;/strong&gt;</ept>.</source>
            <target state="new">The collection of shards for a multi-shard query can be refined further by performing a LINQ query over the collection returned from the call to <bpt id="2">&lt;strong&gt;</bpt>myShardMap.GetShards()<ept id="2">&lt;/strong&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="129" xml:space="preserve">
            <source>In combination with the partial results policy, the current capability in multi-shard querying has been designed to work well for tens up to hundreds of shards.</source>
            <target state="new">In combination with the partial results policy, the current capability in multi-shard querying has been designed to work well for tens up to hundreds of shards.</target>
          </trans-unit>
          <trans-unit id="130" xml:space="preserve">
            <source>A limitation with multi-shard querying is currently the lack of validation for shards and shardlets that are queried.</source>
            <target state="new">A limitation with multi-shard querying is currently the lack of validation for shards and shardlets that are queried.</target>
          </trans-unit>
          <trans-unit id="131" xml:space="preserve">
            <source>While data-dependent routing verifies that a given shard is part of the shard map at the time of querying, multi-shard queries do not perform this check.</source>
            <target state="new">While data-dependent routing verifies that a given shard is part of the shard map at the time of querying, multi-shard queries do not perform this check.</target>
          </trans-unit>
          <trans-unit id="132" xml:space="preserve">
            <source>This can lead to multi-shard queries running on databases that have since been removed from the shard map.</source>
            <target state="new">This can lead to multi-shard queries running on databases that have since been removed from the shard map.</target>
          </trans-unit>
          <trans-unit id="133" xml:space="preserve">
            <source>Multi-shard queries and split-merge operations</source>
            <target state="new">Multi-shard queries and split-merge operations</target>
          </trans-unit>
          <trans-unit id="134" xml:space="preserve">
            <source>Multi-shard queries do not verify whether shardlets on the queried database are participating in ongoing split-merge operations.</source>
            <target state="new">Multi-shard queries do not verify whether shardlets on the queried database are participating in ongoing split-merge operations.</target>
          </trans-unit>
          <trans-unit id="135" xml:space="preserve">
            <source>This can lead to inconsistencies where rows from the same shardlet show for multiple databases in the same multi-shard query.</source>
            <target state="new">This can lead to inconsistencies where rows from the same shardlet show for multiple databases in the same multi-shard query.</target>
          </trans-unit>
          <trans-unit id="136" xml:space="preserve">
            <source>Be aware of these limitations and consider draining ongoing split-merge operations and changes to the shard map while performing multi-shard queries.</source>
            <target state="new">Be aware of these limitations and consider draining ongoing split-merge operations and changes to the shard map while performing multi-shard queries.</target>
          </trans-unit>
          <trans-unit id="137" xml:space="preserve">
            <source><ph id="1">&lt;token href="../../includes/elastic-scale-include.md"/&gt;</ph></source>
            <target state="new"><ph id="1">&lt;token href="../../includes/elastic-scale-include.md"/&gt;</ph></target>
          </trans-unit>
        </group>
      </group>
    </body>
  </file>
</xliff>