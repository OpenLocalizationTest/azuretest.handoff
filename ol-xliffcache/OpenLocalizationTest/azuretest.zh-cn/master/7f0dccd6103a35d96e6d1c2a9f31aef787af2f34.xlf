<?xml version="1.0" encoding="utf-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" source-language="en-us" target-language="zh-cn" original="2/19/2016 5:11:52 PM" tool-id="MarkdownTransformer" product-name="N/A" product-version="N/A" build-num="1">
    <header>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7f0dccd6103a35d96e6d1c2a9f31aef787af2f34</xliffext:olfilehash>
      <tool tool-id="MarkdownTransformer" tool-name="MarkdownToXliff" tool-version="1.0" tool-company="Microsoft" />
    </header>
    <body>
      <group extype="content">
        <group id="101">
          <trans-unit id="101" xml:space="preserve">
            <source>How to use Notification Hubs with PHP</source>
            <target state="new">How to use Notification Hubs with PHP</target>
          </trans-unit>
          <trans-unit id="102" xml:space="preserve">
            <source>Learn how to use Azure Notification Hubs from a PHP back-end.</source>
            <target state="new">Learn how to use Azure Notification Hubs from a PHP back-end.</target>
          </trans-unit>
          <trans-unit id="103" xml:space="preserve">
            <source>How to use Notification Hubs from PHP</source>
            <target state="new">How to use Notification Hubs from PHP</target>
          </trans-unit>
          <trans-unit id="104" xml:space="preserve">
            <source>You can access all Notification Hubs features from a Java/PHP/Ruby back-end using the Notification Hub REST interface as described in the MSDN topic <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Notification Hubs REST APIs<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">You can access all Notification Hubs features from a Java/PHP/Ruby back-end using the Notification Hub REST interface as described in the MSDN topic <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Notification Hubs REST APIs<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="105" xml:space="preserve">
            <source>In this topic we show how to:</source>
            <target state="new">In this topic we show how to:</target>
          </trans-unit>
          <trans-unit id="106" xml:space="preserve">
            <source>Build a REST client for Notification Hubs features in PHP;</source>
            <target state="new">Build a REST client for Notification Hubs features in PHP;</target>
          </trans-unit>
          <trans-unit id="107" xml:space="preserve">
            <source>Follow the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Get started tutorial<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> for your mobile platform of choice, implementing the back-end portion in PHP.</source>
            <target state="new">Follow the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Get started tutorial<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> for your mobile platform of choice, implementing the back-end portion in PHP.</target>
          </trans-unit>
          <trans-unit id="108" xml:space="preserve">
            <source>Client interface</source>
            <target state="new">Client interface</target>
          </trans-unit>
          <trans-unit id="109" xml:space="preserve">
            <source>The main client interface can provide the same methods that are available in the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>.NET Notification Hubs SDK<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>, this will allow you to directly translate all the tutorials and samples currently available on this site, and contributed by the community on the internet.</source>
            <target state="new">The main client interface can provide the same methods that are available in the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>.NET Notification Hubs SDK<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>, this will allow you to directly translate all the tutorials and samples currently available on this site, and contributed by the community on the internet.</target>
          </trans-unit>
          <trans-unit id="110" xml:space="preserve">
            <source>You can find all the code available in the [PHP REST wrapper sample].</source>
            <target state="new">You can find all the code available in the [PHP REST wrapper sample].</target>
          </trans-unit>
          <trans-unit id="111" xml:space="preserve">
            <source>For example, to create a client:</source>
            <target state="new">For example, to create a client:</target>
          </trans-unit>
          <trans-unit id="112" xml:space="preserve">
            <source>To send an iOS native notification:</source>
            <target state="new">To send an iOS native notification:</target>
          </trans-unit>
          <trans-unit id="113" xml:space="preserve">
            <source>Implementation</source>
            <target state="new">Implementation</target>
          </trans-unit>
          <trans-unit id="114" xml:space="preserve">
            <source>If you did not already, please follow our [Get started tutorial] up to the last section where you have to implement the back-end.</source>
            <target state="new">If you did not already, please follow our [Get started tutorial] up to the last section where you have to implement the back-end.</target>
          </trans-unit>
          <trans-unit id="115" xml:space="preserve">
            <source>Also, if you want you can use the code from the [PHP REST wrapper sample] and go directly to the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Complete the tutorial<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> section.</source>
            <target state="new">Also, if you want you can use the code from the [PHP REST wrapper sample] and go directly to the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Complete the tutorial<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> section.</target>
          </trans-unit>
          <trans-unit id="116" xml:space="preserve">
            <source>All the details to implement a full REST wrapper can be found on <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>MSDN<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">All the details to implement a full REST wrapper can be found on <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>MSDN<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="117" xml:space="preserve">
            <source>In this section we will describe the PHP implementation of the main steps required to access Notification Hubs REST endpoints:</source>
            <target state="new">In this section we will describe the PHP implementation of the main steps required to access Notification Hubs REST endpoints:</target>
          </trans-unit>
          <trans-unit id="118" xml:space="preserve">
            <source>Parse the connection string</source>
            <target state="new">Parse the connection string</target>
          </trans-unit>
          <trans-unit id="119" xml:space="preserve">
            <source>Generate the authorization token</source>
            <target state="new">Generate the authorization token</target>
          </trans-unit>
          <trans-unit id="120" xml:space="preserve">
            <source>Perform the HTTP call</source>
            <target state="new">Perform the HTTP call</target>
          </trans-unit>
          <trans-unit id="121" xml:space="preserve">
            <source>Parse the connection string</source>
            <target state="new">Parse the connection string</target>
          </trans-unit>
          <trans-unit id="122" xml:space="preserve">
            <source>Here is the main class implementing the client, whose constructor that parses the connection string:</source>
            <target state="new">Here is the main class implementing the client, whose constructor that parses the connection string:</target>
          </trans-unit>
          <trans-unit id="123" xml:space="preserve">
            <source>Create security token</source>
            <target state="new">Create security token</target>
          </trans-unit>
          <trans-unit id="124" xml:space="preserve">
            <source>The details of the security token creation are available <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>here<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">The details of the security token creation are available <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>here<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="125" xml:space="preserve">
            <source>The following method has to be added to the <bpt id="2">&lt;strong&gt;</bpt>NotificationHub<ept id="2">&lt;/strong&gt;</ept> class to create the token based on the URI of the current request and the credentials extracted from the connection string.</source>
            <target state="new">The following method has to be added to the <bpt id="2">&lt;strong&gt;</bpt>NotificationHub<ept id="2">&lt;/strong&gt;</ept> class to create the token based on the URI of the current request and the credentials extracted from the connection string.</target>
          </trans-unit>
          <trans-unit id="126" xml:space="preserve">
            <source>Send a notification</source>
            <target state="new">Send a notification</target>
          </trans-unit>
          <trans-unit id="127" xml:space="preserve">
            <source>First, let use define a class representing a notification.</source>
            <target state="new">First, let use define a class representing a notification.</target>
          </trans-unit>
          <trans-unit id="128" xml:space="preserve">
            <source>This class is a container for a native notification body, or a set of properties on case of a template notification, and a set of headers which contains format (native platform or template) and platform-specific properties (like Apple expiration property and WNS headers).</source>
            <target state="new">This class is a container for a native notification body, or a set of properties on case of a template notification, and a set of headers which contains format (native platform or template) and platform-specific properties (like Apple expiration property and WNS headers).</target>
          </trans-unit>
          <trans-unit id="129" xml:space="preserve">
            <source>Please refer to the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Notification Hubs REST APIs documentation<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> and the specific notification platforms' formats for all the options available.</source>
            <target state="new">Please refer to the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Notification Hubs REST APIs documentation<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> and the specific notification platforms' formats for all the options available.</target>
          </trans-unit>
          <trans-unit id="130" xml:space="preserve">
            <source>Armed with this class, we can now write the send notification methods inside of the <bpt id="2">&lt;strong&gt;</bpt>NotificationHub<ept id="2">&lt;/strong&gt;</ept> class.</source>
            <target state="new">Armed with this class, we can now write the send notification methods inside of the <bpt id="2">&lt;strong&gt;</bpt>NotificationHub<ept id="2">&lt;/strong&gt;</ept> class.</target>
          </trans-unit>
          <trans-unit id="131" xml:space="preserve">
            <source>The above methods send an HTTP POST request to the /messages endpoint of your notification hub, with the correct body and headers to send the notification.</source>
            <target state="new">The above methods send an HTTP POST request to the /messages endpoint of your notification hub, with the correct body and headers to send the notification.</target>
          </trans-unit>
          <trans-unit id="132" xml:space="preserve">
            <source><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>Complete the tutorial</source>
            <target state="new"><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>Complete the tutorial</target>
          </trans-unit>
          <trans-unit id="133" xml:space="preserve">
            <source>Now you can complete the Get Started tutorial by sending the notification from a PHP back-end.</source>
            <target state="new">Now you can complete the Get Started tutorial by sending the notification from a PHP back-end.</target>
          </trans-unit>
          <trans-unit id="134" xml:space="preserve">
            <source>Initialize your Notification Hubs client (substitute the connection string and hub name as instructed in the [Get started tutorial]):</source>
            <target state="new">Initialize your Notification Hubs client (substitute the connection string and hub name as instructed in the [Get started tutorial]):</target>
          </trans-unit>
          <trans-unit id="135" xml:space="preserve">
            <source>$hub = new NotificationHub("connection string", "hubname");</source>
            <target state="new">$hub = new NotificationHub("connection string", "hubname");</target>
          </trans-unit>
          <trans-unit id="136" xml:space="preserve">
            <source>Then add the send code depending on your target mobile platform.</source>
            <target state="new">Then add the send code depending on your target mobile platform.</target>
          </trans-unit>
          <trans-unit id="137" xml:space="preserve">
            <source>Windows Store and Windows Phone 8.1 (non-Silverlight)</source>
            <target state="new">Windows Store and Windows Phone 8.1 (non-Silverlight)</target>
          </trans-unit>
          <trans-unit id="138" xml:space="preserve">
            <source>iOS</source>
            <target state="new">iOS</target>
          </trans-unit>
          <trans-unit id="139" xml:space="preserve">
            <source>Android</source>
            <target state="new">Android</target>
          </trans-unit>
          <trans-unit id="140" xml:space="preserve">
            <source>Windows Phone 8.0 and 8.1 Silverlight</source>
            <target state="new">Windows Phone 8.0 and 8.1 Silverlight</target>
          </trans-unit>
          <trans-unit id="141" xml:space="preserve">
            <source>Kindle Fire</source>
            <target state="new">Kindle Fire</target>
          </trans-unit>
          <trans-unit id="142" xml:space="preserve">
            <source>Running your PHP code should produce now a notification appearing on your target device.</source>
            <target state="new">Running your PHP code should produce now a notification appearing on your target device.</target>
          </trans-unit>
          <trans-unit id="143" xml:space="preserve">
            <source>Next Steps</source>
            <target state="new">Next Steps</target>
          </trans-unit>
          <trans-unit id="144" xml:space="preserve">
            <source>In this topic we showed how to create a simple Java REST client for Notification Hubs.</source>
            <target state="new">In this topic we showed how to create a simple Java REST client for Notification Hubs.</target>
          </trans-unit>
          <trans-unit id="145" xml:space="preserve">
            <source>From here you can:</source>
            <target state="new">From here you can:</target>
          </trans-unit>
          <trans-unit id="146" xml:space="preserve">
            <source>Download the full [PHP REST wrapper sample], which contains all the code above.</source>
            <target state="new">Download the full [PHP REST wrapper sample], which contains all the code above.</target>
          </trans-unit>
          <trans-unit id="147" xml:space="preserve">
            <source>Continue learning about Notification Hubs tagging feature in the [Breaking News tutorial]</source>
            <target state="new">Continue learning about Notification Hubs tagging feature in the [Breaking News tutorial]</target>
          </trans-unit>
          <trans-unit id="148" xml:space="preserve">
            <source>Learn about pushing notifications to individual users in [Notify Users tutorial]</source>
            <target state="new">Learn about pushing notifications to individual users in [Notify Users tutorial]</target>
          </trans-unit>
        </group>
      </group>
    </body>
  </file>
</xliff>