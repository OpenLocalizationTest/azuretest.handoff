<?xml version="1.0" encoding="utf-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" source-language="en-us" target-language="zh-cn" original="2/18/2016 5:19:24 PM" tool-id="MarkdownTransformer" product-name="N/A" product-version="N/A" build-num="1">
    <header>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1431e5ffbab813b051d4d47bddd20bae81828d0e</xliffext:olfilehash>
      <tool tool-id="MarkdownTransformer" tool-name="MarkdownToXliff" tool-version="1.0" tool-company="Microsoft" />
    </header>
    <body>
      <group extype="content">
        <group id="101">
          <trans-unit id="101" xml:space="preserve">
            <source>Inserting Ads on the Client Side</source>
            <target state="new">Inserting Ads on the Client Side</target>
          </trans-unit>
          <trans-unit id="102" xml:space="preserve">
            <source>This topic shows how to insert ads on the client side.</source>
            <target state="new">This topic shows how to insert ads on the client side.</target>
          </trans-unit>
          <trans-unit id="103" xml:space="preserve">
            <source>Inserting Ads on the Client Side</source>
            <target state="new">Inserting Ads on the Client Side</target>
          </trans-unit>
          <trans-unit id="104" xml:space="preserve">
            <source>This topic contains information on how to insert various types of ads on the client side.</source>
            <target state="new">This topic contains information on how to insert various types of ads on the client side.</target>
          </trans-unit>
          <trans-unit id="105" xml:space="preserve">
            <source>For information about closed captioning and ad support in Live streaming videos, see <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Supported Closed Captioning and Ad Insertion Standards<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">For information about closed captioning and ad support in Live streaming videos, see <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Supported Closed Captioning and Ad Insertion Standards<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="106" xml:space="preserve">
            <source><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>Inserting Ads into your Media</source>
            <target state="new"><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>Inserting Ads into your Media</target>
          </trans-unit>
          <trans-unit id="107" xml:space="preserve">
            <source>Azure Media Services provides support for ad insertion through the Windows Media Platform: Player Frameworks.</source>
            <target state="new">Azure Media Services provides support for ad insertion through the Windows Media Platform: Player Frameworks.</target>
          </trans-unit>
          <trans-unit id="108" xml:space="preserve">
            <source>Player frameworks with ad support are available for Windows 8, Silverlight, Windows Phone 8, and iOS devices.</source>
            <target state="new">Player frameworks with ad support are available for Windows 8, Silverlight, Windows Phone 8, and iOS devices.</target>
          </trans-unit>
          <trans-unit id="109" xml:space="preserve">
            <source>Each player framework contains sample code that shows you how to implement a player application.There are three different kinds of ads you can insert into your media:list.</source>
            <target state="new">Each player framework contains sample code that shows you how to implement a player application.There are three different kinds of ads you can insert into your media:list.</target>
          </trans-unit>
          <trans-unit id="110" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Linear<ept id="1">&lt;/strong&gt;</ept> – full frame ads that pause the main video.</source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Linear<ept id="1">&lt;/strong&gt;</ept> – full frame ads that pause the main video.</target>
          </trans-unit>
          <trans-unit id="111" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Nonlinear<ept id="1">&lt;/strong&gt;</ept> – overlay ads that are displayed as the main video is playing, usually a logo or other static image placed within the player.</source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Nonlinear<ept id="1">&lt;/strong&gt;</ept> – overlay ads that are displayed as the main video is playing, usually a logo or other static image placed within the player.</target>
          </trans-unit>
          <trans-unit id="112" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Companion<ept id="1">&lt;/strong&gt;</ept> – ads that are displayed outside of the player.</source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Companion<ept id="1">&lt;/strong&gt;</ept> – ads that are displayed outside of the player.</target>
          </trans-unit>
          <trans-unit id="113" xml:space="preserve">
            <source>Ads can be placed at any point in the main video’s time line.</source>
            <target state="new">Ads can be placed at any point in the main video’s time line.</target>
          </trans-unit>
          <trans-unit id="114" xml:space="preserve">
            <source>You must tell the player when to play the ad and which ads to play.</source>
            <target state="new">You must tell the player when to play the ad and which ads to play.</target>
          </trans-unit>
          <trans-unit id="115" xml:space="preserve">
            <source>This is done using a set of standard XML-based files: Video Ad Service Template (VAST), Digital Video Multiple Ad Playlist (VMAP), Media Abstract Sequencing Template (MAST), and Digital Video Player Ad Interface Definition (VPAID).</source>
            <target state="new">This is done using a set of standard XML-based files: Video Ad Service Template (VAST), Digital Video Multiple Ad Playlist (VMAP), Media Abstract Sequencing Template (MAST), and Digital Video Player Ad Interface Definition (VPAID).</target>
          </trans-unit>
          <trans-unit id="116" xml:space="preserve">
            <source>VAST files specify what ads to display.</source>
            <target state="new">VAST files specify what ads to display.</target>
          </trans-unit>
          <trans-unit id="117" xml:space="preserve">
            <source>VMAP files specify when to play various ads and contain VAST XML.</source>
            <target state="new">VMAP files specify when to play various ads and contain VAST XML.</target>
          </trans-unit>
          <trans-unit id="118" xml:space="preserve">
            <source>MAST files are another way to sequence ads which also can contain VAST XML.</source>
            <target state="new">MAST files are another way to sequence ads which also can contain VAST XML.</target>
          </trans-unit>
          <trans-unit id="119" xml:space="preserve">
            <source>VPAID files define an interface between the video player and the ad or ad server.</source>
            <target state="new">VPAID files define an interface between the video player and the ad or ad server.</target>
          </trans-unit>
          <trans-unit id="120" xml:space="preserve">
            <source>Each player framework works differently and each will be covered in its own topic.</source>
            <target state="new">Each player framework works differently and each will be covered in its own topic.</target>
          </trans-unit>
          <trans-unit id="121" xml:space="preserve">
            <source>This topic will describe the basic mechanisms used to insert ads.Video player applications request ads from an ad server.</source>
            <target state="new">This topic will describe the basic mechanisms used to insert ads.Video player applications request ads from an ad server.</target>
          </trans-unit>
          <trans-unit id="122" xml:space="preserve">
            <source>The ad server can respond in a number of ways:</source>
            <target state="new">The ad server can respond in a number of ways:</target>
          </trans-unit>
          <trans-unit id="123" xml:space="preserve">
            <source>Return a VAST file</source>
            <target state="new">Return a VAST file</target>
          </trans-unit>
          <trans-unit id="124" xml:space="preserve">
            <source>Return a VMAP file (with embedded VAST)</source>
            <target state="new">Return a VMAP file (with embedded VAST)</target>
          </trans-unit>
          <trans-unit id="125" xml:space="preserve">
            <source>Return a MAST file (with embedded VAST)</source>
            <target state="new">Return a MAST file (with embedded VAST)</target>
          </trans-unit>
          <trans-unit id="126" xml:space="preserve">
            <source>Return a VAST file with VPAID ads</source>
            <target state="new">Return a VAST file with VPAID ads</target>
          </trans-unit>
          <trans-unit id="127" xml:space="preserve">
            <source>Using a Video Ad Service Template (VAST) File</source>
            <target state="new">Using a Video Ad Service Template (VAST) File</target>
          </trans-unit>
          <trans-unit id="128" xml:space="preserve">
            <source>A VAST file specifies what ad or ads to display.</source>
            <target state="new">A VAST file specifies what ad or ads to display.</target>
          </trans-unit>
          <trans-unit id="129" xml:space="preserve">
            <source>The following XML is an example of a VAST file for a linear ad:</source>
            <target state="new">The following XML is an example of a VAST file for a linear ad:</target>
          </trans-unit>
          <trans-unit id="130" xml:space="preserve">
            <source>The linear ad is described by the **<bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept><bpt id="3">&lt;em&gt;</bpt>* element. It specifies the duration of the ad, tracking events, click through, click tracking, and a number of *<ept id="3">&lt;/em&gt;</ept><bpt id="4">&lt;html&gt;</bpt><ept id="4">&lt;/html&gt;</ept><bpt id="5">&lt;em&gt;</bpt>* elements. Tracking events are specified within the *<ept id="5">&lt;/em&gt;</ept><bpt id="6">&lt;html&gt;</bpt><ept id="6">&lt;/html&gt;</ept><bpt id="7">&lt;em&gt;</bpt>* element and allow an ad server to track various events that occur while viewing the ad. In this case the start, midpoint, complete, and expand events are tracked. The start event occurs when the ad is displayed. The midpoint event occurs when at least 50% of the ad’s timeline has been viewed. The complete event occurs when the ad has run to the end. The Expand event occurs when the user expands the video player to full screen. Clickthroughs are specified with a *<ept id="7">&lt;/em&gt;</ept><bpt id="8">&lt;html&gt;</bpt><ept id="8">&lt;/html&gt;</ept><bpt id="9">&lt;em&gt;</bpt>* element within a *<ept id="9">&lt;/em&gt;</ept><bpt id="10">&lt;html&gt;</bpt><ept id="10">&lt;/html&gt;</ept><bpt id="11">&lt;em&gt;</bpt>* element and specifies a URI to a resource to display when the user clicks on the ad. ClickTracking is specified in a *<ept id="11">&lt;/em&gt;</ept><bpt id="12">&lt;html&gt;</bpt><ept id="12">&lt;/html&gt;</ept><bpt id="13">&lt;em&gt;</bpt>* element, also within the *<ept id="13">&lt;/em&gt;</ept><bpt id="14">&lt;html&gt;</bpt><ept id="14">&lt;/html&gt;</ept><bpt id="15">&lt;em&gt;</bpt>* element and specifies a tracking resource for the player to request when the user clicks on the ad.The *<ept id="15">&lt;/em&gt;</ept><bpt id="16">&lt;html&gt;</bpt><ept id="16">&lt;/html&gt;</ept><bpt id="17">&lt;em&gt;</bpt>* elements specify information about a specific encoding of an ad. When there is more than one *<ept id="17">&lt;/em&gt;</ept><bpt id="18">&lt;html&gt;</bpt><ept id="18">&lt;/html&gt;</ept>** element, the video player can choose the best encoding for the platform.</source>
            <target state="new">The linear ad is described by the **<bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept><bpt id="3">&lt;em&gt;</bpt>* element. It specifies the duration of the ad, tracking events, click through, click tracking, and a number of *<ept id="3">&lt;/em&gt;</ept><bpt id="4">&lt;html&gt;</bpt><ept id="4">&lt;/html&gt;</ept><bpt id="5">&lt;em&gt;</bpt>* elements. Tracking events are specified within the *<ept id="5">&lt;/em&gt;</ept><bpt id="6">&lt;html&gt;</bpt><ept id="6">&lt;/html&gt;</ept><bpt id="7">&lt;em&gt;</bpt>* element and allow an ad server to track various events that occur while viewing the ad. In this case the start, midpoint, complete, and expand events are tracked. The start event occurs when the ad is displayed. The midpoint event occurs when at least 50% of the ad’s timeline has been viewed. The complete event occurs when the ad has run to the end. The Expand event occurs when the user expands the video player to full screen. Clickthroughs are specified with a *<ept id="7">&lt;/em&gt;</ept><bpt id="8">&lt;html&gt;</bpt><ept id="8">&lt;/html&gt;</ept><bpt id="9">&lt;em&gt;</bpt>* element within a *<ept id="9">&lt;/em&gt;</ept><bpt id="10">&lt;html&gt;</bpt><ept id="10">&lt;/html&gt;</ept><bpt id="11">&lt;em&gt;</bpt>* element and specifies a URI to a resource to display when the user clicks on the ad. ClickTracking is specified in a *<ept id="11">&lt;/em&gt;</ept><bpt id="12">&lt;html&gt;</bpt><ept id="12">&lt;/html&gt;</ept><bpt id="13">&lt;em&gt;</bpt>* element, also within the *<ept id="13">&lt;/em&gt;</ept><bpt id="14">&lt;html&gt;</bpt><ept id="14">&lt;/html&gt;</ept><bpt id="15">&lt;em&gt;</bpt>* element and specifies a tracking resource for the player to request when the user clicks on the ad.The *<ept id="15">&lt;/em&gt;</ept><bpt id="16">&lt;html&gt;</bpt><ept id="16">&lt;/html&gt;</ept><bpt id="17">&lt;em&gt;</bpt>* elements specify information about a specific encoding of an ad. When there is more than one *<ept id="17">&lt;/em&gt;</ept><bpt id="18">&lt;html&gt;</bpt><ept id="18">&lt;/html&gt;</ept>** element, the video player can choose the best encoding for the platform.</target>
          </trans-unit>
          <trans-unit id="131" xml:space="preserve">
            <source>Linear ads can be displayed in a specified order. To do this, add additional <bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept> elements to the VAST file and specify the order using the sequence attribute. The following example illustrates this:</source>
            <target state="new">Linear ads can be displayed in a specified order. To do this, add additional <bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept> elements to the VAST file and specify the order using the sequence attribute. The following example illustrates this:</target>
          </trans-unit>
          <trans-unit id="132" xml:space="preserve">
            <source>Nonlinear ads are specified in a <bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept> element as well. The following example shows a <bpt id="4">&lt;html&gt;</bpt><ept id="4">&lt;/html&gt;</ept> element that describes a nonlinear ad.</source>
            <target state="new">Nonlinear ads are specified in a <bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept> element as well. The following example shows a <bpt id="4">&lt;html&gt;</bpt><ept id="4">&lt;/html&gt;</ept> element that describes a nonlinear ad.</target>
          </trans-unit>
          <trans-unit id="133" xml:space="preserve">
            <source>The **<bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept><bpt id="3">&lt;em&gt;</bpt>* element can contain one or more *<ept id="3">&lt;/em&gt;</ept><bpt id="4">&lt;html&gt;</bpt><ept id="4">&lt;/html&gt;</ept><bpt id="5">&lt;em&gt;</bpt>* elements, each of which can describe a nonlinear ad. The *<ept id="5">&lt;/em&gt;</ept><bpt id="6">&lt;html&gt;</bpt><ept id="6">&lt;/html&gt;</ept><bpt id="7">&lt;em&gt;</bpt>* element specifies the resource for the nonlinear ad. The resource can be a *<ept id="7">&lt;/em&gt;</ept><bpt id="8">&lt;html&gt;</bpt><ept id="8">&lt;/html&gt;</ept><bpt id="9">&lt;em&gt;</bpt>*, an *<ept id="9">&lt;/em&gt;</ept><bpt id="10">&lt;html&gt;</bpt><ept id="10">&lt;/html&gt;</ept><bpt id="11">&lt;em&gt;</bpt>*, or an *<ept id="11">&lt;/em&gt;</ept><bpt id="12">&lt;html&gt;</bpt><ept id="12">&lt;/html&gt;</ept><bpt id="13">&lt;strong&gt;</bpt>.<ept id="13">&lt;/strong&gt;</ept><bpt id="14">&lt;html&gt;</bpt><ept id="14">&lt;/html&gt;</ept>** describes a non-HTML resource and defines a creativeType attribute that specifies how the resource is displayed:</source>
            <target state="new">The **<bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept><bpt id="3">&lt;em&gt;</bpt>* element can contain one or more *<ept id="3">&lt;/em&gt;</ept><bpt id="4">&lt;html&gt;</bpt><ept id="4">&lt;/html&gt;</ept><bpt id="5">&lt;em&gt;</bpt>* elements, each of which can describe a nonlinear ad. The *<ept id="5">&lt;/em&gt;</ept><bpt id="6">&lt;html&gt;</bpt><ept id="6">&lt;/html&gt;</ept><bpt id="7">&lt;em&gt;</bpt>* element specifies the resource for the nonlinear ad. The resource can be a *<ept id="7">&lt;/em&gt;</ept><bpt id="8">&lt;html&gt;</bpt><ept id="8">&lt;/html&gt;</ept><bpt id="9">&lt;em&gt;</bpt>*, an *<ept id="9">&lt;/em&gt;</ept><bpt id="10">&lt;html&gt;</bpt><ept id="10">&lt;/html&gt;</ept><bpt id="11">&lt;em&gt;</bpt>*, or an *<ept id="11">&lt;/em&gt;</ept><bpt id="12">&lt;html&gt;</bpt><ept id="12">&lt;/html&gt;</ept><bpt id="13">&lt;strong&gt;</bpt>.<ept id="13">&lt;/strong&gt;</ept><bpt id="14">&lt;html&gt;</bpt><ept id="14">&lt;/html&gt;</ept>** describes a non-HTML resource and defines a creativeType attribute that specifies how the resource is displayed:</target>
          </trans-unit>
          <trans-unit id="134" xml:space="preserve">
            <source>Image/gif, image/jpeg, image/png – the resource is displayed in an HTML **<bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>** tag.</source>
            <target state="new">Image/gif, image/jpeg, image/png – the resource is displayed in an HTML **<bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>** tag.</target>
          </trans-unit>
          <trans-unit id="135" xml:space="preserve">
            <source>Application/x-javascript – the resource is displayed in an HTML <bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept> tag.</source>
            <target state="new">Application/x-javascript – the resource is displayed in an HTML <bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept> tag.</target>
          </trans-unit>
          <trans-unit id="136" xml:space="preserve">
            <source>Application/x-shockwave-flash – the resource is displayed in a Flash player.</source>
            <target state="new">Application/x-shockwave-flash – the resource is displayed in a Flash player.</target>
          </trans-unit>
          <trans-unit id="137" xml:space="preserve">
            <source>**<bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept><bpt id="3">&lt;em&gt;</bpt>* describes an HTML resource that can be displayed in an IFrame. *<ept id="3">&lt;/em&gt;</ept><bpt id="4">&lt;html&gt;</bpt><ept id="4">&lt;/html&gt;</ept><bpt id="5">&lt;em&gt;</bpt>* describes a piece of HTML code that can be inserted into a web page. *<ept id="5">&lt;/em&gt;</ept><bpt id="6">&lt;html&gt;</bpt><ept id="6">&lt;/html&gt;</ept><bpt id="7">&lt;em&gt;</bpt>* specify tracking events and the URI to request when the event occurs. In this sample the acceptInvitation and collapse events are tracked. For more information on the *<ept id="7">&lt;/em&gt;</ept><bpt id="8">&lt;html&gt;</bpt><ept id="8">&lt;/html&gt;</ept><bpt id="9">&lt;em&gt;</bpt>* element and its children, see IAB.NET/VAST. Note that the *<ept id="9">&lt;/em&gt;</ept><bpt id="10">&lt;html&gt;</bpt><ept id="10">&lt;/html&gt;</ept><bpt id="11">&lt;em&gt;</bpt>* element is located within the<ept id="11">&lt;/em&gt;</ept>* <bpt id="13">&lt;html&gt;</bpt><ept id="13">&lt;/html&gt;</ept><bpt id="14">&lt;em&gt;</bpt>* element rather than the *<ept id="14">&lt;/em&gt;</ept><bpt id="15">&lt;html&gt;</bpt><ept id="15">&lt;/html&gt;</ept>** element.</source>
            <target state="new">**<bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept><bpt id="3">&lt;em&gt;</bpt>* describes an HTML resource that can be displayed in an IFrame. *<ept id="3">&lt;/em&gt;</ept><bpt id="4">&lt;html&gt;</bpt><ept id="4">&lt;/html&gt;</ept><bpt id="5">&lt;em&gt;</bpt>* describes a piece of HTML code that can be inserted into a web page. *<ept id="5">&lt;/em&gt;</ept><bpt id="6">&lt;html&gt;</bpt><ept id="6">&lt;/html&gt;</ept><bpt id="7">&lt;em&gt;</bpt>* specify tracking events and the URI to request when the event occurs. In this sample the acceptInvitation and collapse events are tracked. For more information on the *<ept id="7">&lt;/em&gt;</ept><bpt id="8">&lt;html&gt;</bpt><ept id="8">&lt;/html&gt;</ept><bpt id="9">&lt;em&gt;</bpt>* element and its children, see IAB.NET/VAST. Note that the *<ept id="9">&lt;/em&gt;</ept><bpt id="10">&lt;html&gt;</bpt><ept id="10">&lt;/html&gt;</ept><bpt id="11">&lt;em&gt;</bpt>* element is located within the<ept id="11">&lt;/em&gt;</ept>* <bpt id="13">&lt;html&gt;</bpt><ept id="13">&lt;/html&gt;</ept><bpt id="14">&lt;em&gt;</bpt>* element rather than the *<ept id="14">&lt;/em&gt;</ept><bpt id="15">&lt;html&gt;</bpt><ept id="15">&lt;/html&gt;</ept>** element.</target>
          </trans-unit>
          <trans-unit id="138" xml:space="preserve">
            <source>Companion ads are defined within a <bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept> element. The <bpt id="4">&lt;html&gt;</bpt><ept id="4">&lt;/html&gt;</ept> element can contain one or more <bpt id="6">&lt;html&gt;</bpt><ept id="6">&lt;/html&gt;</ept> elements. Each <bpt id="8">&lt;html&gt;</bpt><ept id="8">&lt;/html&gt;</ept> element describes a companion ad and can contain a <bpt id="10">&lt;html&gt;</bpt><ept id="10">&lt;/html&gt;</ept>, <bpt id="12">&lt;html&gt;</bpt><ept id="12">&lt;/html&gt;</ept>, or <bpt id="14">&lt;html&gt;</bpt><ept id="14">&lt;/html&gt;</ept> which are specified in the same way as in a nonlinear ad. A VAST file can contain multiple companion ads and the player application can choose the most appropriate ad to display. For more information about VAST, see <bpt id="16CapsExtId1">&lt;link&gt;</bpt><bpt id="16CapsExtId2">&lt;linkText&gt;</bpt>VAST 3.0<ept id="16CapsExtId2">&lt;/linkText&gt;</ept><bpt id="16CapsExtId3">&lt;title&gt;</bpt><ept id="16CapsExtId3">&lt;/title&gt;</ept><ept id="16CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">Companion ads are defined within a <bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept> element. The <bpt id="4">&lt;html&gt;</bpt><ept id="4">&lt;/html&gt;</ept> element can contain one or more <bpt id="6">&lt;html&gt;</bpt><ept id="6">&lt;/html&gt;</ept> elements. Each <bpt id="8">&lt;html&gt;</bpt><ept id="8">&lt;/html&gt;</ept> element describes a companion ad and can contain a <bpt id="10">&lt;html&gt;</bpt><ept id="10">&lt;/html&gt;</ept>, <bpt id="12">&lt;html&gt;</bpt><ept id="12">&lt;/html&gt;</ept>, or <bpt id="14">&lt;html&gt;</bpt><ept id="14">&lt;/html&gt;</ept> which are specified in the same way as in a nonlinear ad. A VAST file can contain multiple companion ads and the player application can choose the most appropriate ad to display. For more information about VAST, see <bpt id="16CapsExtId1">&lt;link&gt;</bpt><bpt id="16CapsExtId2">&lt;linkText&gt;</bpt>VAST 3.0<ept id="16CapsExtId2">&lt;/linkText&gt;</ept><bpt id="16CapsExtId3">&lt;title&gt;</bpt><ept id="16CapsExtId3">&lt;/title&gt;</ept><ept id="16CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="139" xml:space="preserve">
            <source>Using a Digital Video Multiple Ad Playlist (VMAP) File</source>
            <target state="new">Using a Digital Video Multiple Ad Playlist (VMAP) File</target>
          </trans-unit>
          <trans-unit id="140" xml:space="preserve">
            <source>A VMAP file allows you to specify when ad breaks occur, how long each break is, how many ads can be displayed within a break, and what types of ads may be displayed during a break.</source>
            <target state="new">A VMAP file allows you to specify when ad breaks occur, how long each break is, how many ads can be displayed within a break, and what types of ads may be displayed during a break.</target>
          </trans-unit>
          <trans-unit id="141" xml:space="preserve">
            <source>The following in an example VMAP file that defines a single ad break:</source>
            <target state="new">The following in an example VMAP file that defines a single ad break:</target>
          </trans-unit>
          <trans-unit id="142" xml:space="preserve">
            <source>A VMAP file begins with a <bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept> element that contains one or more <bpt id="4">&lt;html&gt;</bpt><ept id="4">&lt;/html&gt;</ept> elements, each defining an ad break. Each ad break specifies a break type, break ID, and time offset. The breakType attribute specifies the type of ad that can be played during the break: linear, nonlinear, or display. Display ads map to VAST companion ads. More than one ad type can be specified in a comma (no spaces) separated list. The breakID is an optional identifier for the ad. The timeOffset specifies when the ad should be displayed. It can be specified in one of the following ways:</source>
            <target state="new">A VMAP file begins with a <bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept> element that contains one or more <bpt id="4">&lt;html&gt;</bpt><ept id="4">&lt;/html&gt;</ept> elements, each defining an ad break. Each ad break specifies a break type, break ID, and time offset. The breakType attribute specifies the type of ad that can be played during the break: linear, nonlinear, or display. Display ads map to VAST companion ads. More than one ad type can be specified in a comma (no spaces) separated list. The breakID is an optional identifier for the ad. The timeOffset specifies when the ad should be displayed. It can be specified in one of the following ways:</target>
          </trans-unit>
          <trans-unit id="143" xml:space="preserve">
            <source>Time – in hh:mm:ss or hh:mm:ss.mmm format where .mmm is milliseconds.</source>
            <target state="new">Time – in hh:mm:ss or hh:mm:ss.mmm format where .mmm is milliseconds.</target>
          </trans-unit>
          <trans-unit id="144" xml:space="preserve">
            <source>The value of this attribute specifies the time from the beginning of the video timeline to the beginning of the ad break.</source>
            <target state="new">The value of this attribute specifies the time from the beginning of the video timeline to the beginning of the ad break.</target>
          </trans-unit>
          <trans-unit id="145" xml:space="preserve">
            <source>Percentage – in n% format where n is the percentage of the video timeline to play before playing the ad</source>
            <target state="new">Percentage – in n% format where n is the percentage of the video timeline to play before playing the ad</target>
          </trans-unit>
          <trans-unit id="146" xml:space="preserve">
            <source>Start/End – specifies that an ad should be displayed before or after the video has been displayed</source>
            <target state="new">Start/End – specifies that an ad should be displayed before or after the video has been displayed</target>
          </trans-unit>
          <trans-unit id="147" xml:space="preserve">
            <source>Position – specifies the order of ad breaks when the timing of the ad breaks is unknown, such as in live streaming.</source>
            <target state="new">Position – specifies the order of ad breaks when the timing of the ad breaks is unknown, such as in live streaming.</target>
          </trans-unit>
          <trans-unit id="148" xml:space="preserve">
            <source>The order of each ad break is specified in the #n format where n is an integer 1 or greater.</source>
            <target state="new">The order of each ad break is specified in the #n format where n is an integer 1 or greater.</target>
          </trans-unit>
          <trans-unit id="149" xml:space="preserve">
            <source>1 signifies the ad should be played at the first opportunity, 2 signifies the ad should be played at the second opportunity and so on.</source>
            <target state="new">1 signifies the ad should be played at the first opportunity, 2 signifies the ad should be played at the second opportunity and so on.</target>
          </trans-unit>
          <trans-unit id="150" xml:space="preserve">
            <source>Within the <bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept> element there can be one <bpt id="4">&lt;html&gt;</bpt><ept id="4">&lt;/html&gt;</ept> element. The <bpt id="6">&lt;html&gt;</bpt><ept id="6">&lt;/html&gt;</ept> element contains the following attributes:</source>
            <target state="new">Within the <bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept> element there can be one <bpt id="4">&lt;html&gt;</bpt><ept id="4">&lt;/html&gt;</ept> element. The <bpt id="6">&lt;html&gt;</bpt><ept id="6">&lt;/html&gt;</ept> element contains the following attributes:</target>
          </trans-unit>
          <trans-unit id="151" xml:space="preserve">
            <source>Id – specifies an identifier for the ad source</source>
            <target state="new">Id – specifies an identifier for the ad source</target>
          </trans-unit>
          <trans-unit id="152" xml:space="preserve">
            <source>allowMultipleAds – a Boolean value that specifies whether multiple ads can be displayed during the ad break</source>
            <target state="new">allowMultipleAds – a Boolean value that specifies whether multiple ads can be displayed during the ad break</target>
          </trans-unit>
          <trans-unit id="153" xml:space="preserve">
            <source>followRedirects – an optional Boolean value that specifies if the video player should honor redirects within an ad response</source>
            <target state="new">followRedirects – an optional Boolean value that specifies if the video player should honor redirects within an ad response</target>
          </trans-unit>
          <trans-unit id="154" xml:space="preserve">
            <source>The <bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept> element provides the player an inline ad response or a reference to an ad response. It can contain one of the following elements:</source>
            <target state="new">The <bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept> element provides the player an inline ad response or a reference to an ad response. It can contain one of the following elements:</target>
          </trans-unit>
          <trans-unit id="155" xml:space="preserve">
            <source><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept> indicates a VAST ad response is embedded within the VMAP file</source>
            <target state="new"><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept> indicates a VAST ad response is embedded within the VMAP file</target>
          </trans-unit>
          <trans-unit id="156" xml:space="preserve">
            <source><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept> a URI that references an ad response from another system</source>
            <target state="new"><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept> a URI that references an ad response from another system</target>
          </trans-unit>
          <trans-unit id="157" xml:space="preserve">
            <source><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept> -an arbitrary string that respresents a non-VAST response</source>
            <target state="new"><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept> -an arbitrary string that respresents a non-VAST response</target>
          </trans-unit>
          <trans-unit id="158" xml:space="preserve">
            <source>In this example an in-line ad response is specified with a <bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept> element that contains a VAST ad response. For more information about the other elements, see <bpt id="4CapsExtId1">&lt;link&gt;</bpt><bpt id="4CapsExtId2">&lt;linkText&gt;</bpt>VMAP<ept id="4CapsExtId2">&lt;/linkText&gt;</ept><bpt id="4CapsExtId3">&lt;title&gt;</bpt><ept id="4CapsExtId3">&lt;/title&gt;</ept><ept id="4CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">In this example an in-line ad response is specified with a <bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept> element that contains a VAST ad response. For more information about the other elements, see <bpt id="4CapsExtId1">&lt;link&gt;</bpt><bpt id="4CapsExtId2">&lt;linkText&gt;</bpt>VMAP<ept id="4CapsExtId2">&lt;/linkText&gt;</ept><bpt id="4CapsExtId3">&lt;title&gt;</bpt><ept id="4CapsExtId3">&lt;/title&gt;</ept><ept id="4CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="159" xml:space="preserve">
            <source>The <bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept> element can also contain one <bpt id="4">&lt;html&gt;</bpt><ept id="4">&lt;/html&gt;</ept> element. The <bpt id="6">&lt;html&gt;</bpt><ept id="6">&lt;/html&gt;</ept> element allows you to track the start or end of an ad break or whether an error occurred during the ad break. The <bpt id="8">&lt;html&gt;</bpt><ept id="8">&lt;/html&gt;</ept> element contains one or more <bpt id="10">&lt;html&gt;</bpt><ept id="10">&lt;/html&gt;</ept> elements, each of which specifies a tracking event and a tracking URI. The possible tracking events are:</source>
            <target state="new">The <bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept> element can also contain one <bpt id="4">&lt;html&gt;</bpt><ept id="4">&lt;/html&gt;</ept> element. The <bpt id="6">&lt;html&gt;</bpt><ept id="6">&lt;/html&gt;</ept> element allows you to track the start or end of an ad break or whether an error occurred during the ad break. The <bpt id="8">&lt;html&gt;</bpt><ept id="8">&lt;/html&gt;</ept> element contains one or more <bpt id="10">&lt;html&gt;</bpt><ept id="10">&lt;/html&gt;</ept> elements, each of which specifies a tracking event and a tracking URI. The possible tracking events are:</target>
          </trans-unit>
          <trans-unit id="160" xml:space="preserve">
            <source>breakStart – tracks the beginning of an ad break</source>
            <target state="new">breakStart – tracks the beginning of an ad break</target>
          </trans-unit>
          <trans-unit id="161" xml:space="preserve">
            <source>breakEnd – track the completion of an ad break</source>
            <target state="new">breakEnd – track the completion of an ad break</target>
          </trans-unit>
          <trans-unit id="162" xml:space="preserve">
            <source>error – tracks an error that occurred during the ad break</source>
            <target state="new">error – tracks an error that occurred during the ad break</target>
          </trans-unit>
          <trans-unit id="163" xml:space="preserve">
            <source>The following example shows a VMAP file that specifies tracking events</source>
            <target state="new">The following example shows a VMAP file that specifies tracking events</target>
          </trans-unit>
          <trans-unit id="164" xml:space="preserve">
            <source>For more information on the <bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept> element and its children, see http://iab.org/VMAP.pdf</source>
            <target state="new">For more information on the <bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept> element and its children, see http://iab.org/VMAP.pdf</target>
          </trans-unit>
          <trans-unit id="165" xml:space="preserve">
            <source>Using a Media Abstract Sequencing Template (MAST) File</source>
            <target state="new">Using a Media Abstract Sequencing Template (MAST) File</target>
          </trans-unit>
          <trans-unit id="166" xml:space="preserve">
            <source>A MAST file allows you to specify triggers that define when an ad is displayed.</source>
            <target state="new">A MAST file allows you to specify triggers that define when an ad is displayed.</target>
          </trans-unit>
          <trans-unit id="167" xml:space="preserve">
            <source>The following is an example MAST file that contains triggers for a pre roll ad, a mid-roll ad, and a post-roll ad.</source>
            <target state="new">The following is an example MAST file that contains triggers for a pre roll ad, a mid-roll ad, and a post-roll ad.</target>
          </trans-unit>
          <trans-unit id="168" xml:space="preserve">
            <source>A MAST file begins with a **<bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept><bpt id="3">&lt;em&gt;</bpt>* element that contains one *<ept id="3">&lt;/em&gt;</ept><bpt id="4">&lt;html&gt;</bpt><ept id="4">&lt;/html&gt;</ept>** element. The <bpt id="6">&lt;html&gt;</bpt><ept id="6">&lt;/html&gt;</ept> element contains one or more **<bpt id="8">&lt;html&gt;</bpt><ept id="8">&lt;/html&gt;</ept>** elements that define when an ad should be played.</source>
            <target state="new">A MAST file begins with a **<bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept><bpt id="3">&lt;em&gt;</bpt>* element that contains one *<ept id="3">&lt;/em&gt;</ept><bpt id="4">&lt;html&gt;</bpt><ept id="4">&lt;/html&gt;</ept>** element. The <bpt id="6">&lt;html&gt;</bpt><ept id="6">&lt;/html&gt;</ept> element contains one or more **<bpt id="8">&lt;html&gt;</bpt><ept id="8">&lt;/html&gt;</ept>** elements that define when an ad should be played.</target>
          </trans-unit>
          <trans-unit id="169" xml:space="preserve">
            <source>The **<bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept><bpt id="3">&lt;em&gt;</bpt>* element contains a *<ept id="3">&lt;/em&gt;</ept><bpt id="4">&lt;html&gt;</bpt><ept id="4">&lt;/html&gt;</ept><bpt id="5">&lt;em&gt;</bpt>* element which specify when an ad should begin to play. The *<ept id="5">&lt;/em&gt;</ept><bpt id="6">&lt;html&gt;</bpt><ept id="6">&lt;/html&gt;</ept>** element contains one or more <bpt id="8">&lt;html&gt;</bpt><ept id="8">&lt;/html&gt;</ept> elements. When each <bpt id="10">&lt;html&gt;</bpt><ept id="10">&lt;/html&gt;</ept> evaluates to true a trigger is initiated or revoked depending upon whether the <bpt id="12">&lt;html&gt;</bpt><ept id="12">&lt;/html&gt;</ept> is contained within a **<bpt id="14">&lt;html&gt;</bpt><ept id="14">&lt;/html&gt;</ept> or **<bpt id="16">&lt;html&gt;</bpt><ept id="16">&lt;/html&gt;</ept>** element respectively. When multiple <bpt id="18">&lt;html&gt;</bpt><ept id="18">&lt;/html&gt;</ept> elements are present, they are treated as an implicit OR, any condition evaluating to true will cause the trigger to initiate. <bpt id="20">&lt;html&gt;</bpt><ept id="20">&lt;/html&gt;</ept> elements can be nested. When child <bpt id="22">&lt;html&gt;</bpt><ept id="22">&lt;/html&gt;</ept> elements are preset, they are treated as an implicit AND, all conditions must evaluate to true for the trigger to initiate. The <bpt id="24">&lt;html&gt;</bpt><ept id="24">&lt;/html&gt;</ept> element contains the following attributes that define the condition:</source>
            <target state="new">The **<bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept><bpt id="3">&lt;em&gt;</bpt>* element contains a *<ept id="3">&lt;/em&gt;</ept><bpt id="4">&lt;html&gt;</bpt><ept id="4">&lt;/html&gt;</ept><bpt id="5">&lt;em&gt;</bpt>* element which specify when an ad should begin to play. The *<ept id="5">&lt;/em&gt;</ept><bpt id="6">&lt;html&gt;</bpt><ept id="6">&lt;/html&gt;</ept>** element contains one or more <bpt id="8">&lt;html&gt;</bpt><ept id="8">&lt;/html&gt;</ept> elements. When each <bpt id="10">&lt;html&gt;</bpt><ept id="10">&lt;/html&gt;</ept> evaluates to true a trigger is initiated or revoked depending upon whether the <bpt id="12">&lt;html&gt;</bpt><ept id="12">&lt;/html&gt;</ept> is contained within a **<bpt id="14">&lt;html&gt;</bpt><ept id="14">&lt;/html&gt;</ept> or **<bpt id="16">&lt;html&gt;</bpt><ept id="16">&lt;/html&gt;</ept>** element respectively. When multiple <bpt id="18">&lt;html&gt;</bpt><ept id="18">&lt;/html&gt;</ept> elements are present, they are treated as an implicit OR, any condition evaluating to true will cause the trigger to initiate. <bpt id="20">&lt;html&gt;</bpt><ept id="20">&lt;/html&gt;</ept> elements can be nested. When child <bpt id="22">&lt;html&gt;</bpt><ept id="22">&lt;/html&gt;</ept> elements are preset, they are treated as an implicit AND, all conditions must evaluate to true for the trigger to initiate. The <bpt id="24">&lt;html&gt;</bpt><ept id="24">&lt;/html&gt;</ept> element contains the following attributes that define the condition:</target>
          </trans-unit>
          <trans-unit id="170" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>type<ept id="1">&lt;/strong&gt;</ept> – specifies the type of condition, event or property</source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>type<ept id="1">&lt;/strong&gt;</ept> – specifies the type of condition, event or property</target>
          </trans-unit>
          <trans-unit id="171" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>name<ept id="1">&lt;/strong&gt;</ept> – the name of the property or event to be used during evaluation</source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>name<ept id="1">&lt;/strong&gt;</ept> – the name of the property or event to be used during evaluation</target>
          </trans-unit>
          <trans-unit id="172" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>value<ept id="1">&lt;/strong&gt;</ept> – the value that a property will be evaluated against</source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>value<ept id="1">&lt;/strong&gt;</ept> – the value that a property will be evaluated against</target>
          </trans-unit>
          <trans-unit id="173" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>operator<ept id="1">&lt;/strong&gt;</ept> – the operation to use during evaluation: EQ (equal), NEQ (not equal), GTR (greater), GEQ (greater or equal), LT (Less than), LEQ (less than or equal), MOD (modulo)</source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>operator<ept id="1">&lt;/strong&gt;</ept> – the operation to use during evaluation: EQ (equal), NEQ (not equal), GTR (greater), GEQ (greater or equal), LT (Less than), LEQ (less than or equal), MOD (modulo)</target>
          </trans-unit>
          <trans-unit id="174" xml:space="preserve">
            <source>**<bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>** also contain <bpt id="4">&lt;html&gt;</bpt><ept id="4">&lt;/html&gt;</ept> elements. When a condition evaluates to true the trigger is reset.The <bpt id="6">&lt;html&gt;</bpt><ept id="6">&lt;/html&gt;</ept> element also contains a <bpt id="8">&lt;html&gt;</bpt><ept id="8">&lt;/html&gt;</ept> element that contains one or more <bpt id="10">&lt;html&gt;</bpt><ept id="10">&lt;/html&gt;</ept> elements. The <bpt id="12">&lt;html&gt;</bpt><ept id="12">&lt;/html&gt;</ept> elements define the URI to the ad response and the type of ad response. In this example a URI is given to a VAST response.</source>
            <target state="new">**<bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>** also contain <bpt id="4">&lt;html&gt;</bpt><ept id="4">&lt;/html&gt;</ept> elements. When a condition evaluates to true the trigger is reset.The <bpt id="6">&lt;html&gt;</bpt><ept id="6">&lt;/html&gt;</ept> element also contains a <bpt id="8">&lt;html&gt;</bpt><ept id="8">&lt;/html&gt;</ept> element that contains one or more <bpt id="10">&lt;html&gt;</bpt><ept id="10">&lt;/html&gt;</ept> elements. The <bpt id="12">&lt;html&gt;</bpt><ept id="12">&lt;/html&gt;</ept> elements define the URI to the ad response and the type of ad response. In this example a URI is given to a VAST response.</target>
          </trans-unit>
          <trans-unit id="175" xml:space="preserve">
            <source>Using Video Player-Ad Interface Definition (VPAID)</source>
            <target state="new">Using Video Player-Ad Interface Definition (VPAID)</target>
          </trans-unit>
          <trans-unit id="176" xml:space="preserve">
            <source>VPAID is an API for enabling executable ad units to communicate with a video player.</source>
            <target state="new">VPAID is an API for enabling executable ad units to communicate with a video player.</target>
          </trans-unit>
          <trans-unit id="177" xml:space="preserve">
            <source>This allows highly interactive ad experiences.</source>
            <target state="new">This allows highly interactive ad experiences.</target>
          </trans-unit>
          <trans-unit id="178" xml:space="preserve">
            <source>The user can interact with the ad and the ad can respond to actions taken by the viewer.</source>
            <target state="new">The user can interact with the ad and the ad can respond to actions taken by the viewer.</target>
          </trans-unit>
          <trans-unit id="179" xml:space="preserve">
            <source>For example an ad may display buttons that allow the user to view more information or a longer version of the ad.</source>
            <target state="new">For example an ad may display buttons that allow the user to view more information or a longer version of the ad.</target>
          </trans-unit>
          <trans-unit id="180" xml:space="preserve">
            <source>The video player must support the VPAID API and the executable ad must implement the API.</source>
            <target state="new">The video player must support the VPAID API and the executable ad must implement the API.</target>
          </trans-unit>
          <trans-unit id="181" xml:space="preserve">
            <source>When a player requests an ad from an ad server the server may respond with a VAST response that contains a VPAID ad.</source>
            <target state="new">When a player requests an ad from an ad server the server may respond with a VAST response that contains a VPAID ad.</target>
          </trans-unit>
          <trans-unit id="182" xml:space="preserve">
            <source>An executable ad is created in code that must be executed in a runtime environment such as Adobe Flash™ or JavaScript that can be executed in a web browser. When an ad server returns a VAST response containing a VPAID ad, the value of the apiFramework attribute in the <bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept> element must be “VPAID”. This attribute specifies that the contained ad is a VPAID executable ad. The type attribute must be set to the MIME type of the executable, such as “application/x-shockwave-flash” or “application/x-javascript”. The following XML snippet shows the <bpt id="4">&lt;html&gt;</bpt><ept id="4">&lt;/html&gt;</ept> element from a VAST response containing a VPAID executable ad.</source>
            <target state="new">An executable ad is created in code that must be executed in a runtime environment such as Adobe Flash™ or JavaScript that can be executed in a web browser. When an ad server returns a VAST response containing a VPAID ad, the value of the apiFramework attribute in the <bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept> element must be “VPAID”. This attribute specifies that the contained ad is a VPAID executable ad. The type attribute must be set to the MIME type of the executable, such as “application/x-shockwave-flash” or “application/x-javascript”. The following XML snippet shows the <bpt id="4">&lt;html&gt;</bpt><ept id="4">&lt;/html&gt;</ept> element from a VAST response containing a VPAID executable ad.</target>
          </trans-unit>
          <trans-unit id="183" xml:space="preserve">
            <source>An executable ad can be initialized using the <bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept> element within the <bpt id="4">&lt;html&gt;</bpt><ept id="4">&lt;/html&gt;</ept> or <bpt id="6">&lt;html&gt;</bpt><ept id="6">&lt;/html&gt;</ept> elements in a VAST response. For more information on the <bpt id="8">&lt;html&gt;</bpt><ept id="8">&lt;/html&gt;</ept> element, see <bpt id="10CapsExtId1">&lt;link&gt;</bpt><bpt id="10CapsExtId2">&lt;linkText&gt;</bpt>VAST 3.0<ept id="10CapsExtId2">&lt;/linkText&gt;</ept><bpt id="10CapsExtId3">&lt;title&gt;</bpt><ept id="10CapsExtId3">&lt;/title&gt;</ept><ept id="10CapsExtId1">&lt;/link&gt;</ept>. For more information about the VPAID API, see <bpt id="12CapsExtId1">&lt;link&gt;</bpt><bpt id="12CapsExtId2">&lt;linkText&gt;</bpt>VPAID 2.0<ept id="12CapsExtId2">&lt;/linkText&gt;</ept><bpt id="12CapsExtId3">&lt;title&gt;</bpt><ept id="12CapsExtId3">&lt;/title&gt;</ept><ept id="12CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">An executable ad can be initialized using the <bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept> element within the <bpt id="4">&lt;html&gt;</bpt><ept id="4">&lt;/html&gt;</ept> or <bpt id="6">&lt;html&gt;</bpt><ept id="6">&lt;/html&gt;</ept> elements in a VAST response. For more information on the <bpt id="8">&lt;html&gt;</bpt><ept id="8">&lt;/html&gt;</ept> element, see <bpt id="10CapsExtId1">&lt;link&gt;</bpt><bpt id="10CapsExtId2">&lt;linkText&gt;</bpt>VAST 3.0<ept id="10CapsExtId2">&lt;/linkText&gt;</ept><bpt id="10CapsExtId3">&lt;title&gt;</bpt><ept id="10CapsExtId3">&lt;/title&gt;</ept><ept id="10CapsExtId1">&lt;/link&gt;</ept>. For more information about the VPAID API, see <bpt id="12CapsExtId1">&lt;link&gt;</bpt><bpt id="12CapsExtId2">&lt;linkText&gt;</bpt>VPAID 2.0<ept id="12CapsExtId2">&lt;/linkText&gt;</ept><bpt id="12CapsExtId3">&lt;title&gt;</bpt><ept id="12CapsExtId3">&lt;/title&gt;</ept><ept id="12CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="184" xml:space="preserve">
            <source>Implementing a Windows or Windows Phone 8 Player with Ad Support</source>
            <target state="new">Implementing a Windows or Windows Phone 8 Player with Ad Support</target>
          </trans-unit>
          <trans-unit id="185" xml:space="preserve">
            <source>The Microsoft Media Platform: Player Framework for Windows 8 and Windows Phone 8 contains a collection of sample applications that show you how to implement a video player application using the framework.</source>
            <target state="new">The Microsoft Media Platform: Player Framework for Windows 8 and Windows Phone 8 contains a collection of sample applications that show you how to implement a video player application using the framework.</target>
          </trans-unit>
          <trans-unit id="186" xml:space="preserve">
            <source>You can download the Player Framework and the samples from <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Player Framework for Windows 8 and Windows Phone 8<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">You can download the Player Framework and the samples from <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Player Framework for Windows 8 and Windows Phone 8<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="187" xml:space="preserve">
            <source>When you open the Microsoft.PlayerFramework.Xaml.Samples solution you will see a number of folders within the project.</source>
            <target state="new">When you open the Microsoft.PlayerFramework.Xaml.Samples solution you will see a number of folders within the project.</target>
          </trans-unit>
          <trans-unit id="188" xml:space="preserve">
            <source>The Advertising folder contains the sample code relevant to creating a video player with ad support.</source>
            <target state="new">The Advertising folder contains the sample code relevant to creating a video player with ad support.</target>
          </trans-unit>
          <trans-unit id="189" xml:space="preserve">
            <source>Inside the Advertising folder is a number of XAML/cs files each of which show how to insert ads in a different way.</source>
            <target state="new">Inside the Advertising folder is a number of XAML/cs files each of which show how to insert ads in a different way.</target>
          </trans-unit>
          <trans-unit id="190" xml:space="preserve">
            <source>The following list describes each:</source>
            <target state="new">The following list describes each:</target>
          </trans-unit>
          <trans-unit id="191" xml:space="preserve">
            <source>AdPodPage.xaml Shows how to display an ad pod.</source>
            <target state="new">AdPodPage.xaml Shows how to display an ad pod.</target>
          </trans-unit>
          <trans-unit id="192" xml:space="preserve">
            <source>AdSchedulingPage.xaml Shows how to schedule ads.</source>
            <target state="new">AdSchedulingPage.xaml Shows how to schedule ads.</target>
          </trans-unit>
          <trans-unit id="193" xml:space="preserve">
            <source>FreeWheelPage.xaml Shows how to use the FreeWheel plugin to schedule ads.</source>
            <target state="new">FreeWheelPage.xaml Shows how to use the FreeWheel plugin to schedule ads.</target>
          </trans-unit>
          <trans-unit id="194" xml:space="preserve">
            <source>MastPage.xaml Shows how to schedule ads with a MAST file.</source>
            <target state="new">MastPage.xaml Shows how to schedule ads with a MAST file.</target>
          </trans-unit>
          <trans-unit id="195" xml:space="preserve">
            <source>ProgrammaticAdPage.xaml Shows how to programmatically schedule ads into a video.</source>
            <target state="new">ProgrammaticAdPage.xaml Shows how to programmatically schedule ads into a video.</target>
          </trans-unit>
          <trans-unit id="196" xml:space="preserve">
            <source>ScheduleClipPage.xaml Shows how to schedule an ad without a VAST file.</source>
            <target state="new">ScheduleClipPage.xaml Shows how to schedule an ad without a VAST file.</target>
          </trans-unit>
          <trans-unit id="197" xml:space="preserve">
            <source>VastLinearCompanionPage.xaml Shows how to insert a linear and companion ad.</source>
            <target state="new">VastLinearCompanionPage.xaml Shows how to insert a linear and companion ad.</target>
          </trans-unit>
          <trans-unit id="198" xml:space="preserve">
            <source>VastNonLinearPage.xaml Shows how to insert a non-linear ad.</source>
            <target state="new">VastNonLinearPage.xaml Shows how to insert a non-linear ad.</target>
          </trans-unit>
          <trans-unit id="199" xml:space="preserve">
            <source>VmapPage.xaml Shows how to specify ads with a VMAP file.</source>
            <target state="new">VmapPage.xaml Shows how to specify ads with a VMAP file.</target>
          </trans-unit>
          <trans-unit id="200" xml:space="preserve">
            <source>Each of these samples uses the MediaPlayer class defined by the player framework.</source>
            <target state="new">Each of these samples uses the MediaPlayer class defined by the player framework.</target>
          </trans-unit>
          <trans-unit id="201" xml:space="preserve">
            <source>Most samples use plugins that add support for various ad response formats.</source>
            <target state="new">Most samples use plugins that add support for various ad response formats.</target>
          </trans-unit>
          <trans-unit id="202" xml:space="preserve">
            <source>The ProgrammaticAdPage sample programmatically interacts with a MediaPlayer instance.</source>
            <target state="new">The ProgrammaticAdPage sample programmatically interacts with a MediaPlayer instance.</target>
          </trans-unit>
          <trans-unit id="203" xml:space="preserve">
            <source>AdPodPage Sample</source>
            <target state="new">AdPodPage Sample</target>
          </trans-unit>
          <trans-unit id="204" xml:space="preserve">
            <source>This sample uses the AdSchedulerPlugin to define when to display an ad. In this example a mid-roll advertisement is scheduled to be played after 5 seconds. The ad pod (a group of ads to display in order) is specified in a VAST file returned from an ad server. The URI to the VAST file is specified in the <bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept> element.</source>
            <target state="new">This sample uses the AdSchedulerPlugin to define when to display an ad. In this example a mid-roll advertisement is scheduled to be played after 5 seconds. The ad pod (a group of ads to display in order) is specified in a VAST file returned from an ad server. The URI to the VAST file is specified in the <bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept> element.</target>
          </trans-unit>
          <trans-unit id="205" xml:space="preserve">
            <source>For more information about the AdSchedulerPlugin, see <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Advertising in the Player Framework on Windows 8 and Windows Phone 8<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept></source>
            <target state="new">For more information about the AdSchedulerPlugin, see <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Advertising in the Player Framework on Windows 8 and Windows Phone 8<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept></target>
          </trans-unit>
          <trans-unit id="206" xml:space="preserve">
            <source>AdSchedulingPage</source>
            <target state="new">AdSchedulingPage</target>
          </trans-unit>
          <trans-unit id="207" xml:space="preserve">
            <source>This sample also uses the AdSchedulerPlugin. It schedules three ads, a pre-roll ad, a mid-roll ad, and a post-roll ad. The URI to the VAST for each ad is specified in a <bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept> element.</source>
            <target state="new">This sample also uses the AdSchedulerPlugin. It schedules three ads, a pre-roll ad, a mid-roll ad, and a post-roll ad. The URI to the VAST for each ad is specified in a <bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept> element.</target>
          </trans-unit>
          <trans-unit id="208" xml:space="preserve">
            <source>FreeWheelPage</source>
            <target state="new">FreeWheelPage</target>
          </trans-unit>
          <trans-unit id="209" xml:space="preserve">
            <source>This sample uses the FreeWheelPlugin which specifies a Source attribute that specifies a URI that points to a SmartXML file that specifies ad content as well as ad scheduling information.</source>
            <target state="new">This sample uses the FreeWheelPlugin which specifies a Source attribute that specifies a URI that points to a SmartXML file that specifies ad content as well as ad scheduling information.</target>
          </trans-unit>
          <trans-unit id="210" xml:space="preserve">
            <source>MastPage</source>
            <target state="new">MastPage</target>
          </trans-unit>
          <trans-unit id="211" xml:space="preserve">
            <source>This sample uses the MastSchedulerPlugin that allows you to use a MAST file.</source>
            <target state="new">This sample uses the MastSchedulerPlugin that allows you to use a MAST file.</target>
          </trans-unit>
          <trans-unit id="212" xml:space="preserve">
            <source>The Source attribute specifies the location of the MAST file.</source>
            <target state="new">The Source attribute specifies the location of the MAST file.</target>
          </trans-unit>
          <trans-unit id="213" xml:space="preserve">
            <source>ProgrammaticAdPage</source>
            <target state="new">ProgrammaticAdPage</target>
          </trans-unit>
          <trans-unit id="214" xml:space="preserve">
            <source>This sample programmatically interacts with the MediaPlayer.</source>
            <target state="new">This sample programmatically interacts with the MediaPlayer.</target>
          </trans-unit>
          <trans-unit id="215" xml:space="preserve">
            <source>The ProgrammaticAdPage.xaml file instantiates the MediaPlayer:</source>
            <target state="new">The ProgrammaticAdPage.xaml file instantiates the MediaPlayer:</target>
          </trans-unit>
          <trans-unit id="216" xml:space="preserve">
            <source>The ProgrammaticAdPage.xaml.cs file creates an AdHandlerPlugin, adds a TimelineMarker to specify when an ad should be displayed, and then adds a handler for the MarkerReached event which loads a RemoteAdSource specifying a URI to a VAST file, and then plays the ad.</source>
            <target state="new">The ProgrammaticAdPage.xaml.cs file creates an AdHandlerPlugin, adds a TimelineMarker to specify when an ad should be displayed, and then adds a handler for the MarkerReached event which loads a RemoteAdSource specifying a URI to a VAST file, and then plays the ad.</target>
          </trans-unit>
          <trans-unit id="217" xml:space="preserve">
            <source>ScheduleClipPage</source>
            <target state="new">ScheduleClipPage</target>
          </trans-unit>
          <trans-unit id="218" xml:space="preserve">
            <source>This sample uses the AdSchedulerPlugin to schedule a mid-roll ad by specifying a .wmv file that contains the ad.</source>
            <target state="new">This sample uses the AdSchedulerPlugin to schedule a mid-roll ad by specifying a .wmv file that contains the ad.</target>
          </trans-unit>
          <trans-unit id="219" xml:space="preserve">
            <source>VastLinearCompanionPage</source>
            <target state="new">VastLinearCompanionPage</target>
          </trans-unit>
          <trans-unit id="220" xml:space="preserve">
            <source>This sample illustrates how to use the AdSchedulerPlugin to schedule a mid-roll linear ad with an companion ad. The <bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept> element specifies the location of the VAST file.</source>
            <target state="new">This sample illustrates how to use the AdSchedulerPlugin to schedule a mid-roll linear ad with an companion ad. The <bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept> element specifies the location of the VAST file.</target>
          </trans-unit>
          <trans-unit id="221" xml:space="preserve">
            <source>VastLinearNonLinearPage</source>
            <target state="new">VastLinearNonLinearPage</target>
          </trans-unit>
          <trans-unit id="222" xml:space="preserve">
            <source>This sample uses the AdSchedulerPlugin to schedule a linear and a non-linear ad. The VAST file location is specified with the <bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept> element.</source>
            <target state="new">This sample uses the AdSchedulerPlugin to schedule a linear and a non-linear ad. The VAST file location is specified with the <bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept> element.</target>
          </trans-unit>
          <trans-unit id="223" xml:space="preserve">
            <source>VMAPPage</source>
            <target state="new">VMAPPage</target>
          </trans-unit>
          <trans-unit id="224" xml:space="preserve">
            <source>This samples uses the VmapSchedulerPlugin to schedule ads using a VMAP file. The URI to the VMAP file is specified in the Source attribute of the <bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept> element.</source>
            <target state="new">This samples uses the VmapSchedulerPlugin to schedule ads using a VMAP file. The URI to the VMAP file is specified in the Source attribute of the <bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept> element.</target>
          </trans-unit>
          <trans-unit id="225" xml:space="preserve">
            <source>Implementing an iOS Video Player with Ad Support</source>
            <target state="new">Implementing an iOS Video Player with Ad Support</target>
          </trans-unit>
          <trans-unit id="226" xml:space="preserve">
            <source>The Microsoft Media Platform: Player Framework for iOS contains a collection of sample applications that show you how to implement a video player application using the framework.</source>
            <target state="new">The Microsoft Media Platform: Player Framework for iOS contains a collection of sample applications that show you how to implement a video player application using the framework.</target>
          </trans-unit>
          <trans-unit id="227" xml:space="preserve">
            <source>You can download the Player Framework and the samples from <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Azure Media Player Framework<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">You can download the Player Framework and the samples from <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Azure Media Player Framework<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="228" xml:space="preserve">
            <source>The github page has a link to a Wiki that contains additional information on the player framework and an introduction to the player sample: <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Azure Media Player Wiki<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">The github page has a link to a Wiki that contains additional information on the player framework and an introduction to the player sample: <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Azure Media Player Wiki<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="229" xml:space="preserve">
            <source>Scheduling Ads with VMAP</source>
            <target state="new">Scheduling Ads with VMAP</target>
          </trans-unit>
          <trans-unit id="230" xml:space="preserve">
            <source>The following example shows how to schedule ads using a VMAP file.</source>
            <target state="new">The following example shows how to schedule ads using a VMAP file.</target>
          </trans-unit>
          <trans-unit id="231" xml:space="preserve">
            <source>Scheduling Ads with VAST</source>
            <target state="new">Scheduling Ads with VAST</target>
          </trans-unit>
          <trans-unit id="232" xml:space="preserve">
            <source>The following sample shows how to schedule a late binding VAST ad.</source>
            <target state="new">The following sample shows how to schedule a late binding VAST ad.</target>
          </trans-unit>
          <trans-unit id="233" xml:space="preserve">
            <source>The following sample shows how to schedule an early binding VAST ad.</source>
            <target state="new">The following sample shows how to schedule an early binding VAST ad.</target>
          </trans-unit>
          <trans-unit id="234" xml:space="preserve">
            <source>//Example:4 Schedule an early binding VAST ad</source>
            <target state="new">//Example:4 Schedule an early binding VAST ad</target>
          </trans-unit>
          <trans-unit id="235" xml:space="preserve">
            <source>//Download the VAST file</source>
            <target state="new">//Download the VAST file</target>
          </trans-unit>
          <trans-unit id="236" xml:space="preserve">
            <source>if (![framework.adResolver downloadManifest:&amp;manifest withURL:[NSURL URLWithString:@"http://portalvhdsq3m25bf47d15c.blob.core.windows.net/vast/PlayerTestVAST.xml"]])</source>
            <target state="new">if (![framework.adResolver downloadManifest:&amp;manifest withURL:[NSURL URLWithString:@"http://portalvhdsq3m25bf47d15c.blob.core.windows.net/vast/PlayerTestVAST.xml"]])</target>
          </trans-unit>
          <trans-unit id="237" xml:space="preserve">
            <source>{</source>
            <target state="new">{</target>
          </trans-unit>
          <trans-unit id="238" xml:space="preserve">
            <source>[self logFrameworkError];</source>
            <target state="new">[self logFrameworkError];</target>
          </trans-unit>
          <trans-unit id="239" xml:space="preserve">
            <source>}</source>
            <target state="new">}</target>
          </trans-unit>
          <trans-unit id="240" xml:space="preserve">
            <source>else</source>
            <target state="new">else</target>
          </trans-unit>
          <trans-unit id="241" xml:space="preserve">
            <source>{</source>
            <target state="new">{</target>
          </trans-unit>
          <trans-unit id="242" xml:space="preserve">
            <source>adLinearTime.startTime = 7;</source>
            <target state="new">adLinearTime.startTime = 7;</target>
          </trans-unit>
          <trans-unit id="243" xml:space="preserve">
            <source>adLinearTime.duration = 0;</source>
            <target state="new">adLinearTime.duration = 0;</target>
          </trans-unit>
          <trans-unit id="244" xml:space="preserve">
            <source>The following sample shows how to insert an ad using Rough Cut Editing (RCE)</source>
            <target state="new">The following sample shows how to insert an ad using Rough Cut Editing (RCE)</target>
          </trans-unit>
          <trans-unit id="245" xml:space="preserve">
            <source>The following example shows how to schedule an ad pod.</source>
            <target state="new">The following example shows how to schedule an ad pod.</target>
          </trans-unit>
          <trans-unit id="246" xml:space="preserve">
            <source>The following example shows how to schedule a non-sticky mid-roll ad.</source>
            <target state="new">The following example shows how to schedule a non-sticky mid-roll ad.</target>
          </trans-unit>
          <trans-unit id="247" xml:space="preserve">
            <source>A non-sticky ad is only played once regardless of any seeking the viewer performs.</source>
            <target state="new">A non-sticky ad is only played once regardless of any seeking the viewer performs.</target>
          </trans-unit>
          <trans-unit id="248" xml:space="preserve">
            <source>The following example shows how to schedule a sticky mid-roll ad.</source>
            <target state="new">The following example shows how to schedule a sticky mid-roll ad.</target>
          </trans-unit>
          <trans-unit id="249" xml:space="preserve">
            <source>A sticky ad will be displayed each time the specified point on the video timeline is reached.</source>
            <target state="new">A sticky ad will be displayed each time the specified point on the video timeline is reached.</target>
          </trans-unit>
          <trans-unit id="250" xml:space="preserve">
            <source>The following sample shows how to schedule a post-roll ad.</source>
            <target state="new">The following sample shows how to schedule a post-roll ad.</target>
          </trans-unit>
          <trans-unit id="251" xml:space="preserve">
            <source>The following sample shows how to schedule a pre-roll ad.</source>
            <target state="new">The following sample shows how to schedule a pre-roll ad.</target>
          </trans-unit>
          <trans-unit id="252" xml:space="preserve">
            <source>The following sample shows how to schedule a mid-roll overlay ad.</source>
            <target state="new">The following sample shows how to schedule a mid-roll overlay ad.</target>
          </trans-unit>
          <trans-unit id="253" xml:space="preserve">
            <source>See Also</source>
            <target state="new">See Also</target>
          </trans-unit>
          <trans-unit id="254" xml:space="preserve">
            <source><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Develop video player applications<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></source>
            <target state="new"><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Develop video player applications<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></target>
          </trans-unit>
        </group>
      </group>
    </body>
  </file>
</xliff>