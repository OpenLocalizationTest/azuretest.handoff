<?xml version="1.0" encoding="utf-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" source-language="en-us" target-language="zh-cn" original="2/18/2016 5:25:54 PM" tool-id="MarkdownTransformer" product-name="N/A" product-version="N/A" build-num="1">
    <header>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">725af93c43968ca68d5049a40a11696a90a648a5</xliffext:olfilehash>
      <tool tool-id="MarkdownTransformer" tool-name="MarkdownToXliff" tool-version="1.0" tool-company="Microsoft" />
    </header>
    <body>
      <group extype="content">
        <group id="101">
          <trans-unit id="101" xml:space="preserve">
            <source>Service Bus REST tutorial | Microsoft Azure</source>
            <target state="new">Service Bus REST tutorial | Microsoft Azure</target>
          </trans-unit>
          <trans-unit id="102" xml:space="preserve">
            <source>Build a simple Service Bus host application that exposes a REST-based interface.</source>
            <target state="new">Build a simple Service Bus host application that exposes a REST-based interface.</target>
          </trans-unit>
          <trans-unit id="103" xml:space="preserve">
            <source>Service Bus REST tutorial</source>
            <target state="new">Service Bus REST tutorial</target>
          </trans-unit>
          <trans-unit id="104" xml:space="preserve">
            <source>This tutorial describes how to build a simple Service Bus host application that exposes a REST-based interface.</source>
            <target state="new">This tutorial describes how to build a simple Service Bus host application that exposes a REST-based interface.</target>
          </trans-unit>
          <trans-unit id="105" xml:space="preserve">
            <source>REST enables a web client, such as a web browser, to access the Service Bus API through HTTP requests.</source>
            <target state="new">REST enables a web client, such as a web browser, to access the Service Bus API through HTTP requests.</target>
          </trans-unit>
          <trans-unit id="106" xml:space="preserve">
            <source>This tutorial uses the Windows Communication Foundation (WCF) REST programming model to construct a REST service on Service Bus.</source>
            <target state="new">This tutorial uses the Windows Communication Foundation (WCF) REST programming model to construct a REST service on Service Bus.</target>
          </trans-unit>
          <trans-unit id="107" xml:space="preserve">
            <source>For more information, see <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>WCF REST Programming Model<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> and <bpt id="4CapsExtId1">&lt;link&gt;</bpt><bpt id="4CapsExtId2">&lt;linkText&gt;</bpt>Designing and Implementing Services<ept id="4CapsExtId2">&lt;/linkText&gt;</ept><bpt id="4CapsExtId3">&lt;title&gt;</bpt><ept id="4CapsExtId3">&lt;/title&gt;</ept><ept id="4CapsExtId1">&lt;/link&gt;</ept> in the WCF documentation.</source>
            <target state="new">For more information, see <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>WCF REST Programming Model<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> and <bpt id="4CapsExtId1">&lt;link&gt;</bpt><bpt id="4CapsExtId2">&lt;linkText&gt;</bpt>Designing and Implementing Services<ept id="4CapsExtId2">&lt;/linkText&gt;</ept><bpt id="4CapsExtId3">&lt;title&gt;</bpt><ept id="4CapsExtId3">&lt;/title&gt;</ept><ept id="4CapsExtId1">&lt;/link&gt;</ept> in the WCF documentation.</target>
          </trans-unit>
          <trans-unit id="108" xml:space="preserve">
            <source>Step 1: Sign up for an Azure account</source>
            <target state="new">Step 1: Sign up for an Azure account</target>
          </trans-unit>
          <trans-unit id="109" xml:space="preserve">
            <source>The first step is to create a service namespace, and to obtain a Shared Access Signature (SAS) key.</source>
            <target state="new">The first step is to create a service namespace, and to obtain a Shared Access Signature (SAS) key.</target>
          </trans-unit>
          <trans-unit id="110" xml:space="preserve">
            <source>A service namespace provides an application boundary for each application exposed through Service Bus.</source>
            <target state="new">A service namespace provides an application boundary for each application exposed through Service Bus.</target>
          </trans-unit>
          <trans-unit id="111" xml:space="preserve">
            <source>A SAS key is automatically generated by the system when a service namespace is created.</source>
            <target state="new">A SAS key is automatically generated by the system when a service namespace is created.</target>
          </trans-unit>
          <trans-unit id="112" xml:space="preserve">
            <source>The combination of service namespace and SAS key provides the credentials for Service Bus to authenticate access to an application.</source>
            <target state="new">The combination of service namespace and SAS key provides the credentials for Service Bus to authenticate access to an application.</target>
          </trans-unit>
          <trans-unit id="113" xml:space="preserve">
            <source>To create a service namespace and obtain a SAS key</source>
            <target state="new">To create a service namespace and obtain a SAS key</target>
          </trans-unit>
          <trans-unit id="114" xml:space="preserve">
            <source>To create a namespace in the Azure portal, follow the steps in <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>How To: Create or Modify a Service Bus Service Namespace<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">To create a namespace in the Azure portal, follow the steps in <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>How To: Create or Modify a Service Bus Service Namespace<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="115" xml:space="preserve">
            <source>In the main window of the Azure portal, click the name of the service namespace you created in the previous step.</source>
            <target state="new">In the main window of the Azure portal, click the name of the service namespace you created in the previous step.</target>
          </trans-unit>
          <trans-unit id="116" xml:space="preserve">
            <source>Click <bpt id="2">&lt;strong&gt;</bpt>Configure<ept id="2">&lt;/strong&gt;</ept> to view the shared access policies for the namespace.</source>
            <target state="new">Click <bpt id="2">&lt;strong&gt;</bpt>Configure<ept id="2">&lt;/strong&gt;</ept> to view the shared access policies for the namespace.</target>
          </trans-unit>
          <trans-unit id="117" xml:space="preserve">
            <source>Make a note of the primary key for the <bpt id="2">&lt;strong&gt;</bpt>RootManageSharedAccessKey<ept id="2">&lt;/strong&gt;</ept> policy, or copy it to the clipboard.</source>
            <target state="new">Make a note of the primary key for the <bpt id="2">&lt;strong&gt;</bpt>RootManageSharedAccessKey<ept id="2">&lt;/strong&gt;</ept> policy, or copy it to the clipboard.</target>
          </trans-unit>
          <trans-unit id="118" xml:space="preserve">
            <source>You will use this value later in the tutorial.</source>
            <target state="new">You will use this value later in the tutorial.</target>
          </trans-unit>
          <trans-unit id="119" xml:space="preserve">
            <source>Step 2: Define a REST-based WCF service contract to use with Service Bus</source>
            <target state="new">Step 2: Define a REST-based WCF service contract to use with Service Bus</target>
          </trans-unit>
          <trans-unit id="120" xml:space="preserve">
            <source>As with other Service Bus services, when you create a REST-style service, you must define the contract.</source>
            <target state="new">As with other Service Bus services, when you create a REST-style service, you must define the contract.</target>
          </trans-unit>
          <trans-unit id="121" xml:space="preserve">
            <source>The contract specifies what operations the host supports.</source>
            <target state="new">The contract specifies what operations the host supports.</target>
          </trans-unit>
          <trans-unit id="122" xml:space="preserve">
            <source>A service operation can be thought of as a web service method.</source>
            <target state="new">A service operation can be thought of as a web service method.</target>
          </trans-unit>
          <trans-unit id="123" xml:space="preserve">
            <source>Contracts are created by defining a C++, C#, or Visual Basic interface.</source>
            <target state="new">Contracts are created by defining a C++, C#, or Visual Basic interface.</target>
          </trans-unit>
          <trans-unit id="124" xml:space="preserve">
            <source>Each method in the interface corresponds to a specific service operation.</source>
            <target state="new">Each method in the interface corresponds to a specific service operation.</target>
          </trans-unit>
          <trans-unit id="125" xml:space="preserve">
            <source>The <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>ServiceContractAttribute<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> attribute must be applied to each interface, and the <bpt id="4CapsExtId1">&lt;link&gt;</bpt><bpt id="4CapsExtId2">&lt;linkText&gt;</bpt>OperationContractAttribute<ept id="4CapsExtId2">&lt;/linkText&gt;</ept><bpt id="4CapsExtId3">&lt;title&gt;</bpt><ept id="4CapsExtId3">&lt;/title&gt;</ept><ept id="4CapsExtId1">&lt;/link&gt;</ept> attribute must be applied to each operation.</source>
            <target state="new">The <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>ServiceContractAttribute<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> attribute must be applied to each interface, and the <bpt id="4CapsExtId1">&lt;link&gt;</bpt><bpt id="4CapsExtId2">&lt;linkText&gt;</bpt>OperationContractAttribute<ept id="4CapsExtId2">&lt;/linkText&gt;</ept><bpt id="4CapsExtId3">&lt;title&gt;</bpt><ept id="4CapsExtId3">&lt;/title&gt;</ept><ept id="4CapsExtId1">&lt;/link&gt;</ept> attribute must be applied to each operation.</target>
          </trans-unit>
          <trans-unit id="126" xml:space="preserve">
            <source>If a method in an interface that has the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>ServiceContractAttribute<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> does not have the <bpt id="4CapsExtId1">&lt;link&gt;</bpt><bpt id="4CapsExtId2">&lt;linkText&gt;</bpt>OperationContractAttribute<ept id="4CapsExtId2">&lt;/linkText&gt;</ept><bpt id="4CapsExtId3">&lt;title&gt;</bpt><ept id="4CapsExtId3">&lt;/title&gt;</ept><ept id="4CapsExtId1">&lt;/link&gt;</ept>, that method is not exposed.</source>
            <target state="new">If a method in an interface that has the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>ServiceContractAttribute<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> does not have the <bpt id="4CapsExtId1">&lt;link&gt;</bpt><bpt id="4CapsExtId2">&lt;linkText&gt;</bpt>OperationContractAttribute<ept id="4CapsExtId2">&lt;/linkText&gt;</ept><bpt id="4CapsExtId3">&lt;title&gt;</bpt><ept id="4CapsExtId3">&lt;/title&gt;</ept><ept id="4CapsExtId1">&lt;/link&gt;</ept>, that method is not exposed.</target>
          </trans-unit>
          <trans-unit id="127" xml:space="preserve">
            <source>The code used for these tasks is shown in the example following the procedure.</source>
            <target state="new">The code used for these tasks is shown in the example following the procedure.</target>
          </trans-unit>
          <trans-unit id="128" xml:space="preserve">
            <source>The primary difference between a basic Service Bus contract and a REST-style contract is the addition of a property to the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>OperationContractAttribute<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>: <bpt id="4CapsExtId1">&lt;link&gt;</bpt><bpt id="4CapsExtId2">&lt;linkText&gt;</bpt>WebGetAttribute<ept id="4CapsExtId2">&lt;/linkText&gt;</ept><bpt id="4CapsExtId3">&lt;title&gt;</bpt><ept id="4CapsExtId3">&lt;/title&gt;</ept><ept id="4CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">The primary difference between a basic Service Bus contract and a REST-style contract is the addition of a property to the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>OperationContractAttribute<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>: <bpt id="4CapsExtId1">&lt;link&gt;</bpt><bpt id="4CapsExtId2">&lt;linkText&gt;</bpt>WebGetAttribute<ept id="4CapsExtId2">&lt;/linkText&gt;</ept><bpt id="4CapsExtId3">&lt;title&gt;</bpt><ept id="4CapsExtId3">&lt;/title&gt;</ept><ept id="4CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="129" xml:space="preserve">
            <source>This property enables you to map a method in your interface to a method on the other side of the interface.</source>
            <target state="new">This property enables you to map a method in your interface to a method on the other side of the interface.</target>
          </trans-unit>
          <trans-unit id="130" xml:space="preserve">
            <source>In this case, we will use <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>WebGetAttribute<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> to link a method to HTTP GET.</source>
            <target state="new">In this case, we will use <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>WebGetAttribute<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> to link a method to HTTP GET.</target>
          </trans-unit>
          <trans-unit id="131" xml:space="preserve">
            <source>This allows Service Bus to accurately retrieve and interpret commands sent to the interface.</source>
            <target state="new">This allows Service Bus to accurately retrieve and interpret commands sent to the interface.</target>
          </trans-unit>
          <trans-unit id="132" xml:space="preserve">
            <source>To create a Service Bus contract with an interface</source>
            <target state="new">To create a Service Bus contract with an interface</target>
          </trans-unit>
          <trans-unit id="133" xml:space="preserve">
            <source>Open Visual Studio as an administrator: right-click the program in the <bpt id="2">&lt;strong&gt;</bpt>Start<ept id="2">&lt;/strong&gt;</ept> menu, and then click <bpt id="4">&lt;strong&gt;</bpt>Run as administrator<ept id="4">&lt;/strong&gt;</ept>.</source>
            <target state="new">Open Visual Studio as an administrator: right-click the program in the <bpt id="2">&lt;strong&gt;</bpt>Start<ept id="2">&lt;/strong&gt;</ept> menu, and then click <bpt id="4">&lt;strong&gt;</bpt>Run as administrator<ept id="4">&lt;/strong&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="134" xml:space="preserve">
            <source>Create a new console application project.</source>
            <target state="new">Create a new console application project.</target>
          </trans-unit>
          <trans-unit id="135" xml:space="preserve">
            <source>Click the <bpt id="2">&lt;strong&gt;</bpt>File<ept id="2">&lt;/strong&gt;</ept> menu and select <bpt id="4">&lt;strong&gt;</bpt>New<ept id="4">&lt;/strong&gt;</ept>, then select <bpt id="6">&lt;strong&gt;</bpt>Project<ept id="6">&lt;/strong&gt;</ept>.</source>
            <target state="new">Click the <bpt id="2">&lt;strong&gt;</bpt>File<ept id="2">&lt;/strong&gt;</ept> menu and select <bpt id="4">&lt;strong&gt;</bpt>New<ept id="4">&lt;/strong&gt;</ept>, then select <bpt id="6">&lt;strong&gt;</bpt>Project<ept id="6">&lt;/strong&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="136" xml:space="preserve">
            <source>In the <bpt id="2">&lt;strong&gt;</bpt>New Project<ept id="2">&lt;/strong&gt;</ept> dialog box, click <bpt id="4">&lt;strong&gt;</bpt>Visual C#<ept id="4">&lt;/strong&gt;</ept> (if <bpt id="6">&lt;strong&gt;</bpt>Visual C#<ept id="6">&lt;/strong&gt;</ept> does not appear, look under <bpt id="8">&lt;strong&gt;</bpt>Other Languages<ept id="8">&lt;/strong&gt;</ept>), select the <bpt id="10">&lt;strong&gt;</bpt>Console Application<ept id="10">&lt;/strong&gt;</ept> template, and name it <bpt id="12">&lt;strong&gt;</bpt>ImageListener<ept id="12">&lt;/strong&gt;</ept>.</source>
            <target state="new">In the <bpt id="2">&lt;strong&gt;</bpt>New Project<ept id="2">&lt;/strong&gt;</ept> dialog box, click <bpt id="4">&lt;strong&gt;</bpt>Visual C#<ept id="4">&lt;/strong&gt;</ept> (if <bpt id="6">&lt;strong&gt;</bpt>Visual C#<ept id="6">&lt;/strong&gt;</ept> does not appear, look under <bpt id="8">&lt;strong&gt;</bpt>Other Languages<ept id="8">&lt;/strong&gt;</ept>), select the <bpt id="10">&lt;strong&gt;</bpt>Console Application<ept id="10">&lt;/strong&gt;</ept> template, and name it <bpt id="12">&lt;strong&gt;</bpt>ImageListener<ept id="12">&lt;/strong&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="137" xml:space="preserve">
            <source>Use the default <bpt id="2">&lt;strong&gt;</bpt>Location<ept id="2">&lt;/strong&gt;</ept>.</source>
            <target state="new">Use the default <bpt id="2">&lt;strong&gt;</bpt>Location<ept id="2">&lt;/strong&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="138" xml:space="preserve">
            <source>Click <bpt id="2">&lt;strong&gt;</bpt>OK<ept id="2">&lt;/strong&gt;</ept> to create the project.</source>
            <target state="new">Click <bpt id="2">&lt;strong&gt;</bpt>OK<ept id="2">&lt;/strong&gt;</ept> to create the project.</target>
          </trans-unit>
          <trans-unit id="139" xml:space="preserve">
            <source>For a C# project, Visual Studio creates a <bpt id="2">&lt;code&gt;</bpt>Program.cs<ept id="2">&lt;/code&gt;</ept> file.</source>
            <target state="new">For a C# project, Visual Studio creates a <bpt id="2">&lt;code&gt;</bpt>Program.cs<ept id="2">&lt;/code&gt;</ept> file.</target>
          </trans-unit>
          <trans-unit id="140" xml:space="preserve">
            <source>This class contains an empty <bpt id="2">&lt;code&gt;</bpt>Main()<ept id="2">&lt;/code&gt;</ept> method, required for a console application project to build correctly.</source>
            <target state="new">This class contains an empty <bpt id="2">&lt;code&gt;</bpt>Main()<ept id="2">&lt;/code&gt;</ept> method, required for a console application project to build correctly.</target>
          </trans-unit>
          <trans-unit id="141" xml:space="preserve">
            <source>Add a reference to <bpt id="2">&lt;strong&gt;</bpt>System.ServiceModel.dll<ept id="2">&lt;/strong&gt;</ept> to the project:</source>
            <target state="new">Add a reference to <bpt id="2">&lt;strong&gt;</bpt>System.ServiceModel.dll<ept id="2">&lt;/strong&gt;</ept> to the project:</target>
          </trans-unit>
          <trans-unit id="142" xml:space="preserve">
            <source>a.</source>
            <target state="new">a.</target>
          </trans-unit>
          <trans-unit id="143" xml:space="preserve">
            <source>In <bpt id="2">&lt;strong&gt;</bpt>Solution Explorer<ept id="2">&lt;/strong&gt;</ept>, right-click the <bpt id="4">&lt;strong&gt;</bpt>References<ept id="4">&lt;/strong&gt;</ept> folder under the project folder and then click <bpt id="6">&lt;strong&gt;</bpt>Add Reference<ept id="6">&lt;/strong&gt;</ept>.</source>
            <target state="new">In <bpt id="2">&lt;strong&gt;</bpt>Solution Explorer<ept id="2">&lt;/strong&gt;</ept>, right-click the <bpt id="4">&lt;strong&gt;</bpt>References<ept id="4">&lt;/strong&gt;</ept> folder under the project folder and then click <bpt id="6">&lt;strong&gt;</bpt>Add Reference<ept id="6">&lt;/strong&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="144" xml:space="preserve">
            <source>b.</source>
            <target state="new">b.</target>
          </trans-unit>
          <trans-unit id="145" xml:space="preserve">
            <source>Click the <bpt id="2">&lt;strong&gt;</bpt>.NET<ept id="2">&lt;/strong&gt;</ept> tab in the <bpt id="4">&lt;strong&gt;</bpt>Add Reference<ept id="4">&lt;/strong&gt;</ept> dialog box and scroll down until you see <bpt id="6">&lt;strong&gt;</bpt>System.ServiceModel<ept id="6">&lt;/strong&gt;</ept>.</source>
            <target state="new">Click the <bpt id="2">&lt;strong&gt;</bpt>.NET<ept id="2">&lt;/strong&gt;</ept> tab in the <bpt id="4">&lt;strong&gt;</bpt>Add Reference<ept id="4">&lt;/strong&gt;</ept> dialog box and scroll down until you see <bpt id="6">&lt;strong&gt;</bpt>System.ServiceModel<ept id="6">&lt;/strong&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="146" xml:space="preserve">
            <source>Select it, then click <bpt id="2">&lt;strong&gt;</bpt>OK<ept id="2">&lt;/strong&gt;</ept>.</source>
            <target state="new">Select it, then click <bpt id="2">&lt;strong&gt;</bpt>OK<ept id="2">&lt;/strong&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="147" xml:space="preserve">
            <source>Repeat the previous step to add a reference to the <bpt id="2">&lt;strong&gt;</bpt>System.ServiceModel.Web.dll<ept id="2">&lt;/strong&gt;</ept> assembly.</source>
            <target state="new">Repeat the previous step to add a reference to the <bpt id="2">&lt;strong&gt;</bpt>System.ServiceModel.Web.dll<ept id="2">&lt;/strong&gt;</ept> assembly.</target>
          </trans-unit>
          <trans-unit id="148" xml:space="preserve">
            <source>Add <bpt id="2">&lt;code&gt;</bpt>using<ept id="2">&lt;/code&gt;</ept> statements for the <bpt id="4">&lt;strong&gt;</bpt>System.ServiceModel<ept id="4">&lt;/strong&gt;</ept>, <bpt id="6">&lt;strong&gt;</bpt>System.ServiceModel.Channels<ept id="6">&lt;/strong&gt;</ept>, <bpt id="8">&lt;strong&gt;</bpt>System.ServiceModel.Web<ept id="8">&lt;/strong&gt;</ept>, and <bpt id="10">&lt;strong&gt;</bpt>System.IO<ept id="10">&lt;/strong&gt;</ept> namespaces.</source>
            <target state="new">Add <bpt id="2">&lt;code&gt;</bpt>using<ept id="2">&lt;/code&gt;</ept> statements for the <bpt id="4">&lt;strong&gt;</bpt>System.ServiceModel<ept id="4">&lt;/strong&gt;</ept>, <bpt id="6">&lt;strong&gt;</bpt>System.ServiceModel.Channels<ept id="6">&lt;/strong&gt;</ept>, <bpt id="8">&lt;strong&gt;</bpt>System.ServiceModel.Web<ept id="8">&lt;/strong&gt;</ept>, and <bpt id="10">&lt;strong&gt;</bpt>System.IO<ept id="10">&lt;/strong&gt;</ept> namespaces.</target>
          </trans-unit>
          <trans-unit id="149" xml:space="preserve">
            <source><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>System.ServiceModel<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept> is the namespace that enables programmatic access to basic features of WCF.</source>
            <target state="new"><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>System.ServiceModel<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept> is the namespace that enables programmatic access to basic features of WCF.</target>
          </trans-unit>
          <trans-unit id="150" xml:space="preserve">
            <source>Service Bus uses many of the objects and attributes of WCF to define service contracts.</source>
            <target state="new">Service Bus uses many of the objects and attributes of WCF to define service contracts.</target>
          </trans-unit>
          <trans-unit id="151" xml:space="preserve">
            <source>You will use this namespace in most of your Service Bus relay applications.</source>
            <target state="new">You will use this namespace in most of your Service Bus relay applications.</target>
          </trans-unit>
          <trans-unit id="152" xml:space="preserve">
            <source>Similarly, <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>System.ServiceModel.Channels<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> helps define the channel, which is the object through which you communicate with Service Bus and the client web browser.</source>
            <target state="new">Similarly, <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>System.ServiceModel.Channels<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> helps define the channel, which is the object through which you communicate with Service Bus and the client web browser.</target>
          </trans-unit>
          <trans-unit id="153" xml:space="preserve">
            <source>Finally, <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>System.ServiceModel.Web<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> contains the types that enable you to create web-based applications.</source>
            <target state="new">Finally, <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>System.ServiceModel.Web<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> contains the types that enable you to create web-based applications.</target>
          </trans-unit>
          <trans-unit id="154" xml:space="preserve">
            <source>Rename the namespace for the program from the Visual Studio default to <bpt id="2">&lt;strong&gt;</bpt>Microsoft.ServiceBus.Samples<ept id="2">&lt;/strong&gt;</ept>.</source>
            <target state="new">Rename the namespace for the program from the Visual Studio default to <bpt id="2">&lt;strong&gt;</bpt>Microsoft.ServiceBus.Samples<ept id="2">&lt;/strong&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="155" xml:space="preserve">
            <source>Directly after the namespace declaration, define a new interface named <bpt id="2">&lt;strong&gt;</bpt>IImageContract<ept id="2">&lt;/strong&gt;</ept> and apply the <bpt id="4">&lt;strong&gt;</bpt>ServiceContractAttribute<ept id="4">&lt;/strong&gt;</ept> attribute to the interface with a value of <bpt id="6">&lt;code&gt;</bpt>http://samples.microsoft.com/ServiceModel/Relay/<ept id="6">&lt;/code&gt;</ept>.</source>
            <target state="new">Directly after the namespace declaration, define a new interface named <bpt id="2">&lt;strong&gt;</bpt>IImageContract<ept id="2">&lt;/strong&gt;</ept> and apply the <bpt id="4">&lt;strong&gt;</bpt>ServiceContractAttribute<ept id="4">&lt;/strong&gt;</ept> attribute to the interface with a value of <bpt id="6">&lt;code&gt;</bpt>http://samples.microsoft.com/ServiceModel/Relay/<ept id="6">&lt;/code&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="156" xml:space="preserve">
            <source>The namespace value differs from the namespace that you use throughout the scope of your code.</source>
            <target state="new">The namespace value differs from the namespace that you use throughout the scope of your code.</target>
          </trans-unit>
          <trans-unit id="157" xml:space="preserve">
            <source>The namespace value is used as a unique identifier for this contract, and should have version information.</source>
            <target state="new">The namespace value is used as a unique identifier for this contract, and should have version information.</target>
          </trans-unit>
          <trans-unit id="158" xml:space="preserve">
            <source>For more information, see <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Service Versioning<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">For more information, see <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Service Versioning<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="159" xml:space="preserve">
            <source>Specifying the namespace explicitly prevents the default namespace value from being added to the contract name.</source>
            <target state="new">Specifying the namespace explicitly prevents the default namespace value from being added to the contract name.</target>
          </trans-unit>
          <trans-unit id="160" xml:space="preserve">
            <source>Within the <bpt id="2">&lt;code&gt;</bpt>IImageContract<ept id="2">&lt;/code&gt;</ept> interface, declare a method for the single operation the <bpt id="4">&lt;code&gt;</bpt>IImageContract<ept id="4">&lt;/code&gt;</ept> contract exposes in the interface and apply the <bpt id="6">&lt;code&gt;</bpt>OperationContractAttribute<ept id="6">&lt;/code&gt;</ept> attribute to the method that you want to expose as part of the public Service Bus contract.</source>
            <target state="new">Within the <bpt id="2">&lt;code&gt;</bpt>IImageContract<ept id="2">&lt;/code&gt;</ept> interface, declare a method for the single operation the <bpt id="4">&lt;code&gt;</bpt>IImageContract<ept id="4">&lt;/code&gt;</ept> contract exposes in the interface and apply the <bpt id="6">&lt;code&gt;</bpt>OperationContractAttribute<ept id="6">&lt;/code&gt;</ept> attribute to the method that you want to expose as part of the public Service Bus contract.</target>
          </trans-unit>
          <trans-unit id="161" xml:space="preserve">
            <source>Next to the <bpt id="2">&lt;strong&gt;</bpt>OperationContract<ept id="2">&lt;/strong&gt;</ept> attribute, apply the <bpt id="4">&lt;strong&gt;</bpt>WebGet<ept id="4">&lt;/strong&gt;</ept> attribute.</source>
            <target state="new">Next to the <bpt id="2">&lt;strong&gt;</bpt>OperationContract<ept id="2">&lt;/strong&gt;</ept> attribute, apply the <bpt id="4">&lt;strong&gt;</bpt>WebGet<ept id="4">&lt;/strong&gt;</ept> attribute.</target>
          </trans-unit>
          <trans-unit id="162" xml:space="preserve">
            <source>Doing so enables Service Bus to route HTTP GET requests to <bpt id="2">&lt;strong&gt;</bpt>GetImage<ept id="2">&lt;/strong&gt;</ept>, and to translate the return values of <bpt id="4">&lt;strong&gt;</bpt>GetImage<ept id="4">&lt;/strong&gt;</ept> into an HTTP GETRESPONSE reply.</source>
            <target state="new">Doing so enables Service Bus to route HTTP GET requests to <bpt id="2">&lt;strong&gt;</bpt>GetImage<ept id="2">&lt;/strong&gt;</ept>, and to translate the return values of <bpt id="4">&lt;strong&gt;</bpt>GetImage<ept id="4">&lt;/strong&gt;</ept> into an HTTP GETRESPONSE reply.</target>
          </trans-unit>
          <trans-unit id="163" xml:space="preserve">
            <source>Later in the tutorial, you will use a web browser to access this method, and to display the image in the browser.</source>
            <target state="new">Later in the tutorial, you will use a web browser to access this method, and to display the image in the browser.</target>
          </trans-unit>
          <trans-unit id="164" xml:space="preserve">
            <source>Directly after the <bpt id="2">&lt;code&gt;</bpt>IImageContract<ept id="2">&lt;/code&gt;</ept> definition, declare a channel that inherits from both the <bpt id="4">&lt;code&gt;</bpt>IImageContract<ept id="4">&lt;/code&gt;</ept> and <bpt id="6">&lt;code&gt;</bpt>IClientChannel<ept id="6">&lt;/code&gt;</ept> interfaces.</source>
            <target state="new">Directly after the <bpt id="2">&lt;code&gt;</bpt>IImageContract<ept id="2">&lt;/code&gt;</ept> definition, declare a channel that inherits from both the <bpt id="4">&lt;code&gt;</bpt>IImageContract<ept id="4">&lt;/code&gt;</ept> and <bpt id="6">&lt;code&gt;</bpt>IClientChannel<ept id="6">&lt;/code&gt;</ept> interfaces.</target>
          </trans-unit>
          <trans-unit id="165" xml:space="preserve">
            <source>A channel is the WCF object through which the service and client pass information to each other.</source>
            <target state="new">A channel is the WCF object through which the service and client pass information to each other.</target>
          </trans-unit>
          <trans-unit id="166" xml:space="preserve">
            <source>Later, you will create the channel in your host application.</source>
            <target state="new">Later, you will create the channel in your host application.</target>
          </trans-unit>
          <trans-unit id="167" xml:space="preserve">
            <source>Service Bus then uses this channel to pass the HTTP GET requests from the browser to your <bpt id="2">&lt;strong&gt;</bpt>GetImage<ept id="2">&lt;/strong&gt;</ept> implementation.</source>
            <target state="new">Service Bus then uses this channel to pass the HTTP GET requests from the browser to your <bpt id="2">&lt;strong&gt;</bpt>GetImage<ept id="2">&lt;/strong&gt;</ept> implementation.</target>
          </trans-unit>
          <trans-unit id="168" xml:space="preserve">
            <source>Service Bus also uses the channel to take the <bpt id="2">&lt;strong&gt;</bpt>GetImage<ept id="2">&lt;/strong&gt;</ept> return value and translate it into an HTTP GETRESPONSE for the client browser.</source>
            <target state="new">Service Bus also uses the channel to take the <bpt id="2">&lt;strong&gt;</bpt>GetImage<ept id="2">&lt;/strong&gt;</ept> return value and translate it into an HTTP GETRESPONSE for the client browser.</target>
          </trans-unit>
          <trans-unit id="169" xml:space="preserve">
            <source>From the <bpt id="2">&lt;strong&gt;</bpt>Build<ept id="2">&lt;/strong&gt;</ept> menu, click <bpt id="4">&lt;strong&gt;</bpt>Build Solution<ept id="4">&lt;/strong&gt;</ept> to confirm the accuracy of your work so far.</source>
            <target state="new">From the <bpt id="2">&lt;strong&gt;</bpt>Build<ept id="2">&lt;/strong&gt;</ept> menu, click <bpt id="4">&lt;strong&gt;</bpt>Build Solution<ept id="4">&lt;/strong&gt;</ept> to confirm the accuracy of your work so far.</target>
          </trans-unit>
          <trans-unit id="170" xml:space="preserve">
            <source>Example</source>
            <target state="new">Example</target>
          </trans-unit>
          <trans-unit id="171" xml:space="preserve">
            <source>The following code example shows a basic interface that defines a Service Bus contract.</source>
            <target state="new">The following code example shows a basic interface that defines a Service Bus contract.</target>
          </trans-unit>
          <trans-unit id="172" xml:space="preserve">
            <source>Step 3: Implement a REST-based WCF service contract to use Service Bus</source>
            <target state="new">Step 3: Implement a REST-based WCF service contract to use Service Bus</target>
          </trans-unit>
          <trans-unit id="173" xml:space="preserve">
            <source>Creating a REST-style Service Bus service requires that you first create the contract, which is defined by using an interface.</source>
            <target state="new">Creating a REST-style Service Bus service requires that you first create the contract, which is defined by using an interface.</target>
          </trans-unit>
          <trans-unit id="174" xml:space="preserve">
            <source>The next step is to implement the interface.</source>
            <target state="new">The next step is to implement the interface.</target>
          </trans-unit>
          <trans-unit id="175" xml:space="preserve">
            <source>This involves creating a class named <bpt id="2">&lt;strong&gt;</bpt>ImageService<ept id="2">&lt;/strong&gt;</ept> that implements the user-defined <bpt id="4">&lt;strong&gt;</bpt>IImageContract<ept id="4">&lt;/strong&gt;</ept> interface.</source>
            <target state="new">This involves creating a class named <bpt id="2">&lt;strong&gt;</bpt>ImageService<ept id="2">&lt;/strong&gt;</ept> that implements the user-defined <bpt id="4">&lt;strong&gt;</bpt>IImageContract<ept id="4">&lt;/strong&gt;</ept> interface.</target>
          </trans-unit>
          <trans-unit id="176" xml:space="preserve">
            <source>After you implement the contract, you then configure the interface using an App.config file.</source>
            <target state="new">After you implement the contract, you then configure the interface using an App.config file.</target>
          </trans-unit>
          <trans-unit id="177" xml:space="preserve">
            <source>The configuration file contains necessary information for the application, such as the name of the service, the name of the contract, and the type of protocol that is used to communicate with Service Bus.</source>
            <target state="new">The configuration file contains necessary information for the application, such as the name of the service, the name of the contract, and the type of protocol that is used to communicate with Service Bus.</target>
          </trans-unit>
          <trans-unit id="178" xml:space="preserve">
            <source>The code used for these tasks is provided in the example following the procedure.</source>
            <target state="new">The code used for these tasks is provided in the example following the procedure.</target>
          </trans-unit>
          <trans-unit id="179" xml:space="preserve">
            <source>As with the previous steps, there is very little difference between implementing a REST-style contract and a basic Service Bus contract.</source>
            <target state="new">As with the previous steps, there is very little difference between implementing a REST-style contract and a basic Service Bus contract.</target>
          </trans-unit>
          <trans-unit id="180" xml:space="preserve">
            <source>To implement a REST-style Service Bus contract</source>
            <target state="new">To implement a REST-style Service Bus contract</target>
          </trans-unit>
          <trans-unit id="181" xml:space="preserve">
            <source>Create a new class named <bpt id="2">&lt;strong&gt;</bpt>ImageService<ept id="2">&lt;/strong&gt;</ept> directly after the definition of the <bpt id="4">&lt;strong&gt;</bpt>IImageContract<ept id="4">&lt;/strong&gt;</ept> interface.</source>
            <target state="new">Create a new class named <bpt id="2">&lt;strong&gt;</bpt>ImageService<ept id="2">&lt;/strong&gt;</ept> directly after the definition of the <bpt id="4">&lt;strong&gt;</bpt>IImageContract<ept id="4">&lt;/strong&gt;</ept> interface.</target>
          </trans-unit>
          <trans-unit id="182" xml:space="preserve">
            <source>The <bpt id="2">&lt;strong&gt;</bpt>ImageService<ept id="2">&lt;/strong&gt;</ept> class implements the <bpt id="4">&lt;strong&gt;</bpt>IImageContract<ept id="4">&lt;/strong&gt;</ept> interface.</source>
            <target state="new">The <bpt id="2">&lt;strong&gt;</bpt>ImageService<ept id="2">&lt;/strong&gt;</ept> class implements the <bpt id="4">&lt;strong&gt;</bpt>IImageContract<ept id="4">&lt;/strong&gt;</ept> interface.</target>
          </trans-unit>
          <trans-unit id="183" xml:space="preserve">
            <source>Similar to other interface implementations, you can implement the definition in a different file.</source>
            <target state="new">Similar to other interface implementations, you can implement the definition in a different file.</target>
          </trans-unit>
          <trans-unit id="184" xml:space="preserve">
            <source>However, for this tutorial, the implementation appears in the same file as the interface definition and <bpt id="2">&lt;code&gt;</bpt>Main()<ept id="2">&lt;/code&gt;</ept> method.</source>
            <target state="new">However, for this tutorial, the implementation appears in the same file as the interface definition and <bpt id="2">&lt;code&gt;</bpt>Main()<ept id="2">&lt;/code&gt;</ept> method.</target>
          </trans-unit>
          <trans-unit id="185" xml:space="preserve">
            <source>Apply the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>ServiceBehaviorAttribute<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> attribute to the <bpt id="4">&lt;strong&gt;</bpt>IImageService<ept id="4">&lt;/strong&gt;</ept> class to indicate that the class is an implementation of a WCF contract.</source>
            <target state="new">Apply the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>ServiceBehaviorAttribute<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> attribute to the <bpt id="4">&lt;strong&gt;</bpt>IImageService<ept id="4">&lt;/strong&gt;</ept> class to indicate that the class is an implementation of a WCF contract.</target>
          </trans-unit>
          <trans-unit id="186" xml:space="preserve">
            <source>As mentioned previously, this namespace is not a traditional namespace.</source>
            <target state="new">As mentioned previously, this namespace is not a traditional namespace.</target>
          </trans-unit>
          <trans-unit id="187" xml:space="preserve">
            <source>Instead, it is part of the WCF architecture that identifies the contract.</source>
            <target state="new">Instead, it is part of the WCF architecture that identifies the contract.</target>
          </trans-unit>
          <trans-unit id="188" xml:space="preserve">
            <source>For more information, see the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Data Contract Names<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> topic in the WCF documentation.</source>
            <target state="new">For more information, see the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Data Contract Names<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> topic in the WCF documentation.</target>
          </trans-unit>
          <trans-unit id="189" xml:space="preserve">
            <source>Add a .jpg image to your project.</source>
            <target state="new">Add a .jpg image to your project.</target>
          </trans-unit>
          <trans-unit id="190" xml:space="preserve">
            <source>This is a picture that the service displays in the receiving browser.</source>
            <target state="new">This is a picture that the service displays in the receiving browser.</target>
          </trans-unit>
          <trans-unit id="191" xml:space="preserve">
            <source>Right-click your project, then click <bpt id="2">&lt;strong&gt;</bpt>Add<ept id="2">&lt;/strong&gt;</ept>.</source>
            <target state="new">Right-click your project, then click <bpt id="2">&lt;strong&gt;</bpt>Add<ept id="2">&lt;/strong&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="192" xml:space="preserve">
            <source>Then click <bpt id="2">&lt;strong&gt;</bpt>Existing Item<ept id="2">&lt;/strong&gt;</ept>.</source>
            <target state="new">Then click <bpt id="2">&lt;strong&gt;</bpt>Existing Item<ept id="2">&lt;/strong&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="193" xml:space="preserve">
            <source>Use the <bpt id="2">&lt;strong&gt;</bpt>Add Existing Item<ept id="2">&lt;/strong&gt;</ept> dialog box to browse to an appropriate .jpg, and then click <bpt id="4">&lt;strong&gt;</bpt>Add<ept id="4">&lt;/strong&gt;</ept>.</source>
            <target state="new">Use the <bpt id="2">&lt;strong&gt;</bpt>Add Existing Item<ept id="2">&lt;/strong&gt;</ept> dialog box to browse to an appropriate .jpg, and then click <bpt id="4">&lt;strong&gt;</bpt>Add<ept id="4">&lt;/strong&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="194" xml:space="preserve">
            <source>When adding the file, make sure that <bpt id="2">&lt;strong&gt;</bpt>All Files<ept id="2">&lt;/strong&gt;</ept> is selected in the drop-down list next to the <bpt id="4">&lt;strong&gt;</bpt>File name:<ept id="4">&lt;/strong&gt;</ept> field.</source>
            <target state="new">When adding the file, make sure that <bpt id="2">&lt;strong&gt;</bpt>All Files<ept id="2">&lt;/strong&gt;</ept> is selected in the drop-down list next to the <bpt id="4">&lt;strong&gt;</bpt>File name:<ept id="4">&lt;/strong&gt;</ept> field.</target>
          </trans-unit>
          <trans-unit id="195" xml:space="preserve">
            <source>The rest of this tutorial assumes that the name of the image is "image.jpg".</source>
            <target state="new">The rest of this tutorial assumes that the name of the image is "image.jpg".</target>
          </trans-unit>
          <trans-unit id="196" xml:space="preserve">
            <source>If you have a different file, you will have to rename the image, or change your code to compensate.</source>
            <target state="new">If you have a different file, you will have to rename the image, or change your code to compensate.</target>
          </trans-unit>
          <trans-unit id="197" xml:space="preserve">
            <source>To make sure that the running service can find the image file, in <bpt id="2">&lt;strong&gt;</bpt>Solution Explorer<ept id="2">&lt;/strong&gt;</ept> right-click the image file.</source>
            <target state="new">To make sure that the running service can find the image file, in <bpt id="2">&lt;strong&gt;</bpt>Solution Explorer<ept id="2">&lt;/strong&gt;</ept> right-click the image file.</target>
          </trans-unit>
          <trans-unit id="198" xml:space="preserve">
            <source>In the <bpt id="2">&lt;strong&gt;</bpt>Properties<ept id="2">&lt;/strong&gt;</ept> pane, set <bpt id="4">&lt;strong&gt;</bpt>Copy to Output Directory<ept id="4">&lt;/strong&gt;</ept> to <bpt id="6">&lt;strong&gt;</bpt>Copy if newer<ept id="6">&lt;/strong&gt;</ept>.</source>
            <target state="new">In the <bpt id="2">&lt;strong&gt;</bpt>Properties<ept id="2">&lt;/strong&gt;</ept> pane, set <bpt id="4">&lt;strong&gt;</bpt>Copy to Output Directory<ept id="4">&lt;/strong&gt;</ept> to <bpt id="6">&lt;strong&gt;</bpt>Copy if newer<ept id="6">&lt;/strong&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="199" xml:space="preserve">
            <source>Add references to the <bpt id="2">&lt;strong&gt;</bpt>System.Drawing.dll<ept id="2">&lt;/strong&gt;</ept>, <bpt id="4">&lt;strong&gt;</bpt>System.Runtime.Serialization.dll<ept id="4">&lt;/strong&gt;</ept>, and <bpt id="6">&lt;strong&gt;</bpt>Microsoft.ServiceBus.dll<ept id="6">&lt;/strong&gt;</ept> assemblies to the project, and also add the following associated <bpt id="8">&lt;code&gt;</bpt>using<ept id="8">&lt;/code&gt;</ept> statements.</source>
            <target state="new">Add references to the <bpt id="2">&lt;strong&gt;</bpt>System.Drawing.dll<ept id="2">&lt;/strong&gt;</ept>, <bpt id="4">&lt;strong&gt;</bpt>System.Runtime.Serialization.dll<ept id="4">&lt;/strong&gt;</ept>, and <bpt id="6">&lt;strong&gt;</bpt>Microsoft.ServiceBus.dll<ept id="6">&lt;/strong&gt;</ept> assemblies to the project, and also add the following associated <bpt id="8">&lt;code&gt;</bpt>using<ept id="8">&lt;/code&gt;</ept> statements.</target>
          </trans-unit>
          <trans-unit id="200" xml:space="preserve">
            <source>In the <bpt id="2">&lt;strong&gt;</bpt>ImageService<ept id="2">&lt;/strong&gt;</ept> class, add the following constructor that loads the bitmap and prepares to send it to the client browser.</source>
            <target state="new">In the <bpt id="2">&lt;strong&gt;</bpt>ImageService<ept id="2">&lt;/strong&gt;</ept> class, add the following constructor that loads the bitmap and prepares to send it to the client browser.</target>
          </trans-unit>
          <trans-unit id="201" xml:space="preserve">
            <source>Directly after the previous code, add the following <bpt id="2">&lt;strong&gt;</bpt>GetImage<ept id="2">&lt;/strong&gt;</ept> method in the <bpt id="4">&lt;strong&gt;</bpt>ImageService<ept id="4">&lt;/strong&gt;</ept> class to return an HTTP message that contains the image.</source>
            <target state="new">Directly after the previous code, add the following <bpt id="2">&lt;strong&gt;</bpt>GetImage<ept id="2">&lt;/strong&gt;</ept> method in the <bpt id="4">&lt;strong&gt;</bpt>ImageService<ept id="4">&lt;/strong&gt;</ept> class to return an HTTP message that contains the image.</target>
          </trans-unit>
          <trans-unit id="202" xml:space="preserve">
            <source>This implementation uses <bpt id="2">&lt;strong&gt;</bpt>MemoryStream<ept id="2">&lt;/strong&gt;</ept> to retrieve the image and prepare it for streaming to the browser.</source>
            <target state="new">This implementation uses <bpt id="2">&lt;strong&gt;</bpt>MemoryStream<ept id="2">&lt;/strong&gt;</ept> to retrieve the image and prepare it for streaming to the browser.</target>
          </trans-unit>
          <trans-unit id="203" xml:space="preserve">
            <source>It starts the stream position at zero, declares the stream content as a jpeg, and streams the information.</source>
            <target state="new">It starts the stream position at zero, declares the stream content as a jpeg, and streams the information.</target>
          </trans-unit>
          <trans-unit id="204" xml:space="preserve">
            <source>From the <bpt id="2">&lt;strong&gt;</bpt>Build<ept id="2">&lt;/strong&gt;</ept> menu, click <bpt id="4">&lt;strong&gt;</bpt>Build Solution<ept id="4">&lt;/strong&gt;</ept>.</source>
            <target state="new">From the <bpt id="2">&lt;strong&gt;</bpt>Build<ept id="2">&lt;/strong&gt;</ept> menu, click <bpt id="4">&lt;strong&gt;</bpt>Build Solution<ept id="4">&lt;/strong&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="205" xml:space="preserve">
            <source>To define the configuration for running the web service on Service Bus</source>
            <target state="new">To define the configuration for running the web service on Service Bus</target>
          </trans-unit>
          <trans-unit id="206" xml:space="preserve">
            <source>Right-click the <bpt id="2">&lt;strong&gt;</bpt>ImageListener<ept id="2">&lt;/strong&gt;</ept> project.</source>
            <target state="new">Right-click the <bpt id="2">&lt;strong&gt;</bpt>ImageListener<ept id="2">&lt;/strong&gt;</ept> project.</target>
          </trans-unit>
          <trans-unit id="207" xml:space="preserve">
            <source>Then click <bpt id="2">&lt;strong&gt;</bpt>Add<ept id="2">&lt;/strong&gt;</ept>, then <bpt id="4">&lt;strong&gt;</bpt>New Item<ept id="4">&lt;/strong&gt;</ept>.</source>
            <target state="new">Then click <bpt id="2">&lt;strong&gt;</bpt>Add<ept id="2">&lt;/strong&gt;</ept>, then <bpt id="4">&lt;strong&gt;</bpt>New Item<ept id="4">&lt;/strong&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="208" xml:space="preserve">
            <source>In <bpt id="2">&lt;strong&gt;</bpt>Solution Explorer<ept id="2">&lt;/strong&gt;</ept>, double-click <bpt id="4">&lt;strong&gt;</bpt>App.config<ept id="4">&lt;/strong&gt;</ept>, which currently contains the following XML elements.</source>
            <target state="new">In <bpt id="2">&lt;strong&gt;</bpt>Solution Explorer<ept id="2">&lt;/strong&gt;</ept>, double-click <bpt id="4">&lt;strong&gt;</bpt>App.config<ept id="4">&lt;/strong&gt;</ept>, which currently contains the following XML elements.</target>
          </trans-unit>
          <trans-unit id="209" xml:space="preserve">
            <source>The configuration file resembles a WCF configuration file, and includes the service name, endpoint (that is, the location Service Bus exposes for clients and hosts to communicate with each other), and binding (the type of protocol that is used to communicate).</source>
            <target state="new">The configuration file resembles a WCF configuration file, and includes the service name, endpoint (that is, the location Service Bus exposes for clients and hosts to communicate with each other), and binding (the type of protocol that is used to communicate).</target>
          </trans-unit>
          <trans-unit id="210" xml:space="preserve">
            <source>The main difference here is that the configured service endpoint refers to a <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>WebHttpRelayBinding<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> binding, which is not part of the .NET Framework.</source>
            <target state="new">The main difference here is that the configured service endpoint refers to a <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>WebHttpRelayBinding<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> binding, which is not part of the .NET Framework.</target>
          </trans-unit>
          <trans-unit id="211" xml:space="preserve">
            <source>For more information about how to configure a Service Bus application, see <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Configuring a WCF Service to Register with Service Bus<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">For more information about how to configure a Service Bus application, see <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Configuring a WCF Service to Register with Service Bus<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="212" xml:space="preserve">
            <source>Add a <bpt id="2">&lt;code&gt;</bpt>&lt;system.serviceModel&gt;<ept id="2">&lt;/code&gt;</ept> XML element to the App.config file. This is a WCF element that defines one or more services. Here, it is used to define the service name and endpoint.</source>
            <target state="new">Add a <bpt id="2">&lt;code&gt;</bpt>&lt;system.serviceModel&gt;<ept id="2">&lt;/code&gt;</ept> XML element to the App.config file. This is a WCF element that defines one or more services. Here, it is used to define the service name and endpoint.</target>
          </trans-unit>
          <trans-unit id="213" xml:space="preserve">
            <source>Within the <bpt id="2">&lt;code&gt;</bpt>system.serviceModel<ept id="2">&lt;/code&gt;</ept> element, add a <bpt id="4">&lt;code&gt;</bpt>&lt;bindings&gt;<ept id="4">&lt;/code&gt;</ept> element that has the following content. This defines the bindings used in the application. You can define multiple bindings, but for this tutorial you are defining only one.</source>
            <target state="new">Within the <bpt id="2">&lt;code&gt;</bpt>system.serviceModel<ept id="2">&lt;/code&gt;</ept> element, add a <bpt id="4">&lt;code&gt;</bpt>&lt;bindings&gt;<ept id="4">&lt;/code&gt;</ept> element that has the following content. This defines the bindings used in the application. You can define multiple bindings, but for this tutorial you are defining only one.</target>
          </trans-unit>
          <trans-unit id="214" xml:space="preserve">
            <source>This step defines a Service Bus <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>WebHttpRelayBinding<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> binding with <bpt id="4">&lt;strong&gt;</bpt>relayClientAuthenticationType<ept id="4">&lt;/strong&gt;</ept> set to <bpt id="6">&lt;strong&gt;</bpt>None<ept id="6">&lt;/strong&gt;</ept>.</source>
            <target state="new">This step defines a Service Bus <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>WebHttpRelayBinding<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> binding with <bpt id="4">&lt;strong&gt;</bpt>relayClientAuthenticationType<ept id="4">&lt;/strong&gt;</ept> set to <bpt id="6">&lt;strong&gt;</bpt>None<ept id="6">&lt;/strong&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="215" xml:space="preserve">
            <source>This setting indicates that an endpoint using this binding does not require a client credential.</source>
            <target state="new">This setting indicates that an endpoint using this binding does not require a client credential.</target>
          </trans-unit>
          <trans-unit id="216" xml:space="preserve">
            <source>After the <bpt id="2">&lt;code&gt;</bpt>&lt;bindings&gt;<ept id="2">&lt;/code&gt;</ept> element, add a <bpt id="4">&lt;code&gt;</bpt>&lt;services&gt;<ept id="4">&lt;/code&gt;</ept> element. Similar to the bindings, you can define multiple services in a single configuration file. However, for this tutorial, you define only one.</source>
            <target state="new">After the <bpt id="2">&lt;code&gt;</bpt>&lt;bindings&gt;<ept id="2">&lt;/code&gt;</ept> element, add a <bpt id="4">&lt;code&gt;</bpt>&lt;services&gt;<ept id="4">&lt;/code&gt;</ept> element. Similar to the bindings, you can define multiple services in a single configuration file. However, for this tutorial, you define only one.</target>
          </trans-unit>
          <trans-unit id="217" xml:space="preserve">
            <source>This step configures a service that uses the previously defined default <bpt id="2">&lt;strong&gt;</bpt>webHttpRelayBinding<ept id="2">&lt;/strong&gt;</ept>.</source>
            <target state="new">This step configures a service that uses the previously defined default <bpt id="2">&lt;strong&gt;</bpt>webHttpRelayBinding<ept id="2">&lt;/strong&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="218" xml:space="preserve">
            <source>It also uses the default <bpt id="2">&lt;strong&gt;</bpt>sbTokenProvider<ept id="2">&lt;/strong&gt;</ept>, which is defined in the next step.</source>
            <target state="new">It also uses the default <bpt id="2">&lt;strong&gt;</bpt>sbTokenProvider<ept id="2">&lt;/strong&gt;</ept>, which is defined in the next step.</target>
          </trans-unit>
          <trans-unit id="219" xml:space="preserve">
            <source>After the <bpt id="2">&lt;code&gt;</bpt>&lt;services&gt;<ept id="2">&lt;/code&gt;</ept> element, create a <bpt id="4">&lt;code&gt;</bpt>&lt;behaviors&gt;<ept id="4">&lt;/code&gt;</ept> element with the following content, replacing "SAS_KEY" with the <bpt id="6">&lt;em&gt;</bpt>Shared Access Signature<ept id="6">&lt;/em&gt;</ept> (SAS) key you obtained from the Azure portal in Step 1.</source>
            <target state="new">After the <bpt id="2">&lt;code&gt;</bpt>&lt;services&gt;<ept id="2">&lt;/code&gt;</ept> element, create a <bpt id="4">&lt;code&gt;</bpt>&lt;behaviors&gt;<ept id="4">&lt;/code&gt;</ept> element with the following content, replacing "SAS_KEY" with the <bpt id="6">&lt;em&gt;</bpt>Shared Access Signature<ept id="6">&lt;/em&gt;</ept> (SAS) key you obtained from the Azure portal in Step 1.</target>
          </trans-unit>
          <trans-unit id="220" xml:space="preserve">
            <source>From the <bpt id="2">&lt;strong&gt;</bpt>Build<ept id="2">&lt;/strong&gt;</ept> menu, click <bpt id="4">&lt;strong&gt;</bpt>Build Solution<ept id="4">&lt;/strong&gt;</ept> to build the entire solution.</source>
            <target state="new">From the <bpt id="2">&lt;strong&gt;</bpt>Build<ept id="2">&lt;/strong&gt;</ept> menu, click <bpt id="4">&lt;strong&gt;</bpt>Build Solution<ept id="4">&lt;/strong&gt;</ept> to build the entire solution.</target>
          </trans-unit>
          <trans-unit id="221" xml:space="preserve">
            <source>Example</source>
            <target state="new">Example</target>
          </trans-unit>
          <trans-unit id="222" xml:space="preserve">
            <source>The following code shows the contract and service implementation for a REST-based service that is running on  Service Bus using the <bpt id="2">&lt;strong&gt;</bpt>WebHttpRelayBinding<ept id="2">&lt;/strong&gt;</ept> binding.</source>
            <target state="new">The following code shows the contract and service implementation for a REST-based service that is running on  Service Bus using the <bpt id="2">&lt;strong&gt;</bpt>WebHttpRelayBinding<ept id="2">&lt;/strong&gt;</ept> binding.</target>
          </trans-unit>
          <trans-unit id="223" xml:space="preserve">
            <source>The following example shows the App.config file associated with the service.</source>
            <target state="new">The following example shows the App.config file associated with the service.</target>
          </trans-unit>
          <trans-unit id="224" xml:space="preserve">
            <source>Step 4: Host the REST-based WCF service to use Service Bus</source>
            <target state="new">Step 4: Host the REST-based WCF service to use Service Bus</target>
          </trans-unit>
          <trans-unit id="225" xml:space="preserve">
            <source>This step describes how to run a web service using a console application on Service Bus.</source>
            <target state="new">This step describes how to run a web service using a console application on Service Bus.</target>
          </trans-unit>
          <trans-unit id="226" xml:space="preserve">
            <source>A complete listing of the code written in this step is provided in the example following the procedure.</source>
            <target state="new">A complete listing of the code written in this step is provided in the example following the procedure.</target>
          </trans-unit>
          <trans-unit id="227" xml:space="preserve">
            <source>To create a base address for the service</source>
            <target state="new">To create a base address for the service</target>
          </trans-unit>
          <trans-unit id="228" xml:space="preserve">
            <source>In the <bpt id="2">&lt;code&gt;</bpt>Main()<ept id="2">&lt;/code&gt;</ept> function declaration, create a variable to store the namespace of your Service Bus project.</source>
            <target state="new">In the <bpt id="2">&lt;code&gt;</bpt>Main()<ept id="2">&lt;/code&gt;</ept> function declaration, create a variable to store the namespace of your Service Bus project.</target>
          </trans-unit>
          <trans-unit id="229" xml:space="preserve">
            <source>Service Bus uses the name of your namespace to create a unique URI.</source>
            <target state="new">Service Bus uses the name of your namespace to create a unique URI.</target>
          </trans-unit>
          <trans-unit id="230" xml:space="preserve">
            <source>Create a <bpt id="2">&lt;code&gt;</bpt>Uri<ept id="2">&lt;/code&gt;</ept> instance for the base address of the service that is based on the namespace.</source>
            <target state="new">Create a <bpt id="2">&lt;code&gt;</bpt>Uri<ept id="2">&lt;/code&gt;</ept> instance for the base address of the service that is based on the namespace.</target>
          </trans-unit>
          <trans-unit id="231" xml:space="preserve">
            <source>To create and configure the web service host</source>
            <target state="new">To create and configure the web service host</target>
          </trans-unit>
          <trans-unit id="232" xml:space="preserve">
            <source>Create the web service host, using the URI address created earlier in this section.</source>
            <target state="new">Create the web service host, using the URI address created earlier in this section.</target>
          </trans-unit>
          <trans-unit id="233" xml:space="preserve">
            <source>The service host is the WCF object that instantiates the host application.</source>
            <target state="new">The service host is the WCF object that instantiates the host application.</target>
          </trans-unit>
          <trans-unit id="234" xml:space="preserve">
            <source>This example passes it the type of host you want to create (an <bpt id="2">&lt;strong&gt;</bpt>ImageService<ept id="2">&lt;/strong&gt;</ept>), and also the address at which you want to expose the host application.</source>
            <target state="new">This example passes it the type of host you want to create (an <bpt id="2">&lt;strong&gt;</bpt>ImageService<ept id="2">&lt;/strong&gt;</ept>), and also the address at which you want to expose the host application.</target>
          </trans-unit>
          <trans-unit id="235" xml:space="preserve">
            <source>To run the web service host</source>
            <target state="new">To run the web service host</target>
          </trans-unit>
          <trans-unit id="236" xml:space="preserve">
            <source>Open the service.</source>
            <target state="new">Open the service.</target>
          </trans-unit>
          <trans-unit id="237" xml:space="preserve">
            <source>The service is now running.</source>
            <target state="new">The service is now running.</target>
          </trans-unit>
          <trans-unit id="238" xml:space="preserve">
            <source>Display a message indicating that the service is running, and how to stop the service.</source>
            <target state="new">Display a message indicating that the service is running, and how to stop the service.</target>
          </trans-unit>
          <trans-unit id="239" xml:space="preserve">
            <source>When finished, close the service host.</source>
            <target state="new">When finished, close the service host.</target>
          </trans-unit>
          <trans-unit id="240" xml:space="preserve">
            <source>Example</source>
            <target state="new">Example</target>
          </trans-unit>
          <trans-unit id="241" xml:space="preserve">
            <source>The following example includes the service contract and implementation from previous steps in the tutorial and hosts the service in a console application.</source>
            <target state="new">The following example includes the service contract and implementation from previous steps in the tutorial and hosts the service in a console application.</target>
          </trans-unit>
          <trans-unit id="242" xml:space="preserve">
            <source>Compile the following code into an executable named ImageListener.exe.</source>
            <target state="new">Compile the following code into an executable named ImageListener.exe.</target>
          </trans-unit>
          <trans-unit id="243" xml:space="preserve">
            <source>Compiling the code</source>
            <target state="new">Compiling the code</target>
          </trans-unit>
          <trans-unit id="244" xml:space="preserve">
            <source>After building the solution, do the following to run the application:</source>
            <target state="new">After building the solution, do the following to run the application:</target>
          </trans-unit>
          <trans-unit id="245" xml:space="preserve">
            <source>From a command prompt, run the service (ImageListener\bin\Debug\ImageListener.exe).</source>
            <target state="new">From a command prompt, run the service (ImageListener\bin\Debug\ImageListener.exe).</target>
          </trans-unit>
          <trans-unit id="246" xml:space="preserve">
            <source>Copy and paste the address from the command prompt into a browser to see the image.</source>
            <target state="new">Copy and paste the address from the command prompt into a browser to see the image.</target>
          </trans-unit>
          <trans-unit id="247" xml:space="preserve">
            <source>Next steps</source>
            <target state="new">Next steps</target>
          </trans-unit>
          <trans-unit id="248" xml:space="preserve">
            <source>Now that you've built an application that uses the Service Bus relay service, see the following articles to learn more about relayed messaging:</source>
            <target state="new">Now that you've built an application that uses the Service Bus relay service, see the following articles to learn more about relayed messaging:</target>
          </trans-unit>
          <trans-unit id="249" xml:space="preserve">
            <source><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Azure Service Bus architectural overview<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></source>
            <target state="new"><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Azure Service Bus architectural overview<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></target>
          </trans-unit>
          <trans-unit id="250" xml:space="preserve">
            <source><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>How to Use the Service Bus Relay Service<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></source>
            <target state="new"><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>How to Use the Service Bus Relay Service<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></target>
          </trans-unit>
        </group>
      </group>
    </body>
  </file>
</xliff>