<?xml version="1.0" encoding="utf-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" source-language="en-us" target-language="zh-cn" original="2/19/2016 4:34:15 PM" tool-id="MarkdownTransformer" product-name="N/A" product-version="N/A" build-num="1">
    <header>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9eb7b5f825c11f506368eef8505bf4ac55127f9f</xliffext:olfilehash>
      <tool tool-id="MarkdownTransformer" tool-name="MarkdownToXliff" tool-version="1.0" tool-company="Microsoft" />
    </header>
    <body>
      <group extype="content">
        <group id="101">
          <trans-unit id="101" xml:space="preserve">
            <source>&lt;properties</source>
            <target state="new">&lt;properties</target>
          </trans-unit>
          <trans-unit id="102" xml:space="preserve">
            <source>pageTitle="Customize Swashbuckle-generated API definitions"</source>
            <target state="new">pageTitle="Customize Swashbuckle-generated API definitions"</target>
          </trans-unit>
          <trans-unit id="103" xml:space="preserve">
            <source>description="Learn how to customize Swagger API definitions that are generated by Swashbuckle for an API app in Azure App Service."</source>
            <target state="new">description="Learn how to customize Swagger API definitions that are generated by Swashbuckle for an API app in Azure App Service."</target>
          </trans-unit>
          <trans-unit id="104" xml:space="preserve">
            <source>services="app-service\api"</source>
            <target state="new">services="app-service\api"</target>
          </trans-unit>
          <trans-unit id="105" xml:space="preserve">
            <source>documentationCenter=".net"</source>
            <target state="new">documentationCenter=".net"</target>
          </trans-unit>
          <trans-unit id="106" xml:space="preserve">
            <source>authors="bradygaster"</source>
            <target state="new">authors="bradygaster"</target>
          </trans-unit>
          <trans-unit id="107" xml:space="preserve">
            <source>manager="wpickett"</source>
            <target state="new">manager="wpickett"</target>
          </trans-unit>
          <trans-unit id="108" xml:space="preserve">
            <source>editor="jimbe"/&gt;</source>
            <target state="new">editor="jimbe"/&gt;</target>
          </trans-unit>
          <trans-unit id="109" xml:space="preserve">
            <source>&lt;tags</source>
            <target state="new">&lt;tags</target>
          </trans-unit>
          <trans-unit id="110" xml:space="preserve">
            <source>ms.service="app-service-api"</source>
            <target state="new">ms.service="app-service-api"</target>
          </trans-unit>
          <trans-unit id="111" xml:space="preserve">
            <source>ms.workload="web"</source>
            <target state="new">ms.workload="web"</target>
          </trans-unit>
          <trans-unit id="112" xml:space="preserve">
            <source>ms.tgt_pltfrm="dotnet"</source>
            <target state="new">ms.tgt_pltfrm="dotnet"</target>
          </trans-unit>
          <trans-unit id="113" xml:space="preserve">
            <source>ms.devlang="na"</source>
            <target state="new">ms.devlang="na"</target>
          </trans-unit>
          <trans-unit id="114" xml:space="preserve">
            <source>ms.topic="article"</source>
            <target state="new">ms.topic="article"</target>
          </trans-unit>
          <trans-unit id="115" xml:space="preserve">
            <source>ms.date="08/16/2015"</source>
            <target state="new">ms.date="08/16/2015"</target>
          </trans-unit>
          <trans-unit id="116" xml:space="preserve">
            <source>ms.author="bradyg"/&gt;</source>
            <target state="new">ms.author="bradyg"/&gt;</target>
          </trans-unit>
          <trans-unit id="117" xml:space="preserve">
            <source>Customize Swashbuckle-generated API definitions</source>
            <target state="new">Customize Swashbuckle-generated API definitions</target>
          </trans-unit>
          <trans-unit id="118" xml:space="preserve">
            <source>Overview</source>
            <target state="new">Overview</target>
          </trans-unit>
          <trans-unit id="119" xml:space="preserve">
            <source>This article explains how to customize Swashbuckle to handle common scenarios where you may want to alter the default behavior:</source>
            <target state="new">This article explains how to customize Swashbuckle to handle common scenarios where you may want to alter the default behavior:</target>
          </trans-unit>
          <trans-unit id="120" xml:space="preserve">
            <source>Swashbuckle generates duplicate operation identifiers for overloads of controller methods</source>
            <target state="new">Swashbuckle generates duplicate operation identifiers for overloads of controller methods</target>
          </trans-unit>
          <trans-unit id="121" xml:space="preserve">
            <source>Swashbuckle assumes that the only valid response from a method is HTTP 200 (OK)</source>
            <target state="new">Swashbuckle assumes that the only valid response from a method is HTTP 200 (OK)</target>
          </trans-unit>
          <trans-unit id="122" xml:space="preserve">
            <source>Customize operation identifier generation</source>
            <target state="new">Customize operation identifier generation</target>
          </trans-unit>
          <trans-unit id="123" xml:space="preserve">
            <source>Swashbuckle generates Swagger operation identifiers by concatenating controller name and method name.</source>
            <target state="new">Swashbuckle generates Swagger operation identifiers by concatenating controller name and method name.</target>
          </trans-unit>
          <trans-unit id="124" xml:space="preserve">
            <source>This pattern creates a problem when you have multiple overloads of a method: Swashbuckle generates duplicate operation ids, which is invalid Swagger JSON.</source>
            <target state="new">This pattern creates a problem when you have multiple overloads of a method: Swashbuckle generates duplicate operation ids, which is invalid Swagger JSON.</target>
          </trans-unit>
          <trans-unit id="125" xml:space="preserve">
            <source>For example, the following controller code causes Swashbuckle to generate three Contact_Get operation ids.</source>
            <target state="new">For example, the following controller code causes Swashbuckle to generate three Contact_Get operation ids.</target>
          </trans-unit>
          <trans-unit id="126" xml:space="preserve">
            <source><bpt id="1">&lt;linkText&gt;</bpt><ept id="1">&lt;/linkText&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;linkText&gt;</bpt><ept id="1">&lt;/linkText&gt;</ept></target>
          </trans-unit>
          <trans-unit id="127" xml:space="preserve">
            <source><bpt id="1">&lt;linkText&gt;</bpt><ept id="1">&lt;/linkText&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;linkText&gt;</bpt><ept id="1">&lt;/linkText&gt;</ept></target>
          </trans-unit>
          <trans-unit id="128" xml:space="preserve">
            <source>You can solve the problem manually by giving the methods unique names, such as the following for this example:</source>
            <target state="new">You can solve the problem manually by giving the methods unique names, such as the following for this example:</target>
          </trans-unit>
          <trans-unit id="129" xml:space="preserve">
            <source>Get</source>
            <target state="new">Get</target>
          </trans-unit>
          <trans-unit id="130" xml:space="preserve">
            <source>GetById</source>
            <target state="new">GetById</target>
          </trans-unit>
          <trans-unit id="131" xml:space="preserve">
            <source>GetPage</source>
            <target state="new">GetPage</target>
          </trans-unit>
          <trans-unit id="132" xml:space="preserve">
            <source>The alternative is to extend Swashbuckle to make it automatically generate unique operation ids.</source>
            <target state="new">The alternative is to extend Swashbuckle to make it automatically generate unique operation ids.</target>
          </trans-unit>
          <trans-unit id="133" xml:space="preserve">
            <source>The following steps show how to customize Swashbuckle by using the <bpt id="2">&lt;em&gt;</bpt>SwaggerConfig.cs<ept id="2">&lt;/em&gt;</ept> file that is included in the project by the Visual Studio API Apps Preview project template.</source>
            <target state="new">The following steps show how to customize Swashbuckle by using the <bpt id="2">&lt;em&gt;</bpt>SwaggerConfig.cs<ept id="2">&lt;/em&gt;</ept> file that is included in the project by the Visual Studio API Apps Preview project template.</target>
          </trans-unit>
          <trans-unit id="134" xml:space="preserve">
            <source>You can also customize Swashbuckle in a Web API project that you configure for deployment as an API app.</source>
            <target state="new">You can also customize Swashbuckle in a Web API project that you configure for deployment as an API app.</target>
          </trans-unit>
          <trans-unit id="135" xml:space="preserve">
            <source>Create a custom <bpt id="2">&lt;code&gt;</bpt>IOperationFilter<ept id="2">&lt;/code&gt;</ept> implementation</source>
            <target state="new">Create a custom <bpt id="2">&lt;code&gt;</bpt>IOperationFilter<ept id="2">&lt;/code&gt;</ept> implementation</target>
          </trans-unit>
          <trans-unit id="136" xml:space="preserve">
            <source>The <bpt id="2">&lt;code&gt;</bpt>IOperationFilter<ept id="2">&lt;/code&gt;</ept> interface provides an extensibility point for Swashbuckle users who want to customize various aspects of the Swagger metadata process.</source>
            <target state="new">The <bpt id="2">&lt;code&gt;</bpt>IOperationFilter<ept id="2">&lt;/code&gt;</ept> interface provides an extensibility point for Swashbuckle users who want to customize various aspects of the Swagger metadata process.</target>
          </trans-unit>
          <trans-unit id="137" xml:space="preserve">
            <source>The following code demonstrates one method of changing the operation-id-generation behavior.</source>
            <target state="new">The following code demonstrates one method of changing the operation-id-generation behavior.</target>
          </trans-unit>
          <trans-unit id="138" xml:space="preserve">
            <source>The code appends parameter names to the operation id name.</source>
            <target state="new">The code appends parameter names to the operation id name.</target>
          </trans-unit>
          <trans-unit id="139" xml:space="preserve">
            <source>In <bpt id="2">&lt;em&gt;</bpt>App_Start\SwaggerConfig.cs<ept id="2">&lt;/em&gt;</ept> file, call the <bpt id="4">&lt;code&gt;</bpt>OperationFilter<ept id="4">&lt;/code&gt;</ept> method to cause Swashbuckle to use the new <bpt id="6">&lt;code&gt;</bpt>IOperationFilter<ept id="6">&lt;/code&gt;</ept> implementation.</source>
            <target state="new">In <bpt id="2">&lt;em&gt;</bpt>App_Start\SwaggerConfig.cs<ept id="2">&lt;/em&gt;</ept> file, call the <bpt id="4">&lt;code&gt;</bpt>OperationFilter<ept id="4">&lt;/code&gt;</ept> method to cause Swashbuckle to use the new <bpt id="6">&lt;code&gt;</bpt>IOperationFilter<ept id="6">&lt;/code&gt;</ept> implementation.</target>
          </trans-unit>
          <trans-unit id="140" xml:space="preserve">
            <source><bpt id="1">&lt;linkText&gt;</bpt><ept id="1">&lt;/linkText&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;linkText&gt;</bpt><ept id="1">&lt;/linkText&gt;</ept></target>
          </trans-unit>
          <trans-unit id="141" xml:space="preserve">
            <source>The <bpt id="2">&lt;em&gt;</bpt>SwaggerConfig.cs<ept id="2">&lt;/em&gt;</ept> file that is dropped in by the Swashbuckle NuGet package contains many commented-out examples of extensibility points.</source>
            <target state="new">The <bpt id="2">&lt;em&gt;</bpt>SwaggerConfig.cs<ept id="2">&lt;/em&gt;</ept> file that is dropped in by the Swashbuckle NuGet package contains many commented-out examples of extensibility points.</target>
          </trans-unit>
          <trans-unit id="142" xml:space="preserve">
            <source>The additional comments are not shown here.</source>
            <target state="new">The additional comments are not shown here.</target>
          </trans-unit>
          <trans-unit id="143" xml:space="preserve">
            <source>After you make this change, your <bpt id="2">&lt;code&gt;</bpt>IOperationFilter<ept id="2">&lt;/code&gt;</ept> implementation is used and causes unique operation ids to be generated.</source>
            <target state="new">After you make this change, your <bpt id="2">&lt;code&gt;</bpt>IOperationFilter<ept id="2">&lt;/code&gt;</ept> implementation is used and causes unique operation ids to be generated.</target>
          </trans-unit>
          <trans-unit id="144" xml:space="preserve">
            <source><bpt id="1">&lt;linkText&gt;</bpt><ept id="1">&lt;/linkText&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;linkText&gt;</bpt><ept id="1">&lt;/linkText&gt;</ept></target>
          </trans-unit>
          <trans-unit id="145" xml:space="preserve">
            <source><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="146" xml:space="preserve">
            <source>Allow response codes other than 200</source>
            <target state="new">Allow response codes other than 200</target>
          </trans-unit>
          <trans-unit id="147" xml:space="preserve">
            <source>By default, Swashbuckle assumes that an HTTP 200 (OK) response is the <bpt id="2">&lt;em&gt;</bpt>only<ept id="2">&lt;/em&gt;</ept> legitimate response from a Web API method.</source>
            <target state="new">By default, Swashbuckle assumes that an HTTP 200 (OK) response is the <bpt id="2">&lt;em&gt;</bpt>only<ept id="2">&lt;/em&gt;</ept> legitimate response from a Web API method.</target>
          </trans-unit>
          <trans-unit id="148" xml:space="preserve">
            <source>In some cases, you may want to return other response codes without causing the client to raise an exception.</source>
            <target state="new">In some cases, you may want to return other response codes without causing the client to raise an exception.</target>
          </trans-unit>
          <trans-unit id="149" xml:space="preserve">
            <source>For example, the following Web API code demonstrates a scenario in which you would want the client to accept either a 200 or a 404 as valid responses.</source>
            <target state="new">For example, the following Web API code demonstrates a scenario in which you would want the client to accept either a 200 or a 404 as valid responses.</target>
          </trans-unit>
          <trans-unit id="150" xml:space="preserve">
            <source>In this scenario, the Swagger that Swashbuckle generates by default specifies only one legitimate HTTP status code, HTTP 200.</source>
            <target state="new">In this scenario, the Swagger that Swashbuckle generates by default specifies only one legitimate HTTP status code, HTTP 200.</target>
          </trans-unit>
          <trans-unit id="151" xml:space="preserve">
            <source><bpt id="1">&lt;linkText&gt;</bpt><ept id="1">&lt;/linkText&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;linkText&gt;</bpt><ept id="1">&lt;/linkText&gt;</ept></target>
          </trans-unit>
          <trans-unit id="152" xml:space="preserve">
            <source>Since Visual Studio uses the Swagger API definition to generate code for the client, it creates client code that raises an exception for any response other than an HTTP 200.</source>
            <target state="new">Since Visual Studio uses the Swagger API definition to generate code for the client, it creates client code that raises an exception for any response other than an HTTP 200.</target>
          </trans-unit>
          <trans-unit id="153" xml:space="preserve">
            <source>The code below is from a C# client generated for this sample Web API method.</source>
            <target state="new">The code below is from a C# client generated for this sample Web API method.</target>
          </trans-unit>
          <trans-unit id="154" xml:space="preserve">
            <source>Swashbuckle provides two ways of customizing the list of expected HTTP response codes that it generates, using XML comments or the <bpt id="2">&lt;code&gt;</bpt>SwaggerResponse<ept id="2">&lt;/code&gt;</ept> attribute.</source>
            <target state="new">Swashbuckle provides two ways of customizing the list of expected HTTP response codes that it generates, using XML comments or the <bpt id="2">&lt;code&gt;</bpt>SwaggerResponse<ept id="2">&lt;/code&gt;</ept> attribute.</target>
          </trans-unit>
          <trans-unit id="155" xml:space="preserve">
            <source>The attribute is easier, but it is only available in Swashbuckle 5.1.5 or later.</source>
            <target state="new">The attribute is easier, but it is only available in Swashbuckle 5.1.5 or later.</target>
          </trans-unit>
          <trans-unit id="156" xml:space="preserve">
            <source>The API Apps preview new-project template in Visual Studio 2013 includes Swashbuckle version 5.0.0, so if you used the template and don't want to update Swashbuckle, your only option is to use XML comments.</source>
            <target state="new">The API Apps preview new-project template in Visual Studio 2013 includes Swashbuckle version 5.0.0, so if you used the template and don't want to update Swashbuckle, your only option is to use XML comments.</target>
          </trans-unit>
          <trans-unit id="157" xml:space="preserve">
            <source>Customize expected response codes using XML comments</source>
            <target state="new">Customize expected response codes using XML comments</target>
          </trans-unit>
          <trans-unit id="158" xml:space="preserve">
            <source>Use this method to specify response codes if your Swashbuckle version is earlier than 5.1.5.</source>
            <target state="new">Use this method to specify response codes if your Swashbuckle version is earlier than 5.1.5.</target>
          </trans-unit>
          <trans-unit id="159" xml:space="preserve">
            <source>First, add XML documentation comments over the methods you wish to specify HTTP response codes for.</source>
            <target state="new">First, add XML documentation comments over the methods you wish to specify HTTP response codes for.</target>
          </trans-unit>
          <trans-unit id="160" xml:space="preserve">
            <source>Taking the sample Web API action shown above and applying the XML documentation to it would result in code like the following example.</source>
            <target state="new">Taking the sample Web API action shown above and applying the XML documentation to it would result in code like the following example.</target>
          </trans-unit>
          <trans-unit id="161" xml:space="preserve">
            <source>Add instructions in the <bpt id="2">&lt;em&gt;</bpt>SwaggerConfig.cs<ept id="2">&lt;/em&gt;</ept> file to direct Swashbuckle to make use of the XML documentation file.</source>
            <target state="new">Add instructions in the <bpt id="2">&lt;em&gt;</bpt>SwaggerConfig.cs<ept id="2">&lt;/em&gt;</ept> file to direct Swashbuckle to make use of the XML documentation file.</target>
          </trans-unit>
          <trans-unit id="162" xml:space="preserve">
            <source>Open <bpt id="2">&lt;em&gt;</bpt>SwaggerConfig.cs<ept id="2">&lt;/em&gt;</ept> and create a method on the <bpt id="4">&lt;em&gt;</bpt>SwaggerConfig<ept id="4">&lt;/em&gt;</ept> class to specify the path to the documentation XML file.</source>
            <target state="new">Open <bpt id="2">&lt;em&gt;</bpt>SwaggerConfig.cs<ept id="2">&lt;/em&gt;</ept> and create a method on the <bpt id="4">&lt;em&gt;</bpt>SwaggerConfig<ept id="4">&lt;/em&gt;</ept> class to specify the path to the documentation XML file.</target>
          </trans-unit>
          <trans-unit id="163" xml:space="preserve">
            <source>Scroll down in the <bpt id="2">&lt;em&gt;</bpt>SwaggerConfig.cs<ept id="2">&lt;/em&gt;</ept> file until you see the commented-out line of code resembling the screen shot below.</source>
            <target state="new">Scroll down in the <bpt id="2">&lt;em&gt;</bpt>SwaggerConfig.cs<ept id="2">&lt;/em&gt;</ept> file until you see the commented-out line of code resembling the screen shot below.</target>
          </trans-unit>
          <trans-unit id="164" xml:space="preserve">
            <source><bpt id="1">&lt;linkText&gt;</bpt><ept id="1">&lt;/linkText&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;linkText&gt;</bpt><ept id="1">&lt;/linkText&gt;</ept></target>
          </trans-unit>
          <trans-unit id="165" xml:space="preserve">
            <source>Uncomment the line to enable the XML comments processing during Swagger generation.</source>
            <target state="new">Uncomment the line to enable the XML comments processing during Swagger generation.</target>
          </trans-unit>
          <trans-unit id="166" xml:space="preserve">
            <source><bpt id="1">&lt;linkText&gt;</bpt><ept id="1">&lt;/linkText&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;linkText&gt;</bpt><ept id="1">&lt;/linkText&gt;</ept></target>
          </trans-unit>
          <trans-unit id="167" xml:space="preserve">
            <source>In order to generate the XML documentation file, go into the project's properties and enable the XML documentation file as shown in the screenshot below.</source>
            <target state="new">In order to generate the XML documentation file, go into the project's properties and enable the XML documentation file as shown in the screenshot below.</target>
          </trans-unit>
          <trans-unit id="168" xml:space="preserve">
            <source><bpt id="1">&lt;linkText&gt;</bpt><ept id="1">&lt;/linkText&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;linkText&gt;</bpt><ept id="1">&lt;/linkText&gt;</ept></target>
          </trans-unit>
          <trans-unit id="169" xml:space="preserve">
            <source>Once you perform these steps, the Swagger JSON generated by Swashbuckle will reflect the HTTP response codes that you specified in the XML comments.</source>
            <target state="new">Once you perform these steps, the Swagger JSON generated by Swashbuckle will reflect the HTTP response codes that you specified in the XML comments.</target>
          </trans-unit>
          <trans-unit id="170" xml:space="preserve">
            <source>The screenshot below demonstrates this new JSON payload.</source>
            <target state="new">The screenshot below demonstrates this new JSON payload.</target>
          </trans-unit>
          <trans-unit id="171" xml:space="preserve">
            <source><bpt id="1">&lt;linkText&gt;</bpt><ept id="1">&lt;/linkText&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;linkText&gt;</bpt><ept id="1">&lt;/linkText&gt;</ept></target>
          </trans-unit>
          <trans-unit id="172" xml:space="preserve">
            <source>When you use Visual Studio to regenerate the client code for your REST API, the C# code accepts both the HTTP OK and Not Found status codes without raising an exception, allowing your consuming code to make decisions on how to handle the return of a null Contact record.</source>
            <target state="new">When you use Visual Studio to regenerate the client code for your REST API, the C# code accepts both the HTTP OK and Not Found status codes without raising an exception, allowing your consuming code to make decisions on how to handle the return of a null Contact record.</target>
          </trans-unit>
          <trans-unit id="173" xml:space="preserve">
            <source>The code for this demonstration can be found in <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>this GitHub repository<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">The code for this demonstration can be found in <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>this GitHub repository<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="174" xml:space="preserve">
            <source>Along with the Web API project marked up with XML documentation comments is a Console Application project that contains a generated client for this API.</source>
            <target state="new">Along with the Web API project marked up with XML documentation comments is a Console Application project that contains a generated client for this API.</target>
          </trans-unit>
          <trans-unit id="175" xml:space="preserve">
            <source>Customize expected response codes using the SwaggerResponse attribute</source>
            <target state="new">Customize expected response codes using the SwaggerResponse attribute</target>
          </trans-unit>
          <trans-unit id="176" xml:space="preserve">
            <source>The <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>SwaggerResponse<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> attribute is available in Swashbuckle 5.1.5 and later.</source>
            <target state="new">The <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>SwaggerResponse<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> attribute is available in Swashbuckle 5.1.5 and later.</target>
          </trans-unit>
          <trans-unit id="177" xml:space="preserve">
            <source>In case you have an earlier version in your project, this section starts by explaining how to update the Swashbuckle NuGet package so that you can use this attribute.</source>
            <target state="new">In case you have an earlier version in your project, this section starts by explaining how to update the Swashbuckle NuGet package so that you can use this attribute.</target>
          </trans-unit>
          <trans-unit id="178" xml:space="preserve">
            <source>In <bpt id="2">&lt;strong&gt;</bpt>Solution Explorer<ept id="2">&lt;/strong&gt;</ept>, right-click your Web API project and click <bpt id="4">&lt;strong&gt;</bpt>Manage NuGet Packages<ept id="4">&lt;/strong&gt;</ept>.</source>
            <target state="new">In <bpt id="2">&lt;strong&gt;</bpt>Solution Explorer<ept id="2">&lt;/strong&gt;</ept>, right-click your Web API project and click <bpt id="4">&lt;strong&gt;</bpt>Manage NuGet Packages<ept id="4">&lt;/strong&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="179" xml:space="preserve">
            <source><bpt id="1">&lt;linkText&gt;</bpt><ept id="1">&lt;/linkText&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;linkText&gt;</bpt><ept id="1">&lt;/linkText&gt;</ept></target>
          </trans-unit>
          <trans-unit id="180" xml:space="preserve">
            <source>Click the <bpt id="2">&lt;em&gt;</bpt>Update<ept id="2">&lt;/em&gt;</ept> button next to the <bpt id="4">&lt;em&gt;</bpt>Swashbuckle<ept id="4">&lt;/em&gt;</ept> NuGet package.</source>
            <target state="new">Click the <bpt id="2">&lt;em&gt;</bpt>Update<ept id="2">&lt;/em&gt;</ept> button next to the <bpt id="4">&lt;em&gt;</bpt>Swashbuckle<ept id="4">&lt;/em&gt;</ept> NuGet package.</target>
          </trans-unit>
          <trans-unit id="181" xml:space="preserve">
            <source><bpt id="1">&lt;linkText&gt;</bpt><ept id="1">&lt;/linkText&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;linkText&gt;</bpt><ept id="1">&lt;/linkText&gt;</ept></target>
          </trans-unit>
          <trans-unit id="182" xml:space="preserve">
            <source>Add the <bpt id="2">&lt;em&gt;</bpt>SwaggerResponse<ept id="2">&lt;/em&gt;</ept> attributes to the Web API action methods for which you want to specify valid HTTP response codes.</source>
            <target state="new">Add the <bpt id="2">&lt;em&gt;</bpt>SwaggerResponse<ept id="2">&lt;/em&gt;</ept> attributes to the Web API action methods for which you want to specify valid HTTP response codes.</target>
          </trans-unit>
          <trans-unit id="183" xml:space="preserve">
            <source>Add a <bpt id="2">&lt;code&gt;</bpt>using<ept id="2">&lt;/code&gt;</ept> statement for the attribute's namespace:</source>
            <target state="new">Add a <bpt id="2">&lt;code&gt;</bpt>using<ept id="2">&lt;/code&gt;</ept> statement for the attribute's namespace:</target>
          </trans-unit>
          <trans-unit id="184" xml:space="preserve">
            <source>Browse to the <bpt id="2">&lt;em&gt;</bpt>/swagger/docs/v1<ept id="2">&lt;/em&gt;</ept> URL of your project and the various HTTP response codes will be visible in the Swagger JSON.</source>
            <target state="new">Browse to the <bpt id="2">&lt;em&gt;</bpt>/swagger/docs/v1<ept id="2">&lt;/em&gt;</ept> URL of your project and the various HTTP response codes will be visible in the Swagger JSON.</target>
          </trans-unit>
          <trans-unit id="185" xml:space="preserve">
            <source><bpt id="1">&lt;linkText&gt;</bpt><ept id="1">&lt;/linkText&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;linkText&gt;</bpt><ept id="1">&lt;/linkText&gt;</ept></target>
          </trans-unit>
          <trans-unit id="186" xml:space="preserve">
            <source>The code for this demonstration can be found in <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>this GitHub repository<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">The code for this demonstration can be found in <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>this GitHub repository<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="187" xml:space="preserve">
            <source>Along with the Web API project decorated with the <bpt id="2">&lt;em&gt;</bpt>SwaggerResponse<ept id="2">&lt;/em&gt;</ept> attribute is a Console Application project that contains a generated client for this API.</source>
            <target state="new">Along with the Web API project decorated with the <bpt id="2">&lt;em&gt;</bpt>SwaggerResponse<ept id="2">&lt;/em&gt;</ept> attribute is a Console Application project that contains a generated client for this API.</target>
          </trans-unit>
          <trans-unit id="188" xml:space="preserve">
            <source>Next steps</source>
            <target state="new">Next steps</target>
          </trans-unit>
          <trans-unit id="189" xml:space="preserve">
            <source>This article has shown how to customize the way Swashbuckle generates operation ids and valid response codes.</source>
            <target state="new">This article has shown how to customize the way Swashbuckle generates operation ids and valid response codes.</target>
          </trans-unit>
          <trans-unit id="190" xml:space="preserve">
            <source>For more information, see <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Swashbuckle on GitHub<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">For more information, see <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Swashbuckle on GitHub<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
        </group>
      </group>
    </body>
  </file>
</xliff>