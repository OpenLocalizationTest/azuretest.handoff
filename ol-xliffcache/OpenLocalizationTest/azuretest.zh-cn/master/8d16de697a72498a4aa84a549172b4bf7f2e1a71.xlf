<?xml version="1.0" encoding="utf-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" source-language="en-us" target-language="zh-cn" original="2/18/2016 5:20:57 PM" tool-id="MarkdownTransformer" product-name="N/A" product-version="N/A" build-num="1">
    <header>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8d16de697a72498a4aa84a549172b4bf7f2e1a71</xliffext:olfilehash>
      <tool tool-id="MarkdownTransformer" tool-name="MarkdownToXliff" tool-version="1.0" tool-company="Microsoft" />
    </header>
    <body>
      <group extype="content">
        <group id="101">
          <trans-unit id="101" xml:space="preserve">
            <source>Build a Service Using a Non-Relational Data Store | Microsoft Azure</source>
            <target state="new">Build a Service Using a Non-Relational Data Store | Microsoft Azure</target>
          </trans-unit>
          <trans-unit id="102" xml:space="preserve">
            <source>Learn how to use a non-relational data store such as MongoDB or Azure Table Storage with your .NET based mobile service</source>
            <target state="new">Learn how to use a non-relational data store such as MongoDB or Azure Table Storage with your .NET based mobile service</target>
          </trans-unit>
          <trans-unit id="103" xml:space="preserve">
            <source>Build a .NET backend Mobile Service that uses MongoDB instead of a SQL Database for storage</source>
            <target state="new">Build a .NET backend Mobile Service that uses MongoDB instead of a SQL Database for storage</target>
          </trans-unit>
          <trans-unit id="104" xml:space="preserve">
            <source>This topic shows you how to use a non-relational data store for your .NET backend mobile service.</source>
            <target state="new">This topic shows you how to use a non-relational data store for your .NET backend mobile service.</target>
          </trans-unit>
          <trans-unit id="105" xml:space="preserve">
            <source>In this tutorial, you will modify the Mobile Services quickstart project to use MongoDB instead of the default Azure SQL Database data store.</source>
            <target state="new">In this tutorial, you will modify the Mobile Services quickstart project to use MongoDB instead of the default Azure SQL Database data store.</target>
          </trans-unit>
          <trans-unit id="106" xml:space="preserve">
            <source>The tutorial requires completion of the [Get started with Mobile Services] or [Add Mobile Services to an existing app] tutorial.</source>
            <target state="new">The tutorial requires completion of the [Get started with Mobile Services] or [Add Mobile Services to an existing app] tutorial.</target>
          </trans-unit>
          <trans-unit id="107" xml:space="preserve">
            <source>You will also need to add the MongoLab service to your subscription.</source>
            <target state="new">You will also need to add the MongoLab service to your subscription.</target>
          </trans-unit>
          <trans-unit id="108" xml:space="preserve">
            <source><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>Create the MongoLab non-relational store</source>
            <target state="new"><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>Create the MongoLab non-relational store</target>
          </trans-unit>
          <trans-unit id="109" xml:space="preserve">
            <source>In the [Azure Management Portal], click <bpt id="2">&lt;strong&gt;</bpt>New<ept id="2">&lt;/strong&gt;</ept> and click <bpt id="4">&lt;strong&gt;</bpt>Marketplace<ept id="4">&lt;/strong&gt;</ept>.</source>
            <target state="new">In the [Azure Management Portal], click <bpt id="2">&lt;strong&gt;</bpt>New<ept id="2">&lt;/strong&gt;</ept> and click <bpt id="4">&lt;strong&gt;</bpt>Marketplace<ept id="4">&lt;/strong&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="110" xml:space="preserve">
            <source>Click the <bpt id="2">&lt;strong&gt;</bpt>MongoLab<ept id="2">&lt;/strong&gt;</ept> add-on, and complete the wizard to sign up for a MongoLab account.</source>
            <target state="new">Click the <bpt id="2">&lt;strong&gt;</bpt>MongoLab<ept id="2">&lt;/strong&gt;</ept> add-on, and complete the wizard to sign up for a MongoLab account.</target>
          </trans-unit>
          <trans-unit id="111" xml:space="preserve">
            <source>For more information about MongoLab, see the [MongoLab Add-on Page].</source>
            <target state="new">For more information about MongoLab, see the [MongoLab Add-on Page].</target>
          </trans-unit>
          <trans-unit id="112" xml:space="preserve">
            <source>Once the account is set up, click <bpt id="2">&lt;strong&gt;</bpt>Connection Info<ept id="2">&lt;/strong&gt;</ept> and copy the connection string.</source>
            <target state="new">Once the account is set up, click <bpt id="2">&lt;strong&gt;</bpt>Connection Info<ept id="2">&lt;/strong&gt;</ept> and copy the connection string.</target>
          </trans-unit>
          <trans-unit id="113" xml:space="preserve">
            <source>In your mobile service, click the <bpt id="2">&lt;strong&gt;</bpt>Configure<ept id="2">&lt;/strong&gt;</ept> tab, scroll down to <bpt id="4">&lt;strong&gt;</bpt>Connection strings<ept id="4">&lt;/strong&gt;</ept> and enter a new connection string with a <bpt id="6">&lt;strong&gt;</bpt>Name<ept id="6">&lt;/strong&gt;</ept> of <bpt id="8">&lt;code&gt;</bpt>MongoConnectionString<ept id="8">&lt;/code&gt;</ept> and a <bpt id="10">&lt;strong&gt;</bpt>Value<ept id="10">&lt;/strong&gt;</ept> that is your MongoDB connection, then click <bpt id="12">&lt;strong&gt;</bpt>Save<ept id="12">&lt;/strong&gt;</ept>.</source>
            <target state="new">In your mobile service, click the <bpt id="2">&lt;strong&gt;</bpt>Configure<ept id="2">&lt;/strong&gt;</ept> tab, scroll down to <bpt id="4">&lt;strong&gt;</bpt>Connection strings<ept id="4">&lt;/strong&gt;</ept> and enter a new connection string with a <bpt id="6">&lt;strong&gt;</bpt>Name<ept id="6">&lt;/strong&gt;</ept> of <bpt id="8">&lt;code&gt;</bpt>MongoConnectionString<ept id="8">&lt;/code&gt;</ept> and a <bpt id="10">&lt;strong&gt;</bpt>Value<ept id="10">&lt;/strong&gt;</ept> that is your MongoDB connection, then click <bpt id="12">&lt;strong&gt;</bpt>Save<ept id="12">&lt;/strong&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="114" xml:space="preserve">
            <source><bpt id="1">&lt;linkText&gt;</bpt>Add the MongoDB connection string<ept id="1">&lt;/linkText&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;linkText&gt;</bpt>Add the MongoDB connection string<ept id="1">&lt;/linkText&gt;</ept></target>
          </trans-unit>
          <trans-unit id="115" xml:space="preserve">
            <source>The storage account connection string is stored encrypted in app settings.</source>
            <target state="new">The storage account connection string is stored encrypted in app settings.</target>
          </trans-unit>
          <trans-unit id="116" xml:space="preserve">
            <source>You can access this string in any table controller at runtime.</source>
            <target state="new">You can access this string in any table controller at runtime.</target>
          </trans-unit>
          <trans-unit id="117" xml:space="preserve">
            <source>In Solution Explorer in Visual Studio, open the Web.config file for the mobile service project and add the following new connection string:</source>
            <target state="new">In Solution Explorer in Visual Studio, open the Web.config file for the mobile service project and add the following new connection string:</target>
          </trans-unit>
          <trans-unit id="118" xml:space="preserve">
            <source>Replace the <bpt id="2">&lt;code&gt;</bpt>&lt;MONGODB_CONNECTION_STRING&gt;<ept id="2">&lt;/code&gt;</ept> placeholder with the MongoDB connection string.</source>
            <target state="new">Replace the <bpt id="2">&lt;code&gt;</bpt>&lt;MONGODB_CONNECTION_STRING&gt;<ept id="2">&lt;/code&gt;</ept> placeholder with the MongoDB connection string.</target>
          </trans-unit>
          <trans-unit id="119" xml:space="preserve">
            <source>The mobile service uses this connection string when it runs on your local computer, which lets you test the code before you publish it.</source>
            <target state="new">The mobile service uses this connection string when it runs on your local computer, which lets you test the code before you publish it.</target>
          </trans-unit>
          <trans-unit id="120" xml:space="preserve">
            <source>When running in Azure, the mobile service instead uses the connection string value set in the portal and ignores the connection string in the project.</source>
            <target state="new">When running in Azure, the mobile service instead uses the connection string value set in the portal and ignores the connection string in the project.</target>
          </trans-unit>
          <trans-unit id="121" xml:space="preserve">
            <source><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>Modify data types and table controllers</source>
            <target state="new"><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>Modify data types and table controllers</target>
          </trans-unit>
          <trans-unit id="122" xml:space="preserve">
            <source>Install the <bpt id="2">&lt;strong&gt;</bpt>WindowsAzure.MobileServices.Backend.Mongo<ept id="2">&lt;/strong&gt;</ept> NuGet package.</source>
            <target state="new">Install the <bpt id="2">&lt;strong&gt;</bpt>WindowsAzure.MobileServices.Backend.Mongo<ept id="2">&lt;/strong&gt;</ept> NuGet package.</target>
          </trans-unit>
          <trans-unit id="123" xml:space="preserve">
            <source>Modify <bpt id="2">&lt;strong&gt;</bpt>TodoItem<ept id="2">&lt;/strong&gt;</ept> to derive from <bpt id="4">&lt;strong&gt;</bpt>DocumentData<ept id="4">&lt;/strong&gt;</ept> instead of <bpt id="6">&lt;strong&gt;</bpt>EntityData<ept id="6">&lt;/strong&gt;</ept>.</source>
            <target state="new">Modify <bpt id="2">&lt;strong&gt;</bpt>TodoItem<ept id="2">&lt;/strong&gt;</ept> to derive from <bpt id="4">&lt;strong&gt;</bpt>DocumentData<ept id="4">&lt;/strong&gt;</ept> instead of <bpt id="6">&lt;strong&gt;</bpt>EntityData<ept id="6">&lt;/strong&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="124" xml:space="preserve">
            <source>In <bpt id="2">&lt;strong&gt;</bpt>TodoItemController<ept id="2">&lt;/strong&gt;</ept>, replace the <bpt id="4">&lt;strong&gt;</bpt>Initialize<ept id="4">&lt;/strong&gt;</ept> method with the following:</source>
            <target state="new">In <bpt id="2">&lt;strong&gt;</bpt>TodoItemController<ept id="2">&lt;/strong&gt;</ept>, replace the <bpt id="4">&lt;strong&gt;</bpt>Initialize<ept id="4">&lt;/strong&gt;</ept> method with the following:</target>
          </trans-unit>
          <trans-unit id="125" xml:space="preserve">
            <source>In the code for the <bpt id="2">&lt;strong&gt;</bpt>Initialize<ept id="2">&lt;/strong&gt;</ept> method above, replace <bpt id="4">&lt;code&gt;</bpt>&lt;YOUR-DATABASE-NAME&gt;<ept id="4">&lt;/code&gt;</ept> with the name you chose when you provisioned the MongoLab add-on.</source>
            <target state="new">In the code for the <bpt id="2">&lt;strong&gt;</bpt>Initialize<ept id="2">&lt;/strong&gt;</ept> method above, replace <bpt id="4">&lt;code&gt;</bpt>&lt;YOUR-DATABASE-NAME&gt;<ept id="4">&lt;/code&gt;</ept> with the name you chose when you provisioned the MongoLab add-on.</target>
          </trans-unit>
          <trans-unit id="126" xml:space="preserve">
            <source>You are now ready to test the app.</source>
            <target state="new">You are now ready to test the app.</target>
          </trans-unit>
          <trans-unit id="127" xml:space="preserve">
            <source><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>Test the application</source>
            <target state="new"><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>Test the application</target>
          </trans-unit>
          <trans-unit id="128" xml:space="preserve">
            <source>(Optional) Republish your mobile service .NET backend project.</source>
            <target state="new">(Optional) Republish your mobile service .NET backend project.</target>
          </trans-unit>
          <trans-unit id="129" xml:space="preserve">
            <source>You can also test your mobile service locally before you publish the .NET backend project to Azure.</source>
            <target state="new">You can also test your mobile service locally before you publish the .NET backend project to Azure.</target>
          </trans-unit>
          <trans-unit id="130" xml:space="preserve">
            <source>Whether you test locally or in Azure, the mobile service will be using your MongoDB for storage.</source>
            <target state="new">Whether you test locally or in Azure, the mobile service will be using your MongoDB for storage.</target>
          </trans-unit>
          <trans-unit id="131" xml:space="preserve">
            <source>Using either the <bpt id="2">&lt;strong&gt;</bpt>Try it now<ept id="2">&lt;/strong&gt;</ept> button on the start page as before or using a client app connected to your Mobile App, query items in the database.</source>
            <target state="new">Using either the <bpt id="2">&lt;strong&gt;</bpt>Try it now<ept id="2">&lt;/strong&gt;</ept> button on the start page as before or using a client app connected to your Mobile App, query items in the database.</target>
          </trans-unit>
          <trans-unit id="132" xml:space="preserve">
            <source>Note that you will not see any items which were previously stored in the SQL database from the quickstart tutorial.</source>
            <target state="new">Note that you will not see any items which were previously stored in the SQL database from the quickstart tutorial.</target>
          </trans-unit>
          <trans-unit id="133" xml:space="preserve">
            <source>When you use the <bpt id="2">&lt;strong&gt;</bpt>Try it now<ept id="2">&lt;/strong&gt;</ept> button to launch the Help API pages, remember to supply your application key as the password (with a blank username).</source>
            <target state="new">When you use the <bpt id="2">&lt;strong&gt;</bpt>Try it now<ept id="2">&lt;/strong&gt;</ept> button to launch the Help API pages, remember to supply your application key as the password (with a blank username).</target>
          </trans-unit>
          <trans-unit id="134" xml:space="preserve">
            <source>Create a new item.</source>
            <target state="new">Create a new item.</target>
          </trans-unit>
          <trans-unit id="135" xml:space="preserve">
            <source>The app and mobile service should behave as before, except now your data is being stored in your non-relational store instead of in the SQL Database.</source>
            <target state="new">The app and mobile service should behave as before, except now your data is being stored in your non-relational store instead of in the SQL Database.</target>
          </trans-unit>
          <trans-unit id="136" xml:space="preserve">
            <source>Next Steps</source>
            <target state="new">Next Steps</target>
          </trans-unit>
          <trans-unit id="137" xml:space="preserve">
            <source>Now that you have seen how easy it is to use Table storage with .NET backend, consider exploring some other backend storage options:</source>
            <target state="new">Now that you have seen how easy it is to use Table storage with .NET backend, consider exploring some other backend storage options:</target>
          </trans-unit>
          <trans-unit id="138" xml:space="preserve">
            <source><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Build a .NET backend Mobile Service that uses Table storage instead of a SQL Database<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>Like the tutorial you just completed, this topic shows you how to use a non-relational data store for your mobile service. In this tutorial, you will modify the Mobile Services quickstart project to use Azure Storage instead of a SQL Database as the data store.</source>
            <target state="new"><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Build a .NET backend Mobile Service that uses Table storage instead of a SQL Database<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>Like the tutorial you just completed, this topic shows you how to use a non-relational data store for your mobile service. In this tutorial, you will modify the Mobile Services quickstart project to use Azure Storage instead of a SQL Database as the data store.</target>
          </trans-unit>
          <trans-unit id="139" xml:space="preserve">
            <source><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Connect to an on-premises SQL Server using Hybrid Connections<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>Hybrid Connections lets your mobile service securely connect to your on-premises assets. In this way, you can make your on-premises data accessible to your mobile clients by using Azure. Supported assets include any resource that runs on a static TCP port, including Microsoft SQL Server, MySQL, HTTP Web APIs, and most custom web services.</source>
            <target state="new"><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Connect to an on-premises SQL Server using Hybrid Connections<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>Hybrid Connections lets your mobile service securely connect to your on-premises assets. In this way, you can make your on-premises data accessible to your mobile clients by using Azure. Supported assets include any resource that runs on a static TCP port, including Microsoft SQL Server, MySQL, HTTP Web APIs, and most custom web services.</target>
          </trans-unit>
          <trans-unit id="140" xml:space="preserve">
            <source><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Upload images to Azure Storage using Mobile Services<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>Shows you how to extend the TodoList sample project to let you upload images from your app to Azure Blob storage.</source>
            <target state="new"><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Upload images to Azure Storage using Mobile Services<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>Shows you how to extend the TodoList sample project to let you upload images from your app to Azure Blob storage.</target>
          </trans-unit>
        </group>
      </group>
    </body>
  </file>
</xliff>