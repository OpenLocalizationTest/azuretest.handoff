<?xml version="1.0" encoding="utf-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" source-language="en-us" target-language="zh-cn" original="2/19/2016 4:58:32 PM" tool-id="MarkdownTransformer" product-name="N/A" product-version="N/A" build-num="1">
    <header>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">07415c6d459c5d16cebf84f730658eae25ef18f5</xliffext:olfilehash>
      <tool tool-id="MarkdownTransformer" tool-name="MarkdownToXliff" tool-version="1.0" tool-company="Microsoft" />
    </header>
    <body>
      <group extype="content">
        <group id="101">
          <trans-unit id="101" xml:space="preserve">
            <source>C# streaming wordcount Hadoop sample | Microsoft Azure</source>
            <target state="new">C# streaming wordcount Hadoop sample | Microsoft Azure</target>
          </trans-unit>
          <trans-unit id="102" xml:space="preserve">
            <source>How to write MapReduce programs in C# that use the Hadoop Streaming interface, and how to run them on HDInsight using PowerShell cmdlets.</source>
            <target state="new">How to write MapReduce programs in C# that use the Hadoop Streaming interface, and how to run them on HDInsight using PowerShell cmdlets.</target>
          </trans-unit>
          <trans-unit id="103" xml:space="preserve">
            <source>The C# streaming word count MapReduce sample in Hadoop on HDInsight</source>
            <target state="new">The C# streaming word count MapReduce sample in Hadoop on HDInsight</target>
          </trans-unit>
          <trans-unit id="104" xml:space="preserve">
            <source>Hadoop provides a streaming API to MapReduce, which enables you to write map and reduce functions in languages other than Java.</source>
            <target state="new">Hadoop provides a streaming API to MapReduce, which enables you to write map and reduce functions in languages other than Java.</target>
          </trans-unit>
          <trans-unit id="105" xml:space="preserve">
            <source>This tutorial shows how to write MapReduce programs in C# by using the Hadoop Streaming interface and how to run the programs in Azure HDInsight by using Azure PowerShell cmdlets.</source>
            <target state="new">This tutorial shows how to write MapReduce programs in C# by using the Hadoop Streaming interface and how to run the programs in Azure HDInsight by using Azure PowerShell cmdlets.</target>
          </trans-unit>
          <trans-unit id="106" xml:space="preserve">
            <source>The steps in this tutorial apply only to Windows-based HDInsight clusters.</source>
            <target state="new">The steps in this tutorial apply only to Windows-based HDInsight clusters.</target>
          </trans-unit>
          <trans-unit id="107" xml:space="preserve">
            <source>For an example of streaming for Linux-based HDInsight clusters, see <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Develop Python streaming programs for HDInsight<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">For an example of streaming for Linux-based HDInsight clusters, see <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Develop Python streaming programs for HDInsight<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="108" xml:space="preserve">
            <source>In the example, the mapper and the reducer are executables that read the input from <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>stdin[stdin-stdout-stderr]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> (line-by-line) and emit the output to <bpt id="4CapsExtId1">&lt;link&gt;</bpt><bpt id="4CapsExtId2">&lt;linkText&gt;</bpt>stdout[stdin-stdout-stderr]<ept id="4CapsExtId2">&lt;/linkText&gt;</ept><bpt id="4CapsExtId3">&lt;title&gt;</bpt><ept id="4CapsExtId3">&lt;/title&gt;</ept><ept id="4CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">In the example, the mapper and the reducer are executables that read the input from <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>stdin[stdin-stdout-stderr]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> (line-by-line) and emit the output to <bpt id="4CapsExtId1">&lt;link&gt;</bpt><bpt id="4CapsExtId2">&lt;linkText&gt;</bpt>stdout[stdin-stdout-stderr]<ept id="4CapsExtId2">&lt;/linkText&gt;</ept><bpt id="4CapsExtId3">&lt;title&gt;</bpt><ept id="4CapsExtId3">&lt;/title&gt;</ept><ept id="4CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="109" xml:space="preserve">
            <source>The program counts all of the words in the text.</source>
            <target state="new">The program counts all of the words in the text.</target>
          </trans-unit>
          <trans-unit id="110" xml:space="preserve">
            <source>When an executable is specified for <bpt id="2">&lt;strong&gt;</bpt>mappers<ept id="2">&lt;/strong&gt;</ept>, each mapper task launches the executable as a separate process when the mapper is initialized.</source>
            <target state="new">When an executable is specified for <bpt id="2">&lt;strong&gt;</bpt>mappers<ept id="2">&lt;/strong&gt;</ept>, each mapper task launches the executable as a separate process when the mapper is initialized.</target>
          </trans-unit>
          <trans-unit id="111" xml:space="preserve">
            <source>As the mapper task runs, it converts its input into lines, and feeds the lines to the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>stdin[stdin-stdout-stderr]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> of the process.</source>
            <target state="new">As the mapper task runs, it converts its input into lines, and feeds the lines to the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>stdin[stdin-stdout-stderr]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> of the process.</target>
          </trans-unit>
          <trans-unit id="112" xml:space="preserve">
            <source>In the meantime, the mapper collects the line-oriented output from the stdout of the process.</source>
            <target state="new">In the meantime, the mapper collects the line-oriented output from the stdout of the process.</target>
          </trans-unit>
          <trans-unit id="113" xml:space="preserve">
            <source>It converts each line into a key/value pair, which is collected as the output of the mapper.</source>
            <target state="new">It converts each line into a key/value pair, which is collected as the output of the mapper.</target>
          </trans-unit>
          <trans-unit id="114" xml:space="preserve">
            <source>By default, the prefix of a line up to the first Tab character is the key, and the remainder of the line (excluding the Tab character) is the value.</source>
            <target state="new">By default, the prefix of a line up to the first Tab character is the key, and the remainder of the line (excluding the Tab character) is the value.</target>
          </trans-unit>
          <trans-unit id="115" xml:space="preserve">
            <source>If there is no Tab character in the line, entire line is considered as the key, and the value is null.</source>
            <target state="new">If there is no Tab character in the line, entire line is considered as the key, and the value is null.</target>
          </trans-unit>
          <trans-unit id="116" xml:space="preserve">
            <source>When an executable is specified for <bpt id="2">&lt;strong&gt;</bpt>reducers<ept id="2">&lt;/strong&gt;</ept>, each reducer task launches the executable as a separate process when the reducer is initialized.</source>
            <target state="new">When an executable is specified for <bpt id="2">&lt;strong&gt;</bpt>reducers<ept id="2">&lt;/strong&gt;</ept>, each reducer task launches the executable as a separate process when the reducer is initialized.</target>
          </trans-unit>
          <trans-unit id="117" xml:space="preserve">
            <source>As the reducer task runs, it converts its input key/values pairs into lines, and it feeds the lines to the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>stdin[stdin-stdout-stderr]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> of the process.</source>
            <target state="new">As the reducer task runs, it converts its input key/values pairs into lines, and it feeds the lines to the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>stdin[stdin-stdout-stderr]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> of the process.</target>
          </trans-unit>
          <trans-unit id="118" xml:space="preserve">
            <source>In the meantime, the reducer collects the line-oriented output from the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>stdout[stdin-stdout-stderr]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> of the process.</source>
            <target state="new">In the meantime, the reducer collects the line-oriented output from the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>stdout[stdin-stdout-stderr]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> of the process.</target>
          </trans-unit>
          <trans-unit id="119" xml:space="preserve">
            <source>It converts each line to a key/value pair, which is collected as the output of the reducer.</source>
            <target state="new">It converts each line to a key/value pair, which is collected as the output of the reducer.</target>
          </trans-unit>
          <trans-unit id="120" xml:space="preserve">
            <source>By default, the prefix of a line up to the first Tab character is the key, and the remainder of the line (excluding the Tab character) is the value.</source>
            <target state="new">By default, the prefix of a line up to the first Tab character is the key, and the remainder of the line (excluding the Tab character) is the value.</target>
          </trans-unit>
          <trans-unit id="121" xml:space="preserve">
            <source>For more information about the Hadoop Streaming interface, see <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Hadoop Streaming[hadoop-streaming]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">For more information about the Hadoop Streaming interface, see <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Hadoop Streaming[hadoop-streaming]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="122" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>In this tutorial, you will learn how to:<ept id="1">&lt;/strong&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>In this tutorial, you will learn how to:<ept id="1">&lt;/strong&gt;</ept></target>
          </trans-unit>
          <trans-unit id="123" xml:space="preserve">
            <source>Use Azure PowerShell to run a C# streaming program to analyze data contained in a file in HDInsight.</source>
            <target state="new">Use Azure PowerShell to run a C# streaming program to analyze data contained in a file in HDInsight.</target>
          </trans-unit>
          <trans-unit id="124" xml:space="preserve">
            <source>Write C# code that uses the Hadoop Streaming interface.</source>
            <target state="new">Write C# code that uses the Hadoop Streaming interface.</target>
          </trans-unit>
          <trans-unit id="125" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Prerequisites<ept id="1">&lt;/strong&gt;</ept>:</source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Prerequisites<ept id="1">&lt;/strong&gt;</ept>:</target>
          </trans-unit>
          <trans-unit id="126" xml:space="preserve">
            <source>Before you begin, you must have the following:</source>
            <target state="new">Before you begin, you must have the following:</target>
          </trans-unit>
          <trans-unit id="127" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>An Azure subscription<ept id="1">&lt;/strong&gt;</ept>.</source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>An Azure subscription<ept id="1">&lt;/strong&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="128" xml:space="preserve">
            <source>See <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Get Azure free trial<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">See <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Get Azure free trial<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="129" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>an HDInsight cluster<ept id="1">&lt;/strong&gt;</ept>.</source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>an HDInsight cluster<ept id="1">&lt;/strong&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="130" xml:space="preserve">
            <source>For instructions on the various ways in which such clusters can be created, see <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Provision HDInsight Clusters<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">For instructions on the various ways in which such clusters can be created, see <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Provision HDInsight Clusters<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="131" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>A workstation with Azure PowerShell<ept id="1">&lt;/strong&gt;</ept>.</source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>A workstation with Azure PowerShell<ept id="1">&lt;/strong&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="132" xml:space="preserve">
            <source>See <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Install and use Azure PowerShell<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">See <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Install and use Azure PowerShell<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="133" xml:space="preserve">
            <source><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>Run the sample with Azure PowerShell</source>
            <target state="new"><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>Run the sample with Azure PowerShell</target>
          </trans-unit>
          <trans-unit id="134" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>To run the MapReduce job<ept id="1">&lt;/strong&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>To run the MapReduce job<ept id="1">&lt;/strong&gt;</ept></target>
          </trans-unit>
          <trans-unit id="135" xml:space="preserve">
            <source>Open <bpt id="2">&lt;strong&gt;</bpt>Azure PowerShell<ept id="2">&lt;/strong&gt;</ept>.</source>
            <target state="new">Open <bpt id="2">&lt;strong&gt;</bpt>Azure PowerShell<ept id="2">&lt;/strong&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="136" xml:space="preserve">
            <source>For instructions to open the Azure PowerShell console window, see <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Install and configure Azure PowerShell[powershell-install-configure]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">For instructions to open the Azure PowerShell console window, see <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Install and configure Azure PowerShell[powershell-install-configure]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="137" xml:space="preserve">
            <source>Set the two variables in the following commands, and then run them:</source>
            <target state="new">Set the two variables in the following commands, and then run them:</target>
          </trans-unit>
          <trans-unit id="138" xml:space="preserve">
            <source>Run the following command to define the MapReduce job:</source>
            <target state="new">Run the following command to define the MapReduce job:</target>
          </trans-unit>
          <trans-unit id="139" xml:space="preserve">
            <source>The parameters, specify the mapper and reducer functions and the input file and output files.</source>
            <target state="new">The parameters, specify the mapper and reducer functions and the input file and output files.</target>
          </trans-unit>
          <trans-unit id="140" xml:space="preserve">
            <source>Run the following commands to run the MapReduce job, wait for the job to complete, and then print the standard error message:</source>
            <target state="new">Run the following commands to run the MapReduce job, wait for the job to complete, and then print the standard error message:</target>
          </trans-unit>
          <trans-unit id="141" xml:space="preserve">
            <source>Run the following commands to display the results of the word count:</source>
            <target state="new">Run the following commands to display the results of the word count:</target>
          </trans-unit>
          <trans-unit id="142" xml:space="preserve">
            <source>$storageAccountKey = Get-AzureStorageKey -StorageAccountName $storageAccountName | %{ $_.Primary }</source>
            <target state="new">$storageAccountKey = Get-AzureStorageKey -StorageAccountName $storageAccountName | %{ $_.Primary }</target>
          </trans-unit>
          <trans-unit id="143" xml:space="preserve">
            <source>$storageContext = New-AzureStorageContext -StorageAccountName $storageAccountName -StorageAccountKey $storageAccountKey</source>
            <target state="new">$storageContext = New-AzureStorageContext -StorageAccountName $storageAccountName -StorageAccountKey $storageAccountKey</target>
          </trans-unit>
          <trans-unit id="144" xml:space="preserve">
            <source>Note that the output files of a MapReduce job are immutable.</source>
            <target state="new">Note that the output files of a MapReduce job are immutable.</target>
          </trans-unit>
          <trans-unit id="145" xml:space="preserve">
            <source>So if you rerun this sample, you need to change the name of the output file.</source>
            <target state="new">So if you rerun this sample, you need to change the name of the output file.</target>
          </trans-unit>
          <trans-unit id="146" xml:space="preserve">
            <source><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>The C# code for Hadoop Streaming</source>
            <target state="new"><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>The C# code for Hadoop Streaming</target>
          </trans-unit>
          <trans-unit id="147" xml:space="preserve">
            <source>The MapReduce program uses the cat.exe application as a mapping interface to stream the text into the console and the wc.exe application as the reduce interface to count the number of words that are streamed from a document.</source>
            <target state="new">The MapReduce program uses the cat.exe application as a mapping interface to stream the text into the console and the wc.exe application as the reduce interface to count the number of words that are streamed from a document.</target>
          </trans-unit>
          <trans-unit id="148" xml:space="preserve">
            <source>Both the mapper and reducer read characters, line-by-line, from the standard input stream (stdin) and write to the standard output stream (stdout).</source>
            <target state="new">Both the mapper and reducer read characters, line-by-line, from the standard input stream (stdin) and write to the standard output stream (stdout).</target>
          </trans-unit>
          <trans-unit id="149" xml:space="preserve">
            <source>The mapper code in the cat.cs file uses a <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>StreamReader[streamreader]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> object to read the characters of the incoming stream to the console, which then writes the stream to the standard output stream with the static <bpt id="4CapsExtId1">&lt;link&gt;</bpt><bpt id="4CapsExtId2">&lt;linkText&gt;</bpt>Console.Writeline[console-writeline]<ept id="4CapsExtId2">&lt;/linkText&gt;</ept><bpt id="4CapsExtId3">&lt;title&gt;</bpt><ept id="4CapsExtId3">&lt;/title&gt;</ept><ept id="4CapsExtId1">&lt;/link&gt;</ept> method.</source>
            <target state="new">The mapper code in the cat.cs file uses a <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>StreamReader[streamreader]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> object to read the characters of the incoming stream to the console, which then writes the stream to the standard output stream with the static <bpt id="4CapsExtId1">&lt;link&gt;</bpt><bpt id="4CapsExtId2">&lt;linkText&gt;</bpt>Console.Writeline[console-writeline]<ept id="4CapsExtId2">&lt;/linkText&gt;</ept><bpt id="4CapsExtId3">&lt;title&gt;</bpt><ept id="4CapsExtId3">&lt;/title&gt;</ept><ept id="4CapsExtId1">&lt;/link&gt;</ept> method.</target>
          </trans-unit>
          <trans-unit id="150" xml:space="preserve">
            <source>The reducer code in the wc.cs file uses a <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>StreamReader[streamreader]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>   object to read characters from the standard input stream that have been output by the cat.exe mapper.</source>
            <target state="new">The reducer code in the wc.cs file uses a <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>StreamReader[streamreader]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>   object to read characters from the standard input stream that have been output by the cat.exe mapper.</target>
          </trans-unit>
          <trans-unit id="151" xml:space="preserve">
            <source>As it reads the characters with the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Console.Writeline[console-writeline]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> method, it counts the words by counting spaces and end-of-line characters at the end of each word.</source>
            <target state="new">As it reads the characters with the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Console.Writeline[console-writeline]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> method, it counts the words by counting spaces and end-of-line characters at the end of each word.</target>
          </trans-unit>
          <trans-unit id="152" xml:space="preserve">
            <source>It then writes the total to the standard output stream with the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Console.Writeline[console-writeline]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> method.</source>
            <target state="new">It then writes the total to the standard output stream with the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Console.Writeline[console-writeline]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> method.</target>
          </trans-unit>
          <trans-unit id="153" xml:space="preserve">
            <source><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>Summary</source>
            <target state="new"><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>Summary</target>
          </trans-unit>
          <trans-unit id="154" xml:space="preserve">
            <source>In this tutorial, you saw how to deploy a MapReduce job in HDInsight by using Hadoop Streaming.</source>
            <target state="new">In this tutorial, you saw how to deploy a MapReduce job in HDInsight by using Hadoop Streaming.</target>
          </trans-unit>
          <trans-unit id="155" xml:space="preserve">
            <source><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>Next steps</source>
            <target state="new"><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>Next steps</target>
          </trans-unit>
          <trans-unit id="156" xml:space="preserve">
            <source>For tutorials that run other samples and provide instructions for running Pig, Hive, and MapReduce jobs in Azure HDInsight with Azure PowerShell, see the following articles:</source>
            <target state="new">For tutorials that run other samples and provide instructions for running Pig, Hive, and MapReduce jobs in Azure HDInsight with Azure PowerShell, see the following articles:</target>
          </trans-unit>
          <trans-unit id="157" xml:space="preserve">
            <source><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Get started with Azure HDInsight[hdinsight-get-started]<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></source>
            <target state="new"><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Get started with Azure HDInsight[hdinsight-get-started]<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></target>
          </trans-unit>
          <trans-unit id="158" xml:space="preserve">
            <source><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Sample: Pi Estimator[hdinsight-sample-pi-estimator]<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></source>
            <target state="new"><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Sample: Pi Estimator[hdinsight-sample-pi-estimator]<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></target>
          </trans-unit>
          <trans-unit id="159" xml:space="preserve">
            <source><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Sample: Word count[hdinsight-sample-wordcount]<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></source>
            <target state="new"><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Sample: Word count[hdinsight-sample-wordcount]<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></target>
          </trans-unit>
          <trans-unit id="160" xml:space="preserve">
            <source><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Sample: 10GB GraySort[hdinsight-sample-10gb-graysort]<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></source>
            <target state="new"><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Sample: 10GB GraySort[hdinsight-sample-10gb-graysort]<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></target>
          </trans-unit>
          <trans-unit id="161" xml:space="preserve">
            <source><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Use Pig with HDInsight[hdinsight-use-pig]<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></source>
            <target state="new"><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Use Pig with HDInsight[hdinsight-use-pig]<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></target>
          </trans-unit>
          <trans-unit id="162" xml:space="preserve">
            <source><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Use Hive with HDInsight[hdinsight-use-hive]<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></source>
            <target state="new"><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Use Hive with HDInsight[hdinsight-use-hive]<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></target>
          </trans-unit>
          <trans-unit id="163" xml:space="preserve">
            <source><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Azure HDInsight SDK documentation[hdinsight-sdk-documentation]<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></source>
            <target state="new"><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Azure HDInsight SDK documentation[hdinsight-sdk-documentation]<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></target>
          </trans-unit>
        </group>
      </group>
    </body>
  </file>
</xliff>