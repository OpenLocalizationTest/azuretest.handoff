<?xml version="1.0" encoding="utf-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" source-language="en-us" target-language="zh-cn" original="2/19/2016 5:10:57 PM" tool-id="MarkdownTransformer" product-name="N/A" product-version="N/A" build-num="1">
    <header>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">87c2d5a828ba634650c9a677a112e8a01a0b101c</xliffext:olfilehash>
      <tool tool-id="MarkdownTransformer" tool-name="MarkdownToXliff" tool-version="1.0" tool-company="Microsoft" />
    </header>
    <body>
      <group extype="content">
        <group id="101">
          <trans-unit id="101" xml:space="preserve">
            <source>Working with Node.js Modules</source>
            <target state="new">Working with Node.js Modules</target>
          </trans-unit>
          <trans-unit id="102" xml:space="preserve">
            <source>Learn how to work with Node.js modules when using Azure Web Sites or Cloud Services.</source>
            <target state="new">Learn how to work with Node.js modules when using Azure Web Sites or Cloud Services.</target>
          </trans-unit>
          <trans-unit id="103" xml:space="preserve">
            <source>Using Node.js Modules with Azure applications</source>
            <target state="new">Using Node.js Modules with Azure applications</target>
          </trans-unit>
          <trans-unit id="104" xml:space="preserve">
            <source>This document provides guidance on using Node.js modules with applications hosted on Azure.</source>
            <target state="new">This document provides guidance on using Node.js modules with applications hosted on Azure.</target>
          </trans-unit>
          <trans-unit id="105" xml:space="preserve">
            <source>It provides guidance on ensuring that your application uses a specific version of module as well as using native modules with Azure.</source>
            <target state="new">It provides guidance on ensuring that your application uses a specific version of module as well as using native modules with Azure.</target>
          </trans-unit>
          <trans-unit id="106" xml:space="preserve">
            <source>If you are already familiar with using Node.js modules, <bpt id="2">&lt;strong&gt;</bpt>package.json<ept id="2">&lt;/strong&gt;</ept> and <bpt id="4">&lt;strong&gt;</bpt>npm-shrinkwrap.json<ept id="4">&lt;/strong&gt;</ept> files, the following is a quick summary of what is discussed in this article:</source>
            <target state="new">If you are already familiar with using Node.js modules, <bpt id="2">&lt;strong&gt;</bpt>package.json<ept id="2">&lt;/strong&gt;</ept> and <bpt id="4">&lt;strong&gt;</bpt>npm-shrinkwrap.json<ept id="4">&lt;/strong&gt;</ept> files, the following is a quick summary of what is discussed in this article:</target>
          </trans-unit>
          <trans-unit id="107" xml:space="preserve">
            <source>Azure Webites understand <bpt id="2">&lt;strong&gt;</bpt>package.json<ept id="2">&lt;/strong&gt;</ept> and <bpt id="4">&lt;strong&gt;</bpt>npm-shrinkwrap.json<ept id="4">&lt;/strong&gt;</ept> files and can install modules based on entries in these files.</source>
            <target state="new">Azure Webites understand <bpt id="2">&lt;strong&gt;</bpt>package.json<ept id="2">&lt;/strong&gt;</ept> and <bpt id="4">&lt;strong&gt;</bpt>npm-shrinkwrap.json<ept id="4">&lt;/strong&gt;</ept> files and can install modules based on entries in these files.</target>
          </trans-unit>
          <trans-unit id="108" xml:space="preserve">
            <source>Azure Cloud Services expect all modules to be installed on the development environment, and the <bpt id="2">&lt;strong&gt;</bpt>node\_modules<ept id="2">&lt;/strong&gt;</ept> directory to be included as part of the deployment package.</source>
            <target state="new">Azure Cloud Services expect all modules to be installed on the development environment, and the <bpt id="2">&lt;strong&gt;</bpt>node\_modules<ept id="2">&lt;/strong&gt;</ept> directory to be included as part of the deployment package.</target>
          </trans-unit>
          <trans-unit id="109" xml:space="preserve">
            <source>Azure Virtual Machines are not discussed in this article, as the deployment experience in a VM will be dependent on the operating system hosted by the Virtual Machine.</source>
            <target state="new">Azure Virtual Machines are not discussed in this article, as the deployment experience in a VM will be dependent on the operating system hosted by the Virtual Machine.</target>
          </trans-unit>
          <trans-unit id="110" xml:space="preserve">
            <source>It is possible to enable support for installing modules using <bpt id="2">&lt;strong&gt;</bpt>package.json<ept id="2">&lt;/strong&gt;</ept> or <bpt id="4">&lt;strong&gt;</bpt>npm-shrinkwrap.json<ept id="4">&lt;/strong&gt;</ept> files on Azure, however this requires customization of the default scripts used by Cloud Service projects.</source>
            <target state="new">It is possible to enable support for installing modules using <bpt id="2">&lt;strong&gt;</bpt>package.json<ept id="2">&lt;/strong&gt;</ept> or <bpt id="4">&lt;strong&gt;</bpt>npm-shrinkwrap.json<ept id="4">&lt;/strong&gt;</ept> files on Azure, however this requires customization of the default scripts used by Cloud Service projects.</target>
          </trans-unit>
          <trans-unit id="111" xml:space="preserve">
            <source>For an example of how to accomplish this, see <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Azure Startup task to run npm install to avoid deploying node modules<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept></source>
            <target state="new">For an example of how to accomplish this, see <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Azure Startup task to run npm install to avoid deploying node modules<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept></target>
          </trans-unit>
          <trans-unit id="112" xml:space="preserve">
            <source>Node.js Modules</source>
            <target state="new">Node.js Modules</target>
          </trans-unit>
          <trans-unit id="113" xml:space="preserve">
            <source>Modules are loadable JavaScript packages that provide specific functionality for your application.</source>
            <target state="new">Modules are loadable JavaScript packages that provide specific functionality for your application.</target>
          </trans-unit>
          <trans-unit id="114" xml:space="preserve">
            <source>A module is usually installed using the <bpt id="2">&lt;strong&gt;</bpt>npm<ept id="2">&lt;/strong&gt;</ept> command-line tool, however some (such as the http module) are provided as part of the core Node.js package.</source>
            <target state="new">A module is usually installed using the <bpt id="2">&lt;strong&gt;</bpt>npm<ept id="2">&lt;/strong&gt;</ept> command-line tool, however some (such as the http module) are provided as part of the core Node.js package.</target>
          </trans-unit>
          <trans-unit id="115" xml:space="preserve">
            <source>When modules are installed, they are stored in the <bpt id="2">&lt;strong&gt;</bpt>node\_modules<ept id="2">&lt;/strong&gt;</ept> directory at the root of your application directory structure.</source>
            <target state="new">When modules are installed, they are stored in the <bpt id="2">&lt;strong&gt;</bpt>node\_modules<ept id="2">&lt;/strong&gt;</ept> directory at the root of your application directory structure.</target>
          </trans-unit>
          <trans-unit id="116" xml:space="preserve">
            <source>Each module within the <bpt id="2">&lt;strong&gt;</bpt>node\_modules<ept id="2">&lt;/strong&gt;</ept> directory maintains its own <bpt id="4">&lt;strong&gt;</bpt>node\_modules<ept id="4">&lt;/strong&gt;</ept> directory that contains any modules that it depend on, and this repeats again for every module all the way down the dependency chain.</source>
            <target state="new">Each module within the <bpt id="2">&lt;strong&gt;</bpt>node\_modules<ept id="2">&lt;/strong&gt;</ept> directory maintains its own <bpt id="4">&lt;strong&gt;</bpt>node\_modules<ept id="4">&lt;/strong&gt;</ept> directory that contains any modules that it depend on, and this repeats again for every module all the way down the dependency chain.</target>
          </trans-unit>
          <trans-unit id="117" xml:space="preserve">
            <source>This allows each module installed to have its own version requirements for the modules it depends on, however it can result in quite a large directory structure.</source>
            <target state="new">This allows each module installed to have its own version requirements for the modules it depends on, however it can result in quite a large directory structure.</target>
          </trans-unit>
          <trans-unit id="118" xml:space="preserve">
            <source>When deploying the <bpt id="2">&lt;strong&gt;</bpt>node\_modules<ept id="2">&lt;/strong&gt;</ept> directory as part of your application, it will increase the size of the deployment compared to using a <bpt id="4">&lt;strong&gt;</bpt>package.json<ept id="4">&lt;/strong&gt;</ept> or <bpt id="6">&lt;strong&gt;</bpt>npm-shrinkwrap.json<ept id="6">&lt;/strong&gt;</ept> file; however, it does guarantee that the version of the modules used in production are the same as those used in development.</source>
            <target state="new">When deploying the <bpt id="2">&lt;strong&gt;</bpt>node\_modules<ept id="2">&lt;/strong&gt;</ept> directory as part of your application, it will increase the size of the deployment compared to using a <bpt id="4">&lt;strong&gt;</bpt>package.json<ept id="4">&lt;/strong&gt;</ept> or <bpt id="6">&lt;strong&gt;</bpt>npm-shrinkwrap.json<ept id="6">&lt;/strong&gt;</ept> file; however, it does guarantee that the version of the modules used in production are the same as those used in development.</target>
          </trans-unit>
          <trans-unit id="119" xml:space="preserve">
            <source>Native Modules</source>
            <target state="new">Native Modules</target>
          </trans-unit>
          <trans-unit id="120" xml:space="preserve">
            <source>While most modules are simply plain-text JavaScript files, some modules are platform-specific binary images.</source>
            <target state="new">While most modules are simply plain-text JavaScript files, some modules are platform-specific binary images.</target>
          </trans-unit>
          <trans-unit id="121" xml:space="preserve">
            <source>These modules are compiled at install time, usually by using Python and node-gyp.</source>
            <target state="new">These modules are compiled at install time, usually by using Python and node-gyp.</target>
          </trans-unit>
          <trans-unit id="122" xml:space="preserve">
            <source>Since Azure Cloud Services rely on the <bpt id="2">&lt;strong&gt;</bpt>node\_modules<ept id="2">&lt;/strong&gt;</ept> folder being deployed as part of the application, any native module included as part of the installed modules should work in a cloud service as long as it was installed and compiled on a Windows development system.</source>
            <target state="new">Since Azure Cloud Services rely on the <bpt id="2">&lt;strong&gt;</bpt>node\_modules<ept id="2">&lt;/strong&gt;</ept> folder being deployed as part of the application, any native module included as part of the installed modules should work in a cloud service as long as it was installed and compiled on a Windows development system.</target>
          </trans-unit>
          <trans-unit id="123" xml:space="preserve">
            <source>Azure Websites does not support all native modules and might fail at compiling those with very specific prerequisites.</source>
            <target state="new">Azure Websites does not support all native modules and might fail at compiling those with very specific prerequisites.</target>
          </trans-unit>
          <trans-unit id="124" xml:space="preserve">
            <source>While some popular modules like MongoDB have optional native dependencies and work just fine without them, two workarounds proved successful with almost all native modules available today:</source>
            <target state="new">While some popular modules like MongoDB have optional native dependencies and work just fine without them, two workarounds proved successful with almost all native modules available today:</target>
          </trans-unit>
          <trans-unit id="125" xml:space="preserve">
            <source>Run <bpt id="2">&lt;strong&gt;</bpt>npm install<ept id="2">&lt;/strong&gt;</ept> on a Windows machine that has all the native module's prerequisites installed.</source>
            <target state="new">Run <bpt id="2">&lt;strong&gt;</bpt>npm install<ept id="2">&lt;/strong&gt;</ept> on a Windows machine that has all the native module's prerequisites installed.</target>
          </trans-unit>
          <trans-unit id="126" xml:space="preserve">
            <source>Then, deploy the created <bpt id="2">&lt;strong&gt;</bpt>node\_modules<ept id="2">&lt;/strong&gt;</ept> folder as part of the application to Azure Websites.</source>
            <target state="new">Then, deploy the created <bpt id="2">&lt;strong&gt;</bpt>node\_modules<ept id="2">&lt;/strong&gt;</ept> folder as part of the application to Azure Websites.</target>
          </trans-unit>
          <trans-unit id="127" xml:space="preserve">
            <source>Azure Websites can be configured to execute custom bash or shell scripts during deployment, giving you the opportunity to execute custom commands and precisely configure the way <bpt id="2">&lt;strong&gt;</bpt>npm install<ept id="2">&lt;/strong&gt;</ept> is being run.</source>
            <target state="new">Azure Websites can be configured to execute custom bash or shell scripts during deployment, giving you the opportunity to execute custom commands and precisely configure the way <bpt id="2">&lt;strong&gt;</bpt>npm install<ept id="2">&lt;/strong&gt;</ept> is being run.</target>
          </trans-unit>
          <trans-unit id="128" xml:space="preserve">
            <source>For a video showing how to do this, see [Custom Website Deployment Scripts with Kudu].</source>
            <target state="new">For a video showing how to do this, see [Custom Website Deployment Scripts with Kudu].</target>
          </trans-unit>
          <trans-unit id="129" xml:space="preserve">
            <source>Using a package.json file</source>
            <target state="new">Using a package.json file</target>
          </trans-unit>
          <trans-unit id="130" xml:space="preserve">
            <source>The <bpt id="2">&lt;strong&gt;</bpt>package.json<ept id="2">&lt;/strong&gt;</ept> file is a way to specify the top level dependencies your application requires so that the hosting platform can install the dependencies, rather than requiring you to include the <bpt id="4">&lt;strong&gt;</bpt>node\_packages<ept id="4">&lt;/strong&gt;</ept> folder as part of the deployment.</source>
            <target state="new">The <bpt id="2">&lt;strong&gt;</bpt>package.json<ept id="2">&lt;/strong&gt;</ept> file is a way to specify the top level dependencies your application requires so that the hosting platform can install the dependencies, rather than requiring you to include the <bpt id="4">&lt;strong&gt;</bpt>node\_packages<ept id="4">&lt;/strong&gt;</ept> folder as part of the deployment.</target>
          </trans-unit>
          <trans-unit id="131" xml:space="preserve">
            <source>After the application has been deployed, the <bpt id="2">&lt;strong&gt;</bpt>npm install<ept id="2">&lt;/strong&gt;</ept> command is used to parse the <bpt id="4">&lt;strong&gt;</bpt>package.json<ept id="4">&lt;/strong&gt;</ept> file and install all the dependencies listed.</source>
            <target state="new">After the application has been deployed, the <bpt id="2">&lt;strong&gt;</bpt>npm install<ept id="2">&lt;/strong&gt;</ept> command is used to parse the <bpt id="4">&lt;strong&gt;</bpt>package.json<ept id="4">&lt;/strong&gt;</ept> file and install all the dependencies listed.</target>
          </trans-unit>
          <trans-unit id="132" xml:space="preserve">
            <source>During development, you can use the <bpt id="2">&lt;strong&gt;</bpt>--save<ept id="2">&lt;/strong&gt;</ept>, <bpt id="4">&lt;strong&gt;</bpt>--save-dev<ept id="4">&lt;/strong&gt;</ept>, or <bpt id="6">&lt;strong&gt;</bpt>--save-optional<ept id="6">&lt;/strong&gt;</ept> parameters when installing modules to add an entry for the module to your <bpt id="8">&lt;strong&gt;</bpt>package.json<ept id="8">&lt;/strong&gt;</ept> file automatically.</source>
            <target state="new">During development, you can use the <bpt id="2">&lt;strong&gt;</bpt>--save<ept id="2">&lt;/strong&gt;</ept>, <bpt id="4">&lt;strong&gt;</bpt>--save-dev<ept id="4">&lt;/strong&gt;</ept>, or <bpt id="6">&lt;strong&gt;</bpt>--save-optional<ept id="6">&lt;/strong&gt;</ept> parameters when installing modules to add an entry for the module to your <bpt id="8">&lt;strong&gt;</bpt>package.json<ept id="8">&lt;/strong&gt;</ept> file automatically.</target>
          </trans-unit>
          <trans-unit id="133" xml:space="preserve">
            <source>For more information, see <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>npm-install<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">For more information, see <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>npm-install<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="134" xml:space="preserve">
            <source>One potential problem with the <bpt id="2">&lt;strong&gt;</bpt>package.json<ept id="2">&lt;/strong&gt;</ept> file is that it only specifies the version for top level dependencies.</source>
            <target state="new">One potential problem with the <bpt id="2">&lt;strong&gt;</bpt>package.json<ept id="2">&lt;/strong&gt;</ept> file is that it only specifies the version for top level dependencies.</target>
          </trans-unit>
          <trans-unit id="135" xml:space="preserve">
            <source>Each module installed may or may not specify the version of the modules it depends on, and so it is possible that you may end up with a different dependency chain than the one used in development.</source>
            <target state="new">Each module installed may or may not specify the version of the modules it depends on, and so it is possible that you may end up with a different dependency chain than the one used in development.</target>
          </trans-unit>
          <trans-unit id="136" xml:space="preserve">
            <source>When deploying to an Azure Webite, if your <bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>package.json<bpt id="4">&lt;html&gt;</bpt><ept id="4">&lt;/html&gt;</ept> file references a native module you will see an error similar to the following when publishing the application using Git:</source>
            <target state="new">When deploying to an Azure Webite, if your <bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>package.json<bpt id="4">&lt;html&gt;</bpt><ept id="4">&lt;/html&gt;</ept> file references a native module you will see an error similar to the following when publishing the application using Git:</target>
          </trans-unit>
          <trans-unit id="137" xml:space="preserve">
            <source>Using a npm-shrinkwrap.json file</source>
            <target state="new">Using a npm-shrinkwrap.json file</target>
          </trans-unit>
          <trans-unit id="138" xml:space="preserve">
            <source>The <bpt id="2">&lt;strong&gt;</bpt>npm-shrinkwrap.json<ept id="2">&lt;/strong&gt;</ept> file is an attempt to address the module versioning limitations of the <bpt id="4">&lt;strong&gt;</bpt>package.json<ept id="4">&lt;/strong&gt;</ept> file.</source>
            <target state="new">The <bpt id="2">&lt;strong&gt;</bpt>npm-shrinkwrap.json<ept id="2">&lt;/strong&gt;</ept> file is an attempt to address the module versioning limitations of the <bpt id="4">&lt;strong&gt;</bpt>package.json<ept id="4">&lt;/strong&gt;</ept> file.</target>
          </trans-unit>
          <trans-unit id="139" xml:space="preserve">
            <source>While the <bpt id="2">&lt;strong&gt;</bpt>package.json<ept id="2">&lt;/strong&gt;</ept> file only includes versions for the top level modules, the <bpt id="4">&lt;strong&gt;</bpt>npm-shrinkwrap.json<ept id="4">&lt;/strong&gt;</ept> file contains the version requirements for the full module dependency chain.</source>
            <target state="new">While the <bpt id="2">&lt;strong&gt;</bpt>package.json<ept id="2">&lt;/strong&gt;</ept> file only includes versions for the top level modules, the <bpt id="4">&lt;strong&gt;</bpt>npm-shrinkwrap.json<ept id="4">&lt;/strong&gt;</ept> file contains the version requirements for the full module dependency chain.</target>
          </trans-unit>
          <trans-unit id="140" xml:space="preserve">
            <source>When your application is ready for production, you can lock-down version requirements and create an <bpt id="2">&lt;strong&gt;</bpt>npm-shrinkwrap.json<ept id="2">&lt;/strong&gt;</ept> file by using the <bpt id="4">&lt;strong&gt;</bpt>npm shrinkwrap<ept id="4">&lt;/strong&gt;</ept> command.</source>
            <target state="new">When your application is ready for production, you can lock-down version requirements and create an <bpt id="2">&lt;strong&gt;</bpt>npm-shrinkwrap.json<ept id="2">&lt;/strong&gt;</ept> file by using the <bpt id="4">&lt;strong&gt;</bpt>npm shrinkwrap<ept id="4">&lt;/strong&gt;</ept> command.</target>
          </trans-unit>
          <trans-unit id="141" xml:space="preserve">
            <source>This will use the versions currently installed in the <bpt id="2">&lt;strong&gt;</bpt>node\_modules<ept id="2">&lt;/strong&gt;</ept> folder, and record these to the <bpt id="4">&lt;strong&gt;</bpt>npm-shrinkwrap.json<ept id="4">&lt;/strong&gt;</ept> file.</source>
            <target state="new">This will use the versions currently installed in the <bpt id="2">&lt;strong&gt;</bpt>node\_modules<ept id="2">&lt;/strong&gt;</ept> folder, and record these to the <bpt id="4">&lt;strong&gt;</bpt>npm-shrinkwrap.json<ept id="4">&lt;/strong&gt;</ept> file.</target>
          </trans-unit>
          <trans-unit id="142" xml:space="preserve">
            <source>After the application has been deployed to the hosting environment, the <bpt id="2">&lt;strong&gt;</bpt>npm install<ept id="2">&lt;/strong&gt;</ept> command is used to parse the <bpt id="4">&lt;strong&gt;</bpt>npm-shrinkwrap.json<ept id="4">&lt;/strong&gt;</ept> file and install all the dependencies listed.</source>
            <target state="new">After the application has been deployed to the hosting environment, the <bpt id="2">&lt;strong&gt;</bpt>npm install<ept id="2">&lt;/strong&gt;</ept> command is used to parse the <bpt id="4">&lt;strong&gt;</bpt>npm-shrinkwrap.json<ept id="4">&lt;/strong&gt;</ept> file and install all the dependencies listed.</target>
          </trans-unit>
          <trans-unit id="143" xml:space="preserve">
            <source>For more information, see <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>npm-install<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">For more information, see <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>npm-install<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="144" xml:space="preserve">
            <source>When deploying to an Azure Webite, if your <bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>npm-shrinkwrap.json<bpt id="4">&lt;html&gt;</bpt><ept id="4">&lt;/html&gt;</ept> file references a native module you will see an error similar to the following when publishing the application using Git:</source>
            <target state="new">When deploying to an Azure Webite, if your <bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>npm-shrinkwrap.json<bpt id="4">&lt;html&gt;</bpt><ept id="4">&lt;/html&gt;</ept> file references a native module you will see an error similar to the following when publishing the application using Git:</target>
          </trans-unit>
          <trans-unit id="145" xml:space="preserve">
            <source>Next Steps</source>
            <target state="new">Next Steps</target>
          </trans-unit>
          <trans-unit id="146" xml:space="preserve">
            <source>Now that you understand how to use Node.js modules with Azure, learn how to [specify the Node.js version], [build and deploy a Node.js Web Site], and [How to use the Azure Command-Line Interface for Mac and Linux].</source>
            <target state="new">Now that you understand how to use Node.js modules with Azure, learn how to [specify the Node.js version], [build and deploy a Node.js Web Site], and [How to use the Azure Command-Line Interface for Mac and Linux].</target>
          </trans-unit>
        </group>
      </group>
    </body>
  </file>
</xliff>