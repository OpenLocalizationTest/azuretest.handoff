<?xml version="1.0" encoding="utf-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" source-language="en-us" target-language="zh-cn" original="2/18/2016 5:09:07 PM" tool-id="MarkdownTransformer" product-name="N/A" product-version="N/A" build-num="1">
    <header>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cf4cfc0dc50d371fb1f4322eaca67d91dad3cde8</xliffext:olfilehash>
      <tool tool-id="MarkdownTransformer" tool-name="MarkdownToXliff" tool-version="1.0" tool-company="Microsoft" />
    </header>
    <body>
      <group extype="content">
        <group id="101">
          <trans-unit id="101" xml:space="preserve">
            <source>Provision and deploy microservices predictably in Azure</source>
            <target state="new">Provision and deploy microservices predictably in Azure</target>
          </trans-unit>
          <trans-unit id="102" xml:space="preserve">
            <source>Learn how to deploy an application composed of microservices in Azure App Service as a single unit and in a predictable manner using JSON resource group templates and PowerShell scripting.</source>
            <target state="new">Learn how to deploy an application composed of microservices in Azure App Service as a single unit and in a predictable manner using JSON resource group templates and PowerShell scripting.</target>
          </trans-unit>
          <trans-unit id="103" xml:space="preserve">
            <source>Provision and deploy microservices predictably in Azure</source>
            <target state="new">Provision and deploy microservices predictably in Azure</target>
          </trans-unit>
          <trans-unit id="104" xml:space="preserve">
            <source>This tutorial shows how to provision and deploy an application composed of <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>microservices<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> in <bpt id="4CapsExtId1">&lt;link&gt;</bpt><bpt id="4CapsExtId2">&lt;linkText&gt;</bpt>Azure App Service<ept id="4CapsExtId2">&lt;/linkText&gt;</ept><bpt id="4CapsExtId3">&lt;title&gt;</bpt><ept id="4CapsExtId3">&lt;/title&gt;</ept><ept id="4CapsExtId1">&lt;/link&gt;</ept> as a single unit and in a predictable manner using JSON resource group templates and PowerShell scripting.</source>
            <target state="new">This tutorial shows how to provision and deploy an application composed of <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>microservices<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> in <bpt id="4CapsExtId1">&lt;link&gt;</bpt><bpt id="4CapsExtId2">&lt;linkText&gt;</bpt>Azure App Service<ept id="4CapsExtId2">&lt;/linkText&gt;</ept><bpt id="4CapsExtId3">&lt;title&gt;</bpt><ept id="4CapsExtId3">&lt;/title&gt;</ept><ept id="4CapsExtId1">&lt;/link&gt;</ept> as a single unit and in a predictable manner using JSON resource group templates and PowerShell scripting.</target>
          </trans-unit>
          <trans-unit id="105" xml:space="preserve">
            <source>When provisioning and deploying high-scale applications that are composed of highly decoupled microservices, repeatability and predictability are crucial to success.</source>
            <target state="new">When provisioning and deploying high-scale applications that are composed of highly decoupled microservices, repeatability and predictability are crucial to success.</target>
          </trans-unit>
          <trans-unit id="106" xml:space="preserve">
            <source><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Azure App Service<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept> enables you to create microservices that include web apps, mobile apps, API apps, and logic apps.</source>
            <target state="new"><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Azure App Service<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept> enables you to create microservices that include web apps, mobile apps, API apps, and logic apps.</target>
          </trans-unit>
          <trans-unit id="107" xml:space="preserve">
            <source><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Azure Resource Manager<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept> enables you to manage all the microservices as a unit, together with resource dependencies such as database and source control settings.</source>
            <target state="new"><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Azure Resource Manager<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept> enables you to manage all the microservices as a unit, together with resource dependencies such as database and source control settings.</target>
          </trans-unit>
          <trans-unit id="108" xml:space="preserve">
            <source>Now, you can also deploy such an application using JSON templates and simple PowerShell scripting.</source>
            <target state="new">Now, you can also deploy such an application using JSON templates and simple PowerShell scripting.</target>
          </trans-unit>
          <trans-unit id="109" xml:space="preserve">
            <source>What you will do</source>
            <target state="new">What you will do</target>
          </trans-unit>
          <trans-unit id="110" xml:space="preserve">
            <source>In the tutorial, you will deploy an application that includes:</source>
            <target state="new">In the tutorial, you will deploy an application that includes:</target>
          </trans-unit>
          <trans-unit id="111" xml:space="preserve">
            <source>Two web apps (i.e. two microservices)</source>
            <target state="new">Two web apps (i.e. two microservices)</target>
          </trans-unit>
          <trans-unit id="112" xml:space="preserve">
            <source>A backend SQL Database</source>
            <target state="new">A backend SQL Database</target>
          </trans-unit>
          <trans-unit id="113" xml:space="preserve">
            <source>App settings, connection strings, and source control</source>
            <target state="new">App settings, connection strings, and source control</target>
          </trans-unit>
          <trans-unit id="114" xml:space="preserve">
            <source>Application insights, alerts, autoscaling settings</source>
            <target state="new">Application insights, alerts, autoscaling settings</target>
          </trans-unit>
          <trans-unit id="115" xml:space="preserve">
            <source>Tools you will use</source>
            <target state="new">Tools you will use</target>
          </trans-unit>
          <trans-unit id="116" xml:space="preserve">
            <source>In this tutorial, you will use the following tools.</source>
            <target state="new">In this tutorial, you will use the following tools.</target>
          </trans-unit>
          <trans-unit id="117" xml:space="preserve">
            <source>Since it’s not comprehensive discussion on tools, I’m going to stick to the end-to-end scenario and just give you a brief intro to each, and where you can find more information on it.</source>
            <target state="new">Since it’s not comprehensive discussion on tools, I’m going to stick to the end-to-end scenario and just give you a brief intro to each, and where you can find more information on it.</target>
          </trans-unit>
          <trans-unit id="118" xml:space="preserve">
            <source>Azure Resource Manager templates (JSON)</source>
            <target state="new">Azure Resource Manager templates (JSON)</target>
          </trans-unit>
          <trans-unit id="119" xml:space="preserve">
            <source>Every time you create a web app in Azure App Service, for example, Azure Resource Manager uses a JSON template to create the entire resource group with the component resources.</source>
            <target state="new">Every time you create a web app in Azure App Service, for example, Azure Resource Manager uses a JSON template to create the entire resource group with the component resources.</target>
          </trans-unit>
          <trans-unit id="120" xml:space="preserve">
            <source>A complex template from the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Azure Marketplace<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> like the <bpt id="4CapsExtId1">&lt;link&gt;</bpt><bpt id="4CapsExtId2">&lt;linkText&gt;</bpt>Scalable WordPress<ept id="4CapsExtId2">&lt;/linkText&gt;</ept><bpt id="4CapsExtId3">&lt;title&gt;</bpt><ept id="4CapsExtId3">&lt;/title&gt;</ept><ept id="4CapsExtId1">&lt;/link&gt;</ept> app can include the MySQL database, storage accounts, the App Service plan, the web app itself, alert rules, app settings, autoscale settings, and more, and all these templates are available to you through PowerShell.</source>
            <target state="new">A complex template from the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Azure Marketplace<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> like the <bpt id="4CapsExtId1">&lt;link&gt;</bpt><bpt id="4CapsExtId2">&lt;linkText&gt;</bpt>Scalable WordPress<ept id="4CapsExtId2">&lt;/linkText&gt;</ept><bpt id="4CapsExtId3">&lt;title&gt;</bpt><ept id="4CapsExtId3">&lt;/title&gt;</ept><ept id="4CapsExtId1">&lt;/link&gt;</ept> app can include the MySQL database, storage accounts, the App Service plan, the web app itself, alert rules, app settings, autoscale settings, and more, and all these templates are available to you through PowerShell.</target>
          </trans-unit>
          <trans-unit id="121" xml:space="preserve">
            <source>For information on how to download and use these templates, see <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Using Azure PowerShell with Azure Resource Manager<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">For information on how to download and use these templates, see <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Using Azure PowerShell with Azure Resource Manager<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="122" xml:space="preserve">
            <source>For more information on the Azure Resource Manager templates, see <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Authoring Azure Resource Manager Templates<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept></source>
            <target state="new">For more information on the Azure Resource Manager templates, see <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Authoring Azure Resource Manager Templates<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept></target>
          </trans-unit>
          <trans-unit id="123" xml:space="preserve">
            <source>Azure SDK 2.6 for Visual Studio</source>
            <target state="new">Azure SDK 2.6 for Visual Studio</target>
          </trans-unit>
          <trans-unit id="124" xml:space="preserve">
            <source>The newest SDK contains improvements to the Resource Manager template support in the JSON editor.</source>
            <target state="new">The newest SDK contains improvements to the Resource Manager template support in the JSON editor.</target>
          </trans-unit>
          <trans-unit id="125" xml:space="preserve">
            <source>You can use this to quickly create a resource group template from scratch or open an existing JSON template (such as a downloaded gallery template) for modification, populate the parameters file, and even deploy the resource group directly from an Azure Resource Group solution.</source>
            <target state="new">You can use this to quickly create a resource group template from scratch or open an existing JSON template (such as a downloaded gallery template) for modification, populate the parameters file, and even deploy the resource group directly from an Azure Resource Group solution.</target>
          </trans-unit>
          <trans-unit id="126" xml:space="preserve">
            <source>For more information, see <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Azure SDK 2.6 for Visual Studio<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">For more information, see <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Azure SDK 2.6 for Visual Studio<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="127" xml:space="preserve">
            <source>Azure PowerShell 0.8.0 or later</source>
            <target state="new">Azure PowerShell 0.8.0 or later</target>
          </trans-unit>
          <trans-unit id="128" xml:space="preserve">
            <source>Beginning in version 0.8.0, the Azure PowerShell installation includes the Azure Resource Manager module in addition to the Azure module.</source>
            <target state="new">Beginning in version 0.8.0, the Azure PowerShell installation includes the Azure Resource Manager module in addition to the Azure module.</target>
          </trans-unit>
          <trans-unit id="129" xml:space="preserve">
            <source>This new module enables you to script the deployment of resource groups.</source>
            <target state="new">This new module enables you to script the deployment of resource groups.</target>
          </trans-unit>
          <trans-unit id="130" xml:space="preserve">
            <source>For more information, see <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Using Azure PowerShell with Azure Resource Manager<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept></source>
            <target state="new">For more information, see <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Using Azure PowerShell with Azure Resource Manager<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept></target>
          </trans-unit>
          <trans-unit id="131" xml:space="preserve">
            <source>Azure Resource Explorer</source>
            <target state="new">Azure Resource Explorer</target>
          </trans-unit>
          <trans-unit id="132" xml:space="preserve">
            <source>This <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>preview tool<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> enables you to explore the JSON definitions of all the resource groups in your subscription and the individual resources.</source>
            <target state="new">This <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>preview tool<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> enables you to explore the JSON definitions of all the resource groups in your subscription and the individual resources.</target>
          </trans-unit>
          <trans-unit id="133" xml:space="preserve">
            <source>In the tool, you can edit the JSON definitions of a resource, delete an entire hierarchy of resources, and create new resources.</source>
            <target state="new">In the tool, you can edit the JSON definitions of a resource, delete an entire hierarchy of resources, and create new resources.</target>
          </trans-unit>
          <trans-unit id="134" xml:space="preserve">
            <source>The information readily available in this tool is very helpful for template authoring because it shows you what properties you need to set for a particular type of resource, the correct values, etc. You can even create your resource group in the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Azure preview portal<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>, then inspect its JSON definitions in the explorer tool to help you templatize the resource group.</source>
            <target state="new">The information readily available in this tool is very helpful for template authoring because it shows you what properties you need to set for a particular type of resource, the correct values, etc. You can even create your resource group in the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Azure preview portal<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>, then inspect its JSON definitions in the explorer tool to help you templatize the resource group.</target>
          </trans-unit>
          <trans-unit id="135" xml:space="preserve">
            <source>Deploy to Azure button</source>
            <target state="new">Deploy to Azure button</target>
          </trans-unit>
          <trans-unit id="136" xml:space="preserve">
            <source>If you use GitHub for source control, you can put a <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Deploy to Azure button<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> into your README.MD, which enables a turn-key deployment UI to Azure.</source>
            <target state="new">If you use GitHub for source control, you can put a <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Deploy to Azure button<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> into your README.MD, which enables a turn-key deployment UI to Azure.</target>
          </trans-unit>
          <trans-unit id="137" xml:space="preserve">
            <source>While you can do this for any simple web app, you can extend this to enable deploying an entire resource group by putting an azuredeploy.json file in the repository root.</source>
            <target state="new">While you can do this for any simple web app, you can extend this to enable deploying an entire resource group by putting an azuredeploy.json file in the repository root.</target>
          </trans-unit>
          <trans-unit id="138" xml:space="preserve">
            <source>This JSON file, which contains the resource group template, will be used by the Deploy to Azure button to create the resource group.</source>
            <target state="new">This JSON file, which contains the resource group template, will be used by the Deploy to Azure button to create the resource group.</target>
          </trans-unit>
          <trans-unit id="139" xml:space="preserve">
            <source>For an example, see the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>ToDoApp<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> sample, which you will use in this tutorial.</source>
            <target state="new">For an example, see the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>ToDoApp<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> sample, which you will use in this tutorial.</target>
          </trans-unit>
          <trans-unit id="140" xml:space="preserve">
            <source>Get the sample resource group template</source>
            <target state="new">Get the sample resource group template</target>
          </trans-unit>
          <trans-unit id="141" xml:space="preserve">
            <source>So now let’s get right to it.</source>
            <target state="new">So now let’s get right to it.</target>
          </trans-unit>
          <trans-unit id="142" xml:space="preserve">
            <source>Navigate to the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>ToDoApp<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> App Service sample.</source>
            <target state="new">Navigate to the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>ToDoApp<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> App Service sample.</target>
          </trans-unit>
          <trans-unit id="143" xml:space="preserve">
            <source>In readme.md, click <bpt id="2">&lt;strong&gt;</bpt>Deploy to Azure<ept id="2">&lt;/strong&gt;</ept>.</source>
            <target state="new">In readme.md, click <bpt id="2">&lt;strong&gt;</bpt>Deploy to Azure<ept id="2">&lt;/strong&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="144" xml:space="preserve">
            <source>You’re taken to the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>deploy-to-azure<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> site and asked to input deployment parameters.</source>
            <target state="new">You’re taken to the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>deploy-to-azure<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> site and asked to input deployment parameters.</target>
          </trans-unit>
          <trans-unit id="145" xml:space="preserve">
            <source>Notice that most of the fields are populated with the repository name and some random strings for you.</source>
            <target state="new">Notice that most of the fields are populated with the repository name and some random strings for you.</target>
          </trans-unit>
          <trans-unit id="146" xml:space="preserve">
            <source>You can change all the fields if you want, but the only things you have to enter are the SQL Server administrative login and the password, then click <bpt id="2">&lt;strong&gt;</bpt>Next<ept id="2">&lt;/strong&gt;</ept>.</source>
            <target state="new">You can change all the fields if you want, but the only things you have to enter are the SQL Server administrative login and the password, then click <bpt id="2">&lt;strong&gt;</bpt>Next<ept id="2">&lt;/strong&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="147" xml:space="preserve">
            <source><bpt id="1">&lt;linkText&gt;</bpt><ept id="1">&lt;/linkText&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;linkText&gt;</bpt><ept id="1">&lt;/linkText&gt;</ept></target>
          </trans-unit>
          <trans-unit id="148" xml:space="preserve">
            <source>Next, click <bpt id="2">&lt;strong&gt;</bpt>Deploy<ept id="2">&lt;/strong&gt;</ept> to start the deployment process.</source>
            <target state="new">Next, click <bpt id="2">&lt;strong&gt;</bpt>Deploy<ept id="2">&lt;/strong&gt;</ept> to start the deployment process.</target>
          </trans-unit>
          <trans-unit id="149" xml:space="preserve">
            <source>Once the process runs to completion, click the http://todoapp<bpt id="2">&lt;em&gt;</bpt>XXXX<ept id="2">&lt;/em&gt;</ept>.azure.websites.net link to browse the deployed application.</source>
            <target state="new">Once the process runs to completion, click the http://todoapp<bpt id="2">&lt;em&gt;</bpt>XXXX<ept id="2">&lt;/em&gt;</ept>.azure.websites.net link to browse the deployed application.</target>
          </trans-unit>
          <trans-unit id="150" xml:space="preserve">
            <source><bpt id="1">&lt;linkText&gt;</bpt><ept id="1">&lt;/linkText&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;linkText&gt;</bpt><ept id="1">&lt;/linkText&gt;</ept></target>
          </trans-unit>
          <trans-unit id="151" xml:space="preserve">
            <source>The UI would be a little slow when you first browse to it because the apps are just starting up, but convince yourself that it’s a fully-functional application.</source>
            <target state="new">The UI would be a little slow when you first browse to it because the apps are just starting up, but convince yourself that it’s a fully-functional application.</target>
          </trans-unit>
          <trans-unit id="152" xml:space="preserve">
            <source>Back in the Deploy page, click the <bpt id="2">&lt;strong&gt;</bpt>Manage<ept id="2">&lt;/strong&gt;</ept> link to see the new application in the Azure preview portal.</source>
            <target state="new">Back in the Deploy page, click the <bpt id="2">&lt;strong&gt;</bpt>Manage<ept id="2">&lt;/strong&gt;</ept> link to see the new application in the Azure preview portal.</target>
          </trans-unit>
          <trans-unit id="153" xml:space="preserve">
            <source>In the <bpt id="2">&lt;strong&gt;</bpt>Essentials<ept id="2">&lt;/strong&gt;</ept> dropdown, click the resource group link.</source>
            <target state="new">In the <bpt id="2">&lt;strong&gt;</bpt>Essentials<ept id="2">&lt;/strong&gt;</ept> dropdown, click the resource group link.</target>
          </trans-unit>
          <trans-unit id="154" xml:space="preserve">
            <source>Note also that the web app is already connected to the GitHub repository under <bpt id="2">&lt;strong&gt;</bpt>External Project<ept id="2">&lt;/strong&gt;</ept>.</source>
            <target state="new">Note also that the web app is already connected to the GitHub repository under <bpt id="2">&lt;strong&gt;</bpt>External Project<ept id="2">&lt;/strong&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="155" xml:space="preserve">
            <source><bpt id="1">&lt;linkText&gt;</bpt><ept id="1">&lt;/linkText&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;linkText&gt;</bpt><ept id="1">&lt;/linkText&gt;</ept></target>
          </trans-unit>
          <trans-unit id="156" xml:space="preserve">
            <source>In the resource group blade, note that there are already two web apps and one SQL Database in the resource group.</source>
            <target state="new">In the resource group blade, note that there are already two web apps and one SQL Database in the resource group.</target>
          </trans-unit>
          <trans-unit id="157" xml:space="preserve">
            <source><bpt id="1">&lt;linkText&gt;</bpt><ept id="1">&lt;/linkText&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;linkText&gt;</bpt><ept id="1">&lt;/linkText&gt;</ept></target>
          </trans-unit>
          <trans-unit id="158" xml:space="preserve">
            <source>Everything that you just saw in a few short minutes is a fully deployed two-microservice application, with all the components, dependencies, settings, database, and continuous publishing, set up by an automated orchestration in Azure Resource Manager.</source>
            <target state="new">Everything that you just saw in a few short minutes is a fully deployed two-microservice application, with all the components, dependencies, settings, database, and continuous publishing, set up by an automated orchestration in Azure Resource Manager.</target>
          </trans-unit>
          <trans-unit id="159" xml:space="preserve">
            <source>All this was done by two things:</source>
            <target state="new">All this was done by two things:</target>
          </trans-unit>
          <trans-unit id="160" xml:space="preserve">
            <source>The Deploy to Azure button</source>
            <target state="new">The Deploy to Azure button</target>
          </trans-unit>
          <trans-unit id="161" xml:space="preserve">
            <source>azuredeploy.json in the repo root</source>
            <target state="new">azuredeploy.json in the repo root</target>
          </trans-unit>
          <trans-unit id="162" xml:space="preserve">
            <source>You can deploy this same application tens, hundreds, or thousands of times and have the exact same configuration every time.</source>
            <target state="new">You can deploy this same application tens, hundreds, or thousands of times and have the exact same configuration every time.</target>
          </trans-unit>
          <trans-unit id="163" xml:space="preserve">
            <source>The repeatability and the predictability of this approach enables you to deploy high-scale applications with ease and confidence.</source>
            <target state="new">The repeatability and the predictability of this approach enables you to deploy high-scale applications with ease and confidence.</target>
          </trans-unit>
          <trans-unit id="164" xml:space="preserve">
            <source>Examine (or edit) AZUREDEPLOY.JSON</source>
            <target state="new">Examine (or edit) AZUREDEPLOY.JSON</target>
          </trans-unit>
          <trans-unit id="165" xml:space="preserve">
            <source>Now let’s look at how the GitHub repository was set up.</source>
            <target state="new">Now let’s look at how the GitHub repository was set up.</target>
          </trans-unit>
          <trans-unit id="166" xml:space="preserve">
            <source>You will be using the JSON editor in the Azure .NET SDK, so if you haven’t already installed <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Azure .NET SDK 2.6<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>, do it now.</source>
            <target state="new">You will be using the JSON editor in the Azure .NET SDK, so if you haven’t already installed <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Azure .NET SDK 2.6<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>, do it now.</target>
          </trans-unit>
          <trans-unit id="167" xml:space="preserve">
            <source>Clone the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>ToDoApp<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> repository using your favorite git tool.</source>
            <target state="new">Clone the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>ToDoApp<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> repository using your favorite git tool.</target>
          </trans-unit>
          <trans-unit id="168" xml:space="preserve">
            <source>In the screenshot below, I’m doing this in the Team Explorer in Visual Studio 2013.</source>
            <target state="new">In the screenshot below, I’m doing this in the Team Explorer in Visual Studio 2013.</target>
          </trans-unit>
          <trans-unit id="169" xml:space="preserve">
            <source><bpt id="1">&lt;linkText&gt;</bpt><ept id="1">&lt;/linkText&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;linkText&gt;</bpt><ept id="1">&lt;/linkText&gt;</ept></target>
          </trans-unit>
          <trans-unit id="170" xml:space="preserve">
            <source>From the repository root, open azuredeploy.json in Visual Studio.</source>
            <target state="new">From the repository root, open azuredeploy.json in Visual Studio.</target>
          </trans-unit>
          <trans-unit id="171" xml:space="preserve">
            <source>If you don’t see the JSON Outline pane, you need to install Azure .NET SDK.</source>
            <target state="new">If you don’t see the JSON Outline pane, you need to install Azure .NET SDK.</target>
          </trans-unit>
          <trans-unit id="172" xml:space="preserve">
            <source><bpt id="1">&lt;linkText&gt;</bpt><ept id="1">&lt;/linkText&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;linkText&gt;</bpt><ept id="1">&lt;/linkText&gt;</ept></target>
          </trans-unit>
          <trans-unit id="173" xml:space="preserve">
            <source>I’m not going to describe every detail of the JSON format, but the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>More Resources<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> section has links for learning the resource group template language.</source>
            <target state="new">I’m not going to describe every detail of the JSON format, but the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>More Resources<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> section has links for learning the resource group template language.</target>
          </trans-unit>
          <trans-unit id="174" xml:space="preserve">
            <source>Here, I’m just going to show you the interesting features that can help you get started in making your own custom template for app deployment.</source>
            <target state="new">Here, I’m just going to show you the interesting features that can help you get started in making your own custom template for app deployment.</target>
          </trans-unit>
          <trans-unit id="175" xml:space="preserve">
            <source>Parameters</source>
            <target state="new">Parameters</target>
          </trans-unit>
          <trans-unit id="176" xml:space="preserve">
            <source>Take a look at the parameters section to see that most of these parameters are what the <bpt id="2">&lt;strong&gt;</bpt>Deploy to Azure<ept id="2">&lt;/strong&gt;</ept> button prompts you to input.</source>
            <target state="new">Take a look at the parameters section to see that most of these parameters are what the <bpt id="2">&lt;strong&gt;</bpt>Deploy to Azure<ept id="2">&lt;/strong&gt;</ept> button prompts you to input.</target>
          </trans-unit>
          <trans-unit id="177" xml:space="preserve">
            <source>The site behind the <bpt id="2">&lt;strong&gt;</bpt>Deploy to Azure<ept id="2">&lt;/strong&gt;</ept> button populates the input UI using the parameters defined in azuredeploy.json.</source>
            <target state="new">The site behind the <bpt id="2">&lt;strong&gt;</bpt>Deploy to Azure<ept id="2">&lt;/strong&gt;</ept> button populates the input UI using the parameters defined in azuredeploy.json.</target>
          </trans-unit>
          <trans-unit id="178" xml:space="preserve">
            <source>These parameters are used throughout the resource definitions, such as resource names, property values, etc.</source>
            <target state="new">These parameters are used throughout the resource definitions, such as resource names, property values, etc.</target>
          </trans-unit>
          <trans-unit id="179" xml:space="preserve">
            <source>Resources</source>
            <target state="new">Resources</target>
          </trans-unit>
          <trans-unit id="180" xml:space="preserve">
            <source>In the resources node, you can see that 4 top-level resources are defined, including a SQL Server instance, an App Service plan, and two web apps.</source>
            <target state="new">In the resources node, you can see that 4 top-level resources are defined, including a SQL Server instance, an App Service plan, and two web apps.</target>
          </trans-unit>
          <trans-unit id="181" xml:space="preserve">
            <source>App Service plan</source>
            <target state="new">App Service plan</target>
          </trans-unit>
          <trans-unit id="182" xml:space="preserve">
            <source>Let’s start with a simple root-level resource in the JSON.</source>
            <target state="new">Let’s start with a simple root-level resource in the JSON.</target>
          </trans-unit>
          <trans-unit id="183" xml:space="preserve">
            <source>In the JSON Outline, click the App Service plan named <bpt id="2">&lt;strong&gt;</bpt>[hostingPlanName]<ept id="2">&lt;/strong&gt;</ept> to highlight the corresponding JSON code.</source>
            <target state="new">In the JSON Outline, click the App Service plan named <bpt id="2">&lt;strong&gt;</bpt>[hostingPlanName]<ept id="2">&lt;/strong&gt;</ept> to highlight the corresponding JSON code.</target>
          </trans-unit>
          <trans-unit id="184" xml:space="preserve">
            <source><bpt id="1">&lt;linkText&gt;</bpt><ept id="1">&lt;/linkText&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;linkText&gt;</bpt><ept id="1">&lt;/linkText&gt;</ept></target>
          </trans-unit>
          <trans-unit id="185" xml:space="preserve">
            <source>Note that the <bpt id="2">&lt;code&gt;</bpt>type<ept id="2">&lt;/code&gt;</ept> element specifies the string for an App Service plan (it was called a server farm a long, long time ago), and other elements and properties are filled in using the parameters defined in the JSON file, and this resource doesn’t have any nested resources.</source>
            <target state="new">Note that the <bpt id="2">&lt;code&gt;</bpt>type<ept id="2">&lt;/code&gt;</ept> element specifies the string for an App Service plan (it was called a server farm a long, long time ago), and other elements and properties are filled in using the parameters defined in the JSON file, and this resource doesn’t have any nested resources.</target>
          </trans-unit>
          <trans-unit id="186" xml:space="preserve">
            <source>Note also that the value of <bpt id="2">&lt;code&gt;</bpt>apiVersion<ept id="2">&lt;/code&gt;</ept> tells Azure which version of the REST API to use the JSON resource definition with, and it can affect how the resource should be formatted inside the <bpt id="4">&lt;code&gt;</bpt>{}<ept id="4">&lt;/code&gt;</ept>.</source>
            <target state="new">Note also that the value of <bpt id="2">&lt;code&gt;</bpt>apiVersion<ept id="2">&lt;/code&gt;</ept> tells Azure which version of the REST API to use the JSON resource definition with, and it can affect how the resource should be formatted inside the <bpt id="4">&lt;code&gt;</bpt>{}<ept id="4">&lt;/code&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="187" xml:space="preserve">
            <source>SQL Server</source>
            <target state="new">SQL Server</target>
          </trans-unit>
          <trans-unit id="188" xml:space="preserve">
            <source>Next, click on the SQL Server resource named <bpt id="2">&lt;strong&gt;</bpt>SQLServer<ept id="2">&lt;/strong&gt;</ept> in the JSON Outline.</source>
            <target state="new">Next, click on the SQL Server resource named <bpt id="2">&lt;strong&gt;</bpt>SQLServer<ept id="2">&lt;/strong&gt;</ept> in the JSON Outline.</target>
          </trans-unit>
          <trans-unit id="189" xml:space="preserve">
            <source><bpt id="1">&lt;linkText&gt;</bpt><ept id="1">&lt;/linkText&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;linkText&gt;</bpt><ept id="1">&lt;/linkText&gt;</ept></target>
          </trans-unit>
          <trans-unit id="190" xml:space="preserve">
            <source>Note the following about the highlighted JSON code:</source>
            <target state="new">Note the following about the highlighted JSON code:</target>
          </trans-unit>
          <trans-unit id="191" xml:space="preserve">
            <source>The use of parameters ensures that the created resources are named and configured in a way that makes them consistent with one another.</source>
            <target state="new">The use of parameters ensures that the created resources are named and configured in a way that makes them consistent with one another.</target>
          </trans-unit>
          <trans-unit id="192" xml:space="preserve">
            <source>The SQLServer resource has two nested resources, each has a different value for <bpt id="2">&lt;code&gt;</bpt>type<ept id="2">&lt;/code&gt;</ept>.</source>
            <target state="new">The SQLServer resource has two nested resources, each has a different value for <bpt id="2">&lt;code&gt;</bpt>type<ept id="2">&lt;/code&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="193" xml:space="preserve">
            <source>The nested resources inside <bpt id="2">&lt;code&gt;</bpt>“resources”: […]<ept id="2">&lt;/code&gt;</ept>, where the database and the firewall rules are defined, have a <bpt id="4">&lt;code&gt;</bpt>dependsOn<ept id="4">&lt;/code&gt;</ept> element that specifies the resource ID of the root-level SQLServer resource.</source>
            <target state="new">The nested resources inside <bpt id="2">&lt;code&gt;</bpt>“resources”: […]<ept id="2">&lt;/code&gt;</ept>, where the database and the firewall rules are defined, have a <bpt id="4">&lt;code&gt;</bpt>dependsOn<ept id="4">&lt;/code&gt;</ept> element that specifies the resource ID of the root-level SQLServer resource.</target>
          </trans-unit>
          <trans-unit id="194" xml:space="preserve">
            <source>This tells Azure Resource Manager, “before you create this resource, that other resource must already exist; and if that other resource is defined in the template, then create that one first”.</source>
            <target state="new">This tells Azure Resource Manager, “before you create this resource, that other resource must already exist; and if that other resource is defined in the template, then create that one first”.</target>
          </trans-unit>
          <trans-unit id="195" xml:space="preserve">
            <source>For detailed information on how to use the <bpt id="2">&lt;code&gt;</bpt>resourceId()<ept id="2">&lt;/code&gt;</ept> function, see <bpt id="4CapsExtId1">&lt;link&gt;</bpt><bpt id="4CapsExtId2">&lt;linkText&gt;</bpt>Azure Resource Manager Template Functions<ept id="4CapsExtId2">&lt;/linkText&gt;</ept><bpt id="4CapsExtId3">&lt;title&gt;</bpt><ept id="4CapsExtId3">&lt;/title&gt;</ept><ept id="4CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">For detailed information on how to use the <bpt id="2">&lt;code&gt;</bpt>resourceId()<ept id="2">&lt;/code&gt;</ept> function, see <bpt id="4CapsExtId1">&lt;link&gt;</bpt><bpt id="4CapsExtId2">&lt;linkText&gt;</bpt>Azure Resource Manager Template Functions<ept id="4CapsExtId2">&lt;/linkText&gt;</ept><bpt id="4CapsExtId3">&lt;title&gt;</bpt><ept id="4CapsExtId3">&lt;/title&gt;</ept><ept id="4CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="196" xml:space="preserve">
            <source>The effect of the <bpt id="2">&lt;code&gt;</bpt>dependsOn<ept id="2">&lt;/code&gt;</ept> element is that Azure Resource Manager can know which resources can be created in parallel and which resources must be created sequentially.</source>
            <target state="new">The effect of the <bpt id="2">&lt;code&gt;</bpt>dependsOn<ept id="2">&lt;/code&gt;</ept> element is that Azure Resource Manager can know which resources can be created in parallel and which resources must be created sequentially.</target>
          </trans-unit>
          <trans-unit id="197" xml:space="preserve">
            <source>Web app</source>
            <target state="new">Web app</target>
          </trans-unit>
          <trans-unit id="198" xml:space="preserve">
            <source>Now, let’s move on to the actual web apps themselves, which are more complicated.</source>
            <target state="new">Now, let’s move on to the actual web apps themselves, which are more complicated.</target>
          </trans-unit>
          <trans-unit id="199" xml:space="preserve">
            <source>Click the [variables(‘apiSiteName’)] web app in the JSON Outline to highlight its JSON code.</source>
            <target state="new">Click the [variables(‘apiSiteName’)] web app in the JSON Outline to highlight its JSON code.</target>
          </trans-unit>
          <trans-unit id="200" xml:space="preserve">
            <source>You’ll notice that things are getting much more interesting.</source>
            <target state="new">You’ll notice that things are getting much more interesting.</target>
          </trans-unit>
          <trans-unit id="201" xml:space="preserve">
            <source>For this purpose, I’ll talk about the features one by one:</source>
            <target state="new">For this purpose, I’ll talk about the features one by one:</target>
          </trans-unit>
          <trans-unit id="202" xml:space="preserve">
            <source>Root resource</source>
            <target state="new">Root resource</target>
          </trans-unit>
          <trans-unit id="203" xml:space="preserve">
            <source>The web app depends on two different resources.</source>
            <target state="new">The web app depends on two different resources.</target>
          </trans-unit>
          <trans-unit id="204" xml:space="preserve">
            <source>This means that Azure Resource Manager will create the web app only after both the App Service plan and the SQL Server instance are created.</source>
            <target state="new">This means that Azure Resource Manager will create the web app only after both the App Service plan and the SQL Server instance are created.</target>
          </trans-unit>
          <trans-unit id="205" xml:space="preserve">
            <source><bpt id="1">&lt;linkText&gt;</bpt><ept id="1">&lt;/linkText&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;linkText&gt;</bpt><ept id="1">&lt;/linkText&gt;</ept></target>
          </trans-unit>
          <trans-unit id="206" xml:space="preserve">
            <source>App settings</source>
            <target state="new">App settings</target>
          </trans-unit>
          <trans-unit id="207" xml:space="preserve">
            <source>The app settings are also defined as a nested resource.</source>
            <target state="new">The app settings are also defined as a nested resource.</target>
          </trans-unit>
          <trans-unit id="208" xml:space="preserve">
            <source><bpt id="1">&lt;linkText&gt;</bpt><ept id="1">&lt;/linkText&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;linkText&gt;</bpt><ept id="1">&lt;/linkText&gt;</ept></target>
          </trans-unit>
          <trans-unit id="209" xml:space="preserve">
            <source>In the <bpt id="2">&lt;code&gt;</bpt>properties<ept id="2">&lt;/code&gt;</ept> element for <bpt id="4">&lt;code&gt;</bpt>config/appsettings<ept id="4">&lt;/code&gt;</ept>, you have two app settings in the format <bpt id="6">&lt;code&gt;</bpt>“&lt;name&gt;” : “&lt;value&gt;”<ept id="6">&lt;/code&gt;</ept>.</source>
            <target state="new">In the <bpt id="2">&lt;code&gt;</bpt>properties<ept id="2">&lt;/code&gt;</ept> element for <bpt id="4">&lt;code&gt;</bpt>config/appsettings<ept id="4">&lt;/code&gt;</ept>, you have two app settings in the format <bpt id="6">&lt;code&gt;</bpt>“&lt;name&gt;” : “&lt;value&gt;”<ept id="6">&lt;/code&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="210" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>PROJECT<ept id="1">&lt;/code&gt;</ept> is a <bpt id="3CapsExtId1">&lt;link&gt;</bpt><bpt id="3CapsExtId2">&lt;linkText&gt;</bpt>KUDU setting<ept id="3CapsExtId2">&lt;/linkText&gt;</ept><bpt id="3CapsExtId3">&lt;title&gt;</bpt><ept id="3CapsExtId3">&lt;/title&gt;</ept><ept id="3CapsExtId1">&lt;/link&gt;</ept> that tells Azure deployment which project to use in a multi-project Visual Studio solution.</source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>PROJECT<ept id="1">&lt;/code&gt;</ept> is a <bpt id="3CapsExtId1">&lt;link&gt;</bpt><bpt id="3CapsExtId2">&lt;linkText&gt;</bpt>KUDU setting<ept id="3CapsExtId2">&lt;/linkText&gt;</ept><bpt id="3CapsExtId3">&lt;title&gt;</bpt><ept id="3CapsExtId3">&lt;/title&gt;</ept><ept id="3CapsExtId1">&lt;/link&gt;</ept> that tells Azure deployment which project to use in a multi-project Visual Studio solution.</target>
          </trans-unit>
          <trans-unit id="211" xml:space="preserve">
            <source>I will show you later how source control is configured, but since the ToDoApp code is in a multi-project Visual Studio solution, we need this setting.</source>
            <target state="new">I will show you later how source control is configured, but since the ToDoApp code is in a multi-project Visual Studio solution, we need this setting.</target>
          </trans-unit>
          <trans-unit id="212" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>clientUrl<ept id="1">&lt;/code&gt;</ept> is simply an app setting that the application code uses.</source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>clientUrl<ept id="1">&lt;/code&gt;</ept> is simply an app setting that the application code uses.</target>
          </trans-unit>
          <trans-unit id="213" xml:space="preserve">
            <source>Connection strings</source>
            <target state="new">Connection strings</target>
          </trans-unit>
          <trans-unit id="214" xml:space="preserve">
            <source>The connection strings are also defined as a nested resource.</source>
            <target state="new">The connection strings are also defined as a nested resource.</target>
          </trans-unit>
          <trans-unit id="215" xml:space="preserve">
            <source><bpt id="1">&lt;linkText&gt;</bpt><ept id="1">&lt;/linkText&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;linkText&gt;</bpt><ept id="1">&lt;/linkText&gt;</ept></target>
          </trans-unit>
          <trans-unit id="216" xml:space="preserve">
            <source>In the <bpt id="2">&lt;code&gt;</bpt>properties<ept id="2">&lt;/code&gt;</ept> element for <bpt id="4">&lt;code&gt;</bpt>config/connectionstrings<ept id="4">&lt;/code&gt;</ept>, each connection string is also defined as a name:value pair, with the specific format of <bpt id="6">&lt;code&gt;</bpt>“&lt;name&gt;” : {“value”: “…”, “type”: “…”}<ept id="6">&lt;/code&gt;</ept>. For the <bpt id="8">&lt;code&gt;</bpt>type<ept id="8">&lt;/code&gt;</ept> element, possible values are <bpt id="10">&lt;code&gt;</bpt>MySql<ept id="10">&lt;/code&gt;</ept>, <bpt id="12">&lt;code&gt;</bpt>SQLServer<ept id="12">&lt;/code&gt;</ept>, <bpt id="14">&lt;code&gt;</bpt>SQLAzure<ept id="14">&lt;/code&gt;</ept>, and <bpt id="16">&lt;code&gt;</bpt>Custom<ept id="16">&lt;/code&gt;</ept>.</source>
            <target state="new">In the <bpt id="2">&lt;code&gt;</bpt>properties<ept id="2">&lt;/code&gt;</ept> element for <bpt id="4">&lt;code&gt;</bpt>config/connectionstrings<ept id="4">&lt;/code&gt;</ept>, each connection string is also defined as a name:value pair, with the specific format of <bpt id="6">&lt;code&gt;</bpt>“&lt;name&gt;” : {“value”: “…”, “type”: “…”}<ept id="6">&lt;/code&gt;</ept>. For the <bpt id="8">&lt;code&gt;</bpt>type<ept id="8">&lt;/code&gt;</ept> element, possible values are <bpt id="10">&lt;code&gt;</bpt>MySql<ept id="10">&lt;/code&gt;</ept>, <bpt id="12">&lt;code&gt;</bpt>SQLServer<ept id="12">&lt;/code&gt;</ept>, <bpt id="14">&lt;code&gt;</bpt>SQLAzure<ept id="14">&lt;/code&gt;</ept>, and <bpt id="16">&lt;code&gt;</bpt>Custom<ept id="16">&lt;/code&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="217" xml:space="preserve">
            <source>For a definitive list of the connection string types, run the following command in Azure PowerShell:</source>
            <target state="new">For a definitive list of the connection string types, run the following command in Azure PowerShell:</target>
          </trans-unit>
          <trans-unit id="218" xml:space="preserve">
            <source>\[Enum]::GetNames("Microsoft.WindowsAzure.Commands.Utilities.Websites.Services.WebEntities.DatabaseType")</source>
            <target state="new">\[Enum]::GetNames("Microsoft.WindowsAzure.Commands.Utilities.Websites.Services.WebEntities.DatabaseType")</target>
          </trans-unit>
          <trans-unit id="219" xml:space="preserve">
            <source>Source control</source>
            <target state="new">Source control</target>
          </trans-unit>
          <trans-unit id="220" xml:space="preserve">
            <source>The source control settings are also defined as a nested resource.</source>
            <target state="new">The source control settings are also defined as a nested resource.</target>
          </trans-unit>
          <trans-unit id="221" xml:space="preserve">
            <source>Azure Resource Manager uses this resource to configure continuous publishing (see caveat on <bpt id="2">&lt;code&gt;</bpt>IsManualIntegration<ept id="2">&lt;/code&gt;</ept> later) and also to kick off the deployment of application code automatically during the processing of the JSON file.</source>
            <target state="new">Azure Resource Manager uses this resource to configure continuous publishing (see caveat on <bpt id="2">&lt;code&gt;</bpt>IsManualIntegration<ept id="2">&lt;/code&gt;</ept> later) and also to kick off the deployment of application code automatically during the processing of the JSON file.</target>
          </trans-unit>
          <trans-unit id="222" xml:space="preserve">
            <source><bpt id="1">&lt;linkText&gt;</bpt><ept id="1">&lt;/linkText&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;linkText&gt;</bpt><ept id="1">&lt;/linkText&gt;</ept></target>
          </trans-unit>
          <trans-unit id="223" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>RepoUrl<ept id="1">&lt;/code&gt;</ept> and <bpt id="3">&lt;code&gt;</bpt>branch<ept id="3">&lt;/code&gt;</ept> should be pretty intuitive and should point to the Git repository and the name of the branch to publish from.</source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>RepoUrl<ept id="1">&lt;/code&gt;</ept> and <bpt id="3">&lt;code&gt;</bpt>branch<ept id="3">&lt;/code&gt;</ept> should be pretty intuitive and should point to the Git repository and the name of the branch to publish from.</target>
          </trans-unit>
          <trans-unit id="224" xml:space="preserve">
            <source>Again, these are defined by input parameters.</source>
            <target state="new">Again, these are defined by input parameters.</target>
          </trans-unit>
          <trans-unit id="225" xml:space="preserve">
            <source>Note in the <bpt id="2">&lt;code&gt;</bpt>dependsOn<ept id="2">&lt;/code&gt;</ept> element that, in addition to the web app resource itself, <bpt id="4">&lt;code&gt;</bpt>sourcecontrols/web<ept id="4">&lt;/code&gt;</ept> also depends on <bpt id="6">&lt;code&gt;</bpt>config/appsettings<ept id="6">&lt;/code&gt;</ept> and <bpt id="8">&lt;code&gt;</bpt>config/connectionstrings<ept id="8">&lt;/code&gt;</ept>.</source>
            <target state="new">Note in the <bpt id="2">&lt;code&gt;</bpt>dependsOn<ept id="2">&lt;/code&gt;</ept> element that, in addition to the web app resource itself, <bpt id="4">&lt;code&gt;</bpt>sourcecontrols/web<ept id="4">&lt;/code&gt;</ept> also depends on <bpt id="6">&lt;code&gt;</bpt>config/appsettings<ept id="6">&lt;/code&gt;</ept> and <bpt id="8">&lt;code&gt;</bpt>config/connectionstrings<ept id="8">&lt;/code&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="226" xml:space="preserve">
            <source>This is because once <bpt id="2">&lt;code&gt;</bpt>sourcecontrols/web<ept id="2">&lt;/code&gt;</ept> is configured, the Azure deployment process will automatically attempt to deploy, build, and start the application code.</source>
            <target state="new">This is because once <bpt id="2">&lt;code&gt;</bpt>sourcecontrols/web<ept id="2">&lt;/code&gt;</ept> is configured, the Azure deployment process will automatically attempt to deploy, build, and start the application code.</target>
          </trans-unit>
          <trans-unit id="227" xml:space="preserve">
            <source>Therefore, inserting this dependency helps you make sure that the application has access to the required app settings and connection strings before the application code is run.</source>
            <target state="new">Therefore, inserting this dependency helps you make sure that the application has access to the required app settings and connection strings before the application code is run.</target>
          </trans-unit>
          <trans-unit id="228" xml:space="preserve">
            <source>[TODO: need to verify if this is true.]</source>
            <target state="new">[TODO: need to verify if this is true.]</target>
          </trans-unit>
          <trans-unit id="229" xml:space="preserve">
            <source>Note also that <bpt id="2">&lt;code&gt;</bpt>IsManualIntegration<ept id="2">&lt;/code&gt;</ept> is set to <bpt id="4">&lt;code&gt;</bpt>true<ept id="4">&lt;/code&gt;</ept>.</source>
            <target state="new">Note also that <bpt id="2">&lt;code&gt;</bpt>IsManualIntegration<ept id="2">&lt;/code&gt;</ept> is set to <bpt id="4">&lt;code&gt;</bpt>true<ept id="4">&lt;/code&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="230" xml:space="preserve">
            <source>This property is necessary in this tutorial because you do not actually own the GitHub repository, and thus cannot actually grant permission to Azure to configure continuous publishing from <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>ToDoApp<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> (i.e. push automatic repository updates to Azure).</source>
            <target state="new">This property is necessary in this tutorial because you do not actually own the GitHub repository, and thus cannot actually grant permission to Azure to configure continuous publishing from <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>ToDoApp<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> (i.e. push automatic repository updates to Azure).</target>
          </trans-unit>
          <trans-unit id="231" xml:space="preserve">
            <source>You can use the default value <bpt id="2">&lt;code&gt;</bpt>false<ept id="2">&lt;/code&gt;</ept> for the specified repository only if you have configured the owner’s GitHub credentials in the <bpt id="4CapsExtId1">&lt;link&gt;</bpt><bpt id="4CapsExtId2">&lt;linkText&gt;</bpt>Azure preview portal<ept id="4CapsExtId2">&lt;/linkText&gt;</ept><bpt id="4CapsExtId3">&lt;title&gt;</bpt><ept id="4CapsExtId3">&lt;/title&gt;</ept><ept id="4CapsExtId1">&lt;/link&gt;</ept> before.</source>
            <target state="new">You can use the default value <bpt id="2">&lt;code&gt;</bpt>false<ept id="2">&lt;/code&gt;</ept> for the specified repository only if you have configured the owner’s GitHub credentials in the <bpt id="4CapsExtId1">&lt;link&gt;</bpt><bpt id="4CapsExtId2">&lt;linkText&gt;</bpt>Azure preview portal<ept id="4CapsExtId2">&lt;/linkText&gt;</ept><bpt id="4CapsExtId3">&lt;title&gt;</bpt><ept id="4CapsExtId3">&lt;/title&gt;</ept><ept id="4CapsExtId1">&lt;/link&gt;</ept> before.</target>
          </trans-unit>
          <trans-unit id="232" xml:space="preserve">
            <source>In other words, if you have set up source control to GitHub or BitBucket for any app in the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Azure preview portal<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> previously, using your user credentials, then Azure will remember the credentials and use them whenever you deploy any app from GitHub or BitBucket in the future.</source>
            <target state="new">In other words, if you have set up source control to GitHub or BitBucket for any app in the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Azure preview portal<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> previously, using your user credentials, then Azure will remember the credentials and use them whenever you deploy any app from GitHub or BitBucket in the future.</target>
          </trans-unit>
          <trans-unit id="233" xml:space="preserve">
            <source>However, if you haven’t done this already, deployment of the JSON template will fail when Azure Resource Manager tries to configure the web app’s source control settings because it cannot log into GitHub or BitBucket with the repository owner’s credentials.</source>
            <target state="new">However, if you haven’t done this already, deployment of the JSON template will fail when Azure Resource Manager tries to configure the web app’s source control settings because it cannot log into GitHub or BitBucket with the repository owner’s credentials.</target>
          </trans-unit>
          <trans-unit id="234" xml:space="preserve">
            <source>Compare the JSON template with deployed resource group</source>
            <target state="new">Compare the JSON template with deployed resource group</target>
          </trans-unit>
          <trans-unit id="235" xml:space="preserve">
            <source>Here, you can go through all the web app’s blades in the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>preview portal<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>, but there’s another tool that’s just as useful, if not more.</source>
            <target state="new">Here, you can go through all the web app’s blades in the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>preview portal<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>, but there’s another tool that’s just as useful, if not more.</target>
          </trans-unit>
          <trans-unit id="236" xml:space="preserve">
            <source>Go to the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Azure Resource Explorer<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> preview tool, which gives you a JSON representation of all the resource groups in your subscriptions, as they actually exist in the Azure backend.</source>
            <target state="new">Go to the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Azure Resource Explorer<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> preview tool, which gives you a JSON representation of all the resource groups in your subscriptions, as they actually exist in the Azure backend.</target>
          </trans-unit>
          <trans-unit id="237" xml:space="preserve">
            <source>You can also see how the resource group’s JSON hierarchy in Azure corresponds with the hierarchy in the template file that’s used to create it.</source>
            <target state="new">You can also see how the resource group’s JSON hierarchy in Azure corresponds with the hierarchy in the template file that’s used to create it.</target>
          </trans-unit>
          <trans-unit id="238" xml:space="preserve">
            <source>For example, when I go to the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Azure Resource Explorer<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> tool and expand the nodes in the explorer, I can see the resource group and the root-level resources that are collected under their respective resource types.</source>
            <target state="new">For example, when I go to the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Azure Resource Explorer<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> tool and expand the nodes in the explorer, I can see the resource group and the root-level resources that are collected under their respective resource types.</target>
          </trans-unit>
          <trans-unit id="239" xml:space="preserve">
            <source><bpt id="1">&lt;linkText&gt;</bpt><ept id="1">&lt;/linkText&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;linkText&gt;</bpt><ept id="1">&lt;/linkText&gt;</ept></target>
          </trans-unit>
          <trans-unit id="240" xml:space="preserve">
            <source>If you drill down to a web app, you should be able to see web app configuration details similar to the below screenshot:</source>
            <target state="new">If you drill down to a web app, you should be able to see web app configuration details similar to the below screenshot:</target>
          </trans-unit>
          <trans-unit id="241" xml:space="preserve">
            <source><bpt id="1">&lt;linkText&gt;</bpt><ept id="1">&lt;/linkText&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;linkText&gt;</bpt><ept id="1">&lt;/linkText&gt;</ept></target>
          </trans-unit>
          <trans-unit id="242" xml:space="preserve">
            <source>Again, the nested resources should have a hierarchy very similar to those in your JSON template file, and you should see the app settings, connection strings, etc., properly reflected in the JSON pane.</source>
            <target state="new">Again, the nested resources should have a hierarchy very similar to those in your JSON template file, and you should see the app settings, connection strings, etc., properly reflected in the JSON pane.</target>
          </trans-unit>
          <trans-unit id="243" xml:space="preserve">
            <source>The absence of settings here may indicate an issue with your JSON file and can help you troubleshoot your JSON template file.</source>
            <target state="new">The absence of settings here may indicate an issue with your JSON file and can help you troubleshoot your JSON template file.</target>
          </trans-unit>
          <trans-unit id="244" xml:space="preserve">
            <source>Deploy the resource group template yourself</source>
            <target state="new">Deploy the resource group template yourself</target>
          </trans-unit>
          <trans-unit id="245" xml:space="preserve">
            <source>The <bpt id="2">&lt;strong&gt;</bpt>Deploy to Azure<ept id="2">&lt;/strong&gt;</ept> button is great, but it allows you to deploy the resource group template in azuredeploy.json only if you have already pushed azuredeploy.json to GitHub.</source>
            <target state="new">The <bpt id="2">&lt;strong&gt;</bpt>Deploy to Azure<ept id="2">&lt;/strong&gt;</ept> button is great, but it allows you to deploy the resource group template in azuredeploy.json only if you have already pushed azuredeploy.json to GitHub.</target>
          </trans-unit>
          <trans-unit id="246" xml:space="preserve">
            <source>The Azure .NET SDK also provides the tools for you to deploy any JSON template file directly from your local machine.</source>
            <target state="new">The Azure .NET SDK also provides the tools for you to deploy any JSON template file directly from your local machine.</target>
          </trans-unit>
          <trans-unit id="247" xml:space="preserve">
            <source>To do this, follow the steps below:</source>
            <target state="new">To do this, follow the steps below:</target>
          </trans-unit>
          <trans-unit id="248" xml:space="preserve">
            <source>In Visual Studio, click <bpt id="2">&lt;strong&gt;</bpt>File<ept id="2">&lt;/strong&gt;</ept> &gt; <bpt id="4">&lt;strong&gt;</bpt>New<ept id="4">&lt;/strong&gt;</ept> &gt; <bpt id="6">&lt;strong&gt;</bpt>Project<ept id="6">&lt;/strong&gt;</ept>.</source>
            <target state="new">In Visual Studio, click <bpt id="2">&lt;strong&gt;</bpt>File<ept id="2">&lt;/strong&gt;</ept> &gt; <bpt id="4">&lt;strong&gt;</bpt>New<ept id="4">&lt;/strong&gt;</ept> &gt; <bpt id="6">&lt;strong&gt;</bpt>Project<ept id="6">&lt;/strong&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="249" xml:space="preserve">
            <source>Click <bpt id="2">&lt;strong&gt;</bpt>Visual C#<ept id="2">&lt;/strong&gt;</ept> &gt; <bpt id="4">&lt;strong&gt;</bpt>Cloud<ept id="4">&lt;/strong&gt;</ept> &gt; <bpt id="6">&lt;strong&gt;</bpt>Azure Resource Group<ept id="6">&lt;/strong&gt;</ept>, then click <bpt id="8">&lt;strong&gt;</bpt>OK<ept id="8">&lt;/strong&gt;</ept>.</source>
            <target state="new">Click <bpt id="2">&lt;strong&gt;</bpt>Visual C#<ept id="2">&lt;/strong&gt;</ept> &gt; <bpt id="4">&lt;strong&gt;</bpt>Cloud<ept id="4">&lt;/strong&gt;</ept> &gt; <bpt id="6">&lt;strong&gt;</bpt>Azure Resource Group<ept id="6">&lt;/strong&gt;</ept>, then click <bpt id="8">&lt;strong&gt;</bpt>OK<ept id="8">&lt;/strong&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="250" xml:space="preserve">
            <source><bpt id="1">&lt;linkText&gt;</bpt><ept id="1">&lt;/linkText&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;linkText&gt;</bpt><ept id="1">&lt;/linkText&gt;</ept></target>
          </trans-unit>
          <trans-unit id="251" xml:space="preserve">
            <source>In <bpt id="2">&lt;strong&gt;</bpt>Select Azure Template<ept id="2">&lt;/strong&gt;</ept>, select <bpt id="4">&lt;strong&gt;</bpt>Blank Template<ept id="4">&lt;/strong&gt;</ept> and click <bpt id="6">&lt;strong&gt;</bpt>OK<ept id="6">&lt;/strong&gt;</ept>.</source>
            <target state="new">In <bpt id="2">&lt;strong&gt;</bpt>Select Azure Template<ept id="2">&lt;/strong&gt;</ept>, select <bpt id="4">&lt;strong&gt;</bpt>Blank Template<ept id="4">&lt;/strong&gt;</ept> and click <bpt id="6">&lt;strong&gt;</bpt>OK<ept id="6">&lt;/strong&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="252" xml:space="preserve">
            <source>Drag azuredeploy.json into the <bpt id="2">&lt;strong&gt;</bpt>Template<ept id="2">&lt;/strong&gt;</ept> folder of your new project.</source>
            <target state="new">Drag azuredeploy.json into the <bpt id="2">&lt;strong&gt;</bpt>Template<ept id="2">&lt;/strong&gt;</ept> folder of your new project.</target>
          </trans-unit>
          <trans-unit id="253" xml:space="preserve">
            <source><bpt id="1">&lt;linkText&gt;</bpt><ept id="1">&lt;/linkText&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;linkText&gt;</bpt><ept id="1">&lt;/linkText&gt;</ept></target>
          </trans-unit>
          <trans-unit id="254" xml:space="preserve">
            <source>From Solution Explorer, open the copied azuredeploy.json.</source>
            <target state="new">From Solution Explorer, open the copied azuredeploy.json.</target>
          </trans-unit>
          <trans-unit id="255" xml:space="preserve">
            <source>Just for the sake of the demonstration, let’s add some standard Application Insight resources to our JSON file, by clicking <bpt id="2">&lt;strong&gt;</bpt>Add Resource<ept id="2">&lt;/strong&gt;</ept>.</source>
            <target state="new">Just for the sake of the demonstration, let’s add some standard Application Insight resources to our JSON file, by clicking <bpt id="2">&lt;strong&gt;</bpt>Add Resource<ept id="2">&lt;/strong&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="256" xml:space="preserve">
            <source>If you’re just interested in deploying the JSON file, skip to the deploy steps.</source>
            <target state="new">If you’re just interested in deploying the JSON file, skip to the deploy steps.</target>
          </trans-unit>
          <trans-unit id="257" xml:space="preserve">
            <source><bpt id="1">&lt;linkText&gt;</bpt><ept id="1">&lt;/linkText&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;linkText&gt;</bpt><ept id="1">&lt;/linkText&gt;</ept></target>
          </trans-unit>
          <trans-unit id="258" xml:space="preserve">
            <source>Select <bpt id="2">&lt;strong&gt;</bpt>Application Insights for Web Apps<ept id="2">&lt;/strong&gt;</ept>, then make sure an existing App Service plan and web app is selected, and then click <bpt id="4">&lt;strong&gt;</bpt>Add<ept id="4">&lt;/strong&gt;</ept>.</source>
            <target state="new">Select <bpt id="2">&lt;strong&gt;</bpt>Application Insights for Web Apps<ept id="2">&lt;/strong&gt;</ept>, then make sure an existing App Service plan and web app is selected, and then click <bpt id="4">&lt;strong&gt;</bpt>Add<ept id="4">&lt;/strong&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="259" xml:space="preserve">
            <source><bpt id="1">&lt;linkText&gt;</bpt><ept id="1">&lt;/linkText&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;linkText&gt;</bpt><ept id="1">&lt;/linkText&gt;</ept></target>
          </trans-unit>
          <trans-unit id="260" xml:space="preserve">
            <source>You’ll now be able to see several new resources that, depending on the resource and what it does, have dependencies on either the App Service plan or the web app.</source>
            <target state="new">You’ll now be able to see several new resources that, depending on the resource and what it does, have dependencies on either the App Service plan or the web app.</target>
          </trans-unit>
          <trans-unit id="261" xml:space="preserve">
            <source>These resources are not enabled by their existing definition and you’re going to change that.</source>
            <target state="new">These resources are not enabled by their existing definition and you’re going to change that.</target>
          </trans-unit>
          <trans-unit id="262" xml:space="preserve">
            <source><bpt id="1">&lt;linkText&gt;</bpt><ept id="1">&lt;/linkText&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;linkText&gt;</bpt><ept id="1">&lt;/linkText&gt;</ept></target>
          </trans-unit>
          <trans-unit id="263" xml:space="preserve">
            <source>In the JSON Outline, click <bpt id="2">&lt;strong&gt;</bpt>appInsights AutoScale<ept id="2">&lt;/strong&gt;</ept> to highlight its JSON code.</source>
            <target state="new">In the JSON Outline, click <bpt id="2">&lt;strong&gt;</bpt>appInsights AutoScale<ept id="2">&lt;/strong&gt;</ept> to highlight its JSON code.</target>
          </trans-unit>
          <trans-unit id="264" xml:space="preserve">
            <source>This is the scaling setting for your App Service plan.</source>
            <target state="new">This is the scaling setting for your App Service plan.</target>
          </trans-unit>
          <trans-unit id="265" xml:space="preserve">
            <source>In the highlighted JSON code, locate the <bpt id="2">&lt;code&gt;</bpt>location<ept id="2">&lt;/code&gt;</ept> and <bpt id="4">&lt;code&gt;</bpt>enabled<ept id="4">&lt;/code&gt;</ept> properties and set them as shown below.</source>
            <target state="new">In the highlighted JSON code, locate the <bpt id="2">&lt;code&gt;</bpt>location<ept id="2">&lt;/code&gt;</ept> and <bpt id="4">&lt;code&gt;</bpt>enabled<ept id="4">&lt;/code&gt;</ept> properties and set them as shown below.</target>
          </trans-unit>
          <trans-unit id="266" xml:space="preserve">
            <source><bpt id="1">&lt;linkText&gt;</bpt><ept id="1">&lt;/linkText&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;linkText&gt;</bpt><ept id="1">&lt;/linkText&gt;</ept></target>
          </trans-unit>
          <trans-unit id="267" xml:space="preserve">
            <source>In the JSON Outline, click <bpt id="2">&lt;strong&gt;</bpt>CPUHigh appInsights<ept id="2">&lt;/strong&gt;</ept> to highlight its JSON code.</source>
            <target state="new">In the JSON Outline, click <bpt id="2">&lt;strong&gt;</bpt>CPUHigh appInsights<ept id="2">&lt;/strong&gt;</ept> to highlight its JSON code.</target>
          </trans-unit>
          <trans-unit id="268" xml:space="preserve">
            <source>This is an alert.</source>
            <target state="new">This is an alert.</target>
          </trans-unit>
          <trans-unit id="269" xml:space="preserve">
            <source>Locate the <bpt id="2">&lt;code&gt;</bpt>location<ept id="2">&lt;/code&gt;</ept> and <bpt id="4">&lt;code&gt;</bpt>isEnabled<ept id="4">&lt;/code&gt;</ept> properties and set them as shown below.</source>
            <target state="new">Locate the <bpt id="2">&lt;code&gt;</bpt>location<ept id="2">&lt;/code&gt;</ept> and <bpt id="4">&lt;code&gt;</bpt>isEnabled<ept id="4">&lt;/code&gt;</ept> properties and set them as shown below.</target>
          </trans-unit>
          <trans-unit id="270" xml:space="preserve">
            <source>Do the same for the other three alerts (purple bulbs).</source>
            <target state="new">Do the same for the other three alerts (purple bulbs).</target>
          </trans-unit>
          <trans-unit id="271" xml:space="preserve">
            <source><bpt id="1">&lt;linkText&gt;</bpt><ept id="1">&lt;/linkText&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;linkText&gt;</bpt><ept id="1">&lt;/linkText&gt;</ept></target>
          </trans-unit>
          <trans-unit id="272" xml:space="preserve">
            <source>You’re now ready to deploy.</source>
            <target state="new">You’re now ready to deploy.</target>
          </trans-unit>
          <trans-unit id="273" xml:space="preserve">
            <source>Right-click the project and select <bpt id="2">&lt;strong&gt;</bpt>Deploy<ept id="2">&lt;/strong&gt;</ept> &gt; <bpt id="4">&lt;strong&gt;</bpt>New Deployment<ept id="4">&lt;/strong&gt;</ept>.</source>
            <target state="new">Right-click the project and select <bpt id="2">&lt;strong&gt;</bpt>Deploy<ept id="2">&lt;/strong&gt;</ept> &gt; <bpt id="4">&lt;strong&gt;</bpt>New Deployment<ept id="4">&lt;/strong&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="274" xml:space="preserve">
            <source><bpt id="1">&lt;linkText&gt;</bpt><ept id="1">&lt;/linkText&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;linkText&gt;</bpt><ept id="1">&lt;/linkText&gt;</ept></target>
          </trans-unit>
          <trans-unit id="275" xml:space="preserve">
            <source>Log into your Azure account if you haven’t already done so.</source>
            <target state="new">Log into your Azure account if you haven’t already done so.</target>
          </trans-unit>
          <trans-unit id="276" xml:space="preserve">
            <source>Select an existing resource group in your subscription or create a new one, select <bpt id="2">&lt;strong&gt;</bpt>azuredeploy.json<ept id="2">&lt;/strong&gt;</ept>, and then click <bpt id="4">&lt;strong&gt;</bpt>Edit Parameters<ept id="4">&lt;/strong&gt;</ept>.</source>
            <target state="new">Select an existing resource group in your subscription or create a new one, select <bpt id="2">&lt;strong&gt;</bpt>azuredeploy.json<ept id="2">&lt;/strong&gt;</ept>, and then click <bpt id="4">&lt;strong&gt;</bpt>Edit Parameters<ept id="4">&lt;/strong&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="277" xml:space="preserve">
            <source><bpt id="1">&lt;linkText&gt;</bpt><ept id="1">&lt;/linkText&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;linkText&gt;</bpt><ept id="1">&lt;/linkText&gt;</ept></target>
          </trans-unit>
          <trans-unit id="278" xml:space="preserve">
            <source>You’ll now be able to edit all the parameters defined in the template file in a nice table.</source>
            <target state="new">You’ll now be able to edit all the parameters defined in the template file in a nice table.</target>
          </trans-unit>
          <trans-unit id="279" xml:space="preserve">
            <source>Parameters that define defaults will already have their default values, and parameters that define a list of allowed values will be shown as dropdowns.</source>
            <target state="new">Parameters that define defaults will already have their default values, and parameters that define a list of allowed values will be shown as dropdowns.</target>
          </trans-unit>
          <trans-unit id="280" xml:space="preserve">
            <source><bpt id="1">&lt;linkText&gt;</bpt><ept id="1">&lt;/linkText&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;linkText&gt;</bpt><ept id="1">&lt;/linkText&gt;</ept></target>
          </trans-unit>
          <trans-unit id="281" xml:space="preserve">
            <source>Fill in all the empty parameters, and use the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>GitHub repo address for ToDoApp<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> in <bpt id="4">&lt;strong&gt;</bpt>repoUrl<ept id="4">&lt;/strong&gt;</ept>.</source>
            <target state="new">Fill in all the empty parameters, and use the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>GitHub repo address for ToDoApp<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> in <bpt id="4">&lt;strong&gt;</bpt>repoUrl<ept id="4">&lt;/strong&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="282" xml:space="preserve">
            <source>Then, click <bpt id="2">&lt;strong&gt;</bpt>Save<ept id="2">&lt;/strong&gt;</ept>.</source>
            <target state="new">Then, click <bpt id="2">&lt;strong&gt;</bpt>Save<ept id="2">&lt;/strong&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="283" xml:space="preserve">
            <source><bpt id="1">&lt;linkText&gt;</bpt><ept id="1">&lt;/linkText&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;linkText&gt;</bpt><ept id="1">&lt;/linkText&gt;</ept></target>
          </trans-unit>
          <trans-unit id="284" xml:space="preserve">
            <source>Autoscaling is a feature offered in <bpt id="2">&lt;strong&gt;</bpt>Standard<ept id="2">&lt;/strong&gt;</ept> tier or higher, and plan-level alerts are features offered in <bpt id="4">&lt;strong&gt;</bpt>Basic<ept id="4">&lt;/strong&gt;</ept> tier or higher, you’ll need to set the <bpt id="6">&lt;strong&gt;</bpt>sku<ept id="6">&lt;/strong&gt;</ept> parameter to <bpt id="8">&lt;strong&gt;</bpt>Standard<ept id="8">&lt;/strong&gt;</ept> or <bpt id="10">&lt;strong&gt;</bpt>Premium<ept id="10">&lt;/strong&gt;</ept> in order to see all your new App Insights resources light up.</source>
            <target state="new">Autoscaling is a feature offered in <bpt id="2">&lt;strong&gt;</bpt>Standard<ept id="2">&lt;/strong&gt;</ept> tier or higher, and plan-level alerts are features offered in <bpt id="4">&lt;strong&gt;</bpt>Basic<ept id="4">&lt;/strong&gt;</ept> tier or higher, you’ll need to set the <bpt id="6">&lt;strong&gt;</bpt>sku<ept id="6">&lt;/strong&gt;</ept> parameter to <bpt id="8">&lt;strong&gt;</bpt>Standard<ept id="8">&lt;/strong&gt;</ept> or <bpt id="10">&lt;strong&gt;</bpt>Premium<ept id="10">&lt;/strong&gt;</ept> in order to see all your new App Insights resources light up.</target>
          </trans-unit>
          <trans-unit id="285" xml:space="preserve">
            <source>Click <bpt id="2">&lt;strong&gt;</bpt>Deploy<ept id="2">&lt;/strong&gt;</ept>.</source>
            <target state="new">Click <bpt id="2">&lt;strong&gt;</bpt>Deploy<ept id="2">&lt;/strong&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="286" xml:space="preserve">
            <source>If you selected <bpt id="2">&lt;strong&gt;</bpt>Save passwords<ept id="2">&lt;/strong&gt;</ept>, the password will be saved in the parameter file <bpt id="4">&lt;strong&gt;</bpt>in plain text<ept id="4">&lt;/strong&gt;</ept>.</source>
            <target state="new">If you selected <bpt id="2">&lt;strong&gt;</bpt>Save passwords<ept id="2">&lt;/strong&gt;</ept>, the password will be saved in the parameter file <bpt id="4">&lt;strong&gt;</bpt>in plain text<ept id="4">&lt;/strong&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="287" xml:space="preserve">
            <source>Otherwise, you’ll be asked to input the database password during the deployment process.</source>
            <target state="new">Otherwise, you’ll be asked to input the database password during the deployment process.</target>
          </trans-unit>
          <trans-unit id="288" xml:space="preserve">
            <source>That’s it!</source>
            <target state="new">That’s it!</target>
          </trans-unit>
          <trans-unit id="289" xml:space="preserve">
            <source>Now you just need to go to the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>preview portal<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> and the <bpt id="4CapsExtId1">&lt;link&gt;</bpt><bpt id="4CapsExtId2">&lt;linkText&gt;</bpt>Azure Resource Explorer<ept id="4CapsExtId2">&lt;/linkText&gt;</ept><bpt id="4CapsExtId3">&lt;title&gt;</bpt><ept id="4CapsExtId3">&lt;/title&gt;</ept><ept id="4CapsExtId1">&lt;/link&gt;</ept> tool to see the new alerts and autoscale settings added to your JSON deployed application.</source>
            <target state="new">Now you just need to go to the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>preview portal<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> and the <bpt id="4CapsExtId1">&lt;link&gt;</bpt><bpt id="4CapsExtId2">&lt;linkText&gt;</bpt>Azure Resource Explorer<ept id="4CapsExtId2">&lt;/linkText&gt;</ept><bpt id="4CapsExtId3">&lt;title&gt;</bpt><ept id="4CapsExtId3">&lt;/title&gt;</ept><ept id="4CapsExtId1">&lt;/link&gt;</ept> tool to see the new alerts and autoscale settings added to your JSON deployed application.</target>
          </trans-unit>
          <trans-unit id="290" xml:space="preserve">
            <source>Your steps in this section mainly accomplished the following:</source>
            <target state="new">Your steps in this section mainly accomplished the following:</target>
          </trans-unit>
          <trans-unit id="291" xml:space="preserve">
            <source>Prepared the template file</source>
            <target state="new">Prepared the template file</target>
          </trans-unit>
          <trans-unit id="292" xml:space="preserve">
            <source>Created a parameter file to go with the template file</source>
            <target state="new">Created a parameter file to go with the template file</target>
          </trans-unit>
          <trans-unit id="293" xml:space="preserve">
            <source>Deployed the template file with the parameter file</source>
            <target state="new">Deployed the template file with the parameter file</target>
          </trans-unit>
          <trans-unit id="294" xml:space="preserve">
            <source>The last step is easily done by a PowerShell cmdlet.</source>
            <target state="new">The last step is easily done by a PowerShell cmdlet.</target>
          </trans-unit>
          <trans-unit id="295" xml:space="preserve">
            <source>To see what Visual Studio did when it deployed your application, open Scripts\Deploy-AzureResourceGroup.ps1.</source>
            <target state="new">To see what Visual Studio did when it deployed your application, open Scripts\Deploy-AzureResourceGroup.ps1.</target>
          </trans-unit>
          <trans-unit id="296" xml:space="preserve">
            <source>There’s a lot of code there, but I’m just going to highlight all the pertinent code you need to deploy the template file with the parameter file.</source>
            <target state="new">There’s a lot of code there, but I’m just going to highlight all the pertinent code you need to deploy the template file with the parameter file.</target>
          </trans-unit>
          <trans-unit id="297" xml:space="preserve">
            <source><bpt id="1">&lt;linkText&gt;</bpt><ept id="1">&lt;/linkText&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;linkText&gt;</bpt><ept id="1">&lt;/linkText&gt;</ept></target>
          </trans-unit>
          <trans-unit id="298" xml:space="preserve">
            <source>The last cmdlet, <bpt id="2">&lt;code&gt;</bpt>New-AzureResourceGroup<ept id="2">&lt;/code&gt;</ept>, is the one that actually performs the action.</source>
            <target state="new">The last cmdlet, <bpt id="2">&lt;code&gt;</bpt>New-AzureResourceGroup<ept id="2">&lt;/code&gt;</ept>, is the one that actually performs the action.</target>
          </trans-unit>
          <trans-unit id="299" xml:space="preserve">
            <source>All this should demonstrate to you that, with the help of tooling, it is relatively straightforward to deploy your cloud application predictably.</source>
            <target state="new">All this should demonstrate to you that, with the help of tooling, it is relatively straightforward to deploy your cloud application predictably.</target>
          </trans-unit>
          <trans-unit id="300" xml:space="preserve">
            <source>Every time you run the cmdlet on the same template with the same parameter file, you’re going to get the same result.</source>
            <target state="new">Every time you run the cmdlet on the same template with the same parameter file, you’re going to get the same result.</target>
          </trans-unit>
          <trans-unit id="301" xml:space="preserve">
            <source>Summary</source>
            <target state="new">Summary</target>
          </trans-unit>
          <trans-unit id="302" xml:space="preserve">
            <source>In DevOps, repeatability and predictability are keys to any successful deployment of a high-scale application composed of microservices.</source>
            <target state="new">In DevOps, repeatability and predictability are keys to any successful deployment of a high-scale application composed of microservices.</target>
          </trans-unit>
          <trans-unit id="303" xml:space="preserve">
            <source>In this tutorial, you have deployed a two-microservice application to Azure as a single resource group using the Azure Resource Manager template.</source>
            <target state="new">In this tutorial, you have deployed a two-microservice application to Azure as a single resource group using the Azure Resource Manager template.</target>
          </trans-unit>
          <trans-unit id="304" xml:space="preserve">
            <source>Hopefully, it has given you the knowledge you need in order to start converting your application in Azure into a template and can provision and deploy it predictably.</source>
            <target state="new">Hopefully, it has given you the knowledge you need in order to start converting your application in Azure into a template and can provision and deploy it predictably.</target>
          </trans-unit>
          <trans-unit id="305" xml:space="preserve">
            <source>Next Steps</source>
            <target state="new">Next Steps</target>
          </trans-unit>
          <trans-unit id="306" xml:space="preserve">
            <source>Find out how to <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>apply agile methodologies and continuously publish your microservices application with ease<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">Find out how to <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>apply agile methodologies and continuously publish your microservices application with ease<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="307" xml:space="preserve">
            <source><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="308" xml:space="preserve">
            <source>More resources</source>
            <target state="new">More resources</target>
          </trans-unit>
          <trans-unit id="309" xml:space="preserve">
            <source><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Azure Resource Manager Template Language<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></source>
            <target state="new"><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Azure Resource Manager Template Language<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></target>
          </trans-unit>
          <trans-unit id="310" xml:space="preserve">
            <source><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Authoring Azure Resource Manager Templates<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></source>
            <target state="new"><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Authoring Azure Resource Manager Templates<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></target>
          </trans-unit>
          <trans-unit id="311" xml:space="preserve">
            <source><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Azure Resource Manager Template Functions<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></source>
            <target state="new"><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Azure Resource Manager Template Functions<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></target>
          </trans-unit>
          <trans-unit id="312" xml:space="preserve">
            <source><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Deploy an application with Azure Resource Manager template<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></source>
            <target state="new"><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Deploy an application with Azure Resource Manager template<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></target>
          </trans-unit>
          <trans-unit id="313" xml:space="preserve">
            <source><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Using Azure PowerShell with Azure Resource Manager<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></source>
            <target state="new"><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Using Azure PowerShell with Azure Resource Manager<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></target>
          </trans-unit>
          <trans-unit id="314" xml:space="preserve">
            <source><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Troubleshooting Resource Group Deployments in Azure<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></source>
            <target state="new"><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Troubleshooting Resource Group Deployments in Azure<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></target>
          </trans-unit>
        </group>
      </group>
    </body>
  </file>
</xliff>