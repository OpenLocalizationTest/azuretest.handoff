<?xml version="1.0" encoding="utf-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" source-language="en-us" target-language="zh-cn" original="2/17/2016 2:47:22 PM" tool-id="MarkdownTransformer" product-name="N/A" product-version="N/A" build-num="1">
    <header>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">10c32e3339bfd329d0e82f15acb918374ed4f822</xliffext:olfilehash>
      <tool tool-id="MarkdownTransformer" tool-name="MarkdownToXliff" tool-version="1.0" tool-company="Microsoft" />
    </header>
    <body>
      <group extype="content">
        <group id="101">
          <trans-unit id="101" xml:space="preserve">
            <source>The previous example shows a standard sign-in, which requires the client to contact both the identity provider and the App Service every time the app starts.</source>
            <target state="new">The previous example shows a standard sign-in, which requires the client to contact both the identity provider and the App Service every time the app starts.</target>
          </trans-unit>
          <trans-unit id="102" xml:space="preserve">
            <source>This method is inefficient, and it would be better to cache the authorization token returned by App Service and try to use this first before using a provider-based sign-in.</source>
            <target state="new">This method is inefficient, and it would be better to cache the authorization token returned by App Service and try to use this first before using a provider-based sign-in.</target>
          </trans-unit>
          <trans-unit id="103" xml:space="preserve">
            <source>The recommended way to encrypt and store authentication tokens on an iOS client is use the iOS Keychain.</source>
            <target state="new">The recommended way to encrypt and store authentication tokens on an iOS client is use the iOS Keychain.</target>
          </trans-unit>
          <trans-unit id="104" xml:space="preserve">
            <source>This tutorial uses <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>SSKeychain<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> -- a simple wrapper around the iOS Keychain.</source>
            <target state="new">This tutorial uses <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>SSKeychain<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> -- a simple wrapper around the iOS Keychain.</target>
          </trans-unit>
          <trans-unit id="105" xml:space="preserve">
            <source>Follow the instructions on the SSKeychain page and add it to your project.</source>
            <target state="new">Follow the instructions on the SSKeychain page and add it to your project.</target>
          </trans-unit>
          <trans-unit id="106" xml:space="preserve">
            <source>Verify that the <bpt id="2">&lt;strong&gt;</bpt>Enable Modules<ept id="2">&lt;/strong&gt;</ept> setting is enabled in the project's <bpt id="4">&lt;strong&gt;</bpt>Build Settings<ept id="4">&lt;/strong&gt;</ept> (section <bpt id="6">&lt;strong&gt;</bpt>Apple LLVM - Languages - Modules<ept id="6">&lt;/strong&gt;</ept>.)</source>
            <target state="new">Verify that the <bpt id="2">&lt;strong&gt;</bpt>Enable Modules<ept id="2">&lt;/strong&gt;</ept> setting is enabled in the project's <bpt id="4">&lt;strong&gt;</bpt>Build Settings<ept id="4">&lt;/strong&gt;</ept> (section <bpt id="6">&lt;strong&gt;</bpt>Apple LLVM - Languages - Modules<ept id="6">&lt;/strong&gt;</ept>.)</target>
          </trans-unit>
          <trans-unit id="107" xml:space="preserve">
            <source>Open <bpt id="2">&lt;strong&gt;</bpt>QSTodoListViewController.m<ept id="2">&lt;/strong&gt;</ept> and add the following code:</source>
            <target state="new">Open <bpt id="2">&lt;strong&gt;</bpt>QSTodoListViewController.m<ept id="2">&lt;/strong&gt;</ept> and add the following code:</target>
          </trans-unit>
          <trans-unit id="108" xml:space="preserve">
            <source>In the <bpt id="2">&lt;code&gt;</bpt>loginAndGetData<ept id="2">&lt;/code&gt;</ept> method, modify the <bpt id="4">&lt;code&gt;</bpt>loginWithProvider:controller:animated:completion:<ept id="4">&lt;/code&gt;</ept> call's completion block by adding a call to <bpt id="6">&lt;code&gt;</bpt>saveAuthInfo<ept id="6">&lt;/code&gt;</ept> right before the line <bpt id="8">&lt;code&gt;</bpt>[self refresh]<ept id="8">&lt;/code&gt;</ept>.</source>
            <target state="new">In the <bpt id="2">&lt;code&gt;</bpt>loginAndGetData<ept id="2">&lt;/code&gt;</ept> method, modify the <bpt id="4">&lt;code&gt;</bpt>loginWithProvider:controller:animated:completion:<ept id="4">&lt;/code&gt;</ept> call's completion block by adding a call to <bpt id="6">&lt;code&gt;</bpt>saveAuthInfo<ept id="6">&lt;/code&gt;</ept> right before the line <bpt id="8">&lt;code&gt;</bpt>[self refresh]<ept id="8">&lt;/code&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="109" xml:space="preserve">
            <source>With this call, we simply store the user ID and token properties:</source>
            <target state="new">With this call, we simply store the user ID and token properties:</target>
          </trans-unit>
          <trans-unit id="110" xml:space="preserve">
            <source>Let's also load the user ID and token when the app starts.</source>
            <target state="new">Let's also load the user ID and token when the app starts.</target>
          </trans-unit>
          <trans-unit id="111" xml:space="preserve">
            <source>In the <bpt id="2">&lt;code&gt;</bpt>viewDidLoad<ept id="2">&lt;/code&gt;</ept> method in <bpt id="4">&lt;strong&gt;</bpt>QSTodoListViewController.m<ept id="4">&lt;/strong&gt;</ept>, add a call to loadAuthInfo right after <bpt id="6">&lt;code&gt;</bpt>self.todoService<ept id="6">&lt;/code&gt;</ept> has been initialized.</source>
            <target state="new">In the <bpt id="2">&lt;code&gt;</bpt>viewDidLoad<ept id="2">&lt;/code&gt;</ept> method in <bpt id="4">&lt;strong&gt;</bpt>QSTodoListViewController.m<ept id="4">&lt;/strong&gt;</ept>, add a call to loadAuthInfo right after <bpt id="6">&lt;code&gt;</bpt>self.todoService<ept id="6">&lt;/code&gt;</ept> has been initialized.</target>
          </trans-unit>
        </group>
      </group>
    </body>
  </file>
</xliff>