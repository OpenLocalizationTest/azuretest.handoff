<?xml version="1.0" encoding="utf-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" source-language="en-us" target-language="zh-cn" original="2/19/2016 5:04:56 PM" tool-id="MarkdownTransformer" product-name="N/A" product-version="N/A" build-num="1">
    <header>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b198a647429f63d39d09065ccb345b557d78b989</xliffext:olfilehash>
      <tool tool-id="MarkdownTransformer" tool-name="MarkdownToXliff" tool-version="1.0" tool-company="Microsoft" />
    </header>
    <body>
      <group extype="content">
        <group id="101">
          <trans-unit id="101" xml:space="preserve">
            <source>How to Use the Engagement API on Android</source>
            <target state="new">How to Use the Engagement API on Android</target>
          </trans-unit>
          <trans-unit id="102" xml:space="preserve">
            <source>Latest Android SDK - How to Use the Engagement API on Android</source>
            <target state="new">Latest Android SDK - How to Use the Engagement API on Android</target>
          </trans-unit>
          <trans-unit id="103" xml:space="preserve">
            <source>How to Use the Engagement API on Android</source>
            <target state="new">How to Use the Engagement API on Android</target>
          </trans-unit>
          <trans-unit id="104" xml:space="preserve">
            <source>This document is an add-on to the document <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>How to Integrate Engagement on Android<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">This document is an add-on to the document <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>How to Integrate Engagement on Android<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="105" xml:space="preserve">
            <source>It provides in depth details about how to use the Engagement API to report your application statistics.</source>
            <target state="new">It provides in depth details about how to use the Engagement API to report your application statistics.</target>
          </trans-unit>
          <trans-unit id="106" xml:space="preserve">
            <source>Keep in mind that if you only want Engagement to report your application's sessions, activities, crashes and technical information, then the simplest way is to make all your <bpt id="2">&lt;code&gt;</bpt>Activity<ept id="2">&lt;/code&gt;</ept> sub-classes inherit from the corresponding <bpt id="4">&lt;code&gt;</bpt>EngagementActivity<ept id="4">&lt;/code&gt;</ept> class.</source>
            <target state="new">Keep in mind that if you only want Engagement to report your application's sessions, activities, crashes and technical information, then the simplest way is to make all your <bpt id="2">&lt;code&gt;</bpt>Activity<ept id="2">&lt;/code&gt;</ept> sub-classes inherit from the corresponding <bpt id="4">&lt;code&gt;</bpt>EngagementActivity<ept id="4">&lt;/code&gt;</ept> class.</target>
          </trans-unit>
          <trans-unit id="107" xml:space="preserve">
            <source>If you want to do more, for example if you need to report application specific events, errors and jobs, or if you have to report your application's activities in a different way than the one implemented in the <bpt id="2">&lt;code&gt;</bpt>EngagementActivity<ept id="2">&lt;/code&gt;</ept> classes, then you need to use the Engagement API.</source>
            <target state="new">If you want to do more, for example if you need to report application specific events, errors and jobs, or if you have to report your application's activities in a different way than the one implemented in the <bpt id="2">&lt;code&gt;</bpt>EngagementActivity<ept id="2">&lt;/code&gt;</ept> classes, then you need to use the Engagement API.</target>
          </trans-unit>
          <trans-unit id="108" xml:space="preserve">
            <source>The Engagement API is provided by the <bpt id="2">&lt;code&gt;</bpt>EngagementAgent<ept id="2">&lt;/code&gt;</ept> class.</source>
            <target state="new">The Engagement API is provided by the <bpt id="2">&lt;code&gt;</bpt>EngagementAgent<ept id="2">&lt;/code&gt;</ept> class.</target>
          </trans-unit>
          <trans-unit id="109" xml:space="preserve">
            <source>An instance of this class can be retrieved by calling the <bpt id="2">&lt;code&gt;</bpt>EngagementAgent.getInstance(Context)<ept id="2">&lt;/code&gt;</ept> static method (note that the <bpt id="4">&lt;code&gt;</bpt>EngagementAgent<ept id="4">&lt;/code&gt;</ept> object returned is a singleton).</source>
            <target state="new">An instance of this class can be retrieved by calling the <bpt id="2">&lt;code&gt;</bpt>EngagementAgent.getInstance(Context)<ept id="2">&lt;/code&gt;</ept> static method (note that the <bpt id="4">&lt;code&gt;</bpt>EngagementAgent<ept id="4">&lt;/code&gt;</ept> object returned is a singleton).</target>
          </trans-unit>
          <trans-unit id="110" xml:space="preserve">
            <source>Engagement concepts</source>
            <target state="new">Engagement concepts</target>
          </trans-unit>
          <trans-unit id="111" xml:space="preserve">
            <source>The following parts refine the common <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Mobile Engagement Concepts<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>, for the Android platform.</source>
            <target state="new">The following parts refine the common <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Mobile Engagement Concepts<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>, for the Android platform.</target>
          </trans-unit>
          <trans-unit id="112" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>Session<ept id="1">&lt;/code&gt;</ept> and <bpt id="3">&lt;code&gt;</bpt>Activity<ept id="3">&lt;/code&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>Session<ept id="1">&lt;/code&gt;</ept> and <bpt id="3">&lt;code&gt;</bpt>Activity<ept id="3">&lt;/code&gt;</ept></target>
          </trans-unit>
          <trans-unit id="113" xml:space="preserve">
            <source>If the user stays more than a few seconds idle between two <bpt id="2">&lt;em&gt;</bpt>activities<ept id="2">&lt;/em&gt;</ept>, then his sequence of <bpt id="4">&lt;em&gt;</bpt>activities<ept id="4">&lt;/em&gt;</ept> is split in two distinct <bpt id="6">&lt;em&gt;</bpt>sessions<ept id="6">&lt;/em&gt;</ept>.</source>
            <target state="new">If the user stays more than a few seconds idle between two <bpt id="2">&lt;em&gt;</bpt>activities<ept id="2">&lt;/em&gt;</ept>, then his sequence of <bpt id="4">&lt;em&gt;</bpt>activities<ept id="4">&lt;/em&gt;</ept> is split in two distinct <bpt id="6">&lt;em&gt;</bpt>sessions<ept id="6">&lt;/em&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="114" xml:space="preserve">
            <source>These few seconds are called the "session timeout".</source>
            <target state="new">These few seconds are called the "session timeout".</target>
          </trans-unit>
          <trans-unit id="115" xml:space="preserve">
            <source>An <bpt id="2">&lt;em&gt;</bpt>activity<ept id="2">&lt;/em&gt;</ept> is usually associated with one screen of the application, that is to say the <bpt id="4">&lt;em&gt;</bpt>activity<ept id="4">&lt;/em&gt;</ept> starts when the screen is displayed and stops when the screen is closed: this is the case when the Engagement SDK is integrated by using the <bpt id="6">&lt;code&gt;</bpt>EngagementActivity<ept id="6">&lt;/code&gt;</ept> classes.</source>
            <target state="new">An <bpt id="2">&lt;em&gt;</bpt>activity<ept id="2">&lt;/em&gt;</ept> is usually associated with one screen of the application, that is to say the <bpt id="4">&lt;em&gt;</bpt>activity<ept id="4">&lt;/em&gt;</ept> starts when the screen is displayed and stops when the screen is closed: this is the case when the Engagement SDK is integrated by using the <bpt id="6">&lt;code&gt;</bpt>EngagementActivity<ept id="6">&lt;/code&gt;</ept> classes.</target>
          </trans-unit>
          <trans-unit id="116" xml:space="preserve">
            <source>But <bpt id="2">&lt;em&gt;</bpt>activities<ept id="2">&lt;/em&gt;</ept> can also be controlled manually by using the Engagement API.</source>
            <target state="new">But <bpt id="2">&lt;em&gt;</bpt>activities<ept id="2">&lt;/em&gt;</ept> can also be controlled manually by using the Engagement API.</target>
          </trans-unit>
          <trans-unit id="117" xml:space="preserve">
            <source>This allows to split a given screen in several sub parts to get more details about the usage of this screen (for example to known how often and how long dialogs are used inside this screen).</source>
            <target state="new">This allows to split a given screen in several sub parts to get more details about the usage of this screen (for example to known how often and how long dialogs are used inside this screen).</target>
          </trans-unit>
          <trans-unit id="118" xml:space="preserve">
            <source>Reporting Activities</source>
            <target state="new">Reporting Activities</target>
          </trans-unit>
          <trans-unit id="119" xml:space="preserve">
            <source>You don't need to report activities like described in this section if you are using the <bpt id="2">&lt;code&gt;</bpt>EngagementActivity<ept id="2">&lt;/code&gt;</ept> class and its variants as explained in the How to Integrate Engagement on Android document.</source>
            <target state="new">You don't need to report activities like described in this section if you are using the <bpt id="2">&lt;code&gt;</bpt>EngagementActivity<ept id="2">&lt;/code&gt;</ept> class and its variants as explained in the How to Integrate Engagement on Android document.</target>
          </trans-unit>
          <trans-unit id="120" xml:space="preserve">
            <source>User starts a new Activity</source>
            <target state="new">User starts a new Activity</target>
          </trans-unit>
          <trans-unit id="121" xml:space="preserve">
            <source>You need to call <bpt id="2">&lt;code&gt;</bpt>startActivity()<ept id="2">&lt;/code&gt;</ept> each time the user activity changes.</source>
            <target state="new">You need to call <bpt id="2">&lt;code&gt;</bpt>startActivity()<ept id="2">&lt;/code&gt;</ept> each time the user activity changes.</target>
          </trans-unit>
          <trans-unit id="122" xml:space="preserve">
            <source>The first call to this function starts a new user session.</source>
            <target state="new">The first call to this function starts a new user session.</target>
          </trans-unit>
          <trans-unit id="123" xml:space="preserve">
            <source>The best place to call this function is on each activity <bpt id="2">&lt;code&gt;</bpt>onResume<ept id="2">&lt;/code&gt;</ept> callback.</source>
            <target state="new">The best place to call this function is on each activity <bpt id="2">&lt;code&gt;</bpt>onResume<ept id="2">&lt;/code&gt;</ept> callback.</target>
          </trans-unit>
          <trans-unit id="124" xml:space="preserve">
            <source>User ends his current Activity</source>
            <target state="new">User ends his current Activity</target>
          </trans-unit>
          <trans-unit id="125" xml:space="preserve">
            <source>You need to call <bpt id="2">&lt;code&gt;</bpt>endActivity()<ept id="2">&lt;/code&gt;</ept> at least once when the user finishes his last activity.</source>
            <target state="new">You need to call <bpt id="2">&lt;code&gt;</bpt>endActivity()<ept id="2">&lt;/code&gt;</ept> at least once when the user finishes his last activity.</target>
          </trans-unit>
          <trans-unit id="126" xml:space="preserve">
            <source>This informs the Engagement SDK that the user is currently idle, and that the user session need to be closed once the session timeout will expire (if you call <bpt id="2">&lt;code&gt;</bpt>startActivity()<ept id="2">&lt;/code&gt;</ept> before the session timeout expires, the session is simply resumed).</source>
            <target state="new">This informs the Engagement SDK that the user is currently idle, and that the user session need to be closed once the session timeout will expire (if you call <bpt id="2">&lt;code&gt;</bpt>startActivity()<ept id="2">&lt;/code&gt;</ept> before the session timeout expires, the session is simply resumed).</target>
          </trans-unit>
          <trans-unit id="127" xml:space="preserve">
            <source>The best place to call this function is on each activity <bpt id="2">&lt;code&gt;</bpt>onPause<ept id="2">&lt;/code&gt;</ept> callback.</source>
            <target state="new">The best place to call this function is on each activity <bpt id="2">&lt;code&gt;</bpt>onPause<ept id="2">&lt;/code&gt;</ept> callback.</target>
          </trans-unit>
          <trans-unit id="128" xml:space="preserve">
            <source>Reporting Events</source>
            <target state="new">Reporting Events</target>
          </trans-unit>
          <trans-unit id="129" xml:space="preserve">
            <source>Session events</source>
            <target state="new">Session events</target>
          </trans-unit>
          <trans-unit id="130" xml:space="preserve">
            <source>Session events are usually used to report the actions performed by a user during his session.</source>
            <target state="new">Session events are usually used to report the actions performed by a user during his session.</target>
          </trans-unit>
          <trans-unit id="131" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Example without extra data:<ept id="1">&lt;/strong&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Example without extra data:<ept id="1">&lt;/strong&gt;</ept></target>
          </trans-unit>
          <trans-unit id="132" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Example with extra data:<ept id="1">&lt;/strong&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Example with extra data:<ept id="1">&lt;/strong&gt;</ept></target>
          </trans-unit>
          <trans-unit id="133" xml:space="preserve">
            <source>Standalone Events</source>
            <target state="new">Standalone Events</target>
          </trans-unit>
          <trans-unit id="134" xml:space="preserve">
            <source>Contrary to session events, standalone events can occur outside of the context of a session.</source>
            <target state="new">Contrary to session events, standalone events can occur outside of the context of a session.</target>
          </trans-unit>
          <trans-unit id="135" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Example:<ept id="1">&lt;/strong&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Example:<ept id="1">&lt;/strong&gt;</ept></target>
          </trans-unit>
          <trans-unit id="136" xml:space="preserve">
            <source>Suppose you want to report events occurring when a broadcast receiver is triggered:</source>
            <target state="new">Suppose you want to report events occurring when a broadcast receiver is triggered:</target>
          </trans-unit>
          <trans-unit id="137" xml:space="preserve">
            <source>Reporting Errors</source>
            <target state="new">Reporting Errors</target>
          </trans-unit>
          <trans-unit id="138" xml:space="preserve">
            <source>Session errors</source>
            <target state="new">Session errors</target>
          </trans-unit>
          <trans-unit id="139" xml:space="preserve">
            <source>Session errors are usually used to report the errors impacting the user during his session.</source>
            <target state="new">Session errors are usually used to report the errors impacting the user during his session.</target>
          </trans-unit>
          <trans-unit id="140" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Example:<ept id="1">&lt;/strong&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Example:<ept id="1">&lt;/strong&gt;</ept></target>
          </trans-unit>
          <trans-unit id="141" xml:space="preserve">
            <source>Standalone errors</source>
            <target state="new">Standalone errors</target>
          </trans-unit>
          <trans-unit id="142" xml:space="preserve">
            <source>Contrary to session errors, standalone errors can occur outside of the context of a session.</source>
            <target state="new">Contrary to session errors, standalone errors can occur outside of the context of a session.</target>
          </trans-unit>
          <trans-unit id="143" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Example:<ept id="1">&lt;/strong&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Example:<ept id="1">&lt;/strong&gt;</ept></target>
          </trans-unit>
          <trans-unit id="144" xml:space="preserve">
            <source>The following example shows how to report an error whenever the memory becomes low on the phone while your application process is running.</source>
            <target state="new">The following example shows how to report an error whenever the memory becomes low on the phone while your application process is running.</target>
          </trans-unit>
          <trans-unit id="145" xml:space="preserve">
            <source>Reporting Jobs</source>
            <target state="new">Reporting Jobs</target>
          </trans-unit>
          <trans-unit id="146" xml:space="preserve">
            <source>Example</source>
            <target state="new">Example</target>
          </trans-unit>
          <trans-unit id="147" xml:space="preserve">
            <source>Suppose you want to report the duration of your login process:</source>
            <target state="new">Suppose you want to report the duration of your login process:</target>
          </trans-unit>
          <trans-unit id="148" xml:space="preserve">
            <source>Report Errors during a Job</source>
            <target state="new">Report Errors during a Job</target>
          </trans-unit>
          <trans-unit id="149" xml:space="preserve">
            <source>Errors can be related to a running job instead of being related to the current user session.</source>
            <target state="new">Errors can be related to a running job instead of being related to the current user session.</target>
          </trans-unit>
          <trans-unit id="150" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Example:<ept id="1">&lt;/strong&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Example:<ept id="1">&lt;/strong&gt;</ept></target>
          </trans-unit>
          <trans-unit id="151" xml:space="preserve">
            <source>Suppose you want to report an error during you login process:</source>
            <target state="new">Suppose you want to report an error during you login process:</target>
          </trans-unit>
          <trans-unit id="152" xml:space="preserve">
            <source>[...]</source>
            <target state="new">[...]</target>
          </trans-unit>
          <trans-unit id="153" xml:space="preserve">
            <source>public void signIn(Context context, ...) {</source>
            <target state="new">public void signIn(Context context, ...) {</target>
          </trans-unit>
          <trans-unit id="154" xml:space="preserve">
            <source>Reporting Events during a job</source>
            <target state="new">Reporting Events during a job</target>
          </trans-unit>
          <trans-unit id="155" xml:space="preserve">
            <source>Events can be related to a running job instead of being related to the current user session.</source>
            <target state="new">Events can be related to a running job instead of being related to the current user session.</target>
          </trans-unit>
          <trans-unit id="156" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Example:<ept id="1">&lt;/strong&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Example:<ept id="1">&lt;/strong&gt;</ept></target>
          </trans-unit>
          <trans-unit id="157" xml:space="preserve">
            <source>Suppose we have a social network, and we use a job to report the total time during which the user is connected to the server.</source>
            <target state="new">Suppose we have a social network, and we use a job to report the total time during which the user is connected to the server.</target>
          </trans-unit>
          <trans-unit id="158" xml:space="preserve">
            <source>The user can stay connected in background even when he's using another application or when the phone is sleeping, so there is no session.</source>
            <target state="new">The user can stay connected in background even when he's using another application or when the phone is sleeping, so there is no session.</target>
          </trans-unit>
          <trans-unit id="159" xml:space="preserve">
            <source>The user can receive messages from his friends, this is a job event.</source>
            <target state="new">The user can receive messages from his friends, this is a job event.</target>
          </trans-unit>
          <trans-unit id="160" xml:space="preserve">
            <source>Extra parameters</source>
            <target state="new">Extra parameters</target>
          </trans-unit>
          <trans-unit id="161" xml:space="preserve">
            <source>Arbitrary data can be attached to events, errors, activities and jobs.</source>
            <target state="new">Arbitrary data can be attached to events, errors, activities and jobs.</target>
          </trans-unit>
          <trans-unit id="162" xml:space="preserve">
            <source>This data can be structured, it uses Android's Bundle class (actually, it works like extra parameters in Android Intents).</source>
            <target state="new">This data can be structured, it uses Android's Bundle class (actually, it works like extra parameters in Android Intents).</target>
          </trans-unit>
          <trans-unit id="163" xml:space="preserve">
            <source>Note that a Bundle can contain arrays or another Bundle instances.</source>
            <target state="new">Note that a Bundle can contain arrays or another Bundle instances.</target>
          </trans-unit>
          <trans-unit id="164" xml:space="preserve">
            <source>If you put in parcelable or serializable parameters, make sure their <bpt id="2">&lt;code&gt;</bpt>toString()<ept id="2">&lt;/code&gt;</ept> method is implemented to return a human-readable string.</source>
            <target state="new">If you put in parcelable or serializable parameters, make sure their <bpt id="2">&lt;code&gt;</bpt>toString()<ept id="2">&lt;/code&gt;</ept> method is implemented to return a human-readable string.</target>
          </trans-unit>
          <trans-unit id="165" xml:space="preserve">
            <source>Serializable classes that contain non transient fields that are not serializable will make Android crash when you will call <bpt id="2">&lt;code&gt;</bpt>bundle.putSerializable("key",value);<ept id="2">&lt;/code&gt;</ept></source>
            <target state="new">Serializable classes that contain non transient fields that are not serializable will make Android crash when you will call <bpt id="2">&lt;code&gt;</bpt>bundle.putSerializable("key",value);<ept id="2">&lt;/code&gt;</ept></target>
          </trans-unit>
          <trans-unit id="166" xml:space="preserve">
            <source>Sparse arrays in extra parameters are not supported, that is, it won't be serialized as an array.</source>
            <target state="new">Sparse arrays in extra parameters are not supported, that is, it won't be serialized as an array.</target>
          </trans-unit>
          <trans-unit id="167" xml:space="preserve">
            <source>You should convert them into standard arrays before using it in extra parameters.</source>
            <target state="new">You should convert them into standard arrays before using it in extra parameters.</target>
          </trans-unit>
          <trans-unit id="168" xml:space="preserve">
            <source>Example</source>
            <target state="new">Example</target>
          </trans-unit>
          <trans-unit id="169" xml:space="preserve">
            <source>Limits</source>
            <target state="new">Limits</target>
          </trans-unit>
          <trans-unit id="170" xml:space="preserve">
            <source>Keys</source>
            <target state="new">Keys</target>
          </trans-unit>
          <trans-unit id="171" xml:space="preserve">
            <source>Each key in the <bpt id="2">&lt;code&gt;</bpt>Bundle<ept id="2">&lt;/code&gt;</ept> must match the following regular expression:</source>
            <target state="new">Each key in the <bpt id="2">&lt;code&gt;</bpt>Bundle<ept id="2">&lt;/code&gt;</ept> must match the following regular expression:</target>
          </trans-unit>
          <trans-unit id="172" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>^[a-zA-Z][a-zA-Z_0-9]*<ept id="1">&lt;/code&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>^[a-zA-Z][a-zA-Z_0-9]*<ept id="1">&lt;/code&gt;</ept></target>
          </trans-unit>
          <trans-unit id="173" xml:space="preserve">
            <source>It means that keys must start with at least one letter, followed by letters, digits or underscores (\_).</source>
            <target state="new">It means that keys must start with at least one letter, followed by letters, digits or underscores (\_).</target>
          </trans-unit>
          <trans-unit id="174" xml:space="preserve">
            <source>Size</source>
            <target state="new">Size</target>
          </trans-unit>
          <trans-unit id="175" xml:space="preserve">
            <source>Extras are limited to <bpt id="2">&lt;strong&gt;</bpt>1024<ept id="2">&lt;/strong&gt;</ept> characters per call (once encoded in JSON by the Engagement service).</source>
            <target state="new">Extras are limited to <bpt id="2">&lt;strong&gt;</bpt>1024<ept id="2">&lt;/strong&gt;</ept> characters per call (once encoded in JSON by the Engagement service).</target>
          </trans-unit>
          <trans-unit id="176" xml:space="preserve">
            <source>In the previous example, the JSON sent to the server is 58 characters long:</source>
            <target state="new">In the previous example, the JSON sent to the server is 58 characters long:</target>
          </trans-unit>
          <trans-unit id="177" xml:space="preserve">
            <source>Reporting Application Information</source>
            <target state="new">Reporting Application Information</target>
          </trans-unit>
          <trans-unit id="178" xml:space="preserve">
            <source>You can manually report tracking information (or any other application specific information) using the <bpt id="2">&lt;code&gt;</bpt>sendAppInfo()<ept id="2">&lt;/code&gt;</ept> function.</source>
            <target state="new">You can manually report tracking information (or any other application specific information) using the <bpt id="2">&lt;code&gt;</bpt>sendAppInfo()<ept id="2">&lt;/code&gt;</ept> function.</target>
          </trans-unit>
          <trans-unit id="179" xml:space="preserve">
            <source>Note that these information can be sent incrementally: only the latest value for a given key will be kept for a given device.</source>
            <target state="new">Note that these information can be sent incrementally: only the latest value for a given key will be kept for a given device.</target>
          </trans-unit>
          <trans-unit id="180" xml:space="preserve">
            <source>Like event extras, the Bundle class is used to abstract application information, note that arrays or sub-bundles will be treated as flat strings (using JSON serialization).</source>
            <target state="new">Like event extras, the Bundle class is used to abstract application information, note that arrays or sub-bundles will be treated as flat strings (using JSON serialization).</target>
          </trans-unit>
          <trans-unit id="181" xml:space="preserve">
            <source>Example</source>
            <target state="new">Example</target>
          </trans-unit>
          <trans-unit id="182" xml:space="preserve">
            <source>Here is a code sample to send user gender and birthdate:</source>
            <target state="new">Here is a code sample to send user gender and birthdate:</target>
          </trans-unit>
          <trans-unit id="183" xml:space="preserve">
            <source>Limits</source>
            <target state="new">Limits</target>
          </trans-unit>
          <trans-unit id="184" xml:space="preserve">
            <source>Keys</source>
            <target state="new">Keys</target>
          </trans-unit>
          <trans-unit id="185" xml:space="preserve">
            <source>Each key in the <bpt id="2">&lt;code&gt;</bpt>Bundle<ept id="2">&lt;/code&gt;</ept> must match the following regular expression:</source>
            <target state="new">Each key in the <bpt id="2">&lt;code&gt;</bpt>Bundle<ept id="2">&lt;/code&gt;</ept> must match the following regular expression:</target>
          </trans-unit>
          <trans-unit id="186" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>^[a-zA-Z][a-zA-Z_0-9]*<ept id="1">&lt;/code&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>^[a-zA-Z][a-zA-Z_0-9]*<ept id="1">&lt;/code&gt;</ept></target>
          </trans-unit>
          <trans-unit id="187" xml:space="preserve">
            <source>It means that keys must start with at least one letter, followed by letters, digits or underscores (\_).</source>
            <target state="new">It means that keys must start with at least one letter, followed by letters, digits or underscores (\_).</target>
          </trans-unit>
          <trans-unit id="188" xml:space="preserve">
            <source>Size</source>
            <target state="new">Size</target>
          </trans-unit>
          <trans-unit id="189" xml:space="preserve">
            <source>Application information are limited to <bpt id="2">&lt;strong&gt;</bpt>1024<ept id="2">&lt;/strong&gt;</ept> characters per call (once encoded in JSON by the Engagement service).</source>
            <target state="new">Application information are limited to <bpt id="2">&lt;strong&gt;</bpt>1024<ept id="2">&lt;/strong&gt;</ept> characters per call (once encoded in JSON by the Engagement service).</target>
          </trans-unit>
          <trans-unit id="190" xml:space="preserve">
            <source>In the previous example, the JSON sent to the server is 44 characters long:</source>
            <target state="new">In the previous example, the JSON sent to the server is 44 characters long:</target>
          </trans-unit>
        </group>
      </group>
    </body>
  </file>
</xliff>