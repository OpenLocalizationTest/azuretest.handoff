<?xml version="1.0" encoding="utf-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" source-language="en-us" target-language="zh-cn" original="2/18/2016 5:20:32 PM" tool-id="MarkdownTransformer" product-name="N/A" product-version="N/A" build-num="1">
    <header>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f88504db4ee63fa27447c4e9608b0b00e8395708</xliffext:olfilehash>
      <tool tool-id="MarkdownTransformer" tool-name="MarkdownToXliff" tool-version="1.0" tool-company="Microsoft" />
    </header>
    <body>
      <group extype="content">
        <group id="101">
          <trans-unit id="101" xml:space="preserve">
            <source>How to Use the Engagement API on Windows Phone Silverlight</source>
            <target state="new">How to Use the Engagement API on Windows Phone Silverlight</target>
          </trans-unit>
          <trans-unit id="102" xml:space="preserve">
            <source>How to Use the Engagement API on Windows Phone Silverlight</source>
            <target state="new">How to Use the Engagement API on Windows Phone Silverlight</target>
          </trans-unit>
          <trans-unit id="103" xml:space="preserve">
            <source>How to Use the Engagement API on Windows Phone Silverlight</source>
            <target state="new">How to Use the Engagement API on Windows Phone Silverlight</target>
          </trans-unit>
          <trans-unit id="104" xml:space="preserve">
            <source>This document is an add-on to the document <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>How to integrate Mobile Engagement in your Windows Phone Silverlight app<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">This document is an add-on to the document <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>How to integrate Mobile Engagement in your Windows Phone Silverlight app<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="105" xml:space="preserve">
            <source>It provides in depth details about how to use the Engagement API to report your application statistics.</source>
            <target state="new">It provides in depth details about how to use the Engagement API to report your application statistics.</target>
          </trans-unit>
          <trans-unit id="106" xml:space="preserve">
            <source>If you only want Engagement to report your application's sessions, activities, crashes and technical information, then the simplest way is to make all your <bpt id="2">&lt;code&gt;</bpt>PhoneApplicationPage<ept id="2">&lt;/code&gt;</ept> sub-classes inherit from the <bpt id="4">&lt;code&gt;</bpt>EngagementPage<ept id="4">&lt;/code&gt;</ept> class.</source>
            <target state="new">If you only want Engagement to report your application's sessions, activities, crashes and technical information, then the simplest way is to make all your <bpt id="2">&lt;code&gt;</bpt>PhoneApplicationPage<ept id="2">&lt;/code&gt;</ept> sub-classes inherit from the <bpt id="4">&lt;code&gt;</bpt>EngagementPage<ept id="4">&lt;/code&gt;</ept> class.</target>
          </trans-unit>
          <trans-unit id="107" xml:space="preserve">
            <source>If you want to do more, for example if you need to report application specific events, errors and jobs, or if you have to report your application's activities in a different way than the one implemented in the <bpt id="2">&lt;code&gt;</bpt>EngagementPage<ept id="2">&lt;/code&gt;</ept> classes, then you need to use the Engagement API.</source>
            <target state="new">If you want to do more, for example if you need to report application specific events, errors and jobs, or if you have to report your application's activities in a different way than the one implemented in the <bpt id="2">&lt;code&gt;</bpt>EngagementPage<ept id="2">&lt;/code&gt;</ept> classes, then you need to use the Engagement API.</target>
          </trans-unit>
          <trans-unit id="108" xml:space="preserve">
            <source>The Engagement API is provided by the <bpt id="2">&lt;code&gt;</bpt>EngagementAgent<ept id="2">&lt;/code&gt;</ept> class.</source>
            <target state="new">The Engagement API is provided by the <bpt id="2">&lt;code&gt;</bpt>EngagementAgent<ept id="2">&lt;/code&gt;</ept> class.</target>
          </trans-unit>
          <trans-unit id="109" xml:space="preserve">
            <source>You can access to those methods through <bpt id="2">&lt;code&gt;</bpt>EngagementAgent.Instance<ept id="2">&lt;/code&gt;</ept>.</source>
            <target state="new">You can access to those methods through <bpt id="2">&lt;code&gt;</bpt>EngagementAgent.Instance<ept id="2">&lt;/code&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="110" xml:space="preserve">
            <source>Even if the agent module has not been initialized, each call to the API is deferred, and will be executed again when the agent is available.</source>
            <target state="new">Even if the agent module has not been initialized, each call to the API is deferred, and will be executed again when the agent is available.</target>
          </trans-unit>
          <trans-unit id="111" xml:space="preserve">
            <source>Engagement concepts</source>
            <target state="new">Engagement concepts</target>
          </trans-unit>
          <trans-unit id="112" xml:space="preserve">
            <source>The following parts refine the Mobile Engagement Concepts for the Windows Phone platform.</source>
            <target state="new">The following parts refine the Mobile Engagement Concepts for the Windows Phone platform.</target>
          </trans-unit>
          <trans-unit id="113" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>Session<ept id="1">&lt;/code&gt;</ept> and <bpt id="3">&lt;code&gt;</bpt>Activity<ept id="3">&lt;/code&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>Session<ept id="1">&lt;/code&gt;</ept> and <bpt id="3">&lt;code&gt;</bpt>Activity<ept id="3">&lt;/code&gt;</ept></target>
          </trans-unit>
          <trans-unit id="114" xml:space="preserve">
            <source>An <bpt id="2">&lt;em&gt;</bpt>activity<ept id="2">&lt;/em&gt;</ept> is usually associated with one page of the application, that is to say the <bpt id="4">&lt;em&gt;</bpt>activity<ept id="4">&lt;/em&gt;</ept> starts when the page is displayed and stops when the page is closed: this is the case when the Engagement SDK is integrated by using the <bpt id="6">&lt;code&gt;</bpt>EngagementPage<ept id="6">&lt;/code&gt;</ept> class.</source>
            <target state="new">An <bpt id="2">&lt;em&gt;</bpt>activity<ept id="2">&lt;/em&gt;</ept> is usually associated with one page of the application, that is to say the <bpt id="4">&lt;em&gt;</bpt>activity<ept id="4">&lt;/em&gt;</ept> starts when the page is displayed and stops when the page is closed: this is the case when the Engagement SDK is integrated by using the <bpt id="6">&lt;code&gt;</bpt>EngagementPage<ept id="6">&lt;/code&gt;</ept> class.</target>
          </trans-unit>
          <trans-unit id="115" xml:space="preserve">
            <source>But <bpt id="2">&lt;em&gt;</bpt>activities<ept id="2">&lt;/em&gt;</ept> can also be controlled manually by using the Engagement API.</source>
            <target state="new">But <bpt id="2">&lt;em&gt;</bpt>activities<ept id="2">&lt;/em&gt;</ept> can also be controlled manually by using the Engagement API.</target>
          </trans-unit>
          <trans-unit id="116" xml:space="preserve">
            <source>This allows to split a given page in several sub parts to get more details about the usage of this page (for example to known how often and how long dialogs are used inside this page).</source>
            <target state="new">This allows to split a given page in several sub parts to get more details about the usage of this page (for example to known how often and how long dialogs are used inside this page).</target>
          </trans-unit>
          <trans-unit id="117" xml:space="preserve">
            <source>Reporting Activities</source>
            <target state="new">Reporting Activities</target>
          </trans-unit>
          <trans-unit id="118" xml:space="preserve">
            <source>User starts a new Activity</source>
            <target state="new">User starts a new Activity</target>
          </trans-unit>
          <trans-unit id="119" xml:space="preserve">
            <source>Reference</source>
            <target state="new">Reference</target>
          </trans-unit>
          <trans-unit id="120" xml:space="preserve">
            <source>You need to call <bpt id="2">&lt;code&gt;</bpt>StartActivity()<ept id="2">&lt;/code&gt;</ept> each time the user activity changes.</source>
            <target state="new">You need to call <bpt id="2">&lt;code&gt;</bpt>StartActivity()<ept id="2">&lt;/code&gt;</ept> each time the user activity changes.</target>
          </trans-unit>
          <trans-unit id="121" xml:space="preserve">
            <source>The first call to this function starts a new user session.</source>
            <target state="new">The first call to this function starts a new user session.</target>
          </trans-unit>
          <trans-unit id="122" xml:space="preserve">
            <source>The SDK automatically call the EndActivity method when the application is closed.</source>
            <target state="new">The SDK automatically call the EndActivity method when the application is closed.</target>
          </trans-unit>
          <trans-unit id="123" xml:space="preserve">
            <source>Thus, it is HIGHLY recommended to call the StartActivity method whenever the activity of the user change, and to NEVER call the EndActivity method, since calling this method forces the current session to be ended.</source>
            <target state="new">Thus, it is HIGHLY recommended to call the StartActivity method whenever the activity of the user change, and to NEVER call the EndActivity method, since calling this method forces the current session to be ended.</target>
          </trans-unit>
          <trans-unit id="124" xml:space="preserve">
            <source>Example</source>
            <target state="new">Example</target>
          </trans-unit>
          <trans-unit id="125" xml:space="preserve">
            <source>User ends his current Activity</source>
            <target state="new">User ends his current Activity</target>
          </trans-unit>
          <trans-unit id="126" xml:space="preserve">
            <source>Reference</source>
            <target state="new">Reference</target>
          </trans-unit>
          <trans-unit id="127" xml:space="preserve">
            <source>You need to call <bpt id="2">&lt;code&gt;</bpt>EndActivity()<ept id="2">&lt;/code&gt;</ept> at least once when the user finishes his last activity.</source>
            <target state="new">You need to call <bpt id="2">&lt;code&gt;</bpt>EndActivity()<ept id="2">&lt;/code&gt;</ept> at least once when the user finishes his last activity.</target>
          </trans-unit>
          <trans-unit id="128" xml:space="preserve">
            <source>This informs the Engagement SDK that the user is currently idle, and that the user session need to be closed once the session timeout will expire (if you call <bpt id="2">&lt;code&gt;</bpt>StartActivity()<ept id="2">&lt;/code&gt;</ept> before the session timeout expires, the session is simply continued).</source>
            <target state="new">This informs the Engagement SDK that the user is currently idle, and that the user session need to be closed once the session timeout will expire (if you call <bpt id="2">&lt;code&gt;</bpt>StartActivity()<ept id="2">&lt;/code&gt;</ept> before the session timeout expires, the session is simply continued).</target>
          </trans-unit>
          <trans-unit id="129" xml:space="preserve">
            <source>Example</source>
            <target state="new">Example</target>
          </trans-unit>
          <trans-unit id="130" xml:space="preserve">
            <source>Reporting Jobs</source>
            <target state="new">Reporting Jobs</target>
          </trans-unit>
          <trans-unit id="131" xml:space="preserve">
            <source>Start a job</source>
            <target state="new">Start a job</target>
          </trans-unit>
          <trans-unit id="132" xml:space="preserve">
            <source>Reference</source>
            <target state="new">Reference</target>
          </trans-unit>
          <trans-unit id="133" xml:space="preserve">
            <source>You can use the job to track certains tasks over a period of time.</source>
            <target state="new">You can use the job to track certains tasks over a period of time.</target>
          </trans-unit>
          <trans-unit id="134" xml:space="preserve">
            <source>Example</source>
            <target state="new">Example</target>
          </trans-unit>
          <trans-unit id="135" xml:space="preserve">
            <source>End a job</source>
            <target state="new">End a job</target>
          </trans-unit>
          <trans-unit id="136" xml:space="preserve">
            <source>Reference</source>
            <target state="new">Reference</target>
          </trans-unit>
          <trans-unit id="137" xml:space="preserve">
            <source>As soon as a task tracked by a job has been terminated, you should call the EndJob method for this job, by supplying the job name.</source>
            <target state="new">As soon as a task tracked by a job has been terminated, you should call the EndJob method for this job, by supplying the job name.</target>
          </trans-unit>
          <trans-unit id="138" xml:space="preserve">
            <source>Example</source>
            <target state="new">Example</target>
          </trans-unit>
          <trans-unit id="139" xml:space="preserve">
            <source>Reporting Events</source>
            <target state="new">Reporting Events</target>
          </trans-unit>
          <trans-unit id="140" xml:space="preserve">
            <source>There is three types of events :</source>
            <target state="new">There is three types of events :</target>
          </trans-unit>
          <trans-unit id="141" xml:space="preserve">
            <source>Standalone events</source>
            <target state="new">Standalone events</target>
          </trans-unit>
          <trans-unit id="142" xml:space="preserve">
            <source>Session events</source>
            <target state="new">Session events</target>
          </trans-unit>
          <trans-unit id="143" xml:space="preserve">
            <source>Job events</source>
            <target state="new">Job events</target>
          </trans-unit>
          <trans-unit id="144" xml:space="preserve">
            <source>Standalone Events</source>
            <target state="new">Standalone Events</target>
          </trans-unit>
          <trans-unit id="145" xml:space="preserve">
            <source>Reference</source>
            <target state="new">Reference</target>
          </trans-unit>
          <trans-unit id="146" xml:space="preserve">
            <source>Standalone events can occur outside of the context of a session.</source>
            <target state="new">Standalone events can occur outside of the context of a session.</target>
          </trans-unit>
          <trans-unit id="147" xml:space="preserve">
            <source>Example</source>
            <target state="new">Example</target>
          </trans-unit>
          <trans-unit id="148" xml:space="preserve">
            <source>Session events</source>
            <target state="new">Session events</target>
          </trans-unit>
          <trans-unit id="149" xml:space="preserve">
            <source>Reference</source>
            <target state="new">Reference</target>
          </trans-unit>
          <trans-unit id="150" xml:space="preserve">
            <source>Session events are usually used to report the actions performed by a user during his session.</source>
            <target state="new">Session events are usually used to report the actions performed by a user during his session.</target>
          </trans-unit>
          <trans-unit id="151" xml:space="preserve">
            <source>Example</source>
            <target state="new">Example</target>
          </trans-unit>
          <trans-unit id="152" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Without data :<ept id="1">&lt;/strong&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Without data :<ept id="1">&lt;/strong&gt;</ept></target>
          </trans-unit>
          <trans-unit id="153" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>With data :<ept id="1">&lt;/strong&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>With data :<ept id="1">&lt;/strong&gt;</ept></target>
          </trans-unit>
          <trans-unit id="154" xml:space="preserve">
            <source>Job Events</source>
            <target state="new">Job Events</target>
          </trans-unit>
          <trans-unit id="155" xml:space="preserve">
            <source>Reference</source>
            <target state="new">Reference</target>
          </trans-unit>
          <trans-unit id="156" xml:space="preserve">
            <source>Job events are usually used to report the actions performed by a user during a Job.</source>
            <target state="new">Job events are usually used to report the actions performed by a user during a Job.</target>
          </trans-unit>
          <trans-unit id="157" xml:space="preserve">
            <source>Example</source>
            <target state="new">Example</target>
          </trans-unit>
          <trans-unit id="158" xml:space="preserve">
            <source>Reporting Errors</source>
            <target state="new">Reporting Errors</target>
          </trans-unit>
          <trans-unit id="159" xml:space="preserve">
            <source>There is three types of errors :</source>
            <target state="new">There is three types of errors :</target>
          </trans-unit>
          <trans-unit id="160" xml:space="preserve">
            <source>Standalone errors</source>
            <target state="new">Standalone errors</target>
          </trans-unit>
          <trans-unit id="161" xml:space="preserve">
            <source>Session errors</source>
            <target state="new">Session errors</target>
          </trans-unit>
          <trans-unit id="162" xml:space="preserve">
            <source>Job errors</source>
            <target state="new">Job errors</target>
          </trans-unit>
          <trans-unit id="163" xml:space="preserve">
            <source>Standalone errors</source>
            <target state="new">Standalone errors</target>
          </trans-unit>
          <trans-unit id="164" xml:space="preserve">
            <source>Reference</source>
            <target state="new">Reference</target>
          </trans-unit>
          <trans-unit id="165" xml:space="preserve">
            <source>Contrary to session errors, standalone errors can occur outside of the context of a session.</source>
            <target state="new">Contrary to session errors, standalone errors can occur outside of the context of a session.</target>
          </trans-unit>
          <trans-unit id="166" xml:space="preserve">
            <source>Example</source>
            <target state="new">Example</target>
          </trans-unit>
          <trans-unit id="167" xml:space="preserve">
            <source>Session errors</source>
            <target state="new">Session errors</target>
          </trans-unit>
          <trans-unit id="168" xml:space="preserve">
            <source>Reference</source>
            <target state="new">Reference</target>
          </trans-unit>
          <trans-unit id="169" xml:space="preserve">
            <source>Session errors are usually used to report the errors impacting the user during his session.</source>
            <target state="new">Session errors are usually used to report the errors impacting the user during his session.</target>
          </trans-unit>
          <trans-unit id="170" xml:space="preserve">
            <source>Example</source>
            <target state="new">Example</target>
          </trans-unit>
          <trans-unit id="171" xml:space="preserve">
            <source>Job Errors</source>
            <target state="new">Job Errors</target>
          </trans-unit>
          <trans-unit id="172" xml:space="preserve">
            <source>Reference</source>
            <target state="new">Reference</target>
          </trans-unit>
          <trans-unit id="173" xml:space="preserve">
            <source>Errors can be related to a running job instead of being related to the current user session.</source>
            <target state="new">Errors can be related to a running job instead of being related to the current user session.</target>
          </trans-unit>
          <trans-unit id="174" xml:space="preserve">
            <source>Example</source>
            <target state="new">Example</target>
          </trans-unit>
          <trans-unit id="175" xml:space="preserve">
            <source>Reporting Crashes</source>
            <target state="new">Reporting Crashes</target>
          </trans-unit>
          <trans-unit id="176" xml:space="preserve">
            <source>The agent provides two methods to deal with crashes.</source>
            <target state="new">The agent provides two methods to deal with crashes.</target>
          </trans-unit>
          <trans-unit id="177" xml:space="preserve">
            <source>Send an exception</source>
            <target state="new">Send an exception</target>
          </trans-unit>
          <trans-unit id="178" xml:space="preserve">
            <source>Reference</source>
            <target state="new">Reference</target>
          </trans-unit>
          <trans-unit id="179" xml:space="preserve">
            <source>Example</source>
            <target state="new">Example</target>
          </trans-unit>
          <trans-unit id="180" xml:space="preserve">
            <source>You can send an exception at any time by calling :</source>
            <target state="new">You can send an exception at any time by calling :</target>
          </trans-unit>
          <trans-unit id="181" xml:space="preserve">
            <source>You can also use an optional parameter to terminate the engagement session at the same time than sending the crash.</source>
            <target state="new">You can also use an optional parameter to terminate the engagement session at the same time than sending the crash.</target>
          </trans-unit>
          <trans-unit id="182" xml:space="preserve">
            <source>To do so, call :</source>
            <target state="new">To do so, call :</target>
          </trans-unit>
          <trans-unit id="183" xml:space="preserve">
            <source>If you do that, the session and jobs will be closed just after sending the crash.</source>
            <target state="new">If you do that, the session and jobs will be closed just after sending the crash.</target>
          </trans-unit>
          <trans-unit id="184" xml:space="preserve">
            <source>Send an unhandled exception</source>
            <target state="new">Send an unhandled exception</target>
          </trans-unit>
          <trans-unit id="185" xml:space="preserve">
            <source>Reference</source>
            <target state="new">Reference</target>
          </trans-unit>
          <trans-unit id="186" xml:space="preserve">
            <source>Engagement also provides a method to send unhandled exceptions.</source>
            <target state="new">Engagement also provides a method to send unhandled exceptions.</target>
          </trans-unit>
          <trans-unit id="187" xml:space="preserve">
            <source>This is especially useful when used inside the silverlight UnhandledException event handler.</source>
            <target state="new">This is especially useful when used inside the silverlight UnhandledException event handler.</target>
          </trans-unit>
          <trans-unit id="188" xml:space="preserve">
            <source>This method will <bpt id="2">&lt;strong&gt;</bpt>ALWAYS<ept id="2">&lt;/strong&gt;</ept> terminate the engagement session and jobs after being called.</source>
            <target state="new">This method will <bpt id="2">&lt;strong&gt;</bpt>ALWAYS<ept id="2">&lt;/strong&gt;</ept> terminate the engagement session and jobs after being called.</target>
          </trans-unit>
          <trans-unit id="189" xml:space="preserve">
            <source>Example</source>
            <target state="new">Example</target>
          </trans-unit>
          <trans-unit id="190" xml:space="preserve">
            <source>You can use it to implement your own UnhandledException handler (especially if you have disabled the automatic crash reporting feature of Engagement).</source>
            <target state="new">You can use it to implement your own UnhandledException handler (especially if you have disabled the automatic crash reporting feature of Engagement).</target>
          </trans-unit>
          <trans-unit id="191" xml:space="preserve">
            <source>For example, in the <bpt id="2">&lt;code&gt;</bpt>Application_UnhandledException<ept id="2">&lt;/code&gt;</ept> method of the <bpt id="4">&lt;code&gt;</bpt>App.xaml.cs<ept id="4">&lt;/code&gt;</ept> file :</source>
            <target state="new">For example, in the <bpt id="2">&lt;code&gt;</bpt>Application_UnhandledException<ept id="2">&lt;/code&gt;</ept> method of the <bpt id="4">&lt;code&gt;</bpt>App.xaml.cs<ept id="4">&lt;/code&gt;</ept> file :</target>
          </trans-unit>
          <trans-unit id="192" xml:space="preserve">
            <source>OnActivated</source>
            <target state="new">OnActivated</target>
          </trans-unit>
          <trans-unit id="193" xml:space="preserve">
            <source>Reference</source>
            <target state="new">Reference</target>
          </trans-unit>
          <trans-unit id="194" xml:space="preserve">
            <source>When the user navigates forward, away from an application, after the Deactivated event is raised, the operating system will attempt to put the application into a dormant state.</source>
            <target state="new">When the user navigates forward, away from an application, after the Deactivated event is raised, the operating system will attempt to put the application into a dormant state.</target>
          </trans-unit>
          <trans-unit id="195" xml:space="preserve">
            <source>Then, the application is Tombstoning.</source>
            <target state="new">Then, the application is Tombstoning.</target>
          </trans-unit>
          <trans-unit id="196" xml:space="preserve">
            <source>In this process an application is terminated but some data about the state of the application and the individual pages within the application is preserved.</source>
            <target state="new">In this process an application is terminated but some data about the state of the application and the individual pages within the application is preserved.</target>
          </trans-unit>
          <trans-unit id="197" xml:space="preserve">
            <source>You have to insert <bpt id="2">&lt;code&gt;</bpt>EngagementAgent.Instance.OnActivated(e)<ept id="2">&lt;/code&gt;</ept> in the <bpt id="4">&lt;code&gt;</bpt>Application_Activated<ept id="4">&lt;/code&gt;</ept> method from the App.xaml.cs file to reset the Engagement Agent when the application has been Tombstoned.</source>
            <target state="new">You have to insert <bpt id="2">&lt;code&gt;</bpt>EngagementAgent.Instance.OnActivated(e)<ept id="2">&lt;/code&gt;</ept> in the <bpt id="4">&lt;code&gt;</bpt>Application_Activated<ept id="4">&lt;/code&gt;</ept> method from the App.xaml.cs file to reset the Engagement Agent when the application has been Tombstoned.</target>
          </trans-unit>
          <trans-unit id="198" xml:space="preserve">
            <source>Example</source>
            <target state="new">Example</target>
          </trans-unit>
          <trans-unit id="199" xml:space="preserve">
            <source>Device Id</source>
            <target state="new">Device Id</target>
          </trans-unit>
          <trans-unit id="200" xml:space="preserve">
            <source>You can get the engagement device id by calling this method.</source>
            <target state="new">You can get the engagement device id by calling this method.</target>
          </trans-unit>
          <trans-unit id="201" xml:space="preserve">
            <source>Extras parameters</source>
            <target state="new">Extras parameters</target>
          </trans-unit>
          <trans-unit id="202" xml:space="preserve">
            <source>Arbitrary data can be attached to an event, an error, an activity or a job.</source>
            <target state="new">Arbitrary data can be attached to an event, an error, an activity or a job.</target>
          </trans-unit>
          <trans-unit id="203" xml:space="preserve">
            <source>These data can be structured using a dictionary.</source>
            <target state="new">These data can be structured using a dictionary.</target>
          </trans-unit>
          <trans-unit id="204" xml:space="preserve">
            <source>Keys and values can be of any type.</source>
            <target state="new">Keys and values can be of any type.</target>
          </trans-unit>
          <trans-unit id="205" xml:space="preserve">
            <source>Extras data are serialized so if you want to insert your own type in extras you have to add a data contract for this type.</source>
            <target state="new">Extras data are serialized so if you want to insert your own type in extras you have to add a data contract for this type.</target>
          </trans-unit>
          <trans-unit id="206" xml:space="preserve">
            <source>Example</source>
            <target state="new">Example</target>
          </trans-unit>
          <trans-unit id="207" xml:space="preserve">
            <source>We create a new class "Person".</source>
            <target state="new">We create a new class "Person".</target>
          </trans-unit>
          <trans-unit id="208" xml:space="preserve">
            <source>Then, we will add a <bpt id="2">&lt;code&gt;</bpt>Person<ept id="2">&lt;/code&gt;</ept> instance to an extra.</source>
            <target state="new">Then, we will add a <bpt id="2">&lt;code&gt;</bpt>Person<ept id="2">&lt;/code&gt;</ept> instance to an extra.</target>
          </trans-unit>
          <trans-unit id="209" xml:space="preserve">
            <source>If you put other types of objects, make sure their ToString() method is implemented to return a human readable string.</source>
            <target state="new">If you put other types of objects, make sure their ToString() method is implemented to return a human readable string.</target>
          </trans-unit>
          <trans-unit id="210" xml:space="preserve">
            <source>Limits</source>
            <target state="new">Limits</target>
          </trans-unit>
          <trans-unit id="211" xml:space="preserve">
            <source>Keys</source>
            <target state="new">Keys</target>
          </trans-unit>
          <trans-unit id="212" xml:space="preserve">
            <source>Each key in the object must match the following regular expression:</source>
            <target state="new">Each key in the object must match the following regular expression:</target>
          </trans-unit>
          <trans-unit id="213" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>^[a-zA-Z][a-zA-Z_0-9]*$<ept id="1">&lt;/code&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>^[a-zA-Z][a-zA-Z_0-9]*$<ept id="1">&lt;/code&gt;</ept></target>
          </trans-unit>
          <trans-unit id="214" xml:space="preserve">
            <source>It means that keys must start with at least one letter, followed by letters, digits or underscores (\_).</source>
            <target state="new">It means that keys must start with at least one letter, followed by letters, digits or underscores (\_).</target>
          </trans-unit>
          <trans-unit id="215" xml:space="preserve">
            <source>Size</source>
            <target state="new">Size</target>
          </trans-unit>
          <trans-unit id="216" xml:space="preserve">
            <source>Extras are limited to <bpt id="2">&lt;strong&gt;</bpt>1024<ept id="2">&lt;/strong&gt;</ept> characters per call.</source>
            <target state="new">Extras are limited to <bpt id="2">&lt;strong&gt;</bpt>1024<ept id="2">&lt;/strong&gt;</ept> characters per call.</target>
          </trans-unit>
          <trans-unit id="217" xml:space="preserve">
            <source>Reporting Application Information</source>
            <target state="new">Reporting Application Information</target>
          </trans-unit>
          <trans-unit id="218" xml:space="preserve">
            <source>Reference</source>
            <target state="new">Reference</target>
          </trans-unit>
          <trans-unit id="219" xml:space="preserve">
            <source>You can manually report tracking information (or any other application specific information) using the SendAppInfo() function.</source>
            <target state="new">You can manually report tracking information (or any other application specific information) using the SendAppInfo() function.</target>
          </trans-unit>
          <trans-unit id="220" xml:space="preserve">
            <source>Note that these information can be sent incrementally: only the latest value for a given key will be kept for a given device. Like event extras, use a Dictionary\<bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept> to attach informations.</source>
            <target state="new">Note that these information can be sent incrementally: only the latest value for a given key will be kept for a given device. Like event extras, use a Dictionary\<bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept> to attach informations.</target>
          </trans-unit>
          <trans-unit id="221" xml:space="preserve">
            <source>Example</source>
            <target state="new">Example</target>
          </trans-unit>
          <trans-unit id="222" xml:space="preserve">
            <source>Limits</source>
            <target state="new">Limits</target>
          </trans-unit>
          <trans-unit id="223" xml:space="preserve">
            <source>Keys</source>
            <target state="new">Keys</target>
          </trans-unit>
          <trans-unit id="224" xml:space="preserve">
            <source>Each key in the object must match the following regular expression:</source>
            <target state="new">Each key in the object must match the following regular expression:</target>
          </trans-unit>
          <trans-unit id="225" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>^[a-zA-Z][a-zA-Z_0-9]*$<ept id="1">&lt;/code&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>^[a-zA-Z][a-zA-Z_0-9]*$<ept id="1">&lt;/code&gt;</ept></target>
          </trans-unit>
          <trans-unit id="226" xml:space="preserve">
            <source>It means that keys must start with at least one letter, followed by letters, digits or underscores (\_).</source>
            <target state="new">It means that keys must start with at least one letter, followed by letters, digits or underscores (\_).</target>
          </trans-unit>
          <trans-unit id="227" xml:space="preserve">
            <source>Size</source>
            <target state="new">Size</target>
          </trans-unit>
          <trans-unit id="228" xml:space="preserve">
            <source>Application information are limited to <bpt id="2">&lt;strong&gt;</bpt>1024<ept id="2">&lt;/strong&gt;</ept> characters per call.</source>
            <target state="new">Application information are limited to <bpt id="2">&lt;strong&gt;</bpt>1024<ept id="2">&lt;/strong&gt;</ept> characters per call.</target>
          </trans-unit>
          <trans-unit id="229" xml:space="preserve">
            <source>In the previous example, the JSON sent to the server is 44 characters long:</source>
            <target state="new">In the previous example, the JSON sent to the server is 44 characters long:</target>
          </trans-unit>
        </group>
      </group>
    </body>
  </file>
</xliff>