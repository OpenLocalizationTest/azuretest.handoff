<?xml version="1.0" encoding="utf-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" source-language="en-us" target-language="zh-cn" original="2/18/2016 5:22:01 PM" tool-id="MarkdownTransformer" product-name="N/A" product-version="N/A" build-num="1">
    <header>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">df303031b65d948e3d73f6062e677043313814e2</xliffext:olfilehash>
      <tool tool-id="MarkdownTransformer" tool-name="MarkdownToXliff" tool-version="1.0" tool-company="Microsoft" />
    </header>
    <body>
      <group extype="content">
        <group id="101">
          <trans-unit id="101" xml:space="preserve">
            <source>How to use the Xamarin Component client | Microsoft Azure</source>
            <target state="new">How to use the Xamarin Component client | Microsoft Azure</target>
          </trans-unit>
          <trans-unit id="102" xml:space="preserve">
            <source>Learn how to use the Xamarin Component client for Azure Mobile Services.</source>
            <target state="new">Learn how to use the Xamarin Component client for Azure Mobile Services.</target>
          </trans-unit>
          <trans-unit id="103" xml:space="preserve">
            <source>How to use the Xamarin Component client for Azure Mobile Services</source>
            <target state="new">How to use the Xamarin Component client for Azure Mobile Services</target>
          </trans-unit>
          <trans-unit id="104" xml:space="preserve">
            <source><ph id="1">&lt;token href="../../includes/mobile-services-selector-client-library.md"/&gt;</ph></source>
            <target state="new"><ph id="1">&lt;token href="../../includes/mobile-services-selector-client-library.md"/&gt;</ph></target>
          </trans-unit>
          <trans-unit id="105" xml:space="preserve">
            <source>This guide shows you how to perform common scenarios using the Xamarin Component client for Azure Mobile Services, in Xamarin apps for iOS and Android.</source>
            <target state="new">This guide shows you how to perform common scenarios using the Xamarin Component client for Azure Mobile Services, in Xamarin apps for iOS and Android.</target>
          </trans-unit>
          <trans-unit id="106" xml:space="preserve">
            <source>The scenarios covered include querying for data, inserting, updating, and deleting data, authenticating users, and handling errors.</source>
            <target state="new">The scenarios covered include querying for data, inserting, updating, and deleting data, authenticating users, and handling errors.</target>
          </trans-unit>
          <trans-unit id="107" xml:space="preserve">
            <source>If you are new to Mobile Services, you should consider first completing the "Mobile Services quickstart" tutorial (<bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Xamarin.iOS[xamarin.ios quickstart tutorial]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>/<bpt id="4CapsExtId1">&lt;link&gt;</bpt><bpt id="4CapsExtId2">&lt;linkText&gt;</bpt>Xamarin.Android[xamarin.android quickstart tutorial]<ept id="4CapsExtId2">&lt;/linkText&gt;</ept><bpt id="4CapsExtId3">&lt;title&gt;</bpt><ept id="4CapsExtId3">&lt;/title&gt;</ept><ept id="4CapsExtId1">&lt;/link&gt;</ept>) and the "Getting Started with Data in .NET" tutorial (<bpt id="6CapsExtId1">&lt;link&gt;</bpt><bpt id="6CapsExtId2">&lt;linkText&gt;</bpt>Xamarin.iOS[xamarin.ios data tutorial]<ept id="6CapsExtId2">&lt;/linkText&gt;</ept><bpt id="6CapsExtId3">&lt;title&gt;</bpt><ept id="6CapsExtId3">&lt;/title&gt;</ept><ept id="6CapsExtId1">&lt;/link&gt;</ept>/<bpt id="8CapsExtId1">&lt;link&gt;</bpt><bpt id="8CapsExtId2">&lt;linkText&gt;</bpt>Xamarin.Android[xamarin.android data tutorial]<ept id="8CapsExtId2">&lt;/linkText&gt;</ept><bpt id="8CapsExtId3">&lt;title&gt;</bpt><ept id="8CapsExtId3">&lt;/title&gt;</ept><ept id="8CapsExtId1">&lt;/link&gt;</ept>).</source>
            <target state="new">If you are new to Mobile Services, you should consider first completing the "Mobile Services quickstart" tutorial (<bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Xamarin.iOS[xamarin.ios quickstart tutorial]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>/<bpt id="4CapsExtId1">&lt;link&gt;</bpt><bpt id="4CapsExtId2">&lt;linkText&gt;</bpt>Xamarin.Android[xamarin.android quickstart tutorial]<ept id="4CapsExtId2">&lt;/linkText&gt;</ept><bpt id="4CapsExtId3">&lt;title&gt;</bpt><ept id="4CapsExtId3">&lt;/title&gt;</ept><ept id="4CapsExtId1">&lt;/link&gt;</ept>) and the "Getting Started with Data in .NET" tutorial (<bpt id="6CapsExtId1">&lt;link&gt;</bpt><bpt id="6CapsExtId2">&lt;linkText&gt;</bpt>Xamarin.iOS[xamarin.ios data tutorial]<ept id="6CapsExtId2">&lt;/linkText&gt;</ept><bpt id="6CapsExtId3">&lt;title&gt;</bpt><ept id="6CapsExtId3">&lt;/title&gt;</ept><ept id="6CapsExtId1">&lt;/link&gt;</ept>/<bpt id="8CapsExtId1">&lt;link&gt;</bpt><bpt id="8CapsExtId2">&lt;linkText&gt;</bpt>Xamarin.Android[xamarin.android data tutorial]<ept id="8CapsExtId2">&lt;/linkText&gt;</ept><bpt id="8CapsExtId3">&lt;title&gt;</bpt><ept id="8CapsExtId3">&lt;/title&gt;</ept><ept id="8CapsExtId1">&lt;/link&gt;</ept>).</target>
          </trans-unit>
          <trans-unit id="108" xml:space="preserve">
            <source>The quickstart tutorial requires <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Xamarin[xamarin download]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> the [Mobile Services SDK] and helps you configure your account and create your first mobile service.</source>
            <target state="new">The quickstart tutorial requires <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Xamarin[xamarin download]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> the [Mobile Services SDK] and helps you configure your account and create your first mobile service.</target>
          </trans-unit>
          <trans-unit id="109" xml:space="preserve">
            <source><ph id="1">&lt;token href="../../includes/mobile-services-concepts.md"/&gt;</ph></source>
            <target state="new"><ph id="1">&lt;token href="../../includes/mobile-services-concepts.md"/&gt;</ph></target>
          </trans-unit>
          <trans-unit id="110" xml:space="preserve">
            <source><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>Setup and Prerequisites</source>
            <target state="new"><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>Setup and Prerequisites</target>
          </trans-unit>
          <trans-unit id="111" xml:space="preserve">
            <source>We assume that you have created a mobile service and a table.</source>
            <target state="new">We assume that you have created a mobile service and a table.</target>
          </trans-unit>
          <trans-unit id="112" xml:space="preserve">
            <source>For more information see <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Create a table<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">For more information see <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Create a table<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="113" xml:space="preserve">
            <source>In the code used in this topic, the table is named <bpt id="2">&lt;code&gt;</bpt>TodoItem<ept id="2">&lt;/code&gt;</ept> and it will have the following columns: <bpt id="4">&lt;code&gt;</bpt>id<ept id="4">&lt;/code&gt;</ept>, <bpt id="6">&lt;code&gt;</bpt>Text<ept id="6">&lt;/code&gt;</ept>, and <bpt id="8">&lt;code&gt;</bpt>Complete<ept id="8">&lt;/code&gt;</ept>.</source>
            <target state="new">In the code used in this topic, the table is named <bpt id="2">&lt;code&gt;</bpt>TodoItem<ept id="2">&lt;/code&gt;</ept> and it will have the following columns: <bpt id="4">&lt;code&gt;</bpt>id<ept id="4">&lt;/code&gt;</ept>, <bpt id="6">&lt;code&gt;</bpt>Text<ept id="6">&lt;/code&gt;</ept>, and <bpt id="8">&lt;code&gt;</bpt>Complete<ept id="8">&lt;/code&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="114" xml:space="preserve">
            <source>The corresponding typed client-side .NET type is the following:</source>
            <target state="new">The corresponding typed client-side .NET type is the following:</target>
          </trans-unit>
          <trans-unit id="115" xml:space="preserve">
            <source>When dynamic schema is enabled, Azure Mobile Services automatically generates new columns based on the object in insert or update requests.</source>
            <target state="new">When dynamic schema is enabled, Azure Mobile Services automatically generates new columns based on the object in insert or update requests.</target>
          </trans-unit>
          <trans-unit id="116" xml:space="preserve">
            <source>For more information, see <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Dynamic schema<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">For more information, see <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Dynamic schema<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="117" xml:space="preserve">
            <source><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>How to: Create the Mobile Services client</source>
            <target state="new"><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>How to: Create the Mobile Services client</target>
          </trans-unit>
          <trans-unit id="118" xml:space="preserve">
            <source>The following code creates the <bpt id="2">&lt;code&gt;</bpt>MobileServiceClient<ept id="2">&lt;/code&gt;</ept> object that is used to access your mobile service.</source>
            <target state="new">The following code creates the <bpt id="2">&lt;code&gt;</bpt>MobileServiceClient<ept id="2">&lt;/code&gt;</ept> object that is used to access your mobile service.</target>
          </trans-unit>
          <trans-unit id="119" xml:space="preserve">
            <source>In the code above, replace <bpt id="2">&lt;code&gt;</bpt>AppUrl<ept id="2">&lt;/code&gt;</ept> and <bpt id="4">&lt;code&gt;</bpt>AppKey<ept id="4">&lt;/code&gt;</ept> with the mobile service URL and application key, in that order.</source>
            <target state="new">In the code above, replace <bpt id="2">&lt;code&gt;</bpt>AppUrl<ept id="2">&lt;/code&gt;</ept> and <bpt id="4">&lt;code&gt;</bpt>AppKey<ept id="4">&lt;/code&gt;</ept> with the mobile service URL and application key, in that order.</target>
          </trans-unit>
          <trans-unit id="120" xml:space="preserve">
            <source>Both of these are available on the Azure Management Portal, by selecting your mobile service and then clicking on "Dashboard".</source>
            <target state="new">Both of these are available on the Azure Management Portal, by selecting your mobile service and then clicking on "Dashboard".</target>
          </trans-unit>
          <trans-unit id="121" xml:space="preserve">
            <source><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>How to: Create a table reference</source>
            <target state="new"><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>How to: Create a table reference</target>
          </trans-unit>
          <trans-unit id="122" xml:space="preserve">
            <source>All of the code that accesses or modifies data in the Mobile Services table calls functions on the <bpt id="2">&lt;code&gt;</bpt>MobileServiceTable<ept id="2">&lt;/code&gt;</ept> object.</source>
            <target state="new">All of the code that accesses or modifies data in the Mobile Services table calls functions on the <bpt id="2">&lt;code&gt;</bpt>MobileServiceTable<ept id="2">&lt;/code&gt;</ept> object.</target>
          </trans-unit>
          <trans-unit id="123" xml:space="preserve">
            <source>You get a reference to the table by calling the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>GetTable<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> function on an instance of the <bpt id="4">&lt;code&gt;</bpt>MobileServiceClient<ept id="4">&lt;/code&gt;</ept>.</source>
            <target state="new">You get a reference to the table by calling the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>GetTable<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> function on an instance of the <bpt id="4">&lt;code&gt;</bpt>MobileServiceClient<ept id="4">&lt;/code&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="124" xml:space="preserve">
            <source>This is the typed serialization model; see discussion of <bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>the untyped serialization model<bpt id="4">&lt;html&gt;</bpt><ept id="4">&lt;/html&gt;</ept> below.</source>
            <target state="new">This is the typed serialization model; see discussion of <bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>the untyped serialization model<bpt id="4">&lt;html&gt;</bpt><ept id="4">&lt;/html&gt;</ept> below.</target>
          </trans-unit>
          <trans-unit id="125" xml:space="preserve">
            <source><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>How to: Query data from a mobile service</source>
            <target state="new"><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>How to: Query data from a mobile service</target>
          </trans-unit>
          <trans-unit id="126" xml:space="preserve">
            <source>This section describes how to issue queries to the mobile service.</source>
            <target state="new">This section describes how to issue queries to the mobile service.</target>
          </trans-unit>
          <trans-unit id="127" xml:space="preserve">
            <source>Subsections describe different aspects such as sorting, filtering, and paging.</source>
            <target state="new">Subsections describe different aspects such as sorting, filtering, and paging.</target>
          </trans-unit>
          <trans-unit id="128" xml:space="preserve">
            <source><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>How to: Filter returned data</source>
            <target state="new"><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>How to: Filter returned data</target>
          </trans-unit>
          <trans-unit id="129" xml:space="preserve">
            <source>The following code illustrates how to filter data by including a <bpt id="2">&lt;code&gt;</bpt>Where<ept id="2">&lt;/code&gt;</ept> clause in a query.</source>
            <target state="new">The following code illustrates how to filter data by including a <bpt id="2">&lt;code&gt;</bpt>Where<ept id="2">&lt;/code&gt;</ept> clause in a query.</target>
          </trans-unit>
          <trans-unit id="130" xml:space="preserve">
            <source>It returns all items from <bpt id="2">&lt;code&gt;</bpt>todoTable<ept id="2">&lt;/code&gt;</ept> whose <bpt id="4">&lt;code&gt;</bpt>Complete<ept id="4">&lt;/code&gt;</ept> property is equal to <bpt id="6">&lt;code&gt;</bpt>false<ept id="6">&lt;/code&gt;</ept>.</source>
            <target state="new">It returns all items from <bpt id="2">&lt;code&gt;</bpt>todoTable<ept id="2">&lt;/code&gt;</ept> whose <bpt id="4">&lt;code&gt;</bpt>Complete<ept id="4">&lt;/code&gt;</ept> property is equal to <bpt id="6">&lt;code&gt;</bpt>false<ept id="6">&lt;/code&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="131" xml:space="preserve">
            <source>The <bpt id="2">&lt;code&gt;</bpt>Where<ept id="2">&lt;/code&gt;</ept> function applies a row filtering predicate to the query against the table.</source>
            <target state="new">The <bpt id="2">&lt;code&gt;</bpt>Where<ept id="2">&lt;/code&gt;</ept> function applies a row filtering predicate to the query against the table.</target>
          </trans-unit>
          <trans-unit id="132" xml:space="preserve">
            <source>You can view the URI of the request sent to the mobile service by using message inspection software, such as browser developer tools or Fiddler.</source>
            <target state="new">You can view the URI of the request sent to the mobile service by using message inspection software, such as browser developer tools or Fiddler.</target>
          </trans-unit>
          <trans-unit id="133" xml:space="preserve">
            <source>If you look at the request URI below,  notice that we are modifying the query string  itself:</source>
            <target state="new">If you look at the request URI below,  notice that we are modifying the query string  itself:</target>
          </trans-unit>
          <trans-unit id="134" xml:space="preserve">
            <source>This request would normally be translated roughly into the following SQL query on the server side:</source>
            <target state="new">This request would normally be translated roughly into the following SQL query on the server side:</target>
          </trans-unit>
          <trans-unit id="135" xml:space="preserve">
            <source>The function which is passed to the <bpt id="2">&lt;code&gt;</bpt>Where<ept id="2">&lt;/code&gt;</ept> method can have an arbitrary number of conditions.</source>
            <target state="new">The function which is passed to the <bpt id="2">&lt;code&gt;</bpt>Where<ept id="2">&lt;/code&gt;</ept> method can have an arbitrary number of conditions.</target>
          </trans-unit>
          <trans-unit id="136" xml:space="preserve">
            <source>For example, the line below:</source>
            <target state="new">For example, the line below:</target>
          </trans-unit>
          <trans-unit id="137" xml:space="preserve">
            <source>Would be roughly translated (for the same request shown before) as</source>
            <target state="new">Would be roughly translated (for the same request shown before) as</target>
          </trans-unit>
          <trans-unit id="138" xml:space="preserve">
            <source>The <bpt id="2">&lt;code&gt;</bpt>where<ept id="2">&lt;/code&gt;</ept> statement above will find items with <bpt id="4">&lt;code&gt;</bpt>Complete<ept id="4">&lt;/code&gt;</ept> status set to false with non-null <bpt id="6">&lt;code&gt;</bpt>Text<ept id="6">&lt;/code&gt;</ept>.</source>
            <target state="new">The <bpt id="2">&lt;code&gt;</bpt>where<ept id="2">&lt;/code&gt;</ept> statement above will find items with <bpt id="4">&lt;code&gt;</bpt>Complete<ept id="4">&lt;/code&gt;</ept> status set to false with non-null <bpt id="6">&lt;code&gt;</bpt>Text<ept id="6">&lt;/code&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="139" xml:space="preserve">
            <source>We also could have written that in multiple lines instead:</source>
            <target state="new">We also could have written that in multiple lines instead:</target>
          </trans-unit>
          <trans-unit id="140" xml:space="preserve">
            <source>The two methods are equivalent and may be used interchangeably.</source>
            <target state="new">The two methods are equivalent and may be used interchangeably.</target>
          </trans-unit>
          <trans-unit id="141" xml:space="preserve">
            <source>The former option -- of concatenating multiple predicates in one query -- is more compact and recommended.</source>
            <target state="new">The former option -- of concatenating multiple predicates in one query -- is more compact and recommended.</target>
          </trans-unit>
          <trans-unit id="142" xml:space="preserve">
            <source>The <bpt id="2">&lt;code&gt;</bpt>where<ept id="2">&lt;/code&gt;</ept> clause supports operations that be translated into the Mobile Services OData subset. This includes relational operators (==, !=, <bpt id="4">&lt;html&gt;</bpt><ept id="4">&lt;/html&gt;</ept>, &gt;=), arithmetic operators (+, -, /, *, %), number precision (Math.Floor, Math.Ceiling), string functions (Length, Substring, Replace, IndexOf, StartsWith, EndsWith), date properties (Year, Month, Day, Hour, Minute, Second), access properties of an object, and expressions combining all of these.</source>
            <target state="new">The <bpt id="2">&lt;code&gt;</bpt>where<ept id="2">&lt;/code&gt;</ept> clause supports operations that be translated into the Mobile Services OData subset. This includes relational operators (==, !=, <bpt id="4">&lt;html&gt;</bpt><ept id="4">&lt;/html&gt;</ept>, &gt;=), arithmetic operators (+, -, /, *, %), number precision (Math.Floor, Math.Ceiling), string functions (Length, Substring, Replace, IndexOf, StartsWith, EndsWith), date properties (Year, Month, Day, Hour, Minute, Second), access properties of an object, and expressions combining all of these.</target>
          </trans-unit>
          <trans-unit id="143" xml:space="preserve">
            <source><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>How to: Sort returned data</source>
            <target state="new"><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>How to: Sort returned data</target>
          </trans-unit>
          <trans-unit id="144" xml:space="preserve">
            <source>The following code illustrates how to sort data by including an <bpt id="2">&lt;code&gt;</bpt>OrderBy<ept id="2">&lt;/code&gt;</ept> or <bpt id="4">&lt;code&gt;</bpt>OrderByDescending<ept id="4">&lt;/code&gt;</ept> function in the query.</source>
            <target state="new">The following code illustrates how to sort data by including an <bpt id="2">&lt;code&gt;</bpt>OrderBy<ept id="2">&lt;/code&gt;</ept> or <bpt id="4">&lt;code&gt;</bpt>OrderByDescending<ept id="4">&lt;/code&gt;</ept> function in the query.</target>
          </trans-unit>
          <trans-unit id="145" xml:space="preserve">
            <source>It returns items from <bpt id="2">&lt;code&gt;</bpt>todoTable<ept id="2">&lt;/code&gt;</ept> sorted ascending by the <bpt id="4">&lt;code&gt;</bpt>Text<ept id="4">&lt;/code&gt;</ept> field.</source>
            <target state="new">It returns items from <bpt id="2">&lt;code&gt;</bpt>todoTable<ept id="2">&lt;/code&gt;</ept> sorted ascending by the <bpt id="4">&lt;code&gt;</bpt>Text<ept id="4">&lt;/code&gt;</ept> field.</target>
          </trans-unit>
          <trans-unit id="146" xml:space="preserve">
            <source>By default, the server returns only the first 50 elements.</source>
            <target state="new">By default, the server returns only the first 50 elements.</target>
          </trans-unit>
          <trans-unit id="147" xml:space="preserve">
            <source>A server-driven page size is used by default to prevent all elements from being returned.</source>
            <target state="new">A server-driven page size is used by default to prevent all elements from being returned.</target>
          </trans-unit>
          <trans-unit id="148" xml:space="preserve">
            <source>This keeps default requests for large data sets from negatively impacting the service.</source>
            <target state="new">This keeps default requests for large data sets from negatively impacting the service.</target>
          </trans-unit>
          <trans-unit id="149" xml:space="preserve">
            <source>You may increase the number of items to be returned by calling <bpt id="2">&lt;code&gt;</bpt>Take<ept id="2">&lt;/code&gt;</ept> as described in the next section.</source>
            <target state="new">You may increase the number of items to be returned by calling <bpt id="2">&lt;code&gt;</bpt>Take<ept id="2">&lt;/code&gt;</ept> as described in the next section.</target>
          </trans-unit>
          <trans-unit id="150" xml:space="preserve">
            <source><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>How to: Return data in pages</source>
            <target state="new"><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>How to: Return data in pages</target>
          </trans-unit>
          <trans-unit id="151" xml:space="preserve">
            <source>The following code shows how to implement paging in returned data by using the <bpt id="2">&lt;code&gt;</bpt>Take<ept id="2">&lt;/code&gt;</ept> and <bpt id="4">&lt;code&gt;</bpt>Skip<ept id="4">&lt;/code&gt;</ept> clauses in the query.</source>
            <target state="new">The following code shows how to implement paging in returned data by using the <bpt id="2">&lt;code&gt;</bpt>Take<ept id="2">&lt;/code&gt;</ept> and <bpt id="4">&lt;code&gt;</bpt>Skip<ept id="4">&lt;/code&gt;</ept> clauses in the query.</target>
          </trans-unit>
          <trans-unit id="152" xml:space="preserve">
            <source>The following query, when executed, returns the top three items in the table.</source>
            <target state="new">The following query, when executed, returns the top three items in the table.</target>
          </trans-unit>
          <trans-unit id="153" xml:space="preserve">
            <source>The following revised query skips the first three results and returns the next three after that.</source>
            <target state="new">The following revised query skips the first three results and returns the next three after that.</target>
          </trans-unit>
          <trans-unit id="154" xml:space="preserve">
            <source>This is effectively the second "page" of data, where the page size is three items.</source>
            <target state="new">This is effectively the second "page" of data, where the page size is three items.</target>
          </trans-unit>
          <trans-unit id="155" xml:space="preserve">
            <source>You can also use the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>IncludeTotalCount<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> method to ensure that the query will get the total count for <bpt id="4">&lt;html&gt;</bpt><ept id="4">&lt;/html&gt;</ept>all<bpt id="6">&lt;html&gt;</bpt><ept id="6">&lt;/html&gt;</ept> the records that would have been returned, ignoring any take paging/limit clause specified:</source>
            <target state="new">You can also use the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>IncludeTotalCount<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> method to ensure that the query will get the total count for <bpt id="4">&lt;html&gt;</bpt><ept id="4">&lt;/html&gt;</ept>all<bpt id="6">&lt;html&gt;</bpt><ept id="6">&lt;/html&gt;</ept> the records that would have been returned, ignoring any take paging/limit clause specified:</target>
          </trans-unit>
          <trans-unit id="156" xml:space="preserve">
            <source>This is a simplified scenario of passing hard-coded paging values to the <bpt id="2">&lt;code&gt;</bpt>Take<ept id="2">&lt;/code&gt;</ept> and <bpt id="4">&lt;code&gt;</bpt>Skip<ept id="4">&lt;/code&gt;</ept> methods.</source>
            <target state="new">This is a simplified scenario of passing hard-coded paging values to the <bpt id="2">&lt;code&gt;</bpt>Take<ept id="2">&lt;/code&gt;</ept> and <bpt id="4">&lt;code&gt;</bpt>Skip<ept id="4">&lt;/code&gt;</ept> methods.</target>
          </trans-unit>
          <trans-unit id="157" xml:space="preserve">
            <source>In a real-world app, you can use queries similar to the above with a pager control or comparable UI to let users navigate to previous and next pages.</source>
            <target state="new">In a real-world app, you can use queries similar to the above with a pager control or comparable UI to let users navigate to previous and next pages.</target>
          </trans-unit>
          <trans-unit id="158" xml:space="preserve">
            <source><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>How to: Select specific columns</source>
            <target state="new"><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>How to: Select specific columns</target>
          </trans-unit>
          <trans-unit id="159" xml:space="preserve">
            <source>You can specify which set of properties to include in the results by adding a <bpt id="2">&lt;code&gt;</bpt>Select<ept id="2">&lt;/code&gt;</ept> clause to your query.</source>
            <target state="new">You can specify which set of properties to include in the results by adding a <bpt id="2">&lt;code&gt;</bpt>Select<ept id="2">&lt;/code&gt;</ept> clause to your query.</target>
          </trans-unit>
          <trans-unit id="160" xml:space="preserve">
            <source>For example, the following code shows how to select just one field and also how to select and format multiple fields:</source>
            <target state="new">For example, the following code shows how to select just one field and also how to select and format multiple fields:</target>
          </trans-unit>
          <trans-unit id="161" xml:space="preserve">
            <source>All the functions described so far are additive, so we can just keep calling them and we'll each time affect more of the query.</source>
            <target state="new">All the functions described so far are additive, so we can just keep calling them and we'll each time affect more of the query.</target>
          </trans-unit>
          <trans-unit id="162" xml:space="preserve">
            <source>One more example:</source>
            <target state="new">One more example:</target>
          </trans-unit>
          <trans-unit id="163" xml:space="preserve">
            <source><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>How to: Look up data by ID</source>
            <target state="new"><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>How to: Look up data by ID</target>
          </trans-unit>
          <trans-unit id="164" xml:space="preserve">
            <source>The <bpt id="2">&lt;code&gt;</bpt>LookupAsync<ept id="2">&lt;/code&gt;</ept> function can be used to look up objects from the database with a particular ID.</source>
            <target state="new">The <bpt id="2">&lt;code&gt;</bpt>LookupAsync<ept id="2">&lt;/code&gt;</ept> function can be used to look up objects from the database with a particular ID.</target>
          </trans-unit>
          <trans-unit id="165" xml:space="preserve">
            <source><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>How to: Insert data into a mobile service</source>
            <target state="new"><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>How to: Insert data into a mobile service</target>
          </trans-unit>
          <trans-unit id="166" xml:space="preserve">
            <source>If you want to perform insert, lookup, delete, or update operations on a type, then you need to create a member called <bpt id="2">&lt;strong&gt;</bpt>Id<ept id="2">&lt;/strong&gt;</ept> (regardless of case).</source>
            <target state="new">If you want to perform insert, lookup, delete, or update operations on a type, then you need to create a member called <bpt id="2">&lt;strong&gt;</bpt>Id<ept id="2">&lt;/strong&gt;</ept> (regardless of case).</target>
          </trans-unit>
          <trans-unit id="167" xml:space="preserve">
            <source>This is why the example class <bpt id="2">&lt;strong&gt;</bpt>TodoItem<ept id="2">&lt;/strong&gt;</ept> has a member of name <bpt id="4">&lt;strong&gt;</bpt>Id<ept id="4">&lt;/strong&gt;</ept>.</source>
            <target state="new">This is why the example class <bpt id="2">&lt;strong&gt;</bpt>TodoItem<ept id="2">&lt;/strong&gt;</ept> has a member of name <bpt id="4">&lt;strong&gt;</bpt>Id<ept id="4">&lt;/strong&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="168" xml:space="preserve">
            <source>An ID value must not be set to anything other than the default value during insert operations; by contrast, the ID value should always be set to a non-default value and present in update and delete operations.</source>
            <target state="new">An ID value must not be set to anything other than the default value during insert operations; by contrast, the ID value should always be set to a non-default value and present in update and delete operations.</target>
          </trans-unit>
          <trans-unit id="169" xml:space="preserve">
            <source>The following code illustrates how to insert new rows into a table.</source>
            <target state="new">The following code illustrates how to insert new rows into a table.</target>
          </trans-unit>
          <trans-unit id="170" xml:space="preserve">
            <source>The parameter contains the data to be inserted as a .NET object.</source>
            <target state="new">The parameter contains the data to be inserted as a .NET object.</target>
          </trans-unit>
          <trans-unit id="171" xml:space="preserve">
            <source>After the await <bpt id="2">&lt;code&gt;</bpt>todoTable.InsertAsync<ept id="2">&lt;/code&gt;</ept> call returns, the ID of the object in the server is populated to the <bpt id="4">&lt;code&gt;</bpt>todoItem<ept id="4">&lt;/code&gt;</ept> object in the client.</source>
            <target state="new">After the await <bpt id="2">&lt;code&gt;</bpt>todoTable.InsertAsync<ept id="2">&lt;/code&gt;</ept> call returns, the ID of the object in the server is populated to the <bpt id="4">&lt;code&gt;</bpt>todoItem<ept id="4">&lt;/code&gt;</ept> object in the client.</target>
          </trans-unit>
          <trans-unit id="172" xml:space="preserve">
            <source>To insert untyped data, you may take advantage of Json.NET as shown below.</source>
            <target state="new">To insert untyped data, you may take advantage of Json.NET as shown below.</target>
          </trans-unit>
          <trans-unit id="173" xml:space="preserve">
            <source>Again, note that an ID must not be specified when inserting an object.</source>
            <target state="new">Again, note that an ID must not be specified when inserting an object.</target>
          </trans-unit>
          <trans-unit id="174" xml:space="preserve">
            <source>If you attempt to insert an item with the "Id" field already set, you will get back a <bpt id="2">&lt;code&gt;</bpt>MobileServiceInvalidOperationException<ept id="2">&lt;/code&gt;</ept> from the service.</source>
            <target state="new">If you attempt to insert an item with the "Id" field already set, you will get back a <bpt id="2">&lt;code&gt;</bpt>MobileServiceInvalidOperationException<ept id="2">&lt;/code&gt;</ept> from the service.</target>
          </trans-unit>
          <trans-unit id="175" xml:space="preserve">
            <source><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>How to: Modify data in a mobile service</source>
            <target state="new"><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>How to: Modify data in a mobile service</target>
          </trans-unit>
          <trans-unit id="176" xml:space="preserve">
            <source>The following code illustrates how to update an existing instance with the same ID with new information.</source>
            <target state="new">The following code illustrates how to update an existing instance with the same ID with new information.</target>
          </trans-unit>
          <trans-unit id="177" xml:space="preserve">
            <source>The parameter contains the data to be updated as a .NET object.</source>
            <target state="new">The parameter contains the data to be updated as a .NET object.</target>
          </trans-unit>
          <trans-unit id="178" xml:space="preserve">
            <source>To insert untyped data, you may take advantage of Json.NET like so.</source>
            <target state="new">To insert untyped data, you may take advantage of Json.NET like so.</target>
          </trans-unit>
          <trans-unit id="179" xml:space="preserve">
            <source>Note that when making an update, an ID must be specified, as that is how the mobile service identifies which instance to update.</source>
            <target state="new">Note that when making an update, an ID must be specified, as that is how the mobile service identifies which instance to update.</target>
          </trans-unit>
          <trans-unit id="180" xml:space="preserve">
            <source>The ID can be obtained from the result of the <bpt id="2">&lt;code&gt;</bpt>InsertAsync<ept id="2">&lt;/code&gt;</ept> call.</source>
            <target state="new">The ID can be obtained from the result of the <bpt id="2">&lt;code&gt;</bpt>InsertAsync<ept id="2">&lt;/code&gt;</ept> call.</target>
          </trans-unit>
          <trans-unit id="181" xml:space="preserve">
            <source>If you attempt to update an item without the "Id" field already set, there is no way for the service to tell which instance to update, so you will get back a <bpt id="2">&lt;code&gt;</bpt>MobileServiceInvalidOperationException<ept id="2">&lt;/code&gt;</ept> from the service.</source>
            <target state="new">If you attempt to update an item without the "Id" field already set, there is no way for the service to tell which instance to update, so you will get back a <bpt id="2">&lt;code&gt;</bpt>MobileServiceInvalidOperationException<ept id="2">&lt;/code&gt;</ept> from the service.</target>
          </trans-unit>
          <trans-unit id="182" xml:space="preserve">
            <source>Similarly, if you attempt to update an untyped item without the "Id" field already set, you will again get back a <bpt id="2">&lt;code&gt;</bpt>MobileServiceInvalidOperationException<ept id="2">&lt;/code&gt;</ept> from the service.</source>
            <target state="new">Similarly, if you attempt to update an untyped item without the "Id" field already set, you will again get back a <bpt id="2">&lt;code&gt;</bpt>MobileServiceInvalidOperationException<ept id="2">&lt;/code&gt;</ept> from the service.</target>
          </trans-unit>
          <trans-unit id="183" xml:space="preserve">
            <source><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>How to: Delete data in a mobile service</source>
            <target state="new"><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>How to: Delete data in a mobile service</target>
          </trans-unit>
          <trans-unit id="184" xml:space="preserve">
            <source>The following code illustrates how to delete an existing instance.</source>
            <target state="new">The following code illustrates how to delete an existing instance.</target>
          </trans-unit>
          <trans-unit id="185" xml:space="preserve">
            <source>The instance is identified by the "Id" field set on the <bpt id="2">&lt;code&gt;</bpt>todoItem<ept id="2">&lt;/code&gt;</ept>.</source>
            <target state="new">The instance is identified by the "Id" field set on the <bpt id="2">&lt;code&gt;</bpt>todoItem<ept id="2">&lt;/code&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="186" xml:space="preserve">
            <source>To delete untyped data, you may take advantage of Json.NET like so.</source>
            <target state="new">To delete untyped data, you may take advantage of Json.NET like so.</target>
          </trans-unit>
          <trans-unit id="187" xml:space="preserve">
            <source>Note that when making a delete request, an ID must be specified, as that is how the mobile service identifies which instance to delete.</source>
            <target state="new">Note that when making a delete request, an ID must be specified, as that is how the mobile service identifies which instance to delete.</target>
          </trans-unit>
          <trans-unit id="188" xml:space="preserve">
            <source>A delete request needs only the ID; other properties are not passed to the service, and if any are passed, they are ignored at the service.</source>
            <target state="new">A delete request needs only the ID; other properties are not passed to the service, and if any are passed, they are ignored at the service.</target>
          </trans-unit>
          <trans-unit id="189" xml:space="preserve">
            <source>The result of a <bpt id="2">&lt;code&gt;</bpt>DeleteAsync<ept id="2">&lt;/code&gt;</ept> call is usually <bpt id="4">&lt;code&gt;</bpt>null<ept id="4">&lt;/code&gt;</ept> as well.</source>
            <target state="new">The result of a <bpt id="2">&lt;code&gt;</bpt>DeleteAsync<ept id="2">&lt;/code&gt;</ept> call is usually <bpt id="4">&lt;code&gt;</bpt>null<ept id="4">&lt;/code&gt;</ept> as well.</target>
          </trans-unit>
          <trans-unit id="190" xml:space="preserve">
            <source>The ID to pass in can be obtained from the result of the <bpt id="2">&lt;code&gt;</bpt>InsertAsync<ept id="2">&lt;/code&gt;</ept> call.</source>
            <target state="new">The ID to pass in can be obtained from the result of the <bpt id="2">&lt;code&gt;</bpt>InsertAsync<ept id="2">&lt;/code&gt;</ept> call.</target>
          </trans-unit>
          <trans-unit id="191" xml:space="preserve">
            <source>If you attempt to delete an item without the "Id" field already set, there is no way for the service to tell which instance to delete, so you will get back a <bpt id="2">&lt;code&gt;</bpt>MobileServiceInvalidOperationException<ept id="2">&lt;/code&gt;</ept> from the service.</source>
            <target state="new">If you attempt to delete an item without the "Id" field already set, there is no way for the service to tell which instance to delete, so you will get back a <bpt id="2">&lt;code&gt;</bpt>MobileServiceInvalidOperationException<ept id="2">&lt;/code&gt;</ept> from the service.</target>
          </trans-unit>
          <trans-unit id="192" xml:space="preserve">
            <source>Similarly, if you attempt to delete an untyped item without the "Id" field already set, you will again get back a <bpt id="2">&lt;code&gt;</bpt>MobileServiceInvalidOperationException<ept id="2">&lt;/code&gt;</ept> from the service.</source>
            <target state="new">Similarly, if you attempt to delete an untyped item without the "Id" field already set, you will again get back a <bpt id="2">&lt;code&gt;</bpt>MobileServiceInvalidOperationException<ept id="2">&lt;/code&gt;</ept> from the service.</target>
          </trans-unit>
          <trans-unit id="193" xml:space="preserve">
            <source><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>How to: Authenticate users</source>
            <target state="new"><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>How to: Authenticate users</target>
          </trans-unit>
          <trans-unit id="194" xml:space="preserve">
            <source>Mobile Services supports authenticating and authorizing app users using a variety of external identity providers: Facebook, Google, Microsoft Account, Twitter, and Azure Active Directory.</source>
            <target state="new">Mobile Services supports authenticating and authorizing app users using a variety of external identity providers: Facebook, Google, Microsoft Account, Twitter, and Azure Active Directory.</target>
          </trans-unit>
          <trans-unit id="195" xml:space="preserve">
            <source>You can set permissions on tables to restrict access for specific operations to only authenticated users.</source>
            <target state="new">You can set permissions on tables to restrict access for specific operations to only authenticated users.</target>
          </trans-unit>
          <trans-unit id="196" xml:space="preserve">
            <source>You can also use the identity of authenticated users to implement authorization rules in server scripts.</source>
            <target state="new">You can also use the identity of authenticated users to implement authorization rules in server scripts.</target>
          </trans-unit>
          <trans-unit id="197" xml:space="preserve">
            <source>For more information, see the "Get started with authentication" tutorial (<bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Xamarin.iOS[xamarin.ios authentication]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>/<bpt id="4CapsExtId1">&lt;link&gt;</bpt><bpt id="4CapsExtId2">&lt;linkText&gt;</bpt>Xamarin.Android[xamarin.android authentication]<ept id="4CapsExtId2">&lt;/linkText&gt;</ept><bpt id="4CapsExtId3">&lt;title&gt;</bpt><ept id="4CapsExtId3">&lt;/title&gt;</ept><ept id="4CapsExtId1">&lt;/link&gt;</ept>).</source>
            <target state="new">For more information, see the "Get started with authentication" tutorial (<bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Xamarin.iOS[xamarin.ios authentication]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>/<bpt id="4CapsExtId1">&lt;link&gt;</bpt><bpt id="4CapsExtId2">&lt;linkText&gt;</bpt>Xamarin.Android[xamarin.android authentication]<ept id="4CapsExtId2">&lt;/linkText&gt;</ept><bpt id="4CapsExtId3">&lt;title&gt;</bpt><ept id="4CapsExtId3">&lt;/title&gt;</ept><ept id="4CapsExtId1">&lt;/link&gt;</ept>).</target>
          </trans-unit>
          <trans-unit id="198" xml:space="preserve">
            <source>Two authentication flows are supported: a _server flow_ and a _client flow_.</source>
            <target state="new">Two authentication flows are supported: a _server flow_ and a _client flow_.</target>
          </trans-unit>
          <trans-unit id="199" xml:space="preserve">
            <source>The server flow provides the simplest authentication experience, as it relies on the provider's web authentication interface.</source>
            <target state="new">The server flow provides the simplest authentication experience, as it relies on the provider's web authentication interface.</target>
          </trans-unit>
          <trans-unit id="200" xml:space="preserve">
            <source>The client flow allows for deeper integration with device-specific capabilities as it relies on provider-specific device-specific SDKs.</source>
            <target state="new">The client flow allows for deeper integration with device-specific capabilities as it relies on provider-specific device-specific SDKs.</target>
          </trans-unit>
          <trans-unit id="201" xml:space="preserve">
            <source>Server flow</source>
            <target state="new">Server flow</target>
          </trans-unit>
          <trans-unit id="202" xml:space="preserve">
            <source>To have Mobile Services manage the authentication process in your Windows Store or Windows Phone app,</source>
            <target state="new">To have Mobile Services manage the authentication process in your Windows Store or Windows Phone app,</target>
          </trans-unit>
          <trans-unit id="203" xml:space="preserve">
            <source>you must register your app with your identity provider.</source>
            <target state="new">you must register your app with your identity provider.</target>
          </trans-unit>
          <trans-unit id="204" xml:space="preserve">
            <source>Then in your mobile service, you need to configure the application ID and secret provided by your provider.</source>
            <target state="new">Then in your mobile service, you need to configure the application ID and secret provided by your provider.</target>
          </trans-unit>
          <trans-unit id="205" xml:space="preserve">
            <source>For more information, see the "Get started with authentication" tutorial (<bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Xamarin.iOS[xamarin.ios authentication]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>/<bpt id="4CapsExtId1">&lt;link&gt;</bpt><bpt id="4CapsExtId2">&lt;linkText&gt;</bpt>Xamarin.Android[xamarin.android authentication]<ept id="4CapsExtId2">&lt;/linkText&gt;</ept><bpt id="4CapsExtId3">&lt;title&gt;</bpt><ept id="4CapsExtId3">&lt;/title&gt;</ept><ept id="4CapsExtId1">&lt;/link&gt;</ept>).</source>
            <target state="new">For more information, see the "Get started with authentication" tutorial (<bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Xamarin.iOS[xamarin.ios authentication]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>/<bpt id="4CapsExtId1">&lt;link&gt;</bpt><bpt id="4CapsExtId2">&lt;linkText&gt;</bpt>Xamarin.Android[xamarin.android authentication]<ept id="4CapsExtId2">&lt;/linkText&gt;</ept><bpt id="4CapsExtId3">&lt;title&gt;</bpt><ept id="4CapsExtId3">&lt;/title&gt;</ept><ept id="4CapsExtId1">&lt;/link&gt;</ept>).</target>
          </trans-unit>
          <trans-unit id="206" xml:space="preserve">
            <source>Once you have registered your identity provider, simply call the [LoginAsync method] with the [MobileServiceAuthenticationProvider] value of your provider.</source>
            <target state="new">Once you have registered your identity provider, simply call the [LoginAsync method] with the [MobileServiceAuthenticationProvider] value of your provider.</target>
          </trans-unit>
          <trans-unit id="207" xml:space="preserve">
            <source>For example, the following code initiates a server flow login by using Facebook.</source>
            <target state="new">For example, the following code initiates a server flow login by using Facebook.</target>
          </trans-unit>
          <trans-unit id="208" xml:space="preserve">
            <source>If you are using an identity provider other than Facebook, change the value of [MobileServiceAuthenticationProvider] above to the value for your provider.</source>
            <target state="new">If you are using an identity provider other than Facebook, change the value of [MobileServiceAuthenticationProvider] above to the value for your provider.</target>
          </trans-unit>
          <trans-unit id="209" xml:space="preserve">
            <source>In this case, Mobile Services manages the OAuth 2.0 authentication flow by displaying the login page of the selected provider and generating a Mobile Services authentication token after successful login with the identity provider.</source>
            <target state="new">In this case, Mobile Services manages the OAuth 2.0 authentication flow by displaying the login page of the selected provider and generating a Mobile Services authentication token after successful login with the identity provider.</target>
          </trans-unit>
          <trans-unit id="210" xml:space="preserve">
            <source>The [LoginAsync method] returns a [MobileServiceUser], which provides both the [userId] of the authenticated user and the [MobileServiceAuthenticationToken], as a JSON web token (JWT).</source>
            <target state="new">The [LoginAsync method] returns a [MobileServiceUser], which provides both the [userId] of the authenticated user and the [MobileServiceAuthenticationToken], as a JSON web token (JWT).</target>
          </trans-unit>
          <trans-unit id="211" xml:space="preserve">
            <source>This token can be cached and re-used until it expires.</source>
            <target state="new">This token can be cached and re-used until it expires.</target>
          </trans-unit>
          <trans-unit id="212" xml:space="preserve">
            <source>For more information, see [Caching the authentication token].</source>
            <target state="new">For more information, see [Caching the authentication token].</target>
          </trans-unit>
          <trans-unit id="213" xml:space="preserve">
            <source>Client flow</source>
            <target state="new">Client flow</target>
          </trans-unit>
          <trans-unit id="214" xml:space="preserve">
            <source>Your app can also independently contact the identity provider and then provide the returned token to Mobile Services for authentication.</source>
            <target state="new">Your app can also independently contact the identity provider and then provide the returned token to Mobile Services for authentication.</target>
          </trans-unit>
          <trans-unit id="215" xml:space="preserve">
            <source>This client flow enables you to provide a single sign-in experience for users or to retrieve additional user data from the identity provider.</source>
            <target state="new">This client flow enables you to provide a single sign-in experience for users or to retrieve additional user data from the identity provider.</target>
          </trans-unit>
          <trans-unit id="216" xml:space="preserve">
            <source>In the most simplified form, you can use the client flow as shown in this snippet for Facebook or Google.</source>
            <target state="new">In the most simplified form, you can use the client flow as shown in this snippet for Facebook or Google.</target>
          </trans-unit>
          <trans-unit id="217" xml:space="preserve">
            <source><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>Caching the authentication token</source>
            <target state="new"><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>Caching the authentication token</target>
          </trans-unit>
          <trans-unit id="218" xml:space="preserve">
            <source>In some cases, the call to the login method can be avoided after the first time the user authenticates.</source>
            <target state="new">In some cases, the call to the login method can be avoided after the first time the user authenticates.</target>
          </trans-unit>
          <trans-unit id="219" xml:space="preserve">
            <source>You can use a local secure store (such as <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Xamarin.Auth[xamarin.auth component]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>) to cache the current user identity the first time they log in and every subsequent time you check whether you already have the user identity in our cache.</source>
            <target state="new">You can use a local secure store (such as <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Xamarin.Auth[xamarin.auth component]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>) to cache the current user identity the first time they log in and every subsequent time you check whether you already have the user identity in our cache.</target>
          </trans-unit>
          <trans-unit id="220" xml:space="preserve">
            <source>When the cache is empty, you still need to send the user through the login process.</source>
            <target state="new">When the cache is empty, you still need to send the user through the login process.</target>
          </trans-unit>
          <trans-unit id="221" xml:space="preserve">
            <source><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>How to: Handle errors</source>
            <target state="new"><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>How to: Handle errors</target>
          </trans-unit>
          <trans-unit id="222" xml:space="preserve">
            <source>There are several ways to encounter, validate, and work around errors in Mobile Services.</source>
            <target state="new">There are several ways to encounter, validate, and work around errors in Mobile Services.</target>
          </trans-unit>
          <trans-unit id="223" xml:space="preserve">
            <source>As an example, server scripts are registered in a mobile service and can be used to perform a wide range of operations on data being inserted and updated, including validation and data modification.</source>
            <target state="new">As an example, server scripts are registered in a mobile service and can be used to perform a wide range of operations on data being inserted and updated, including validation and data modification.</target>
          </trans-unit>
          <trans-unit id="224" xml:space="preserve">
            <source>Imagine defining and registering a server script that validate and modify data, like so:</source>
            <target state="new">Imagine defining and registering a server script that validate and modify data, like so:</target>
          </trans-unit>
          <trans-unit id="225" xml:space="preserve">
            <source>This server-side script validates the length of string data sent to the mobile service and rejects strings that are too long, in this case longer than 10 characters.</source>
            <target state="new">This server-side script validates the length of string data sent to the mobile service and rejects strings that are too long, in this case longer than 10 characters.</target>
          </trans-unit>
          <trans-unit id="226" xml:space="preserve">
            <source>Now that the mobile service is validating data and sending error responses on the server-side, you can update your .NET app to be able to handle error responses from validation.</source>
            <target state="new">Now that the mobile service is validating data and sending error responses on the server-side, you can update your .NET app to be able to handle error responses from validation.</target>
          </trans-unit>
          <trans-unit id="227" xml:space="preserve">
            <source><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>How to: Work with untyped data</source>
            <target state="new"><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>How to: Work with untyped data</target>
          </trans-unit>
          <trans-unit id="228" xml:space="preserve">
            <source>The Xamarin Component client is designed for strongly typed scenarios.</source>
            <target state="new">The Xamarin Component client is designed for strongly typed scenarios.</target>
          </trans-unit>
          <trans-unit id="229" xml:space="preserve">
            <source>However, sometimes, a more loosely typed experience is convenient; for example, this could be when dealing with objects with open schema.</source>
            <target state="new">However, sometimes, a more loosely typed experience is convenient; for example, this could be when dealing with objects with open schema.</target>
          </trans-unit>
          <trans-unit id="230" xml:space="preserve">
            <source>That scenario is enabled as follows.</source>
            <target state="new">That scenario is enabled as follows.</target>
          </trans-unit>
          <trans-unit id="231" xml:space="preserve">
            <source>In queries, you forego LINQ and use the wire format.</source>
            <target state="new">In queries, you forego LINQ and use the wire format.</target>
          </trans-unit>
          <trans-unit id="232" xml:space="preserve">
            <source>You get back JSON values that you can use like a property bag.</source>
            <target state="new">You get back JSON values that you can use like a property bag.</target>
          </trans-unit>
          <trans-unit id="233" xml:space="preserve">
            <source>For more information on JToken and Json.NET, see <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Json.NET<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept></source>
            <target state="new">For more information on JToken and Json.NET, see <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Json.NET<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept></target>
          </trans-unit>
          <trans-unit id="234" xml:space="preserve">
            <source><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>How to: Design unit tests</source>
            <target state="new"><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>How to: Design unit tests</target>
          </trans-unit>
          <trans-unit id="235" xml:space="preserve">
            <source>The value returned by <bpt id="2">&lt;code&gt;</bpt>MobileServiceClient.GetTable<ept id="2">&lt;/code&gt;</ept> and the queries are interfaces. That makes them easily "mockable" for testing purposes, so you could create a <bpt id="4">&lt;code&gt;</bpt>MyMockTable : IMobileServiceTable&lt;TodoItem&gt;<ept id="4">&lt;/code&gt;</ept> that implements your testing logic.</source>
            <target state="new">The value returned by <bpt id="2">&lt;code&gt;</bpt>MobileServiceClient.GetTable<ept id="2">&lt;/code&gt;</ept> and the queries are interfaces. That makes them easily "mockable" for testing purposes, so you could create a <bpt id="4">&lt;code&gt;</bpt>MyMockTable : IMobileServiceTable&lt;TodoItem&gt;<ept id="4">&lt;/code&gt;</ept> that implements your testing logic.</target>
          </trans-unit>
          <trans-unit id="236" xml:space="preserve">
            <source><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>Next steps</source>
            <target state="new"><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>Next steps</target>
          </trans-unit>
          <trans-unit id="237" xml:space="preserve">
            <source>Now that you have completed this how-to conceptual reference topic, learn how to perform important tasks in Mobile Services in detail:</source>
            <target state="new">Now that you have completed this how-to conceptual reference topic, learn how to perform important tasks in Mobile Services in detail:</target>
          </trans-unit>
          <trans-unit id="238" xml:space="preserve">
            <source>Get started with Mobile Services (<bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Xamarin.iOS[get started with mobile services ios]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>/<bpt id="4CapsExtId1">&lt;link&gt;</bpt><bpt id="4CapsExtId2">&lt;linkText&gt;</bpt>Xamarin.Android[get started with mobile services android]<ept id="4CapsExtId2">&lt;/linkText&gt;</ept><bpt id="4CapsExtId3">&lt;title&gt;</bpt><ept id="4CapsExtId3">&lt;/title&gt;</ept><ept id="4CapsExtId1">&lt;/link&gt;</ept>)</source>
            <target state="new">Get started with Mobile Services (<bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Xamarin.iOS[get started with mobile services ios]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>/<bpt id="4CapsExtId1">&lt;link&gt;</bpt><bpt id="4CapsExtId2">&lt;linkText&gt;</bpt>Xamarin.Android[get started with mobile services android]<ept id="4CapsExtId2">&lt;/linkText&gt;</ept><bpt id="4CapsExtId3">&lt;title&gt;</bpt><ept id="4CapsExtId3">&lt;/title&gt;</ept><ept id="4CapsExtId1">&lt;/link&gt;</ept>)</target>
          </trans-unit>
          <trans-unit id="239" xml:space="preserve">
            <source><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept>Learn the basics of how to use Mobile Services.</source>
            <target state="new"><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept>Learn the basics of how to use Mobile Services.</target>
          </trans-unit>
          <trans-unit id="240" xml:space="preserve">
            <source>Get started with data (<bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Xamarin.iOS[get started with data ios]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>/<bpt id="4CapsExtId1">&lt;link&gt;</bpt><bpt id="4CapsExtId2">&lt;linkText&gt;</bpt>Xamarin.Android[get started with data android]<ept id="4CapsExtId2">&lt;/linkText&gt;</ept><bpt id="4CapsExtId3">&lt;title&gt;</bpt><ept id="4CapsExtId3">&lt;/title&gt;</ept><ept id="4CapsExtId1">&lt;/link&gt;</ept>)</source>
            <target state="new">Get started with data (<bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Xamarin.iOS[get started with data ios]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>/<bpt id="4CapsExtId1">&lt;link&gt;</bpt><bpt id="4CapsExtId2">&lt;linkText&gt;</bpt>Xamarin.Android[get started with data android]<ept id="4CapsExtId2">&lt;/linkText&gt;</ept><bpt id="4CapsExtId3">&lt;title&gt;</bpt><ept id="4CapsExtId3">&lt;/title&gt;</ept><ept id="4CapsExtId1">&lt;/link&gt;</ept>)</target>
          </trans-unit>
          <trans-unit id="241" xml:space="preserve">
            <source><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept>Learn more about storing and querying data using Mobile Services.</source>
            <target state="new"><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept>Learn more about storing and querying data using Mobile Services.</target>
          </trans-unit>
          <trans-unit id="242" xml:space="preserve">
            <source>Get started with authentication (<bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Xamarin.iOS[get started with authentication ios]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>/<bpt id="4CapsExtId1">&lt;link&gt;</bpt><bpt id="4CapsExtId2">&lt;linkText&gt;</bpt>Xamarin.Android[get started with authentication android]<ept id="4CapsExtId2">&lt;/linkText&gt;</ept><bpt id="4CapsExtId3">&lt;title&gt;</bpt><ept id="4CapsExtId3">&lt;/title&gt;</ept><ept id="4CapsExtId1">&lt;/link&gt;</ept>)</source>
            <target state="new">Get started with authentication (<bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Xamarin.iOS[get started with authentication ios]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>/<bpt id="4CapsExtId1">&lt;link&gt;</bpt><bpt id="4CapsExtId2">&lt;linkText&gt;</bpt>Xamarin.Android[get started with authentication android]<ept id="4CapsExtId2">&lt;/linkText&gt;</ept><bpt id="4CapsExtId3">&lt;title&gt;</bpt><ept id="4CapsExtId3">&lt;/title&gt;</ept><ept id="4CapsExtId1">&lt;/link&gt;</ept>)</target>
          </trans-unit>
          <trans-unit id="243" xml:space="preserve">
            <source><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept>Learn how to authenticate users of your app with an identity provider.</source>
            <target state="new"><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept>Learn how to authenticate users of your app with an identity provider.</target>
          </trans-unit>
          <trans-unit id="244" xml:space="preserve">
            <source>Validate and modify data with scripts (<bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Xamarin.iOS[validate and modify data with scripts ios]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>/<bpt id="4CapsExtId1">&lt;link&gt;</bpt><bpt id="4CapsExtId2">&lt;linkText&gt;</bpt>Xamarin.Android[validate and modify data with scripts android]<ept id="4CapsExtId2">&lt;/linkText&gt;</ept><bpt id="4CapsExtId3">&lt;title&gt;</bpt><ept id="4CapsExtId3">&lt;/title&gt;</ept><ept id="4CapsExtId1">&lt;/link&gt;</ept>)</source>
            <target state="new">Validate and modify data with scripts (<bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Xamarin.iOS[validate and modify data with scripts ios]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>/<bpt id="4CapsExtId1">&lt;link&gt;</bpt><bpt id="4CapsExtId2">&lt;linkText&gt;</bpt>Xamarin.Android[validate and modify data with scripts android]<ept id="4CapsExtId2">&lt;/linkText&gt;</ept><bpt id="4CapsExtId3">&lt;title&gt;</bpt><ept id="4CapsExtId3">&lt;/title&gt;</ept><ept id="4CapsExtId1">&lt;/link&gt;</ept>)</target>
          </trans-unit>
          <trans-unit id="245" xml:space="preserve">
            <source><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept>Learn more about using server scripts in Mobile Services to validate and change data sent from your app.</source>
            <target state="new"><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept>Learn more about using server scripts in Mobile Services to validate and change data sent from your app.</target>
          </trans-unit>
          <trans-unit id="246" xml:space="preserve">
            <source>Refine queries with paging (<bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Xamarin.iOS[refine queries with paging ios]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>/<bpt id="4CapsExtId1">&lt;link&gt;</bpt><bpt id="4CapsExtId2">&lt;linkText&gt;</bpt>Xamarin.Android[refine queries with paging android]<ept id="4CapsExtId2">&lt;/linkText&gt;</ept><bpt id="4CapsExtId3">&lt;title&gt;</bpt><ept id="4CapsExtId3">&lt;/title&gt;</ept><ept id="4CapsExtId1">&lt;/link&gt;</ept>)</source>
            <target state="new">Refine queries with paging (<bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Xamarin.iOS[refine queries with paging ios]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>/<bpt id="4CapsExtId1">&lt;link&gt;</bpt><bpt id="4CapsExtId2">&lt;linkText&gt;</bpt>Xamarin.Android[refine queries with paging android]<ept id="4CapsExtId2">&lt;/linkText&gt;</ept><bpt id="4CapsExtId3">&lt;title&gt;</bpt><ept id="4CapsExtId3">&lt;/title&gt;</ept><ept id="4CapsExtId1">&lt;/link&gt;</ept>)</target>
          </trans-unit>
          <trans-unit id="247" xml:space="preserve">
            <source><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept>Learn how to use paging in queries to control the amount of data handled in a single request.</source>
            <target state="new"><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept>Learn how to use paging in queries to control the amount of data handled in a single request.</target>
          </trans-unit>
          <trans-unit id="248" xml:space="preserve">
            <source>Authorize users with scripts (<bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Xamarin.iOS[authorize users with scripts ios]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>/<bpt id="4CapsExtId1">&lt;link&gt;</bpt><bpt id="4CapsExtId2">&lt;linkText&gt;</bpt>Xamarin.Android[authorize users with scripts android]<ept id="4CapsExtId2">&lt;/linkText&gt;</ept><bpt id="4CapsExtId3">&lt;title&gt;</bpt><ept id="4CapsExtId3">&lt;/title&gt;</ept><ept id="4CapsExtId1">&lt;/link&gt;</ept>)</source>
            <target state="new">Authorize users with scripts (<bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Xamarin.iOS[authorize users with scripts ios]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>/<bpt id="4CapsExtId1">&lt;link&gt;</bpt><bpt id="4CapsExtId2">&lt;linkText&gt;</bpt>Xamarin.Android[authorize users with scripts android]<ept id="4CapsExtId2">&lt;/linkText&gt;</ept><bpt id="4CapsExtId3">&lt;title&gt;</bpt><ept id="4CapsExtId3">&lt;/title&gt;</ept><ept id="4CapsExtId1">&lt;/link&gt;</ept>)</target>
          </trans-unit>
          <trans-unit id="249" xml:space="preserve">
            <source><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept>Learn how to take the user ID value provided by Mobile Services based on an authenticated user and use it to filter the data returned by Mobile Services.</source>
            <target state="new"><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept>Learn how to take the user ID value provided by Mobile Services based on an authenticated user and use it to filter the data returned by Mobile Services.</target>
          </trans-unit>
        </group>
      </group>
    </body>
  </file>
</xliff>