<?xml version="1.0" encoding="utf-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" source-language="en-us" target-language="zh-cn" original="2/18/2016 5:25:23 PM" tool-id="MarkdownTransformer" product-name="N/A" product-version="N/A" build-num="1">
    <header>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7e8edbab2050e254ae343bac0e22a17569f78b1e</xliffext:olfilehash>
      <tool tool-id="MarkdownTransformer" tool-name="MarkdownToXliff" tool-version="1.0" tool-company="Microsoft" />
    </header>
    <body>
      <group extype="content">
        <group id="101">
          <trans-unit id="101" xml:space="preserve">
            <source>Service Bus Architecture</source>
            <target state="new">Service Bus Architecture</target>
          </trans-unit>
          <trans-unit id="102" xml:space="preserve">
            <source>Describes the message processing architecture of Azure Service Bus.</source>
            <target state="new">Describes the message processing architecture of Azure Service Bus.</target>
          </trans-unit>
          <trans-unit id="103" xml:space="preserve">
            <source>Service Bus Architecture</source>
            <target state="new">Service Bus Architecture</target>
          </trans-unit>
          <trans-unit id="104" xml:space="preserve">
            <source>The following section describes the message processing architecture of Azure Service Bus.</source>
            <target state="new">The following section describes the message processing architecture of Azure Service Bus.</target>
          </trans-unit>
          <trans-unit id="105" xml:space="preserve">
            <source>Service Bus scale units</source>
            <target state="new">Service Bus scale units</target>
          </trans-unit>
          <trans-unit id="106" xml:space="preserve">
            <source>Service Bus is organized by <bpt id="2">&lt;em&gt;</bpt>scale units<ept id="2">&lt;/em&gt;</ept>.</source>
            <target state="new">Service Bus is organized by <bpt id="2">&lt;em&gt;</bpt>scale units<ept id="2">&lt;/em&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="107" xml:space="preserve">
            <source>A scale unit is a unit of deployment and contains all components required run the service.</source>
            <target state="new">A scale unit is a unit of deployment and contains all components required run the service.</target>
          </trans-unit>
          <trans-unit id="108" xml:space="preserve">
            <source>Each region deploys one or more Service Bus scale units.</source>
            <target state="new">Each region deploys one or more Service Bus scale units.</target>
          </trans-unit>
          <trans-unit id="109" xml:space="preserve">
            <source>A Service Bus namespace is mapped to a scale unit.</source>
            <target state="new">A Service Bus namespace is mapped to a scale unit.</target>
          </trans-unit>
          <trans-unit id="110" xml:space="preserve">
            <source>The scale unit handles all types of Service Bus entities: relays, brokered messaging entities (queues, topics, subscriptions), and notification hubs.</source>
            <target state="new">The scale unit handles all types of Service Bus entities: relays, brokered messaging entities (queues, topics, subscriptions), and notification hubs.</target>
          </trans-unit>
          <trans-unit id="111" xml:space="preserve">
            <source>A Service Bus scale unit consists of the following components:</source>
            <target state="new">A Service Bus scale unit consists of the following components:</target>
          </trans-unit>
          <trans-unit id="112" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>A set of gateway nodes.<ept id="1">&lt;/strong&gt;</ept> Gateway nodes authenticate incoming requests and handle relay requests.</source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>A set of gateway nodes.<ept id="1">&lt;/strong&gt;</ept> Gateway nodes authenticate incoming requests and handle relay requests.</target>
          </trans-unit>
          <trans-unit id="113" xml:space="preserve">
            <source>Each gateway node has a public IP address.</source>
            <target state="new">Each gateway node has a public IP address.</target>
          </trans-unit>
          <trans-unit id="114" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>A set of messaging broker nodes.<ept id="1">&lt;/strong&gt;</ept> Messaging broker nodes process requests concerning messaging entities.</source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>A set of messaging broker nodes.<ept id="1">&lt;/strong&gt;</ept> Messaging broker nodes process requests concerning messaging entities.</target>
          </trans-unit>
          <trans-unit id="115" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>A set of notification nodes.<ept id="1">&lt;/strong&gt;</ept> Notification nodes send push notifications to all registered devices.</source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>A set of notification nodes.<ept id="1">&lt;/strong&gt;</ept> Notification nodes send push notifications to all registered devices.</target>
          </trans-unit>
          <trans-unit id="116" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>One gateway store.<ept id="1">&lt;/strong&gt;</ept> The gateway store holds the data for every entity that is defined in this scale unit.</source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>One gateway store.<ept id="1">&lt;/strong&gt;</ept> The gateway store holds the data for every entity that is defined in this scale unit.</target>
          </trans-unit>
          <trans-unit id="117" xml:space="preserve">
            <source>The gateway store is implemented on top of a SQL Azure database.</source>
            <target state="new">The gateway store is implemented on top of a SQL Azure database.</target>
          </trans-unit>
          <trans-unit id="118" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Many messaging stores.<ept id="1">&lt;/strong&gt;</ept> The messaging stores hold the messages of all queues, topics and subscriptions that are defined in this scale unit.</source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Many messaging stores.<ept id="1">&lt;/strong&gt;</ept> The messaging stores hold the messages of all queues, topics and subscriptions that are defined in this scale unit.</target>
          </trans-unit>
          <trans-unit id="119" xml:space="preserve">
            <source>It also contains all subscription data.</source>
            <target state="new">It also contains all subscription data.</target>
          </trans-unit>
          <trans-unit id="120" xml:space="preserve">
            <source>Unless <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Partitioning Messaging Entities<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> is enabled, a queue or topic is mapped to one messaging store.</source>
            <target state="new">Unless <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Partitioning Messaging Entities<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> is enabled, a queue or topic is mapped to one messaging store.</target>
          </trans-unit>
          <trans-unit id="121" xml:space="preserve">
            <source>Subscriptions are stored in the same messaging store as their parent topic.</source>
            <target state="new">Subscriptions are stored in the same messaging store as their parent topic.</target>
          </trans-unit>
          <trans-unit id="122" xml:space="preserve">
            <source>The messaging stores are implemented on top of SQL Azure databases.</source>
            <target state="new">The messaging stores are implemented on top of SQL Azure databases.</target>
          </trans-unit>
          <trans-unit id="123" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Multiple registration stores.<ept id="1">&lt;/strong&gt;</ept> The registration stores contain device registrations for all notification hubs that are defined in this scale unit.</source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Multiple registration stores.<ept id="1">&lt;/strong&gt;</ept> The registration stores contain device registrations for all notification hubs that are defined in this scale unit.</target>
          </trans-unit>
          <trans-unit id="124" xml:space="preserve">
            <source>The registration stores are implemented on top of SQL Azure databases.</source>
            <target state="new">The registration stores are implemented on top of SQL Azure databases.</target>
          </trans-unit>
          <trans-unit id="125" xml:space="preserve">
            <source>Containers</source>
            <target state="new">Containers</target>
          </trans-unit>
          <trans-unit id="126" xml:space="preserve">
            <source>Each messaging entity is assigned a specific container.</source>
            <target state="new">Each messaging entity is assigned a specific container.</target>
          </trans-unit>
          <trans-unit id="127" xml:space="preserve">
            <source>A container is a logical construct that uses exactly one messaging store to store all relevant data for this container.</source>
            <target state="new">A container is a logical construct that uses exactly one messaging store to store all relevant data for this container.</target>
          </trans-unit>
          <trans-unit id="128" xml:space="preserve">
            <source>Each container is assigned to a messaging broker node.</source>
            <target state="new">Each container is assigned to a messaging broker node.</target>
          </trans-unit>
          <trans-unit id="129" xml:space="preserve">
            <source>Typically, there are more containers than messaging broker nodes.</source>
            <target state="new">Typically, there are more containers than messaging broker nodes.</target>
          </trans-unit>
          <trans-unit id="130" xml:space="preserve">
            <source>Therefore, each messaging broker node loads multiple containers.</source>
            <target state="new">Therefore, each messaging broker node loads multiple containers.</target>
          </trans-unit>
          <trans-unit id="131" xml:space="preserve">
            <source>The distribution of containers to a messaging broker node is organized such that all messaging broker nodes are equally loaded.</source>
            <target state="new">The distribution of containers to a messaging broker node is organized such that all messaging broker nodes are equally loaded.</target>
          </trans-unit>
          <trans-unit id="132" xml:space="preserve">
            <source>If the load pattern changes (for example, one of the containers gets very busy), or if a messaging broker node becomes temporarily unavailable, the containers are redistributed among the messaging broker nodes.</source>
            <target state="new">If the load pattern changes (for example, one of the containers gets very busy), or if a messaging broker node becomes temporarily unavailable, the containers are redistributed among the messaging broker nodes.</target>
          </trans-unit>
          <trans-unit id="133" xml:space="preserve">
            <source>Processing of incoming messaging requests</source>
            <target state="new">Processing of incoming messaging requests</target>
          </trans-unit>
          <trans-unit id="134" xml:space="preserve">
            <source>When a client sends a request to Service Bus, the Azure load balancer routes it to any of the gateway nodes.</source>
            <target state="new">When a client sends a request to Service Bus, the Azure load balancer routes it to any of the gateway nodes.</target>
          </trans-unit>
          <trans-unit id="135" xml:space="preserve">
            <source>The gateway node authorizes the request.</source>
            <target state="new">The gateway node authorizes the request.</target>
          </trans-unit>
          <trans-unit id="136" xml:space="preserve">
            <source>If the request concerns a messaging entity (queue, topic, subscription), the gateway node looks up the entity in the gateway store and determines in which messaging store the entity is located.</source>
            <target state="new">If the request concerns a messaging entity (queue, topic, subscription), the gateway node looks up the entity in the gateway store and determines in which messaging store the entity is located.</target>
          </trans-unit>
          <trans-unit id="137" xml:space="preserve">
            <source>It then looks up which messaging broker node is currently servicing this container, and sends the request to that messaging broker node.</source>
            <target state="new">It then looks up which messaging broker node is currently servicing this container, and sends the request to that messaging broker node.</target>
          </trans-unit>
          <trans-unit id="138" xml:space="preserve">
            <source>The messaging broker node processes the request and updates the entity state in the container store.</source>
            <target state="new">The messaging broker node processes the request and updates the entity state in the container store.</target>
          </trans-unit>
          <trans-unit id="139" xml:space="preserve">
            <source>The messaging broker node then sends the response back to the gateway node, which sends an appropriate response back to the client that issued the original request.</source>
            <target state="new">The messaging broker node then sends the response back to the gateway node, which sends an appropriate response back to the client that issued the original request.</target>
          </trans-unit>
          <trans-unit id="140" xml:space="preserve">
            <source><bpt id="1">&lt;linkText&gt;</bpt>Processing of Incoming Messaging Requests<ept id="1">&lt;/linkText&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;linkText&gt;</bpt>Processing of Incoming Messaging Requests<ept id="1">&lt;/linkText&gt;</ept></target>
          </trans-unit>
          <trans-unit id="141" xml:space="preserve">
            <source>Processing of incoming relay requests</source>
            <target state="new">Processing of incoming relay requests</target>
          </trans-unit>
          <trans-unit id="142" xml:space="preserve">
            <source>When a client sends a request to Service Bus, the Azure load balancer routes it to any of the gateway nodes.</source>
            <target state="new">When a client sends a request to Service Bus, the Azure load balancer routes it to any of the gateway nodes.</target>
          </trans-unit>
          <trans-unit id="143" xml:space="preserve">
            <source>If the request is a listening request, the gateway node creates a new relay.</source>
            <target state="new">If the request is a listening request, the gateway node creates a new relay.</target>
          </trans-unit>
          <trans-unit id="144" xml:space="preserve">
            <source>If the request is a connection request to a specific relay, the gateway node forwards the connection request to the gateway node that owns the relay.</source>
            <target state="new">If the request is a connection request to a specific relay, the gateway node forwards the connection request to the gateway node that owns the relay.</target>
          </trans-unit>
          <trans-unit id="145" xml:space="preserve">
            <source>The gateway node that owns the relay sends a rendezvous request to the listening client, asking the listener to create a temporary channel to the gateway node that received the connection request.</source>
            <target state="new">The gateway node that owns the relay sends a rendezvous request to the listening client, asking the listener to create a temporary channel to the gateway node that received the connection request.</target>
          </trans-unit>
          <trans-unit id="146" xml:space="preserve">
            <source>When the relay connection is established, the clients can exchange messages via the gateway node that is used for the rendezvous.</source>
            <target state="new">When the relay connection is established, the clients can exchange messages via the gateway node that is used for the rendezvous.</target>
          </trans-unit>
          <trans-unit id="147" xml:space="preserve">
            <source><bpt id="1">&lt;linkText&gt;</bpt>Processing of Incoming Relay Requests<ept id="1">&lt;/linkText&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;linkText&gt;</bpt>Processing of Incoming Relay Requests<ept id="1">&lt;/linkText&gt;</ept></target>
          </trans-unit>
          <trans-unit id="148" xml:space="preserve">
            <source>Processing of incoming notification hub requests</source>
            <target state="new">Processing of incoming notification hub requests</target>
          </trans-unit>
          <trans-unit id="149" xml:space="preserve">
            <source>When a client sends a request to Service Bus, the Azure load balancer routes it to any of the gateway nodes.</source>
            <target state="new">When a client sends a request to Service Bus, the Azure load balancer routes it to any of the gateway nodes.</target>
          </trans-unit>
          <trans-unit id="150" xml:space="preserve">
            <source>If the request is a device registration for an existing notification hub, the gateway node writes the registration to the registration store and sends a reply to the calling device.</source>
            <target state="new">If the request is a device registration for an existing notification hub, the gateway node writes the registration to the registration store and sends a reply to the calling device.</target>
          </trans-unit>
          <trans-unit id="151" xml:space="preserve">
            <source>If the request is a notification message, the gateway node enqueues the message into a notification queue.</source>
            <target state="new">If the request is a notification message, the gateway node enqueues the message into a notification queue.</target>
          </trans-unit>
          <trans-unit id="152" xml:space="preserve">
            <source>One of the notification nodes dequeues the message from the notification queue and sends the message to all devices that are registered in the registration store.</source>
            <target state="new">One of the notification nodes dequeues the message from the notification queue and sends the message to all devices that are registered in the registration store.</target>
          </trans-unit>
          <trans-unit id="153" xml:space="preserve">
            <source>If a message is to be received by a large number of devices, multiple notification nodes participate in sending the messages to the devices.</source>
            <target state="new">If a message is to be received by a large number of devices, multiple notification nodes participate in sending the messages to the devices.</target>
          </trans-unit>
          <trans-unit id="154" xml:space="preserve">
            <source><bpt id="1">&lt;linkText&gt;</bpt>Processing of Incoming Notification Hub Requests<ept id="1">&lt;/linkText&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;linkText&gt;</bpt>Processing of Incoming Notification Hub Requests<ept id="1">&lt;/linkText&gt;</ept></target>
          </trans-unit>
          <trans-unit id="155" xml:space="preserve">
            <source>Next steps</source>
            <target state="new">Next steps</target>
          </trans-unit>
          <trans-unit id="156" xml:space="preserve">
            <source>Now that you've read an overview of how Service Bus works, to get started visit the following links:</source>
            <target state="new">Now that you've read an overview of how Service Bus works, to get started visit the following links:</target>
          </trans-unit>
          <trans-unit id="157" xml:space="preserve">
            <source><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Service Bus messaging overview<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></source>
            <target state="new"><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Service Bus messaging overview<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></target>
          </trans-unit>
          <trans-unit id="158" xml:space="preserve">
            <source><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Service Bus fundamentals<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></source>
            <target state="new"><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Service Bus fundamentals<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></target>
          </trans-unit>
          <trans-unit id="159" xml:space="preserve">
            <source><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>A queued messaging solution using Service Bus queues<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></source>
            <target state="new"><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>A queued messaging solution using Service Bus queues<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></target>
          </trans-unit>
        </group>
      </group>
    </body>
  </file>
</xliff>