<?xml version="1.0" encoding="utf-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" source-language="en-us" target-language="zh-cn" original="2/18/2016 5:20:56 PM" tool-id="MarkdownTransformer" product-name="N/A" product-version="N/A" build-num="1">
    <header>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7658db819e9c9bd9672bb6e29bf20ed833367705</xliffext:olfilehash>
      <tool tool-id="MarkdownTransformer" tool-name="MarkdownToXliff" tool-version="1.0" tool-company="Microsoft" />
    </header>
    <body>
      <group extype="content">
        <group id="101">
          <trans-unit id="101" xml:space="preserve">
            <source>Build a Service that uses Table storage instead of a SQL Database | Microsoft Azure</source>
            <target state="new">Build a Service that uses Table storage instead of a SQL Database | Microsoft Azure</target>
          </trans-unit>
          <trans-unit id="102" xml:space="preserve">
            <source>Learn how to use Azure Table storage with your .NET backend mobile service.</source>
            <target state="new">Learn how to use Azure Table storage with your .NET backend mobile service.</target>
          </trans-unit>
          <trans-unit id="103" xml:space="preserve">
            <source>Build a .NET backend Mobile Service that uses Table storage instead of a SQL Database</source>
            <target state="new">Build a .NET backend Mobile Service that uses Table storage instead of a SQL Database</target>
          </trans-unit>
          <trans-unit id="104" xml:space="preserve">
            <source>This topic shows you how to use a non-relational data store for your .NET backend mobile service.</source>
            <target state="new">This topic shows you how to use a non-relational data store for your .NET backend mobile service.</target>
          </trans-unit>
          <trans-unit id="105" xml:space="preserve">
            <source>In this tutorial, you will modify the Azure Mobile Services quickstart project to use Azure Table storage instead of the default Azure SQL Database data store.</source>
            <target state="new">In this tutorial, you will modify the Azure Mobile Services quickstart project to use Azure Table storage instead of the default Azure SQL Database data store.</target>
          </trans-unit>
          <trans-unit id="106" xml:space="preserve">
            <source>The tutorial requires completion of the [Get started with Mobile Services] or [Add Mobile Services to an existing app] tutorial.</source>
            <target state="new">The tutorial requires completion of the [Get started with Mobile Services] or [Add Mobile Services to an existing app] tutorial.</target>
          </trans-unit>
          <trans-unit id="107" xml:space="preserve">
            <source>You will also need an Azure storage account.</source>
            <target state="new">You will also need an Azure storage account.</target>
          </trans-unit>
          <trans-unit id="108" xml:space="preserve">
            <source>Configure Azure Table storage in your .NET backend mobile service</source>
            <target state="new">Configure Azure Table storage in your .NET backend mobile service</target>
          </trans-unit>
          <trans-unit id="109" xml:space="preserve">
            <source>First, you need to configure your mobile service and .NET backend code project to connect to Azure storage.</source>
            <target state="new">First, you need to configure your mobile service and .NET backend code project to connect to Azure storage.</target>
          </trans-unit>
          <trans-unit id="110" xml:space="preserve">
            <source>In <bpt id="2">&lt;strong&gt;</bpt>Solution Explorer<ept id="2">&lt;/strong&gt;</ept> in Visual Studio, right-click the .NET backend project, and then select <bpt id="4">&lt;strong&gt;</bpt>Manage NuGet Packages<ept id="4">&lt;/strong&gt;</ept>.</source>
            <target state="new">In <bpt id="2">&lt;strong&gt;</bpt>Solution Explorer<ept id="2">&lt;/strong&gt;</ept> in Visual Studio, right-click the .NET backend project, and then select <bpt id="4">&lt;strong&gt;</bpt>Manage NuGet Packages<ept id="4">&lt;/strong&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="111" xml:space="preserve">
            <source>In the left pane, select the <bpt id="2">&lt;strong&gt;</bpt>Online<ept id="2">&lt;/strong&gt;</ept> category, select <bpt id="4">&lt;strong&gt;</bpt>Stabile Only<ept id="4">&lt;/strong&gt;</ept>, search for <bpt id="6">&lt;strong&gt;</bpt>MobileServices<ept id="6">&lt;/strong&gt;</ept>, click <bpt id="8">&lt;strong&gt;</bpt>Install<ept id="8">&lt;/strong&gt;</ept> on the <bpt id="10">&lt;strong&gt;</bpt>Microsoft Azure Mobile Services .NET Backend Azure Storage Extension<ept id="10">&lt;/strong&gt;</ept> package, then accept the license agreements.</source>
            <target state="new">In the left pane, select the <bpt id="2">&lt;strong&gt;</bpt>Online<ept id="2">&lt;/strong&gt;</ept> category, select <bpt id="4">&lt;strong&gt;</bpt>Stabile Only<ept id="4">&lt;/strong&gt;</ept>, search for <bpt id="6">&lt;strong&gt;</bpt>MobileServices<ept id="6">&lt;/strong&gt;</ept>, click <bpt id="8">&lt;strong&gt;</bpt>Install<ept id="8">&lt;/strong&gt;</ept> on the <bpt id="10">&lt;strong&gt;</bpt>Microsoft Azure Mobile Services .NET Backend Azure Storage Extension<ept id="10">&lt;/strong&gt;</ept> package, then accept the license agreements.</target>
          </trans-unit>
          <trans-unit id="112" xml:space="preserve">
            <source><bpt id="1">&lt;linkText&gt;</bpt><ept id="1">&lt;/linkText&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;linkText&gt;</bpt><ept id="1">&lt;/linkText&gt;</ept></target>
          </trans-unit>
          <trans-unit id="113" xml:space="preserve">
            <source>This adds support for Azure storage services to the .NET backend mobile service project.</source>
            <target state="new">This adds support for Azure storage services to the .NET backend mobile service project.</target>
          </trans-unit>
          <trans-unit id="114" xml:space="preserve">
            <source>If you haven't yet created your storage account, see <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>How To Create a Storage Account<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">If you haven't yet created your storage account, see <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>How To Create a Storage Account<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="115" xml:space="preserve">
            <source>In the Management Portal, click <bpt id="2">&lt;strong&gt;</bpt>Storage<ept id="2">&lt;/strong&gt;</ept>, click the storage account, then click <bpt id="4">&lt;strong&gt;</bpt>Manage Keys<ept id="4">&lt;/strong&gt;</ept>.</source>
            <target state="new">In the Management Portal, click <bpt id="2">&lt;strong&gt;</bpt>Storage<ept id="2">&lt;/strong&gt;</ept>, click the storage account, then click <bpt id="4">&lt;strong&gt;</bpt>Manage Keys<ept id="4">&lt;/strong&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="116" xml:space="preserve">
            <source>Make a note of the <bpt id="2">&lt;strong&gt;</bpt>Storage Account Name<ept id="2">&lt;/strong&gt;</ept> and <bpt id="4">&lt;strong&gt;</bpt>Access Key<ept id="4">&lt;/strong&gt;</ept>.</source>
            <target state="new">Make a note of the <bpt id="2">&lt;strong&gt;</bpt>Storage Account Name<ept id="2">&lt;/strong&gt;</ept> and <bpt id="4">&lt;strong&gt;</bpt>Access Key<ept id="4">&lt;/strong&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="117" xml:space="preserve">
            <source>In your mobile service, click the <bpt id="2">&lt;strong&gt;</bpt>Configure<ept id="2">&lt;/strong&gt;</ept> tab, scroll down to <bpt id="4">&lt;strong&gt;</bpt>Connection strings<ept id="4">&lt;/strong&gt;</ept> and enter a new connection string with a <bpt id="6">&lt;strong&gt;</bpt>Name<ept id="6">&lt;/strong&gt;</ept> of <bpt id="8">&lt;code&gt;</bpt>StorageConnectionString<ept id="8">&lt;/code&gt;</ept> and a <bpt id="10">&lt;strong&gt;</bpt>Value<ept id="10">&lt;/strong&gt;</ept> that is your storage account connection string in the following format.</source>
            <target state="new">In your mobile service, click the <bpt id="2">&lt;strong&gt;</bpt>Configure<ept id="2">&lt;/strong&gt;</ept> tab, scroll down to <bpt id="4">&lt;strong&gt;</bpt>Connection strings<ept id="4">&lt;/strong&gt;</ept> and enter a new connection string with a <bpt id="6">&lt;strong&gt;</bpt>Name<ept id="6">&lt;/strong&gt;</ept> of <bpt id="8">&lt;code&gt;</bpt>StorageConnectionString<ept id="8">&lt;/code&gt;</ept> and a <bpt id="10">&lt;strong&gt;</bpt>Value<ept id="10">&lt;/strong&gt;</ept> that is your storage account connection string in the following format.</target>
          </trans-unit>
          <trans-unit id="118" xml:space="preserve">
            <source><bpt id="1">&lt;linkText&gt;</bpt><ept id="1">&lt;/linkText&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;linkText&gt;</bpt><ept id="1">&lt;/linkText&gt;</ept></target>
          </trans-unit>
          <trans-unit id="119" xml:space="preserve">
            <source>In the above string, replace the values of <bpt id="2">&lt;code&gt;</bpt>&lt;ACCOUNT_NAME&gt;<ept id="2">&lt;/code&gt;</ept> and <bpt id="4">&lt;code&gt;</bpt>&lt;ACCESS_KEY&gt;<ept id="4">&lt;/code&gt;</ept> with the values from the portal, then click <bpt id="6">&lt;strong&gt;</bpt>Save<ept id="6">&lt;/strong&gt;</ept>.</source>
            <target state="new">In the above string, replace the values of <bpt id="2">&lt;code&gt;</bpt>&lt;ACCOUNT_NAME&gt;<ept id="2">&lt;/code&gt;</ept> and <bpt id="4">&lt;code&gt;</bpt>&lt;ACCESS_KEY&gt;<ept id="4">&lt;/code&gt;</ept> with the values from the portal, then click <bpt id="6">&lt;strong&gt;</bpt>Save<ept id="6">&lt;/strong&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="120" xml:space="preserve">
            <source>The storage account connection string is stored encrypted in app settings.</source>
            <target state="new">The storage account connection string is stored encrypted in app settings.</target>
          </trans-unit>
          <trans-unit id="121" xml:space="preserve">
            <source>You can access this string in any table controller at runtime.</source>
            <target state="new">You can access this string in any table controller at runtime.</target>
          </trans-unit>
          <trans-unit id="122" xml:space="preserve">
            <source>In Solution Explorer in Visual Studio, open the Web.config file for the mobile service project and add the following new connection string:</source>
            <target state="new">In Solution Explorer in Visual Studio, open the Web.config file for the mobile service project and add the following new connection string:</target>
          </trans-unit>
          <trans-unit id="123" xml:space="preserve">
            <source>Replace the <bpt id="2">&lt;code&gt;</bpt>&lt;STORAGE_CONNECTION_STRING&gt;<ept id="2">&lt;/code&gt;</ept> placeholder with the connection string from step 6.</source>
            <target state="new">Replace the <bpt id="2">&lt;code&gt;</bpt>&lt;STORAGE_CONNECTION_STRING&gt;<ept id="2">&lt;/code&gt;</ept> placeholder with the connection string from step 6.</target>
          </trans-unit>
          <trans-unit id="124" xml:space="preserve">
            <source>The mobile service uses this connection string when it runs on your local computer, which lets you test the code before you publish it.</source>
            <target state="new">The mobile service uses this connection string when it runs on your local computer, which lets you test the code before you publish it.</target>
          </trans-unit>
          <trans-unit id="125" xml:space="preserve">
            <source>When running in Azure, the mobile service instead uses the connection string value set in the portal and ignores the connection string in the project.</source>
            <target state="new">When running in Azure, the mobile service instead uses the connection string value set in the portal and ignores the connection string in the project.</target>
          </trans-unit>
          <trans-unit id="126" xml:space="preserve">
            <source><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>Modify data types and table controllers</source>
            <target state="new"><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>Modify data types and table controllers</target>
          </trans-unit>
          <trans-unit id="127" xml:space="preserve">
            <source>Because the TodoList quickstart project is designed to work with a SQL Database using Entity Framework, you need to make some updates in the project to work with Table storage.</source>
            <target state="new">Because the TodoList quickstart project is designed to work with a SQL Database using Entity Framework, you need to make some updates in the project to work with Table storage.</target>
          </trans-unit>
          <trans-unit id="128" xml:space="preserve">
            <source>Modify the <bpt id="2">&lt;strong&gt;</bpt>TodoItem<ept id="2">&lt;/strong&gt;</ept> data type to derive from <bpt id="4">&lt;strong&gt;</bpt>StorageData<ept id="4">&lt;/strong&gt;</ept> instead of <bpt id="6">&lt;strong&gt;</bpt>EntityData<ept id="6">&lt;/strong&gt;</ept>, as follows.</source>
            <target state="new">Modify the <bpt id="2">&lt;strong&gt;</bpt>TodoItem<ept id="2">&lt;/strong&gt;</ept> data type to derive from <bpt id="4">&lt;strong&gt;</bpt>StorageData<ept id="4">&lt;/strong&gt;</ept> instead of <bpt id="6">&lt;strong&gt;</bpt>EntityData<ept id="6">&lt;/strong&gt;</ept>, as follows.</target>
          </trans-unit>
          <trans-unit id="129" xml:space="preserve">
            <source>The <bpt id="2">&lt;strong&gt;</bpt>StorageData<ept id="2">&lt;/strong&gt;</ept> type has an Id property that requires a compound key that is a string in the format <bpt id="4">&lt;em&gt;</bpt>partitionId<ept id="4">&lt;/em&gt;</ept>,<bpt id="6">&lt;em&gt;</bpt>rowValue<ept id="6">&lt;/em&gt;</ept>.</source>
            <target state="new">The <bpt id="2">&lt;strong&gt;</bpt>StorageData<ept id="2">&lt;/strong&gt;</ept> type has an Id property that requires a compound key that is a string in the format <bpt id="4">&lt;em&gt;</bpt>partitionId<ept id="4">&lt;/em&gt;</ept>,<bpt id="6">&lt;em&gt;</bpt>rowValue<ept id="6">&lt;/em&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="130" xml:space="preserve">
            <source>In <bpt id="2">&lt;strong&gt;</bpt>TodoItemController<ept id="2">&lt;/strong&gt;</ept>, add the following using statement.</source>
            <target state="new">In <bpt id="2">&lt;strong&gt;</bpt>TodoItemController<ept id="2">&lt;/strong&gt;</ept>, add the following using statement.</target>
          </trans-unit>
          <trans-unit id="131" xml:space="preserve">
            <source>Replace the <bpt id="2">&lt;strong&gt;</bpt>Initialize<ept id="2">&lt;/strong&gt;</ept> method of the <bpt id="4">&lt;strong&gt;</bpt>TodoItemController<ept id="4">&lt;/strong&gt;</ept> with the following.</source>
            <target state="new">Replace the <bpt id="2">&lt;strong&gt;</bpt>Initialize<ept id="2">&lt;/strong&gt;</ept> method of the <bpt id="4">&lt;strong&gt;</bpt>TodoItemController<ept id="4">&lt;/strong&gt;</ept> with the following.</target>
          </trans-unit>
          <trans-unit id="132" xml:space="preserve">
            <source>This create a new storage domain manager for the requested controller using the storage account connection string.</source>
            <target state="new">This create a new storage domain manager for the requested controller using the storage account connection string.</target>
          </trans-unit>
          <trans-unit id="133" xml:space="preserve">
            <source>Replace the existing <bpt id="2">&lt;strong&gt;</bpt>GetAllTodoItems<ept id="2">&lt;/strong&gt;</ept> method with the following code.</source>
            <target state="new">Replace the existing <bpt id="2">&lt;strong&gt;</bpt>GetAllTodoItems<ept id="2">&lt;/strong&gt;</ept> method with the following code.</target>
          </trans-unit>
          <trans-unit id="134" xml:space="preserve">
            <source>Unlike a SQL Database, this version doesn't return IQueryable<bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>, so the result can be bound to but not futher composed in a query.</source>
            <target state="new">Unlike a SQL Database, this version doesn't return IQueryable<bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>, so the result can be bound to but not futher composed in a query.</target>
          </trans-unit>
          <trans-unit id="135" xml:space="preserve">
            <source>Update the client app</source>
            <target state="new">Update the client app</target>
          </trans-unit>
          <trans-unit id="136" xml:space="preserve">
            <source>You need to make one change on the client side to make the quickstart app work with the .NET backend using Table storage.</source>
            <target state="new">You need to make one change on the client side to make the quickstart app work with the .NET backend using Table storage.</target>
          </trans-unit>
          <trans-unit id="137" xml:space="preserve">
            <source>This is due to the compound key expected by the table storage provider.</source>
            <target state="new">This is due to the compound key expected by the table storage provider.</target>
          </trans-unit>
          <trans-unit id="138" xml:space="preserve">
            <source>Open the client code file that contains the data access code and find the method where the insert operation performed.</source>
            <target state="new">Open the client code file that contains the data access code and find the method where the insert operation performed.</target>
          </trans-unit>
          <trans-unit id="139" xml:space="preserve">
            <source>Update the TodoItem instance being added to explicitly set the Id field in the string format <bpt id="2">&lt;code&gt;</bpt>&lt;partitionID&gt;,&lt;rowValue&gt;<ept id="2">&lt;/code&gt;</ept>.</source>
            <target state="new">Update the TodoItem instance being added to explicitly set the Id field in the string format <bpt id="2">&lt;code&gt;</bpt>&lt;partitionID&gt;,&lt;rowValue&gt;<ept id="2">&lt;/code&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="140" xml:space="preserve">
            <source>This is an example of how this ID might be set in a C# app, where the partition part is fixed and the row part is GUID-based.</source>
            <target state="new">This is an example of how this ID might be set in a C# app, where the partition part is fixed and the row part is GUID-based.</target>
          </trans-unit>
          <trans-unit id="141" xml:space="preserve">
            <source>You are now ready to test the app.</source>
            <target state="new">You are now ready to test the app.</target>
          </trans-unit>
          <trans-unit id="142" xml:space="preserve">
            <source><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>Test the application</source>
            <target state="new"><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>Test the application</target>
          </trans-unit>
          <trans-unit id="143" xml:space="preserve">
            <source>(Optional) Republish your mobile service .NET backend project.</source>
            <target state="new">(Optional) Republish your mobile service .NET backend project.</target>
          </trans-unit>
          <trans-unit id="144" xml:space="preserve">
            <source>You can also test your mobile service locally before you publish the .NET backend project to Azure.</source>
            <target state="new">You can also test your mobile service locally before you publish the .NET backend project to Azure.</target>
          </trans-unit>
          <trans-unit id="145" xml:space="preserve">
            <source>Whether you test locally or in Azure, the mobile service will be using the Azure Table storage.</source>
            <target state="new">Whether you test locally or in Azure, the mobile service will be using the Azure Table storage.</target>
          </trans-unit>
          <trans-unit id="146" xml:space="preserve">
            <source>Run the quickstart client app connected to your mobile service.</source>
            <target state="new">Run the quickstart client app connected to your mobile service.</target>
          </trans-unit>
          <trans-unit id="147" xml:space="preserve">
            <source>Note that you do not see items that you previously added using the quickstart tutorial.</source>
            <target state="new">Note that you do not see items that you previously added using the quickstart tutorial.</target>
          </trans-unit>
          <trans-unit id="148" xml:space="preserve">
            <source>This is because the Table store is currently empty.</source>
            <target state="new">This is because the Table store is currently empty.</target>
          </trans-unit>
          <trans-unit id="149" xml:space="preserve">
            <source>Add new items to generate database changes.</source>
            <target state="new">Add new items to generate database changes.</target>
          </trans-unit>
          <trans-unit id="150" xml:space="preserve">
            <source>The app and mobile service should behave as before, except now your data is being stored in your non-relational store instead of in the SQL Database.</source>
            <target state="new">The app and mobile service should behave as before, except now your data is being stored in your non-relational store instead of in the SQL Database.</target>
          </trans-unit>
          <trans-unit id="151" xml:space="preserve">
            <source>Next Steps</source>
            <target state="new">Next Steps</target>
          </trans-unit>
          <trans-unit id="152" xml:space="preserve">
            <source>Now that you have seen how easy it is to use Table storage with .NET backend, consider exploring some other backend storage options:</source>
            <target state="new">Now that you have seen how easy it is to use Table storage with .NET backend, consider exploring some other backend storage options:</target>
          </trans-unit>
          <trans-unit id="153" xml:space="preserve">
            <source><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Use MongoDB as a data store with your Mobile Services.NET backend<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>Like the tutorial you just completed, this topic shows you how to use a non-relational data store for your mobile service. In this tutorial, you will modify the Mobile Services quickstart project to use MongoDB instead of SQL Database as the data store.</source>
            <target state="new"><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Use MongoDB as a data store with your Mobile Services.NET backend<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>Like the tutorial you just completed, this topic shows you how to use a non-relational data store for your mobile service. In this tutorial, you will modify the Mobile Services quickstart project to use MongoDB instead of SQL Database as the data store.</target>
          </trans-unit>
          <trans-unit id="154" xml:space="preserve">
            <source><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Connect to an on-premises SQL Server using Hybrid Connections<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>Hybrid Connections lets your mobile service securely connect to your on-premises assets. In this way, you can make your on-premises data accessible to your mobile clients by using Azure. Supported assets include any resource that runs on a static TCP port, including Microsoft SQL Server, MySQL, HTTP Web APIs, and most custom web services.</source>
            <target state="new"><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Connect to an on-premises SQL Server using Hybrid Connections<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>Hybrid Connections lets your mobile service securely connect to your on-premises assets. In this way, you can make your on-premises data accessible to your mobile clients by using Azure. Supported assets include any resource that runs on a static TCP port, including Microsoft SQL Server, MySQL, HTTP Web APIs, and most custom web services.</target>
          </trans-unit>
          <trans-unit id="155" xml:space="preserve">
            <source><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Upload images to Azure Storage using Mobile Services<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>Shows you how to extend the TodoList sample project to let you upload images from your app to Azure Blob storage.</source>
            <target state="new"><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Upload images to Azure Storage using Mobile Services<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>Shows you how to extend the TodoList sample project to let you upload images from your app to Azure Blob storage.</target>
          </trans-unit>
        </group>
      </group>
    </body>
  </file>
</xliff>