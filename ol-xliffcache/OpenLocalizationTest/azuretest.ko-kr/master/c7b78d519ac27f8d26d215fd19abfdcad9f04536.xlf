<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="ko-kr">
    <body>
      <group id="main" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Send x-plat notifications to a specific user with Windows Store client</source>
          <target state="new">Send x-plat notifications to a specific user with Windows Store client</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Learn how to send push notifications to all devices of a specific user.</source>
          <target state="new">Learn how to send push notifications to all devices of a specific user.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Send cross-platform notifications to a specific user</source>
          <target state="new">Send cross-platform notifications to a specific user</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>&amp;nbsp;</source>
          <target state="new">&amp;nbsp;</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This topic shows you how to send notifications to all registered devices of a specific user from your mobile backend.</source>
          <target state="new">This topic shows you how to send notifications to all registered devices of a specific user from your mobile backend.</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>It introduced the concept of [templates], which gives client applications the freedom of specifying payload formats and variable placeholders at registration.</source>
          <target state="new">It introduced the concept of [templates], which gives client applications the freedom of specifying payload formats and variable placeholders at registration.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Send then hits every platform with these placeholders, enabling cross-platform notifications.</source>
          <target state="new">Send then hits every platform with these placeholders, enabling cross-platform notifications.</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> To get push working with cross-platform clients, you will need to complete this tutorial for each platform you would like to enable.</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> To get push working with cross-platform clients, you will need to complete this tutorial for each platform you would like to enable.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>You will only need to do the <bpt id="p1">[</bpt>mobile backend update<ept id="p1">](#backend)</ept> once for clients that share the same mobile backend.</source>
          <target state="new">You will only need to do the <bpt id="p1">[</bpt>mobile backend update<ept id="p1">](#backend)</ept> once for clients that share the same mobile backend.</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Prerequisites</source>
          <target state="new">Prerequisites</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Before you start this tutorial, you must have already completed these App Service tutorials for each client platform you want working:</source>
          <target state="new">Before you start this tutorial, you must have already completed these App Service tutorials for each client platform you want working:</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>[Get started with authentication]</source>
          <target state="new">[Get started with authentication]</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Adds a login requirement to the TodoList sample app.</source>
          <target state="new">Adds a login requirement to the TodoList sample app.</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>[Get started with push notifications]</source>
          <target state="new">[Get started with push notifications]</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Configures the TodoList sample app for push notifications.</source>
          <target state="new">Configures the TodoList sample app for push notifications.</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Update your client to register for templates to handle cross-platform pushes</source>
          <target state="new">Update your client to register for templates to handle cross-platform pushes</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>We will instead perform <bpt id="p1">**</bpt>InitNotificationAsync<ept id="p1">**</ept> in <bpt id="p2">**</bpt>MainPage.cs<ept id="p2">**</ept> to work with user authentication.</source>
          <target state="new">We will instead perform <bpt id="p1">**</bpt>InitNotificationAsync<ept id="p1">**</ept> in <bpt id="p2">**</bpt>MainPage.cs<ept id="p2">**</ept> to work with user authentication.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Delete your <bpt id="p1">**</bpt>InitNotificationAsync<ept id="p1">**</ept> method definition and call in <bpt id="p2">**</bpt>App.xmal.cs<ept id="p2">**</ept>, and add the following in <bpt id="p3">**</bpt>MainPage.cs<ept id="p3">**</ept> in the <bpt id="p4">**</bpt>MainPage<ept id="p4">**</ept> class:</source>
          <target state="new">Delete your <bpt id="p1">**</bpt>InitNotificationAsync<ept id="p1">**</ept> method definition and call in <bpt id="p2">**</bpt>App.xmal.cs<ept id="p2">**</ept>, and add the following in <bpt id="p3">**</bpt>MainPage.cs<ept id="p3">**</ept> in the <bpt id="p4">**</bpt>MainPage<ept id="p4">**</ept> class:</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>private async void InitNotificationsAsync()</source>
          <target state="new">private async void InitNotificationsAsync()</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>{</source>
          <target state="new">{</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>var channel = await PushNotificationChannelManager.CreatePushNotificationChannelForApplicationAsync();</source>
          <target state="new">var channel = await PushNotificationChannelManager.CreatePushNotificationChannelForApplicationAsync();</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>// building templates for wns</source>
          <target state="new">// building templates for wns</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>var toastTemplate = "</source>
          <target state="new">var toastTemplate = "</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>&lt;binding template=\"ToastText01\"&gt;&lt;text id=\"1\"&gt;$(message)</source>
          <target state="new">&lt;binding template=\"ToastText01\"&gt;&lt;text id=\"1\"&gt;$(message)</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>JObject templateBody = new JObject();</source>
          <target state="new">JObject templateBody = new JObject();</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>templateBody["body"] = toastTemplate;</source>
          <target state="new">templateBody["body"] = toastTemplate;</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>JObject wnsToastHeaders = new JObject();</source>
          <target state="new">JObject wnsToastHeaders = new JObject();</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>wnsToastHeaders["X-WNS-Type"] = "wns/toast";</source>
          <target state="new">wnsToastHeaders["X-WNS-Type"] = "wns/toast";</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>templateBody["headers"] = wnsToastHeaders;</source>
          <target state="new">templateBody["headers"] = wnsToastHeaders;</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>JObject templates = new JObject();</source>
          <target state="new">JObject templates = new JObject();</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>templates["testTemplate"] = templateBody;</source>
          <target state="new">templates["testTemplate"] = templateBody;</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>await App.MobileService.GetPush().RegisterAsync(channel.Uri, templates);</source>
          <target state="new">await App.MobileService.GetPush().RegisterAsync(channel.Uri, templates);</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>}</source>
          <target state="new">}</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>You will also want to transfer some using statements to <bpt id="p1">**</bpt>MainPage.cs<ept id="p1">**</ept>.</source>
          <target state="new">You will also want to transfer some using statements to <bpt id="p1">**</bpt>MainPage.cs<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Use this method right after the <bpt id="p1">**</bpt>AuthenticateAsync<ept id="p1">**</ept> call in <bpt id="p2">**</bpt>ButtonLogin_Click<ept id="p2">**</ept>.</source>
          <target state="new">Use this method right after the <bpt id="p1">**</bpt>AuthenticateAsync<ept id="p1">**</ept> call in <bpt id="p2">**</bpt>ButtonLogin_Click<ept id="p2">**</ept>.</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>await AuthenticateAsync();</source>
          <target state="new">await AuthenticateAsync();</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>InitNotificationAsync();</source>
          <target state="new">InitNotificationAsync();</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Your app is now set up to register user device with the user login information.</source>
          <target state="new">Your app is now set up to register user device with the user login information.</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Update your service backend to send notifications to a specific user</source>
          <target state="new">Update your service backend to send notifications to a specific user</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>In Visual Studio, update the <ph id="ph1">`PostTodoItem`</ph> method definition with the following code:</source>
          <target state="new">In Visual Studio, update the <ph id="ph1">`PostTodoItem`</ph> method definition with the following code:</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>public async Task</source>
          <target state="new">public async Task</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>PostTodoItem(TodoItem item)</source>
          <target state="new">PostTodoItem(TodoItem item)</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>{</source>
          <target state="new">{</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>TodoItem current = await InsertAsync(item);</source>
          <target state="new">TodoItem current = await InsertAsync(item);</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>// get notification hubs credentials associated with this mobile app</source>
          <target state="new">// get notification hubs credentials associated with this mobile app</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>string notificationHubName = this.Services.Settings.NotificationHubName;</source>
          <target state="new">string notificationHubName = this.Services.Settings.NotificationHubName;</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>string notificationHubConnection = this.Services.Settings.Connections[ServiceSettingsKeys.NotificationHubConnectionString].ConnectionString;</source>
          <target state="new">string notificationHubConnection = this.Services.Settings.Connections[ServiceSettingsKeys.NotificationHubConnectionString].ConnectionString;</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>// connect to notification hub</source>
          <target state="new">// connect to notification hub</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>NotificationHubClient Hub = NotificationHubClient.CreateClientFromConnectionString(notificationHubConnection, notificationHubName)</source>
          <target state="new">NotificationHubClient Hub = NotificationHubClient.CreateClientFromConnectionString(notificationHubConnection, notificationHubName)</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>// get the current user id and create tag to identify user</source>
          <target state="new">// get the current user id and create tag to identify user</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>ServiceUser authenticatedUser = this.User as ServiceUser;</source>
          <target state="new">ServiceUser authenticatedUser = this.User as ServiceUser;</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>string userTag = "_UserId:" + authenticatedUser.Id;</source>
          <target state="new">string userTag = "_UserId:" + authenticatedUser.Id;</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>// build dictionary for template</source>
          <target state="new">// build dictionary for template</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>var notification = new Dictionary&lt;string, string&gt;{{"message", item.Text}};</source>
          <target state="new">var notification = new Dictionary&lt;string, string&gt;{{"message", item.Text}};</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>try</source>
          <target state="new">try</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>{</source>
          <target state="new">{</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>await Hub.Push.SendTemplateNotificationAsync(notification, userTag);</source>
          <target state="new">await Hub.Push.SendTemplateNotificationAsync(notification, userTag);</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>}</source>
          <target state="new">}</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>catch (System.Exception ex)</source>
          <target state="new">catch (System.Exception ex)</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>{</source>
          <target state="new">{</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>throw;</source>
          <target state="new">throw;</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>}</source>
          <target state="new">}</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>return CreatedAtRoute("Tables", new { id = current.Id }, current);</source>
          <target state="new">return CreatedAtRoute("Tables", new { id = current.Id }, current);</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>}</source>
          <target state="new">}</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Test the app</source>
          <target state="new">Test the app</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Re-publish your mobile backend project and run any of the client apps you have set up.</source>
          <target state="new">Re-publish your mobile backend project and run any of the client apps you have set up.</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>On item insertion, the backend will send notifications to all client apps where the user is logged in.</source>
          <target state="new">On item insertion, the backend will send notifications to all client apps where the user is logged in.</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>test</source>
          <target state="new">test</target>
        </trans-unit>
      </group>
    </body>
  </file>
  <header xmlns="">
    <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c7b78d519ac27f8d26d215fd19abfdcad9f04536</xliffext:olfilehash>
  </header>
</xliff>