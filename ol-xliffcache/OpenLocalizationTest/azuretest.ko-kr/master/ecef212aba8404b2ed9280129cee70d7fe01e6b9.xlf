<?xml version="1.0" encoding="utf-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" source-language="en-us" target-language="ko-kr" original="2/21/2016 1:07:55 AM" tool-id="MarkdownTransformer" product-name="N/A" product-version="N/A" build-num="1">
    <header>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ecef212aba8404b2ed9280129cee70d7fe01e6b9</xliffext:olfilehash>
      <tool tool-id="MarkdownTransformer" tool-name="MarkdownToXliff" tool-version="1.0" tool-company="Microsoft" />
    </header>
    <body>
      <group extype="content">
        <group id="101">
          <trans-unit id="101" xml:space="preserve">
            <source>Attribute-based app provisioning with scoping filters</source>
            <target state="new">Attribute-based app provisioning with scoping filters</target>
          </trans-unit>
          <trans-unit id="102" xml:space="preserve">
            <source>Learn how to use scoping filters to prevent objects in apps that support automated user provisioning from actually being provisioned if an object doesn’t satisfy your business requirements.</source>
            <target state="new">Learn how to use scoping filters to prevent objects in apps that support automated user provisioning from actually being provisioned if an object doesn’t satisfy your business requirements.</target>
          </trans-unit>
          <trans-unit id="103" xml:space="preserve">
            <source>Attribute-based app provisioning with scoping filters</source>
            <target state="new">Attribute-based app provisioning with scoping filters</target>
          </trans-unit>
          <trans-unit id="104" xml:space="preserve">
            <source>The objective of this section is to explain how to use scoping filters to define attribute-based rules that will determine which users will be provisioned to the application.</source>
            <target state="new">The objective of this section is to explain how to use scoping filters to define attribute-based rules that will determine which users will be provisioned to the application.</target>
          </trans-unit>
          <trans-unit id="105" xml:space="preserve">
            <source>Clauses and Scope Groups</source>
            <target state="new">Clauses and Scope Groups</target>
          </trans-unit>
          <trans-unit id="106" xml:space="preserve">
            <source><bpt id="1">&lt;linkText&gt;</bpt>Scoping Filter<ept id="1">&lt;/linkText&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;linkText&gt;</bpt>Scoping Filter<ept id="1">&lt;/linkText&gt;</ept></target>
          </trans-unit>
          <trans-unit id="107" xml:space="preserve">
            <source>Scoping filters are defined by one or more <bpt id="2">&lt;strong&gt;</bpt>scope groups<ept id="2">&lt;/strong&gt;</ept>, each of which hold one or more <bpt id="4">&lt;strong&gt;</bpt>clauses<ept id="4">&lt;/strong&gt;</ept>.</source>
            <target state="new">Scoping filters are defined by one or more <bpt id="2">&lt;strong&gt;</bpt>scope groups<ept id="2">&lt;/strong&gt;</ept>, each of which hold one or more <bpt id="4">&lt;strong&gt;</bpt>clauses<ept id="4">&lt;/strong&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="108" xml:space="preserve">
            <source>To see the clauses for a particular scope group, expand it by clicking the arrow to the left of the group name.</source>
            <target state="new">To see the clauses for a particular scope group, expand it by clicking the arrow to the left of the group name.</target>
          </trans-unit>
          <trans-unit id="109" xml:space="preserve">
            <source>A <bpt id="2">&lt;strong&gt;</bpt>clause<ept id="2">&lt;/strong&gt;</ept> determines which users are allowed to pass through the scoping filter by evaluating each user’s attributes.</source>
            <target state="new">A <bpt id="2">&lt;strong&gt;</bpt>clause<ept id="2">&lt;/strong&gt;</ept> determines which users are allowed to pass through the scoping filter by evaluating each user’s attributes.</target>
          </trans-unit>
          <trans-unit id="110" xml:space="preserve">
            <source>For example, you might have one clause that requires that a user’s ‘state’ attribute be equal to New York, which means that only your New York users will be provisioned into the application.</source>
            <target state="new">For example, you might have one clause that requires that a user’s ‘state’ attribute be equal to New York, which means that only your New York users will be provisioned into the application.</target>
          </trans-unit>
          <trans-unit id="111" xml:space="preserve">
            <source><bpt id="1">&lt;linkText&gt;</bpt>Scoping Group Name<ept id="1">&lt;/linkText&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;linkText&gt;</bpt>Scoping Group Name<ept id="1">&lt;/linkText&gt;</ept></target>
          </trans-unit>
          <trans-unit id="112" xml:space="preserve">
            <source>Each <bpt id="2">&lt;strong&gt;</bpt>scope group<ept id="2">&lt;/strong&gt;</ept> starts with one mandatory <bpt id="4">&lt;strong&gt;</bpt>clause<ept id="4">&lt;/strong&gt;</ept>, as shown in the screenshot above.</source>
            <target state="new">Each <bpt id="2">&lt;strong&gt;</bpt>scope group<ept id="2">&lt;/strong&gt;</ept> starts with one mandatory <bpt id="4">&lt;strong&gt;</bpt>clause<ept id="4">&lt;/strong&gt;</ept>, as shown in the screenshot above.</target>
          </trans-unit>
          <trans-unit id="113" xml:space="preserve">
            <source>This clause simply states that the user must first be assigned to the application before it’s evaluated by your scoping filters.</source>
            <target state="new">This clause simply states that the user must first be assigned to the application before it’s evaluated by your scoping filters.</target>
          </trans-unit>
          <trans-unit id="114" xml:space="preserve">
            <source>This clause cannot be deleted or modified.</source>
            <target state="new">This clause cannot be deleted or modified.</target>
          </trans-unit>
          <trans-unit id="115" xml:space="preserve">
            <source>You can add new clauses or new scope groups by pressing the appropriate button.</source>
            <target state="new">You can add new clauses or new scope groups by pressing the appropriate button.</target>
          </trans-unit>
          <trans-unit id="116" xml:space="preserve">
            <source>You can give each scope group a name by editing its <bpt id="2">&lt;strong&gt;</bpt>Scope Group Name<ept id="2">&lt;/strong&gt;</ept> property.</source>
            <target state="new">You can give each scope group a name by editing its <bpt id="2">&lt;strong&gt;</bpt>Scope Group Name<ept id="2">&lt;/strong&gt;</ept> property.</target>
          </trans-unit>
          <trans-unit id="117" xml:space="preserve">
            <source>How Scoping Filters are Evaluated</source>
            <target state="new">How Scoping Filters are Evaluated</target>
          </trans-unit>
          <trans-unit id="118" xml:space="preserve">
            <source>During provisioning, we test every assigned user against your scoping filters to determine if that user deserves access to the application.</source>
            <target state="new">During provisioning, we test every assigned user against your scoping filters to determine if that user deserves access to the application.</target>
          </trans-unit>
          <trans-unit id="119" xml:space="preserve">
            <source>You can think of each clause as being a test that must be passed in order for the user to avoid getting filtered out.</source>
            <target state="new">You can think of each clause as being a test that must be passed in order for the user to avoid getting filtered out.</target>
          </trans-unit>
          <trans-unit id="120" xml:space="preserve">
            <source>If you have multiple scope groups defined, each user must pass at least one of them in order to access the application.</source>
            <target state="new">If you have multiple scope groups defined, each user must pass at least one of them in order to access the application.</target>
          </trans-unit>
          <trans-unit id="121" xml:space="preserve">
            <source>Within each scope group, however, the user must pass every single clause in order to pass that specific scope group.</source>
            <target state="new">Within each scope group, however, the user must pass every single clause in order to pass that specific scope group.</target>
          </trans-unit>
          <trans-unit id="122" xml:space="preserve">
            <source>In other words, you can think of scope groups as being OR’d together, and you can think of the clauses within them as being AND’d together.For example, consider the scoping filter below:</source>
            <target state="new">In other words, you can think of scope groups as being OR’d together, and you can think of the clauses within them as being AND’d together.For example, consider the scoping filter below:</target>
          </trans-unit>
          <trans-unit id="123" xml:space="preserve">
            <source><bpt id="1">&lt;linkText&gt;</bpt>Scoping Group Name<ept id="1">&lt;/linkText&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;linkText&gt;</bpt>Scoping Group Name<ept id="1">&lt;/linkText&gt;</ept></target>
          </trans-unit>
          <trans-unit id="124" xml:space="preserve">
            <source>According to this scoping filter, users must satisfy the following criteria, in order to be provisioned:</source>
            <target state="new">According to this scoping filter, users must satisfy the following criteria, in order to be provisioned:</target>
          </trans-unit>
          <trans-unit id="125" xml:space="preserve">
            <source>They must be assigned to the application.</source>
            <target state="new">They must be assigned to the application.</target>
          </trans-unit>
          <trans-unit id="126" xml:space="preserve">
            <source>They must work in the Engineering department</source>
            <target state="new">They must work in the Engineering department</target>
          </trans-unit>
          <trans-unit id="127" xml:space="preserve">
            <source>They must be work in either San Francisco or Canada.</source>
            <target state="new">They must be work in either San Francisco or Canada.</target>
          </trans-unit>
          <trans-unit id="128" xml:space="preserve">
            <source><ph id="1">&lt;token href="../../includes/active-directory-saas-toc.md"/&gt;</ph></source>
            <target state="new"><ph id="1">&lt;token href="../../includes/active-directory-saas-toc.md"/&gt;</ph></target>
          </trans-unit>
        </group>
      </group>
    </body>
  </file>
</xliff>