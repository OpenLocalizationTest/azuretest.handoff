<?xml version="1.0" encoding="utf-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" source-language="en-us" target-language="ko-kr" original="2/21/2016 4:44:28 AM" tool-id="MarkdownTransformer" product-name="N/A" product-version="N/A" build-num="1">
    <header>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a2bf151527a4f1a2e17876bb0700eed4ca723a4f</xliffext:olfilehash>
      <tool tool-id="MarkdownTransformer" tool-name="MarkdownToXliff" tool-version="1.0" tool-company="Microsoft" />
    </header>
    <body>
      <group extype="content">
        <group id="101">
          <trans-unit id="101" xml:space="preserve">
            <source>Reliable Actors Lifecycle</source>
            <target state="new">Reliable Actors Lifecycle</target>
          </trans-unit>
          <trans-unit id="102" xml:space="preserve">
            <source>Explains Lifecycle and Garbage Collection for Service Fabric Reliable Actors</source>
            <target state="new">Explains Lifecycle and Garbage Collection for Service Fabric Reliable Actors</target>
          </trans-unit>
          <trans-unit id="103" xml:space="preserve">
            <source>Actor lifecycle and Garbage Collection</source>
            <target state="new">Actor lifecycle and Garbage Collection</target>
          </trans-unit>
          <trans-unit id="104" xml:space="preserve">
            <source>An Actor is activated when the first call is made to it and it is deactivated (Garbage Collected by Actors runtime) if it is not used for some period of time.</source>
            <target state="new">An Actor is activated when the first call is made to it and it is deactivated (Garbage Collected by Actors runtime) if it is not used for some period of time.</target>
          </trans-unit>
          <trans-unit id="105" xml:space="preserve">
            <source>To configure this time period please see section on Actor Garbage Collection below.</source>
            <target state="new">To configure this time period please see section on Actor Garbage Collection below.</target>
          </trans-unit>
          <trans-unit id="106" xml:space="preserve">
            <source>What happens on Actor Activation?</source>
            <target state="new">What happens on Actor Activation?</target>
          </trans-unit>
          <trans-unit id="107" xml:space="preserve">
            <source>When a call comes for an actor and it is not already active, a new actor is created.</source>
            <target state="new">When a call comes for an actor and it is not already active, a new actor is created.</target>
          </trans-unit>
          <trans-unit id="108" xml:space="preserve">
            <source>Its state is loaded (if it is a stateful actor)</source>
            <target state="new">Its state is loaded (if it is a stateful actor)</target>
          </trans-unit>
          <trans-unit id="109" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>OnActivateAsync<ept id="1">&lt;/code&gt;</ept> method (which can be overridden in  actor implementation) is called.</source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>OnActivateAsync<ept id="1">&lt;/code&gt;</ept> method (which can be overridden in  actor implementation) is called.</target>
          </trans-unit>
          <trans-unit id="110" xml:space="preserve">
            <source>It is added to an Active Actors table.</source>
            <target state="new">It is added to an Active Actors table.</target>
          </trans-unit>
          <trans-unit id="111" xml:space="preserve">
            <source>What happens on Actor Deactivation?</source>
            <target state="new">What happens on Actor Deactivation?</target>
          </trans-unit>
          <trans-unit id="112" xml:space="preserve">
            <source>When an actor is not used for some period of time, it is removed from the table of Active Actors.</source>
            <target state="new">When an actor is not used for some period of time, it is removed from the table of Active Actors.</target>
          </trans-unit>
          <trans-unit id="113" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>OnDeactivateAsync<ept id="1">&lt;/code&gt;</ept> method (which can be overridden in actor implementation) is called which clears all the timers for the actor.</source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>OnDeactivateAsync<ept id="1">&lt;/code&gt;</ept> method (which can be overridden in actor implementation) is called which clears all the timers for the actor.</target>
          </trans-unit>
          <trans-unit id="114" xml:space="preserve">
            <source>The Fabric Actors runtime emits some <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>events related to actor activation and deactivation<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">The Fabric Actors runtime emits some <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>events related to actor activation and deactivation<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="115" xml:space="preserve">
            <source>They are useful in diagnostics and performance monitoring.</source>
            <target state="new">They are useful in diagnostics and performance monitoring.</target>
          </trans-unit>
          <trans-unit id="116" xml:space="preserve">
            <source>Actor Garbage Collection</source>
            <target state="new">Actor Garbage Collection</target>
          </trans-unit>
          <trans-unit id="117" xml:space="preserve">
            <source>The Actors runtime periodically scans for actors that have not been used for some period of time, and deactivates them.</source>
            <target state="new">The Actors runtime periodically scans for actors that have not been used for some period of time, and deactivates them.</target>
          </trans-unit>
          <trans-unit id="118" xml:space="preserve">
            <source>Once they are deactivated they can be garbage collected by CLR.</source>
            <target state="new">Once they are deactivated they can be garbage collected by CLR.</target>
          </trans-unit>
          <trans-unit id="119" xml:space="preserve">
            <source>What counts as “being used” for the purpose of garbage collection?</source>
            <target state="new">What counts as “being used” for the purpose of garbage collection?</target>
          </trans-unit>
          <trans-unit id="120" xml:space="preserve">
            <source>Receiving a call.</source>
            <target state="new">Receiving a call.</target>
          </trans-unit>
          <trans-unit id="121" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>IRemindable.ReceiveReminderAsync<ept id="1">&lt;/code&gt;</ept> method being invoked (applicable only if the actor uses reminders).</source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>IRemindable.ReceiveReminderAsync<ept id="1">&lt;/code&gt;</ept> method being invoked (applicable only if the actor uses reminders).</target>
          </trans-unit>
          <trans-unit id="122" xml:space="preserve">
            <source>It is worth noting that if the actor uses timers and its timer callback is invoked, it does <bpt id="2">&lt;strong&gt;</bpt>not<ept id="2">&lt;/strong&gt;</ept> count as "being used".</source>
            <target state="new">It is worth noting that if the actor uses timers and its timer callback is invoked, it does <bpt id="2">&lt;strong&gt;</bpt>not<ept id="2">&lt;/strong&gt;</ept> count as "being used".</target>
          </trans-unit>
          <trans-unit id="123" xml:space="preserve">
            <source>Before going into the details of garbage collection, it is important to define the following terms:</source>
            <target state="new">Before going into the details of garbage collection, it is important to define the following terms:</target>
          </trans-unit>
          <trans-unit id="124" xml:space="preserve">
            <source><bpt id="1">&lt;em&gt;</bpt>Scan interval<ept id="1">&lt;/em&gt;</ept> - This is the interval at which the Actors runtime scans its Active Actors table for actors that can be garbage collected.</source>
            <target state="new"><bpt id="1">&lt;em&gt;</bpt>Scan interval<ept id="1">&lt;/em&gt;</ept> - This is the interval at which the Actors runtime scans its Active Actors table for actors that can be garbage collected.</target>
          </trans-unit>
          <trans-unit id="125" xml:space="preserve">
            <source>The default value for this is 1 minute.</source>
            <target state="new">The default value for this is 1 minute.</target>
          </trans-unit>
          <trans-unit id="126" xml:space="preserve">
            <source><bpt id="1">&lt;em&gt;</bpt>Idle timeout<ept id="1">&lt;/em&gt;</ept> - This is the amount of time an actor needs to remain unused (idle) before it can be garbage collected.</source>
            <target state="new"><bpt id="1">&lt;em&gt;</bpt>Idle timeout<ept id="1">&lt;/em&gt;</ept> - This is the amount of time an actor needs to remain unused (idle) before it can be garbage collected.</target>
          </trans-unit>
          <trans-unit id="127" xml:space="preserve">
            <source>The default value for this is 60 minutes.</source>
            <target state="new">The default value for this is 60 minutes.</target>
          </trans-unit>
          <trans-unit id="128" xml:space="preserve">
            <source>Typically you do not need to change these defaults.</source>
            <target state="new">Typically you do not need to change these defaults.</target>
          </trans-unit>
          <trans-unit id="129" xml:space="preserve">
            <source>However, if necessary, these intervals can be changed at an assembly level for all actor types in that assembly or at an actor type level using the <bpt id="2">&lt;code&gt;</bpt>ActorGarbageCollection<ept id="2">&lt;/code&gt;</ept> attribute.</source>
            <target state="new">However, if necessary, these intervals can be changed at an assembly level for all actor types in that assembly or at an actor type level using the <bpt id="2">&lt;code&gt;</bpt>ActorGarbageCollection<ept id="2">&lt;/code&gt;</ept> attribute.</target>
          </trans-unit>
          <trans-unit id="130" xml:space="preserve">
            <source>The example below shows the change in the garbage collection intervals for HelloActor.</source>
            <target state="new">The example below shows the change in the garbage collection intervals for HelloActor.</target>
          </trans-unit>
          <trans-unit id="131" xml:space="preserve">
            <source>To change default value of <bpt id="2">&lt;code&gt;</bpt>ActorGarbageCollection<ept id="2">&lt;/code&gt;</ept> attribute at Assembly level, add following snippet to <bpt id="4">&lt;code&gt;</bpt>AssemblyInfo.cs<ept id="4">&lt;/code&gt;</ept>.</source>
            <target state="new">To change default value of <bpt id="2">&lt;code&gt;</bpt>ActorGarbageCollection<ept id="2">&lt;/code&gt;</ept> attribute at Assembly level, add following snippet to <bpt id="4">&lt;code&gt;</bpt>AssemblyInfo.cs<ept id="4">&lt;/code&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="132" xml:space="preserve">
            <source>For each actor in its Active Actors table, the Actors runtime keeps track of the amount of time it has been idle (i.e. not used).</source>
            <target state="new">For each actor in its Active Actors table, the Actors runtime keeps track of the amount of time it has been idle (i.e. not used).</target>
          </trans-unit>
          <trans-unit id="133" xml:space="preserve">
            <source>The Actors runtime checks each of the actors every <bpt id="2">&lt;code&gt;</bpt>ScanIntervalInSeconds<ept id="2">&lt;/code&gt;</ept> to see if it can be garbage collected and collects it if has been idle for <bpt id="4">&lt;code&gt;</bpt>IdleTimeoutInSeconds<ept id="4">&lt;/code&gt;</ept>.</source>
            <target state="new">The Actors runtime checks each of the actors every <bpt id="2">&lt;code&gt;</bpt>ScanIntervalInSeconds<ept id="2">&lt;/code&gt;</ept> to see if it can be garbage collected and collects it if has been idle for <bpt id="4">&lt;code&gt;</bpt>IdleTimeoutInSeconds<ept id="4">&lt;/code&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="134" xml:space="preserve">
            <source>Any time an actor gets used, its idle time reset to 0.</source>
            <target state="new">Any time an actor gets used, its idle time reset to 0.</target>
          </trans-unit>
          <trans-unit id="135" xml:space="preserve">
            <source>After this, the actor can only be garbage collected if it again remains idle for <bpt id="2">&lt;code&gt;</bpt>IdleTimeoutInSeconds<ept id="2">&lt;/code&gt;</ept>.</source>
            <target state="new">After this, the actor can only be garbage collected if it again remains idle for <bpt id="2">&lt;code&gt;</bpt>IdleTimeoutInSeconds<ept id="2">&lt;/code&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="136" xml:space="preserve">
            <source>Recall that an actor is considered to have been used if either an actor interface method an actor reminder callback is executed.</source>
            <target state="new">Recall that an actor is considered to have been used if either an actor interface method an actor reminder callback is executed.</target>
          </trans-unit>
          <trans-unit id="137" xml:space="preserve">
            <source>An actor is <bpt id="2">&lt;strong&gt;</bpt>not<ept id="2">&lt;/strong&gt;</ept> considered to have been used if its timer callback is executed.</source>
            <target state="new">An actor is <bpt id="2">&lt;strong&gt;</bpt>not<ept id="2">&lt;/strong&gt;</ept> considered to have been used if its timer callback is executed.</target>
          </trans-unit>
          <trans-unit id="138" xml:space="preserve">
            <source>The diagram below contains an example to illustrate these concepts.</source>
            <target state="new">The diagram below contains an example to illustrate these concepts.</target>
          </trans-unit>
          <trans-unit id="139" xml:space="preserve">
            <source><bpt id="1">&lt;linkText&gt;</bpt><ept id="1">&lt;/linkText&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;linkText&gt;</bpt><ept id="1">&lt;/linkText&gt;</ept></target>
          </trans-unit>
          <trans-unit id="140" xml:space="preserve">
            <source>The example assumes that there is only one active actor in the Active Actors table and shows the impact of actor method calls, reminders and timers on the lifetime of this actor.</source>
            <target state="new">The example assumes that there is only one active actor in the Active Actors table and shows the impact of actor method calls, reminders and timers on the lifetime of this actor.</target>
          </trans-unit>
          <trans-unit id="141" xml:space="preserve">
            <source>The following points about the example are worth mentioning:</source>
            <target state="new">The following points about the example are worth mentioning:</target>
          </trans-unit>
          <trans-unit id="142" xml:space="preserve">
            <source>ScanInterval and IdleTimeout are set to 5 and 10 respectively in the example (units do not matter here, since our purpose is only to illustrate the concept).</source>
            <target state="new">ScanInterval and IdleTimeout are set to 5 and 10 respectively in the example (units do not matter here, since our purpose is only to illustrate the concept).</target>
          </trans-unit>
          <trans-unit id="143" xml:space="preserve">
            <source>The scan for actors to be garbage collected happens at T=0,5,10,15,20,25 as defined by the ScanInterval of 5.</source>
            <target state="new">The scan for actors to be garbage collected happens at T=0,5,10,15,20,25 as defined by the ScanInterval of 5.</target>
          </trans-unit>
          <trans-unit id="144" xml:space="preserve">
            <source>A periodic timer fires at T=4,8,12,16,20,24 and its callback executes.</source>
            <target state="new">A periodic timer fires at T=4,8,12,16,20,24 and its callback executes.</target>
          </trans-unit>
          <trans-unit id="145" xml:space="preserve">
            <source>It does not impact the idle time of the actor.</source>
            <target state="new">It does not impact the idle time of the actor.</target>
          </trans-unit>
          <trans-unit id="146" xml:space="preserve">
            <source>An actor method call at T=7, resets the idle time to 0 and delays the garbage collection of the actor.</source>
            <target state="new">An actor method call at T=7, resets the idle time to 0 and delays the garbage collection of the actor.</target>
          </trans-unit>
          <trans-unit id="147" xml:space="preserve">
            <source>An actor reminder callback executes at T=14 and further delays the garbage collection of the actor.</source>
            <target state="new">An actor reminder callback executes at T=14 and further delays the garbage collection of the actor.</target>
          </trans-unit>
          <trans-unit id="148" xml:space="preserve">
            <source>During the garbage collection scan at T=25, the actor's idle time finally exceeds the IdleTimeout of 10 and the actor is garbage collected.</source>
            <target state="new">During the garbage collection scan at T=25, the actor's idle time finally exceeds the IdleTimeout of 10 and the actor is garbage collected.</target>
          </trans-unit>
          <trans-unit id="149" xml:space="preserve">
            <source>Please note that an actor will never get garbage collected while it is executing one of its methods, no matter how much time is spent in executing that method.</source>
            <target state="new">Please note that an actor will never get garbage collected while it is executing one of its methods, no matter how much time is spent in executing that method.</target>
          </trans-unit>
          <trans-unit id="150" xml:space="preserve">
            <source>As mentioned earlier, the execution of actor interface methods and reminder callbacks prevents garbage collection by resetting the actor's idle time to 0.</source>
            <target state="new">As mentioned earlier, the execution of actor interface methods and reminder callbacks prevents garbage collection by resetting the actor's idle time to 0.</target>
          </trans-unit>
          <trans-unit id="151" xml:space="preserve">
            <source>The execution of timer callbacks does not reset the idle time to 0.</source>
            <target state="new">The execution of timer callbacks does not reset the idle time to 0.</target>
          </trans-unit>
          <trans-unit id="152" xml:space="preserve">
            <source>However, the garbage collection of the actor is deferred until the timer callback has completed execution.</source>
            <target state="new">However, the garbage collection of the actor is deferred until the timer callback has completed execution.</target>
          </trans-unit>
        </group>
      </group>
    </body>
  </file>
</xliff>