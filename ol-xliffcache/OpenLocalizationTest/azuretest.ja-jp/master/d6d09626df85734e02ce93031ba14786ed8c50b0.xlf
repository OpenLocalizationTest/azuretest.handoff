<?xml version="1.0" encoding="utf-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" source-language="en-us" target-language="ja-jp" original="2/20/2016 8:33:44 AM" tool-id="MarkdownTransformer" product-name="N/A" product-version="N/A" build-num="1">
    <header>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d6d09626df85734e02ce93031ba14786ed8c50b0</xliffext:olfilehash>
      <tool tool-id="MarkdownTransformer" tool-name="MarkdownToXliff" tool-version="1.0" tool-company="Microsoft" />
    </header>
    <body>
      <group extype="content">
        <group id="101">
          <trans-unit id="101" xml:space="preserve">
            <source>App Model v2 | Microsoft Azure</source>
            <target state="new">App Model v2 | Microsoft Azure</target>
          </trans-unit>
          <trans-unit id="102" xml:space="preserve">
            <source>The types of tokens and claims emitted by the v2.0 Endpoint</source>
            <target state="new">The types of tokens and claims emitted by the v2.0 Endpoint</target>
          </trans-unit>
          <trans-unit id="103" xml:space="preserve">
            <source>App model v2.0 preview: Token reference</source>
            <target state="new">App model v2.0 preview: Token reference</target>
          </trans-unit>
          <trans-unit id="104" xml:space="preserve">
            <source>The v2.0 endpoint emits several types of security tokens in the processing of each <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>authentication flow<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">The v2.0 endpoint emits several types of security tokens in the processing of each <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>authentication flow<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="105" xml:space="preserve">
            <source>This document describes the format, security characteristics, and contents of each type of token.</source>
            <target state="new">This document describes the format, security characteristics, and contents of each type of token.</target>
          </trans-unit>
          <trans-unit id="106" xml:space="preserve">
            <source>This information applies to the v2.0 app model public preview.</source>
            <target state="new">This information applies to the v2.0 app model public preview.</target>
          </trans-unit>
          <trans-unit id="107" xml:space="preserve">
            <source>For instructions on how to integrate with the generally available Azure AD service, please refer to the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Azure Active Directory Developer Guide<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">For instructions on how to integrate with the generally available Azure AD service, please refer to the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Azure Active Directory Developer Guide<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="108" xml:space="preserve">
            <source>Types of Tokens</source>
            <target state="new">Types of Tokens</target>
          </trans-unit>
          <trans-unit id="109" xml:space="preserve">
            <source>The v2.0 endpoint supports the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>OAuth 2.0 authorization protocol<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>, which makes use of both access_tokens and refresh_tokens.</source>
            <target state="new">The v2.0 endpoint supports the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>OAuth 2.0 authorization protocol<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>, which makes use of both access_tokens and refresh_tokens.</target>
          </trans-unit>
          <trans-unit id="110" xml:space="preserve">
            <source>It also supports authentication and sign-in via <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>OpenID Connect<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>, which introduces a third type of token, the id_token.</source>
            <target state="new">It also supports authentication and sign-in via <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>OpenID Connect<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>, which introduces a third type of token, the id_token.</target>
          </trans-unit>
          <trans-unit id="111" xml:space="preserve">
            <source>Each of these tokens is represented as a "bearer token".</source>
            <target state="new">Each of these tokens is represented as a "bearer token".</target>
          </trans-unit>
          <trans-unit id="112" xml:space="preserve">
            <source>A bearer token is a lightweight security token that grants the “bearer” access to a protected resource.</source>
            <target state="new">A bearer token is a lightweight security token that grants the “bearer” access to a protected resource.</target>
          </trans-unit>
          <trans-unit id="113" xml:space="preserve">
            <source>In this sense, the “bearer” is any party that can present the token.</source>
            <target state="new">In this sense, the “bearer” is any party that can present the token.</target>
          </trans-unit>
          <trans-unit id="114" xml:space="preserve">
            <source>Though a party must first authenticate with Azure AD to receive the bearer token, if the required steps are not taken to secure the token in transmission and storage, it can be intercepted and used by an unintended party.</source>
            <target state="new">Though a party must first authenticate with Azure AD to receive the bearer token, if the required steps are not taken to secure the token in transmission and storage, it can be intercepted and used by an unintended party.</target>
          </trans-unit>
          <trans-unit id="115" xml:space="preserve">
            <source>While some security tokens have a built-in mechanism for preventing unauthorized parties from using them, bearer tokens do not have this mechanism and must be transported in a secure channel such as transport layer security (HTTPS).</source>
            <target state="new">While some security tokens have a built-in mechanism for preventing unauthorized parties from using them, bearer tokens do not have this mechanism and must be transported in a secure channel such as transport layer security (HTTPS).</target>
          </trans-unit>
          <trans-unit id="116" xml:space="preserve">
            <source>If a bearer token is transmitted in the clear, a man-in the middle attack can be used by a malicious party to acquire the token and use it for an unauthorized access to a protected resource.</source>
            <target state="new">If a bearer token is transmitted in the clear, a man-in the middle attack can be used by a malicious party to acquire the token and use it for an unauthorized access to a protected resource.</target>
          </trans-unit>
          <trans-unit id="117" xml:space="preserve">
            <source>The same security principles apply when storing or caching bearer tokens for later use.</source>
            <target state="new">The same security principles apply when storing or caching bearer tokens for later use.</target>
          </trans-unit>
          <trans-unit id="118" xml:space="preserve">
            <source>Always ensure that your app transmits and stores bearer tokens in a secure manner.</source>
            <target state="new">Always ensure that your app transmits and stores bearer tokens in a secure manner.</target>
          </trans-unit>
          <trans-unit id="119" xml:space="preserve">
            <source>For more security considerations on bearer tokens, see <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>RFC 6750 Section 5<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">For more security considerations on bearer tokens, see <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>RFC 6750 Section 5<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="120" xml:space="preserve">
            <source>Many of the tokens issued by the v2.0 endpoint are implemented as Json Web Tokens, or JWTs.</source>
            <target state="new">Many of the tokens issued by the v2.0 endpoint are implemented as Json Web Tokens, or JWTs.</target>
          </trans-unit>
          <trans-unit id="121" xml:space="preserve">
            <source>A JWT is a compact, URL-safe means of transferring information between two parties.</source>
            <target state="new">A JWT is a compact, URL-safe means of transferring information between two parties.</target>
          </trans-unit>
          <trans-unit id="122" xml:space="preserve">
            <source>The information contained in JWTs are known as "claims", or assertions of information about the bearer and subject of the token.</source>
            <target state="new">The information contained in JWTs are known as "claims", or assertions of information about the bearer and subject of the token.</target>
          </trans-unit>
          <trans-unit id="123" xml:space="preserve">
            <source>The claims in JWTs are JSON objects encoded and serialized for transmission.</source>
            <target state="new">The claims in JWTs are JSON objects encoded and serialized for transmission.</target>
          </trans-unit>
          <trans-unit id="124" xml:space="preserve">
            <source>Since the JWTs issued by the v2.0 endpoint are signed, but not encrypted, you can easily inspect the contents of a JWT for debugging purposes.</source>
            <target state="new">Since the JWTs issued by the v2.0 endpoint are signed, but not encrypted, you can easily inspect the contents of a JWT for debugging purposes.</target>
          </trans-unit>
          <trans-unit id="125" xml:space="preserve">
            <source>There are several tools available for doing so, such as <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>calebb.net<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">There are several tools available for doing so, such as <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>calebb.net<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="126" xml:space="preserve">
            <source>For more information on JWTs, you can refer to the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>JWT specification<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">For more information on JWTs, you can refer to the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>JWT specification<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="127" xml:space="preserve">
            <source>Id_Tokens</source>
            <target state="new">Id_Tokens</target>
          </trans-unit>
          <trans-unit id="128" xml:space="preserve">
            <source>Id_tokens are a form of sign-in security token that your app receives when performing authentication using <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>OpenID Connect<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">Id_tokens are a form of sign-in security token that your app receives when performing authentication using <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>OpenID Connect<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="129" xml:space="preserve">
            <source>They are represented as <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>JWTs<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>, and contain claims that you can use for signing the user into your app.</source>
            <target state="new">They are represented as <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>JWTs<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>, and contain claims that you can use for signing the user into your app.</target>
          </trans-unit>
          <trans-unit id="130" xml:space="preserve">
            <source>You can use the claims in an id_token as you see fit - commonly they are used for displaying account information or making access control decisions in an app.</source>
            <target state="new">You can use the claims in an id_token as you see fit - commonly they are used for displaying account information or making access control decisions in an app.</target>
          </trans-unit>
          <trans-unit id="131" xml:space="preserve">
            <source>The v2.0 endpoint only issues one type of id_token, which has a consistent set of claims regardless of the type of user that has signed in.</source>
            <target state="new">The v2.0 endpoint only issues one type of id_token, which has a consistent set of claims regardless of the type of user that has signed in.</target>
          </trans-unit>
          <trans-unit id="132" xml:space="preserve">
            <source>That is to say that the format and content of the id_tokens will be the same for both personal Microsoft Account users and work or school accounts.</source>
            <target state="new">That is to say that the format and content of the id_tokens will be the same for both personal Microsoft Account users and work or school accounts.</target>
          </trans-unit>
          <trans-unit id="133" xml:space="preserve">
            <source>Id_tokens are signed, but not encrypted at this time.</source>
            <target state="new">Id_tokens are signed, but not encrypted at this time.</target>
          </trans-unit>
          <trans-unit id="134" xml:space="preserve">
            <source>When your app receives an id_token, it must <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>validate the signature<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> to prove the token's authenticity and validate a few claims in the token to prove its validity.</source>
            <target state="new">When your app receives an id_token, it must <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>validate the signature<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> to prove the token's authenticity and validate a few claims in the token to prove its validity.</target>
          </trans-unit>
          <trans-unit id="135" xml:space="preserve">
            <source>The claims validated by an app vary depending on scenario requirements, but there are some <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>common claim validations<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> that your app must perform in every scenario.</source>
            <target state="new">The claims validated by an app vary depending on scenario requirements, but there are some <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>common claim validations<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> that your app must perform in every scenario.</target>
          </trans-unit>
          <trans-unit id="136" xml:space="preserve">
            <source>Full details on the claims in id_tokens are provided below, as well as a sample id_token.</source>
            <target state="new">Full details on the claims in id_tokens are provided below, as well as a sample id_token.</target>
          </trans-unit>
          <trans-unit id="137" xml:space="preserve">
            <source>Note that the claims in id_tokens are not returned in any particular order.</source>
            <target state="new">Note that the claims in id_tokens are not returned in any particular order.</target>
          </trans-unit>
          <trans-unit id="138" xml:space="preserve">
            <source>In addition, new claims can be introduced into id_tokens at any point in time - your app should not break as new claims are introduced.</source>
            <target state="new">In addition, new claims can be introduced into id_tokens at any point in time - your app should not break as new claims are introduced.</target>
          </trans-unit>
          <trans-unit id="139" xml:space="preserve">
            <source>The list below includes the claims that your app can reliably interpret at the time of this writing.</source>
            <target state="new">The list below includes the claims that your app can reliably interpret at the time of this writing.</target>
          </trans-unit>
          <trans-unit id="140" xml:space="preserve">
            <source>For practice, try inspecting the claims in the sample id_token by pasting it into <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>calebb.net<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">For practice, try inspecting the claims in the sample id_token by pasting it into <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>calebb.net<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="141" xml:space="preserve">
            <source>If necessary, even more detail can be found in the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>OpenID Connect specification<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">If necessary, even more detail can be found in the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>OpenID Connect specification<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="142" xml:space="preserve">
            <source>Sample Id_Token</source>
            <target state="new">Sample Id_Token</target>
          </trans-unit>
          <trans-unit id="143" xml:space="preserve">
            <source>Claims in Id_Tokens</source>
            <target state="new">Claims in Id_Tokens</target>
          </trans-unit>
          <trans-unit id="144" xml:space="preserve">
            <source>Name</source>
            <target state="new">Name</target>
          </trans-unit>
          <trans-unit id="145" xml:space="preserve">
            <source>Claim</source>
            <target state="new">Claim</target>
          </trans-unit>
          <trans-unit id="146" xml:space="preserve">
            <source>Example Value</source>
            <target state="new">Example Value</target>
          </trans-unit>
          <trans-unit id="147" xml:space="preserve">
            <source>Description</source>
            <target state="new">Description</target>
          </trans-unit>
          <trans-unit id="148" xml:space="preserve">
            <source>Audience</source>
            <target state="new">Audience</target>
          </trans-unit>
          <trans-unit id="149" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>aud<ept id="1">&lt;/code&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>aud<ept id="1">&lt;/code&gt;</ept></target>
          </trans-unit>
          <trans-unit id="150" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>49210253-0ba1-4a9a-a424-616999fab620<ept id="1">&lt;/code&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>49210253-0ba1-4a9a-a424-616999fab620<ept id="1">&lt;/code&gt;</ept></target>
          </trans-unit>
          <trans-unit id="151" xml:space="preserve">
            <source>Identifies the intended recipient of the token.</source>
            <target state="new">Identifies the intended recipient of the token.</target>
          </trans-unit>
          <trans-unit id="152" xml:space="preserve">
            <source>In id_tokens, the audience is your app's Application Id, as assigned to your app in the app registration portal.</source>
            <target state="new">In id_tokens, the audience is your app's Application Id, as assigned to your app in the app registration portal.</target>
          </trans-unit>
          <trans-unit id="153" xml:space="preserve">
            <source>Your app should validate this value and reject the token if it does not match.</source>
            <target state="new">Your app should validate this value and reject the token if it does not match.</target>
          </trans-unit>
          <trans-unit id="154" xml:space="preserve">
            <source>Issuer</source>
            <target state="new">Issuer</target>
          </trans-unit>
          <trans-unit id="155" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>iss<ept id="1">&lt;/code&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>iss<ept id="1">&lt;/code&gt;</ept></target>
          </trans-unit>
          <trans-unit id="156" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>https://login.microsoftonline.com/b9410318-09af-49c2-b0c3-653adc1f376e/v2.0/<ept id="1">&lt;/code&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>https://login.microsoftonline.com/b9410318-09af-49c2-b0c3-653adc1f376e/v2.0/<ept id="1">&lt;/code&gt;</ept></target>
          </trans-unit>
          <trans-unit id="157" xml:space="preserve">
            <source>Identifies the security token service (STS) that constructs and returns the token, as well as the Azure AD tenant in which the user was authenticated.</source>
            <target state="new">Identifies the security token service (STS) that constructs and returns the token, as well as the Azure AD tenant in which the user was authenticated.</target>
          </trans-unit>
          <trans-unit id="158" xml:space="preserve">
            <source>Your app should validate the issuer claim to ensure that the token came from the v2.0 endpoint.</source>
            <target state="new">Your app should validate the issuer claim to ensure that the token came from the v2.0 endpoint.</target>
          </trans-unit>
          <trans-unit id="159" xml:space="preserve">
            <source>It can also use the guid portion of the claim to restrict the set of tenants that are allowed to sign into the app.</source>
            <target state="new">It can also use the guid portion of the claim to restrict the set of tenants that are allowed to sign into the app.</target>
          </trans-unit>
          <trans-unit id="160" xml:space="preserve">
            <source>Issued At</source>
            <target state="new">Issued At</target>
          </trans-unit>
          <trans-unit id="161" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>iat<ept id="1">&lt;/code&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>iat<ept id="1">&lt;/code&gt;</ept></target>
          </trans-unit>
          <trans-unit id="162" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>1438535543<ept id="1">&lt;/code&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>1438535543<ept id="1">&lt;/code&gt;</ept></target>
          </trans-unit>
          <trans-unit id="163" xml:space="preserve">
            <source>The time at which the token was issued, represented in epoch time.</source>
            <target state="new">The time at which the token was issued, represented in epoch time.</target>
          </trans-unit>
          <trans-unit id="164" xml:space="preserve">
            <source>Expiration Time</source>
            <target state="new">Expiration Time</target>
          </trans-unit>
          <trans-unit id="165" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>exp<ept id="1">&lt;/code&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>exp<ept id="1">&lt;/code&gt;</ept></target>
          </trans-unit>
          <trans-unit id="166" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>1438539443<ept id="1">&lt;/code&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>1438539443<ept id="1">&lt;/code&gt;</ept></target>
          </trans-unit>
          <trans-unit id="167" xml:space="preserve">
            <source>The time at which the token becomes invalid, represented in epoch time.</source>
            <target state="new">The time at which the token becomes invalid, represented in epoch time.</target>
          </trans-unit>
          <trans-unit id="168" xml:space="preserve">
            <source>Your app should use this claim to verify the validity of the token lifetime.</source>
            <target state="new">Your app should use this claim to verify the validity of the token lifetime.</target>
          </trans-unit>
          <trans-unit id="169" xml:space="preserve">
            <source>Version</source>
            <target state="new">Version</target>
          </trans-unit>
          <trans-unit id="170" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>ver<ept id="1">&lt;/code&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>ver<ept id="1">&lt;/code&gt;</ept></target>
          </trans-unit>
          <trans-unit id="171" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>2.0<ept id="1">&lt;/code&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>2.0<ept id="1">&lt;/code&gt;</ept></target>
          </trans-unit>
          <trans-unit id="172" xml:space="preserve">
            <source>The version of the id_token, as defined by Azure AD.</source>
            <target state="new">The version of the id_token, as defined by Azure AD.</target>
          </trans-unit>
          <trans-unit id="173" xml:space="preserve">
            <source>For app model v2.0, The value will be <bpt id="2">&lt;code&gt;</bpt>2.0<ept id="2">&lt;/code&gt;</ept>.</source>
            <target state="new">For app model v2.0, The value will be <bpt id="2">&lt;code&gt;</bpt>2.0<ept id="2">&lt;/code&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="174" xml:space="preserve">
            <source>Tenant Id</source>
            <target state="new">Tenant Id</target>
          </trans-unit>
          <trans-unit id="175" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>tid<ept id="1">&lt;/code&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>tid<ept id="1">&lt;/code&gt;</ept></target>
          </trans-unit>
          <trans-unit id="176" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>b9410318-09af-49c2-b0c3-653adc1f376e<ept id="1">&lt;/code&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>b9410318-09af-49c2-b0c3-653adc1f376e<ept id="1">&lt;/code&gt;</ept></target>
          </trans-unit>
          <trans-unit id="177" xml:space="preserve">
            <source>A guid representing the Azure AD tenant which the user is from.</source>
            <target state="new">A guid representing the Azure AD tenant which the user is from.</target>
          </trans-unit>
          <trans-unit id="178" xml:space="preserve">
            <source>For work and school accounts, the guid will be the immutable tenant ID of the organization that the user belongs to.</source>
            <target state="new">For work and school accounts, the guid will be the immutable tenant ID of the organization that the user belongs to.</target>
          </trans-unit>
          <trans-unit id="179" xml:space="preserve">
            <source>For personal accounts, the value will be <bpt id="2">&lt;code&gt;</bpt>9188040d-6c67-4c5b-b112-36a304b66dad<ept id="2">&lt;/code&gt;</ept>.</source>
            <target state="new">For personal accounts, the value will be <bpt id="2">&lt;code&gt;</bpt>9188040d-6c67-4c5b-b112-36a304b66dad<ept id="2">&lt;/code&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="180" xml:space="preserve">
            <source>Code Hash</source>
            <target state="new">Code Hash</target>
          </trans-unit>
          <trans-unit id="181" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>c_hash<ept id="1">&lt;/code&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>c_hash<ept id="1">&lt;/code&gt;</ept></target>
          </trans-unit>
          <trans-unit id="182" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>SGCPtt01wxwfgnYZy2VJtQ<ept id="1">&lt;/code&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>SGCPtt01wxwfgnYZy2VJtQ<ept id="1">&lt;/code&gt;</ept></target>
          </trans-unit>
          <trans-unit id="183" xml:space="preserve">
            <source>The code hash is included in id_tokens only when the id_token is issued alongside an OAuth 2.0 authorization code.</source>
            <target state="new">The code hash is included in id_tokens only when the id_token is issued alongside an OAuth 2.0 authorization code.</target>
          </trans-unit>
          <trans-unit id="184" xml:space="preserve">
            <source>It can be used to validate the authenticity of an authorization code.</source>
            <target state="new">It can be used to validate the authenticity of an authorization code.</target>
          </trans-unit>
          <trans-unit id="185" xml:space="preserve">
            <source>See the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>OpenID Connect specification<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> for more details on performing this validation.</source>
            <target state="new">See the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>OpenID Connect specification<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> for more details on performing this validation.</target>
          </trans-unit>
          <trans-unit id="186" xml:space="preserve">
            <source>Access Token Hash</source>
            <target state="new">Access Token Hash</target>
          </trans-unit>
          <trans-unit id="187" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>at_hash<ept id="1">&lt;/code&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>at_hash<ept id="1">&lt;/code&gt;</ept></target>
          </trans-unit>
          <trans-unit id="188" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>SGCPtt01wxwfgnYZy2VJtQ<ept id="1">&lt;/code&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>SGCPtt01wxwfgnYZy2VJtQ<ept id="1">&lt;/code&gt;</ept></target>
          </trans-unit>
          <trans-unit id="189" xml:space="preserve">
            <source>The access token hash is included in id_tokens only when the id_token is issued alongside an OAuth 2.0 access token.</source>
            <target state="new">The access token hash is included in id_tokens only when the id_token is issued alongside an OAuth 2.0 access token.</target>
          </trans-unit>
          <trans-unit id="190" xml:space="preserve">
            <source>It can be used to validate the authenticity of an access token.</source>
            <target state="new">It can be used to validate the authenticity of an access token.</target>
          </trans-unit>
          <trans-unit id="191" xml:space="preserve">
            <source>See the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>OpenID Connect specification<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> for more details on performing this validation.</source>
            <target state="new">See the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>OpenID Connect specification<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> for more details on performing this validation.</target>
          </trans-unit>
          <trans-unit id="192" xml:space="preserve">
            <source>Nonce</source>
            <target state="new">Nonce</target>
          </trans-unit>
          <trans-unit id="193" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>nonce<ept id="1">&lt;/code&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>nonce<ept id="1">&lt;/code&gt;</ept></target>
          </trans-unit>
          <trans-unit id="194" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>12345<ept id="1">&lt;/code&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>12345<ept id="1">&lt;/code&gt;</ept></target>
          </trans-unit>
          <trans-unit id="195" xml:space="preserve">
            <source>The nonce is a strategy for mitigating token replay attacks.</source>
            <target state="new">The nonce is a strategy for mitigating token replay attacks.</target>
          </trans-unit>
          <trans-unit id="196" xml:space="preserve">
            <source>Your app can specify a nonce in an authorization request by using the <bpt id="2">&lt;code&gt;</bpt>nonce<ept id="2">&lt;/code&gt;</ept> query parameter.</source>
            <target state="new">Your app can specify a nonce in an authorization request by using the <bpt id="2">&lt;code&gt;</bpt>nonce<ept id="2">&lt;/code&gt;</ept> query parameter.</target>
          </trans-unit>
          <trans-unit id="197" xml:space="preserve">
            <source>The value you provide in the request will be emitted in the id_token's <bpt id="2">&lt;code&gt;</bpt>nonce<ept id="2">&lt;/code&gt;</ept> claim, unmodified.</source>
            <target state="new">The value you provide in the request will be emitted in the id_token's <bpt id="2">&lt;code&gt;</bpt>nonce<ept id="2">&lt;/code&gt;</ept> claim, unmodified.</target>
          </trans-unit>
          <trans-unit id="198" xml:space="preserve">
            <source>This allows your app to verify the value against the value it specified on the request, which associates the app's session with a given id_token.</source>
            <target state="new">This allows your app to verify the value against the value it specified on the request, which associates the app's session with a given id_token.</target>
          </trans-unit>
          <trans-unit id="199" xml:space="preserve">
            <source>Your app should perform this validation during the id_token validation process.</source>
            <target state="new">Your app should perform this validation during the id_token validation process.</target>
          </trans-unit>
          <trans-unit id="200" xml:space="preserve">
            <source>Name</source>
            <target state="new">Name</target>
          </trans-unit>
          <trans-unit id="201" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>name<ept id="1">&lt;/code&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>name<ept id="1">&lt;/code&gt;</ept></target>
          </trans-unit>
          <trans-unit id="202" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>Leonardo DaVinci<ept id="1">&lt;/code&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>Leonardo DaVinci<ept id="1">&lt;/code&gt;</ept></target>
          </trans-unit>
          <trans-unit id="203" xml:space="preserve">
            <source>The name claim provides a human readable value that identifies the subject of the token.</source>
            <target state="new">The name claim provides a human readable value that identifies the subject of the token.</target>
          </trans-unit>
          <trans-unit id="204" xml:space="preserve">
            <source>This value is not guaranteed to be unique, is mutable, and is designed to be used only for display purposes.</source>
            <target state="new">This value is not guaranteed to be unique, is mutable, and is designed to be used only for display purposes.</target>
          </trans-unit>
          <trans-unit id="205" xml:space="preserve">
            <source>Preferred Username</source>
            <target state="new">Preferred Username</target>
          </trans-unit>
          <trans-unit id="206" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>preferred_username<ept id="1">&lt;/code&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>preferred_username<ept id="1">&lt;/code&gt;</ept></target>
          </trans-unit>
          <trans-unit id="207" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>leo@outlook.com<ept id="1">&lt;/code&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>leo@outlook.com<ept id="1">&lt;/code&gt;</ept></target>
          </trans-unit>
          <trans-unit id="208" xml:space="preserve">
            <source>The primary username that is used to represent the user in the v2.0 endpoint.</source>
            <target state="new">The primary username that is used to represent the user in the v2.0 endpoint.</target>
          </trans-unit>
          <trans-unit id="209" xml:space="preserve">
            <source>It could be an email address, phone number, or a generic username without a specified format.</source>
            <target state="new">It could be an email address, phone number, or a generic username without a specified format.</target>
          </trans-unit>
          <trans-unit id="210" xml:space="preserve">
            <source>Its value is mutable and may change for a given user over time.</source>
            <target state="new">Its value is mutable and may change for a given user over time.</target>
          </trans-unit>
          <trans-unit id="211" xml:space="preserve">
            <source>Subject</source>
            <target state="new">Subject</target>
          </trans-unit>
          <trans-unit id="212" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>sub<ept id="1">&lt;/code&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>sub<ept id="1">&lt;/code&gt;</ept></target>
          </trans-unit>
          <trans-unit id="213" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>AAAAAAAAAAAAAAAAAAAAAOUtxUJsxQtHuMcFCIA1NC0<ept id="1">&lt;/code&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>AAAAAAAAAAAAAAAAAAAAAOUtxUJsxQtHuMcFCIA1NC0<ept id="1">&lt;/code&gt;</ept></target>
          </trans-unit>
          <trans-unit id="214" xml:space="preserve">
            <source>The principal about which the token asserts information, such as the user of an app.</source>
            <target state="new">The principal about which the token asserts information, such as the user of an app.</target>
          </trans-unit>
          <trans-unit id="215" xml:space="preserve">
            <source>This value is immutable and cannot be reassigned or reused, so it can be used to perform authorization checks safely, such as when the token is used to access a resource.</source>
            <target state="new">This value is immutable and cannot be reassigned or reused, so it can be used to perform authorization checks safely, such as when the token is used to access a resource.</target>
          </trans-unit>
          <trans-unit id="216" xml:space="preserve">
            <source>Because the subject is always present in the tokens the Azure AD issues, we recommended using this value in a general purpose authorization system.</source>
            <target state="new">Because the subject is always present in the tokens the Azure AD issues, we recommended using this value in a general purpose authorization system.</target>
          </trans-unit>
          <trans-unit id="217" xml:space="preserve">
            <source>ObjectId</source>
            <target state="new">ObjectId</target>
          </trans-unit>
          <trans-unit id="218" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>oid<ept id="1">&lt;/code&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>oid<ept id="1">&lt;/code&gt;</ept></target>
          </trans-unit>
          <trans-unit id="219" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>27cb5cec-7c0c-40b4-a69a-22500b6ea853<ept id="1">&lt;/code&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>27cb5cec-7c0c-40b4-a69a-22500b6ea853<ept id="1">&lt;/code&gt;</ept></target>
          </trans-unit>
          <trans-unit id="220" xml:space="preserve">
            <source>The object Id of the work or school account in the Azure AD system.</source>
            <target state="new">The object Id of the work or school account in the Azure AD system.</target>
          </trans-unit>
          <trans-unit id="221" xml:space="preserve">
            <source>This claim will not be issued for personal Microsoft accounts.</source>
            <target state="new">This claim will not be issued for personal Microsoft accounts.</target>
          </trans-unit>
          <trans-unit id="222" xml:space="preserve">
            <source>Access Tokens</source>
            <target state="new">Access Tokens</target>
          </trans-unit>
          <trans-unit id="223" xml:space="preserve">
            <source>Access tokens issued by the v2.0 endpoint take two different formats.</source>
            <target state="new">Access tokens issued by the v2.0 endpoint take two different formats.</target>
          </trans-unit>
          <trans-unit id="224" xml:space="preserve">
            <source>Access tokens that are issued on behalf of work or school accounts are JWTs, similar to an id_token.</source>
            <target state="new">Access tokens that are issued on behalf of work or school accounts are JWTs, similar to an id_token.</target>
          </trans-unit>
          <trans-unit id="225" xml:space="preserve">
            <source>Access tokens that are issued on behalf of a personal Microsoft account are in a format known as "compact tickets".</source>
            <target state="new">Access tokens that are issued on behalf of a personal Microsoft account are in a format known as "compact tickets".</target>
          </trans-unit>
          <trans-unit id="226" xml:space="preserve">
            <source>For this reason, in development you may notice a different string format for access tokens issued by the v2.0 endpoint.</source>
            <target state="new">For this reason, in development you may notice a different string format for access tokens issued by the v2.0 endpoint.</target>
          </trans-unit>
          <trans-unit id="227" xml:space="preserve">
            <source>Over time, this difference in access tokens will be eliminated from the v2.0 endpoint.</source>
            <target state="new">Over time, this difference in access tokens will be eliminated from the v2.0 endpoint.</target>
          </trans-unit>
          <trans-unit id="228" xml:space="preserve">
            <source>With that said, access tokens issued by the v2.0 endpoint are only consumable by Microsoft Services at this point in time.</source>
            <target state="new">With that said, access tokens issued by the v2.0 endpoint are only consumable by Microsoft Services at this point in time.</target>
          </trans-unit>
          <trans-unit id="229" xml:space="preserve">
            <source>Your apps should not need to perform any validation or inspection of access tokens for any of the currently supported scenarios.</source>
            <target state="new">Your apps should not need to perform any validation or inspection of access tokens for any of the currently supported scenarios.</target>
          </trans-unit>
          <trans-unit id="230" xml:space="preserve">
            <source>You can treat access tokens as completely opaque - they are just strings which your app can pass to Microsoft in HTTP requests.</source>
            <target state="new">You can treat access tokens as completely opaque - they are just strings which your app can pass to Microsoft in HTTP requests.</target>
          </trans-unit>
          <trans-unit id="231" xml:space="preserve">
            <source>In the near future, the v2.0 endpoint will introduce the ability for your app to receive access tokens from other clients.</source>
            <target state="new">In the near future, the v2.0 endpoint will introduce the ability for your app to receive access tokens from other clients.</target>
          </trans-unit>
          <trans-unit id="232" xml:space="preserve">
            <source>At that time, this information will be updated with the information your app needs to perform access token validation and other similar tasks.</source>
            <target state="new">At that time, this information will be updated with the information your app needs to perform access token validation and other similar tasks.</target>
          </trans-unit>
          <trans-unit id="233" xml:space="preserve">
            <source>When you request an access token from the v2.0 endpoint, the v2.0 endpoint also returns some metadata about the access token for your app's consumption.</source>
            <target state="new">When you request an access token from the v2.0 endpoint, the v2.0 endpoint also returns some metadata about the access token for your app's consumption.</target>
          </trans-unit>
          <trans-unit id="234" xml:space="preserve">
            <source>This information includes the expiry time of the access token and the scopes for which it is valid.</source>
            <target state="new">This information includes the expiry time of the access token and the scopes for which it is valid.</target>
          </trans-unit>
          <trans-unit id="235" xml:space="preserve">
            <source>This allows your app to perform intelligent caching of access tokens without having to parse open the access token itself.</source>
            <target state="new">This allows your app to perform intelligent caching of access tokens without having to parse open the access token itself.</target>
          </trans-unit>
          <trans-unit id="236" xml:space="preserve">
            <source>Refresh Tokens</source>
            <target state="new">Refresh Tokens</target>
          </trans-unit>
          <trans-unit id="237" xml:space="preserve">
            <source>Refresh tokens are security tokens which your app can use to acquire new access tokens in an OAuth 2.0 flow.</source>
            <target state="new">Refresh tokens are security tokens which your app can use to acquire new access tokens in an OAuth 2.0 flow.</target>
          </trans-unit>
          <trans-unit id="238" xml:space="preserve">
            <source>It allows your app to achieve long-term access to resources on behalf of a user without requiring interaction by the user.</source>
            <target state="new">It allows your app to achieve long-term access to resources on behalf of a user without requiring interaction by the user.</target>
          </trans-unit>
          <trans-unit id="239" xml:space="preserve">
            <source>Refresh tokens are multi-resource.</source>
            <target state="new">Refresh tokens are multi-resource.</target>
          </trans-unit>
          <trans-unit id="240" xml:space="preserve">
            <source>That is to say that a refresh token received during a token request for one resource can be redeemed for access tokens to a completely different resource.</source>
            <target state="new">That is to say that a refresh token received during a token request for one resource can be redeemed for access tokens to a completely different resource.</target>
          </trans-unit>
          <trans-unit id="241" xml:space="preserve">
            <source>In order to receive a refresh  in a token response, your app must request &amp; be granted the <bpt id="2">&lt;code&gt;</bpt>offline_acesss<ept id="2">&lt;/code&gt;</ept> scope.   To learn more about the <bpt id="4">&lt;code&gt;</bpt>offline_access<ept id="4">&lt;/code&gt;</ept> scope, refer to the <bpt id="6CapsExtId1">&lt;link&gt;</bpt><bpt id="6CapsExtId2">&lt;linkText&gt;</bpt>consent &amp; scopes article here<ept id="6CapsExtId2">&lt;/linkText&gt;</ept><bpt id="6CapsExtId3">&lt;title&gt;</bpt><ept id="6CapsExtId3">&lt;/title&gt;</ept><ept id="6CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">In order to receive a refresh  in a token response, your app must request &amp; be granted the <bpt id="2">&lt;code&gt;</bpt>offline_acesss<ept id="2">&lt;/code&gt;</ept> scope.   To learn more about the <bpt id="4">&lt;code&gt;</bpt>offline_access<ept id="4">&lt;/code&gt;</ept> scope, refer to the <bpt id="6CapsExtId1">&lt;link&gt;</bpt><bpt id="6CapsExtId2">&lt;linkText&gt;</bpt>consent &amp; scopes article here<ept id="6CapsExtId2">&lt;/linkText&gt;</ept><bpt id="6CapsExtId3">&lt;title&gt;</bpt><ept id="6CapsExtId3">&lt;/title&gt;</ept><ept id="6CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="242" xml:space="preserve">
            <source>Refresh tokens are, and will always be, completely opaque to your app.  They are issued by the Azure AD v2.0 endpoint and can only be inspected &amp; interpreted by the v2.0 endpoint.  They are long-lived, but your app should not be written to expect that a refresh token will last for any period of time.  Refresh tokens can be invalidated at any moment in time for a variety of reasons.  The only way for your app to know if a refresh token is valid is to attempt to redeem it by making a token request to the v2.0 endpoint.</source>
            <target state="new">Refresh tokens are, and will always be, completely opaque to your app.  They are issued by the Azure AD v2.0 endpoint and can only be inspected &amp; interpreted by the v2.0 endpoint.  They are long-lived, but your app should not be written to expect that a refresh token will last for any period of time.  Refresh tokens can be invalidated at any moment in time for a variety of reasons.  The only way for your app to know if a refresh token is valid is to attempt to redeem it by making a token request to the v2.0 endpoint.</target>
          </trans-unit>
          <trans-unit id="243" xml:space="preserve">
            <source>When you redeem a refresh token for a new access token (and if your app had been granted the <bpt id="2">&lt;code&gt;</bpt>offline_access<ept id="2">&lt;/code&gt;</ept> scope), you will receive a new refresh token in the token response.</source>
            <target state="new">When you redeem a refresh token for a new access token (and if your app had been granted the <bpt id="2">&lt;code&gt;</bpt>offline_access<ept id="2">&lt;/code&gt;</ept> scope), you will receive a new refresh token in the token response.</target>
          </trans-unit>
          <trans-unit id="244" xml:space="preserve">
            <source>You should  save the newly issued refresh token, replacing the one you used in the request.</source>
            <target state="new">You should  save the newly issued refresh token, replacing the one you used in the request.</target>
          </trans-unit>
          <trans-unit id="245" xml:space="preserve">
            <source>This will guarantee that your refresh tokens remain valid for as long as possible.</source>
            <target state="new">This will guarantee that your refresh tokens remain valid for as long as possible.</target>
          </trans-unit>
          <trans-unit id="246" xml:space="preserve">
            <source>Validating Tokens</source>
            <target state="new">Validating Tokens</target>
          </trans-unit>
          <trans-unit id="247" xml:space="preserve">
            <source>At this point in time, the only token validation your apps should need to perform is validating id_tokens.</source>
            <target state="new">At this point in time, the only token validation your apps should need to perform is validating id_tokens.</target>
          </trans-unit>
          <trans-unit id="248" xml:space="preserve">
            <source>In order to validate an id_token, your app should validate both the id_token's signature and the claims in the id_token.</source>
            <target state="new">In order to validate an id_token, your app should validate both the id_token's signature and the claims in the id_token.</target>
          </trans-unit>
          <trans-unit id="249" xml:space="preserve">
            <source>We provide libraries &amp; code samples that show how to easily handle token validation - the below information is simply provided for those who wish to understand the underlying process.  There are also several 3rd party open source libraries available for JWT validation - there is at least one option for almost every platform &amp; language out there.</source>
            <target state="new">We provide libraries &amp; code samples that show how to easily handle token validation - the below information is simply provided for those who wish to understand the underlying process.  There are also several 3rd party open source libraries available for JWT validation - there is at least one option for almost every platform &amp; language out there.</target>
          </trans-unit>
          <trans-unit id="250" xml:space="preserve">
            <source>Validating the Signature</source>
            <target state="new">Validating the Signature</target>
          </trans-unit>
          <trans-unit id="251" xml:space="preserve">
            <source>A JWT contains three segments, which are separated by the <bpt id="2">&lt;code&gt;</bpt>.<ept id="2">&lt;/code&gt;</ept> character.</source>
            <target state="new">A JWT contains three segments, which are separated by the <bpt id="2">&lt;code&gt;</bpt>.<ept id="2">&lt;/code&gt;</ept> character.</target>
          </trans-unit>
          <trans-unit id="252" xml:space="preserve">
            <source>The first segment is known as the <bpt id="2">&lt;strong&gt;</bpt>header<ept id="2">&lt;/strong&gt;</ept>, the second as the <bpt id="4">&lt;strong&gt;</bpt>body<ept id="4">&lt;/strong&gt;</ept>, and the third as the <bpt id="6">&lt;strong&gt;</bpt>signature<ept id="6">&lt;/strong&gt;</ept>.</source>
            <target state="new">The first segment is known as the <bpt id="2">&lt;strong&gt;</bpt>header<ept id="2">&lt;/strong&gt;</ept>, the second as the <bpt id="4">&lt;strong&gt;</bpt>body<ept id="4">&lt;/strong&gt;</ept>, and the third as the <bpt id="6">&lt;strong&gt;</bpt>signature<ept id="6">&lt;/strong&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="253" xml:space="preserve">
            <source>The signature segment can be used to validate the authenticity of the id_token so that it can be trusted by your app.</source>
            <target state="new">The signature segment can be used to validate the authenticity of the id_token so that it can be trusted by your app.</target>
          </trans-unit>
          <trans-unit id="254" xml:space="preserve">
            <source>Id_Tokens are signed using industry standard asymmetric encryption algorithms, such as RSA 256.</source>
            <target state="new">Id_Tokens are signed using industry standard asymmetric encryption algorithms, such as RSA 256.</target>
          </trans-unit>
          <trans-unit id="255" xml:space="preserve">
            <source>The header of the id_token contains information about the key and encryption method used to sign the token:</source>
            <target state="new">The header of the id_token contains information about the key and encryption method used to sign the token:</target>
          </trans-unit>
          <trans-unit id="256" xml:space="preserve">
            <source>The <bpt id="2">&lt;code&gt;</bpt>alg<ept id="2">&lt;/code&gt;</ept> claim indicates the algorithm that was used to sign the token, while the <bpt id="4">&lt;code&gt;</bpt>kid<ept id="4">&lt;/code&gt;</ept> or <bpt id="6">&lt;code&gt;</bpt>x5t<ept id="6">&lt;/code&gt;</ept> claims indicate the particular public key that was used to sign the token.</source>
            <target state="new">The <bpt id="2">&lt;code&gt;</bpt>alg<ept id="2">&lt;/code&gt;</ept> claim indicates the algorithm that was used to sign the token, while the <bpt id="4">&lt;code&gt;</bpt>kid<ept id="4">&lt;/code&gt;</ept> or <bpt id="6">&lt;code&gt;</bpt>x5t<ept id="6">&lt;/code&gt;</ept> claims indicate the particular public key that was used to sign the token.</target>
          </trans-unit>
          <trans-unit id="257" xml:space="preserve">
            <source>At any given point in time, the v2.0 endpoint may sign an id_token using any one of a certain set of public-private key pairs.</source>
            <target state="new">At any given point in time, the v2.0 endpoint may sign an id_token using any one of a certain set of public-private key pairs.</target>
          </trans-unit>
          <trans-unit id="258" xml:space="preserve">
            <source>The v2.0 endpoint rotates the possible set of keys on a periodic basis, so your app should be written to handle those key changes automatically.</source>
            <target state="new">The v2.0 endpoint rotates the possible set of keys on a periodic basis, so your app should be written to handle those key changes automatically.</target>
          </trans-unit>
          <trans-unit id="259" xml:space="preserve">
            <source>A reasonable frequency to check for updates to the public keys used by the v2.0 endpoint is about 24 hours.</source>
            <target state="new">A reasonable frequency to check for updates to the public keys used by the v2.0 endpoint is about 24 hours.</target>
          </trans-unit>
          <trans-unit id="260" xml:space="preserve">
            <source>You can acquire the signing key data necessary to validate the signature by using the OpenID Connect metadata document located at:</source>
            <target state="new">You can acquire the signing key data necessary to validate the signature by using the OpenID Connect metadata document located at:</target>
          </trans-unit>
          <trans-unit id="261" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>https://login.microsoftonline.com/common/v2.0/.well-known/openid-configuration<ept id="1">&lt;/code&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>https://login.microsoftonline.com/common/v2.0/.well-known/openid-configuration<ept id="1">&lt;/code&gt;</ept></target>
          </trans-unit>
          <trans-unit id="262" xml:space="preserve">
            <source>This metadata document is a JSON object containing several useful pieces of information, such as the location of the various endpoints required for performing OpenID Connect authentication.</source>
            <target state="new">This metadata document is a JSON object containing several useful pieces of information, such as the location of the various endpoints required for performing OpenID Connect authentication.</target>
          </trans-unit>
          <trans-unit id="263" xml:space="preserve">
            <source>It also includes a <bpt id="2">&lt;code&gt;</bpt>jwks_uri<ept id="2">&lt;/code&gt;</ept>, which gives the location of the set of public keys used to sign tokens.</source>
            <target state="new">It also includes a <bpt id="2">&lt;code&gt;</bpt>jwks_uri<ept id="2">&lt;/code&gt;</ept>, which gives the location of the set of public keys used to sign tokens.</target>
          </trans-unit>
          <trans-unit id="264" xml:space="preserve">
            <source>That location is provided below, but it is best to fetch that location dynamically by using the metadata document and parsing out the <bpt id="2">&lt;code&gt;</bpt>jwks_uri<ept id="2">&lt;/code&gt;</ept>:</source>
            <target state="new">That location is provided below, but it is best to fetch that location dynamically by using the metadata document and parsing out the <bpt id="2">&lt;code&gt;</bpt>jwks_uri<ept id="2">&lt;/code&gt;</ept>:</target>
          </trans-unit>
          <trans-unit id="265" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>https://login.microsoftonline.com/common/discovery/v2.0/keys<ept id="1">&lt;/code&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>https://login.microsoftonline.com/common/discovery/v2.0/keys<ept id="1">&lt;/code&gt;</ept></target>
          </trans-unit>
          <trans-unit id="266" xml:space="preserve">
            <source>The JSON document located at this url contains all of the public key information in use at that particular moment in time.</source>
            <target state="new">The JSON document located at this url contains all of the public key information in use at that particular moment in time.</target>
          </trans-unit>
          <trans-unit id="267" xml:space="preserve">
            <source>Your app can use the <bpt id="2">&lt;code&gt;</bpt>kid<ept id="2">&lt;/code&gt;</ept> or <bpt id="4">&lt;code&gt;</bpt>x5t<ept id="4">&lt;/code&gt;</ept> claims in the JWT header to select which public key in this document has been used to sign a particular token.</source>
            <target state="new">Your app can use the <bpt id="2">&lt;code&gt;</bpt>kid<ept id="2">&lt;/code&gt;</ept> or <bpt id="4">&lt;code&gt;</bpt>x5t<ept id="4">&lt;/code&gt;</ept> claims in the JWT header to select which public key in this document has been used to sign a particular token.</target>
          </trans-unit>
          <trans-unit id="268" xml:space="preserve">
            <source>It can then perform signature validation using the correct public key and the indicated algorithm.</source>
            <target state="new">It can then perform signature validation using the correct public key and the indicated algorithm.</target>
          </trans-unit>
          <trans-unit id="269" xml:space="preserve">
            <source>Performing signature validation is outside the scope of this document - there are many open source libraries available for helping you do so if necessary.</source>
            <target state="new">Performing signature validation is outside the scope of this document - there are many open source libraries available for helping you do so if necessary.</target>
          </trans-unit>
          <trans-unit id="270" xml:space="preserve">
            <source>Validating the Claims</source>
            <target state="new">Validating the Claims</target>
          </trans-unit>
          <trans-unit id="271" xml:space="preserve">
            <source>When your app receives an id_token upon user sign-in, it should also perform a few checks against the claims in the id_token.</source>
            <target state="new">When your app receives an id_token upon user sign-in, it should also perform a few checks against the claims in the id_token.</target>
          </trans-unit>
          <trans-unit id="272" xml:space="preserve">
            <source>These include:</source>
            <target state="new">These include:</target>
          </trans-unit>
          <trans-unit id="273" xml:space="preserve">
            <source>The <bpt id="2">&lt;strong&gt;</bpt>Audience<ept id="2">&lt;/strong&gt;</ept> claim - to verify that the id_token was intended to be given to your app.</source>
            <target state="new">The <bpt id="2">&lt;strong&gt;</bpt>Audience<ept id="2">&lt;/strong&gt;</ept> claim - to verify that the id_token was intended to be given to your app.</target>
          </trans-unit>
          <trans-unit id="274" xml:space="preserve">
            <source>The <bpt id="2">&lt;strong&gt;</bpt>Issued At<ept id="2">&lt;/strong&gt;</ept> and <bpt id="4">&lt;strong&gt;</bpt>Expiration Time<ept id="4">&lt;/strong&gt;</ept> claims - to verify that the id_token has not expired.</source>
            <target state="new">The <bpt id="2">&lt;strong&gt;</bpt>Issued At<ept id="2">&lt;/strong&gt;</ept> and <bpt id="4">&lt;strong&gt;</bpt>Expiration Time<ept id="4">&lt;/strong&gt;</ept> claims - to verify that the id_token has not expired.</target>
          </trans-unit>
          <trans-unit id="275" xml:space="preserve">
            <source>The <bpt id="2">&lt;strong&gt;</bpt>Issuer<ept id="2">&lt;/strong&gt;</ept> claim - to verify that the token was indeed issued to your app by the v2.0 endpoint.</source>
            <target state="new">The <bpt id="2">&lt;strong&gt;</bpt>Issuer<ept id="2">&lt;/strong&gt;</ept> claim - to verify that the token was indeed issued to your app by the v2.0 endpoint.</target>
          </trans-unit>
          <trans-unit id="276" xml:space="preserve">
            <source>The <bpt id="2">&lt;strong&gt;</bpt>Nonce<ept id="2">&lt;/strong&gt;</ept> -  as a token replay attack mitigation.</source>
            <target state="new">The <bpt id="2">&lt;strong&gt;</bpt>Nonce<ept id="2">&lt;/strong&gt;</ept> -  as a token replay attack mitigation.</target>
          </trans-unit>
          <trans-unit id="277" xml:space="preserve">
            <source>Details of the expected values for these claims are included above in the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>id_token section<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">Details of the expected values for these claims are included above in the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>id_token section<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="278" xml:space="preserve">
            <source>Token Lifetimes</source>
            <target state="new">Token Lifetimes</target>
          </trans-unit>
          <trans-unit id="279" xml:space="preserve">
            <source>The following token lifetimes are provided purely for your understanding, as they can help in developing and debugging apps.</source>
            <target state="new">The following token lifetimes are provided purely for your understanding, as they can help in developing and debugging apps.</target>
          </trans-unit>
          <trans-unit id="280" xml:space="preserve">
            <source>Your apps should not be written to expect any of these lifetimes to remain constant - they can and will change at any given point in time.</source>
            <target state="new">Your apps should not be written to expect any of these lifetimes to remain constant - they can and will change at any given point in time.</target>
          </trans-unit>
          <trans-unit id="281" xml:space="preserve">
            <source>Token</source>
            <target state="new">Token</target>
          </trans-unit>
          <trans-unit id="282" xml:space="preserve">
            <source>Lifetime</source>
            <target state="new">Lifetime</target>
          </trans-unit>
          <trans-unit id="283" xml:space="preserve">
            <source>Description</source>
            <target state="new">Description</target>
          </trans-unit>
          <trans-unit id="284" xml:space="preserve">
            <source>Id_Tokens (work or school accounts)</source>
            <target state="new">Id_Tokens (work or school accounts)</target>
          </trans-unit>
          <trans-unit id="285" xml:space="preserve">
            <source>1 hour</source>
            <target state="new">1 hour</target>
          </trans-unit>
          <trans-unit id="286" xml:space="preserve">
            <source>Id_Tokens are typically valid for an hour.</source>
            <target state="new">Id_Tokens are typically valid for an hour.</target>
          </trans-unit>
          <trans-unit id="287" xml:space="preserve">
            <source>Your web app can use this same lifetime in maintaining its own session with the user (recommended), or choose a completely different session lifetime.</source>
            <target state="new">Your web app can use this same lifetime in maintaining its own session with the user (recommended), or choose a completely different session lifetime.</target>
          </trans-unit>
          <trans-unit id="288" xml:space="preserve">
            <source>If your app needs to get a new id_token, it simply needs to make a new sign-in request to the v2.0 authorize endpoint.</source>
            <target state="new">If your app needs to get a new id_token, it simply needs to make a new sign-in request to the v2.0 authorize endpoint.</target>
          </trans-unit>
          <trans-unit id="289" xml:space="preserve">
            <source>If the user has a valid browser session with the v2.0 endpoint, they may not be required to enter their credentials again.</source>
            <target state="new">If the user has a valid browser session with the v2.0 endpoint, they may not be required to enter their credentials again.</target>
          </trans-unit>
          <trans-unit id="290" xml:space="preserve">
            <source>Id_Tokens (personal accounts)</source>
            <target state="new">Id_Tokens (personal accounts)</target>
          </trans-unit>
          <trans-unit id="291" xml:space="preserve">
            <source>24 hours</source>
            <target state="new">24 hours</target>
          </trans-unit>
          <trans-unit id="292" xml:space="preserve">
            <source>Id_Tokens for personal accounts are typically valid for 24 hours.</source>
            <target state="new">Id_Tokens for personal accounts are typically valid for 24 hours.</target>
          </trans-unit>
          <trans-unit id="293" xml:space="preserve">
            <source>Your web app can use this same lifetime in maintaining its own session with the user (recommended), or choose a completely different session lifetime.</source>
            <target state="new">Your web app can use this same lifetime in maintaining its own session with the user (recommended), or choose a completely different session lifetime.</target>
          </trans-unit>
          <trans-unit id="294" xml:space="preserve">
            <source>If your app needs to get a new id_token, it simply needs to make a new sign-in request to the v2.0 authorize endpoint.</source>
            <target state="new">If your app needs to get a new id_token, it simply needs to make a new sign-in request to the v2.0 authorize endpoint.</target>
          </trans-unit>
          <trans-unit id="295" xml:space="preserve">
            <source>If the user has a valid browser session with the v2.0 endpoint, they may not be required to enter their credentials again.</source>
            <target state="new">If the user has a valid browser session with the v2.0 endpoint, they may not be required to enter their credentials again.</target>
          </trans-unit>
          <trans-unit id="296" xml:space="preserve">
            <source>Access Tokens (work or school accounts)</source>
            <target state="new">Access Tokens (work or school accounts)</target>
          </trans-unit>
          <trans-unit id="297" xml:space="preserve">
            <source>1 hour</source>
            <target state="new">1 hour</target>
          </trans-unit>
          <trans-unit id="298" xml:space="preserve">
            <source>Indicated in token responses as part of the token metadata.</source>
            <target state="new">Indicated in token responses as part of the token metadata.</target>
          </trans-unit>
          <trans-unit id="299" xml:space="preserve">
            <source>Access Tokens (personal accounts)</source>
            <target state="new">Access Tokens (personal accounts)</target>
          </trans-unit>
          <trans-unit id="300" xml:space="preserve">
            <source>1 hour</source>
            <target state="new">1 hour</target>
          </trans-unit>
          <trans-unit id="301" xml:space="preserve">
            <source>Indicated in token responses as part of the token metadata.</source>
            <target state="new">Indicated in token responses as part of the token metadata.</target>
          </trans-unit>
          <trans-unit id="302" xml:space="preserve">
            <source>Access_tokens issued on behalf of personal accounts may be configured for a different lifetime, but one hour is typically the case.</source>
            <target state="new">Access_tokens issued on behalf of personal accounts may be configured for a different lifetime, but one hour is typically the case.</target>
          </trans-unit>
          <trans-unit id="303" xml:space="preserve">
            <source>Refresh Tokens (work or school account)</source>
            <target state="new">Refresh Tokens (work or school account)</target>
          </trans-unit>
          <trans-unit id="304" xml:space="preserve">
            <source>Up to 14 days</source>
            <target state="new">Up to 14 days</target>
          </trans-unit>
          <trans-unit id="305" xml:space="preserve">
            <source>A single refresh token is valid for a maximum of 14 days.</source>
            <target state="new">A single refresh token is valid for a maximum of 14 days.</target>
          </trans-unit>
          <trans-unit id="306" xml:space="preserve">
            <source>However, the refresh token may become invalid at any time for any number of reasons, so your app should continue to try and use a refresh token until it fails, or until your app replaces it with a new refresh token.</source>
            <target state="new">However, the refresh token may become invalid at any time for any number of reasons, so your app should continue to try and use a refresh token until it fails, or until your app replaces it with a new refresh token.</target>
          </trans-unit>
          <trans-unit id="307" xml:space="preserve">
            <source>A refresh token will also become invalid if it has been 90 days since the user has entered their credentials.</source>
            <target state="new">A refresh token will also become invalid if it has been 90 days since the user has entered their credentials.</target>
          </trans-unit>
          <trans-unit id="308" xml:space="preserve">
            <source>Refresh Tokens (personal accounts)</source>
            <target state="new">Refresh Tokens (personal accounts)</target>
          </trans-unit>
          <trans-unit id="309" xml:space="preserve">
            <source>Up to 1 year</source>
            <target state="new">Up to 1 year</target>
          </trans-unit>
          <trans-unit id="310" xml:space="preserve">
            <source>A single refresh token is valid for a maximum of 1 year.</source>
            <target state="new">A single refresh token is valid for a maximum of 1 year.</target>
          </trans-unit>
          <trans-unit id="311" xml:space="preserve">
            <source>However, the refresh token may become invalid at any time for any number of reasons, so your app should continue to try and use a refresh token until it fails.</source>
            <target state="new">However, the refresh token may become invalid at any time for any number of reasons, so your app should continue to try and use a refresh token until it fails.</target>
          </trans-unit>
          <trans-unit id="312" xml:space="preserve">
            <source>Authorization Codes (work or school accounts)</source>
            <target state="new">Authorization Codes (work or school accounts)</target>
          </trans-unit>
          <trans-unit id="313" xml:space="preserve">
            <source>10 minutes</source>
            <target state="new">10 minutes</target>
          </trans-unit>
          <trans-unit id="314" xml:space="preserve">
            <source>Authorization codes are purposefully short-lived, and should be immediately redeemed for access_tokens and refresh_tokens when they are received.</source>
            <target state="new">Authorization codes are purposefully short-lived, and should be immediately redeemed for access_tokens and refresh_tokens when they are received.</target>
          </trans-unit>
          <trans-unit id="315" xml:space="preserve">
            <source>Authorization Codes (personal accounts)</source>
            <target state="new">Authorization Codes (personal accounts)</target>
          </trans-unit>
          <trans-unit id="316" xml:space="preserve">
            <source>5 minutes</source>
            <target state="new">5 minutes</target>
          </trans-unit>
          <trans-unit id="317" xml:space="preserve">
            <source>Authorization codes are purposefully short-lived, and should be immediately redeemed for access_tokens and refresh_tokens when they are received.</source>
            <target state="new">Authorization codes are purposefully short-lived, and should be immediately redeemed for access_tokens and refresh_tokens when they are received.</target>
          </trans-unit>
          <trans-unit id="318" xml:space="preserve">
            <source>Authorization codes issued on behalf of personal accounts are also one-time use.</source>
            <target state="new">Authorization codes issued on behalf of personal accounts are also one-time use.</target>
          </trans-unit>
        </group>
      </group>
    </body>
  </file>
</xliff>