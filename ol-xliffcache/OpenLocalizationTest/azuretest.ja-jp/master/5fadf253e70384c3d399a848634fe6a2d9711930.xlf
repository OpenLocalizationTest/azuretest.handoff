<?xml version="1.0" encoding="utf-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" source-language="en-us" target-language="ja-jp" original="2/20/2016 9:26:53 AM" tool-id="MarkdownTransformer" product-name="N/A" product-version="N/A" build-num="1">
    <header>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5fadf253e70384c3d399a848634fe6a2d9711930</xliffext:olfilehash>
      <tool tool-id="MarkdownTransformer" tool-name="MarkdownToXliff" tool-version="1.0" tool-company="Microsoft" />
    </header>
    <body>
      <group extype="content">
        <group id="101">
          <trans-unit id="101" xml:space="preserve">
            <source>Advanced Usage of Reliable Services Programming Model</source>
            <target state="new">Advanced Usage of Reliable Services Programming Model</target>
          </trans-unit>
          <trans-unit id="102" xml:space="preserve">
            <source>Learn about advanced usage of Service Fabric's Reliable Service programming model for added flexibility in your services.</source>
            <target state="new">Learn about advanced usage of Service Fabric's Reliable Service programming model for added flexibility in your services.</target>
          </trans-unit>
          <trans-unit id="103" xml:space="preserve">
            <source>Advanced usage of the Reliable Services programming model</source>
            <target state="new">Advanced usage of the Reliable Services programming model</target>
          </trans-unit>
          <trans-unit id="104" xml:space="preserve">
            <source>Service Fabric simplifies writing and managing reliable stateless and stateful services.</source>
            <target state="new">Service Fabric simplifies writing and managing reliable stateless and stateful services.</target>
          </trans-unit>
          <trans-unit id="105" xml:space="preserve">
            <source>This guide will talk about advanced usages of the Reliable Services programming model to gain more control and flexibility over your services.</source>
            <target state="new">This guide will talk about advanced usages of the Reliable Services programming model to gain more control and flexibility over your services.</target>
          </trans-unit>
          <trans-unit id="106" xml:space="preserve">
            <source>Prior to reading this guide, familiarize yourself with <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>the Reliable Services programming model<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">Prior to reading this guide, familiarize yourself with <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>the Reliable Services programming model<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="107" xml:space="preserve">
            <source>Stateless Service base classes</source>
            <target state="new">Stateless Service base classes</target>
          </trans-unit>
          <trans-unit id="108" xml:space="preserve">
            <source>The StatelessService base class provides CreateCommunicationListener() and RunAsync(), which is sufficient for the majority of stateless services.</source>
            <target state="new">The StatelessService base class provides CreateCommunicationListener() and RunAsync(), which is sufficient for the majority of stateless services.</target>
          </trans-unit>
          <trans-unit id="109" xml:space="preserve">
            <source>The StatelessServiceBase class underlies StatelessService and exposes additional service lifecycle events.</source>
            <target state="new">The StatelessServiceBase class underlies StatelessService and exposes additional service lifecycle events.</target>
          </trans-unit>
          <trans-unit id="110" xml:space="preserve">
            <source>You can derive from StatelessServiceBase if you need additional control or flexibility.</source>
            <target state="new">You can derive from StatelessServiceBase if you need additional control or flexibility.</target>
          </trans-unit>
          <trans-unit id="111" xml:space="preserve">
            <source>See the developer reference documentation on <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>StatelessService<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> and <bpt id="4CapsExtId1">&lt;link&gt;</bpt><bpt id="4CapsExtId2">&lt;linkText&gt;</bpt>StatelessServiceBase<ept id="4CapsExtId2">&lt;/linkText&gt;</ept><bpt id="4CapsExtId3">&lt;title&gt;</bpt><ept id="4CapsExtId3">&lt;/title&gt;</ept><ept id="4CapsExtId1">&lt;/link&gt;</ept> for more information.</source>
            <target state="new">See the developer reference documentation on <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>StatelessService<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> and <bpt id="4CapsExtId1">&lt;link&gt;</bpt><bpt id="4CapsExtId2">&lt;linkText&gt;</bpt>StatelessServiceBase<ept id="4CapsExtId2">&lt;/linkText&gt;</ept><bpt id="4CapsExtId3">&lt;title&gt;</bpt><ept id="4CapsExtId3">&lt;/title&gt;</ept><ept id="4CapsExtId1">&lt;/link&gt;</ept> for more information.</target>
          </trans-unit>
          <trans-unit id="112" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>void OnInitialize(StatelessServiceInitializiationParameters)<ept id="1">&lt;/code&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>void OnInitialize(StatelessServiceInitializiationParameters)<ept id="1">&lt;/code&gt;</ept></target>
          </trans-unit>
          <trans-unit id="113" xml:space="preserve">
            <source>OnInitialize is the first method called by Service Fabric.</source>
            <target state="new">OnInitialize is the first method called by Service Fabric.</target>
          </trans-unit>
          <trans-unit id="114" xml:space="preserve">
            <source>Service initialization information is provided such as the service name, partition id, instance id, and code package information.</source>
            <target state="new">Service initialization information is provided such as the service name, partition id, instance id, and code package information.</target>
          </trans-unit>
          <trans-unit id="115" xml:space="preserve">
            <source>No complex processing should be done here.</source>
            <target state="new">No complex processing should be done here.</target>
          </trans-unit>
          <trans-unit id="116" xml:space="preserve">
            <source>Lengthy initialization should be done in OnOpenAsync.</source>
            <target state="new">Lengthy initialization should be done in OnOpenAsync.</target>
          </trans-unit>
          <trans-unit id="117" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>Task OnOpenAsync(IStatelessServicePartition, CancellationToken)<ept id="1">&lt;/code&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>Task OnOpenAsync(IStatelessServicePartition, CancellationToken)<ept id="1">&lt;/code&gt;</ept></target>
          </trans-unit>
          <trans-unit id="118" xml:space="preserve">
            <source>OnOpenAsync is called when the stateless service instance is about to be used.</source>
            <target state="new">OnOpenAsync is called when the stateless service instance is about to be used.</target>
          </trans-unit>
          <trans-unit id="119" xml:space="preserve">
            <source>Extended service initialization tasks can be started at this time.</source>
            <target state="new">Extended service initialization tasks can be started at this time.</target>
          </trans-unit>
          <trans-unit id="120" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>Task OnCloseAsync(CancellationToken)<ept id="1">&lt;/code&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>Task OnCloseAsync(CancellationToken)<ept id="1">&lt;/code&gt;</ept></target>
          </trans-unit>
          <trans-unit id="121" xml:space="preserve">
            <source>OnCloseAsync is called when the stateless service instance is going to be gracefully shutdown.</source>
            <target state="new">OnCloseAsync is called when the stateless service instance is going to be gracefully shutdown.</target>
          </trans-unit>
          <trans-unit id="122" xml:space="preserve">
            <source>This can occur when the service's code is being upgraded, the service instance is being moved due to load balancing, or a transient fault is detected.</source>
            <target state="new">This can occur when the service's code is being upgraded, the service instance is being moved due to load balancing, or a transient fault is detected.</target>
          </trans-unit>
          <trans-unit id="123" xml:space="preserve">
            <source>OnCloseAsync can be used to safely close any resources, stop any background processing, finish saving external state, or close down existing connections.</source>
            <target state="new">OnCloseAsync can be used to safely close any resources, stop any background processing, finish saving external state, or close down existing connections.</target>
          </trans-unit>
          <trans-unit id="124" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>void OnAbort()<ept id="1">&lt;/code&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>void OnAbort()<ept id="1">&lt;/code&gt;</ept></target>
          </trans-unit>
          <trans-unit id="125" xml:space="preserve">
            <source>OnAbort is called when the stateless service instance is being forcefully shutdown.</source>
            <target state="new">OnAbort is called when the stateless service instance is being forcefully shutdown.</target>
          </trans-unit>
          <trans-unit id="126" xml:space="preserve">
            <source>This is generally called when a permanent fault is detected on the node, or when Service Fabric cannot reliably manage the service instance's lifecycle due to internal failures.</source>
            <target state="new">This is generally called when a permanent fault is detected on the node, or when Service Fabric cannot reliably manage the service instance's lifecycle due to internal failures.</target>
          </trans-unit>
          <trans-unit id="127" xml:space="preserve">
            <source>Stateful Service base classes</source>
            <target state="new">Stateful Service base classes</target>
          </trans-unit>
          <trans-unit id="128" xml:space="preserve">
            <source>The StatefulService base class should be sufficient for most stateful services.</source>
            <target state="new">The StatefulService base class should be sufficient for most stateful services.</target>
          </trans-unit>
          <trans-unit id="129" xml:space="preserve">
            <source>Similar to stateless services, the StatefulServiceBase class underlies StatefulService and exposes additional service lifecycle events.</source>
            <target state="new">Similar to stateless services, the StatefulServiceBase class underlies StatefulService and exposes additional service lifecycle events.</target>
          </trans-unit>
          <trans-unit id="130" xml:space="preserve">
            <source>Additionally, it allows you to provide a custom reliable state provider and optionally support communication listeners on Secondaries.</source>
            <target state="new">Additionally, it allows you to provide a custom reliable state provider and optionally support communication listeners on Secondaries.</target>
          </trans-unit>
          <trans-unit id="131" xml:space="preserve">
            <source>You can derive from StatefulServiceBase if you need additional control or flexibility.</source>
            <target state="new">You can derive from StatefulServiceBase if you need additional control or flexibility.</target>
          </trans-unit>
          <trans-unit id="132" xml:space="preserve">
            <source>See the developer reference documentation on <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>StatefulService<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> and <bpt id="4CapsExtId1">&lt;link&gt;</bpt><bpt id="4CapsExtId2">&lt;linkText&gt;</bpt>StatefulServiceBase<ept id="4CapsExtId2">&lt;/linkText&gt;</ept><bpt id="4CapsExtId3">&lt;title&gt;</bpt><ept id="4CapsExtId3">&lt;/title&gt;</ept><ept id="4CapsExtId1">&lt;/link&gt;</ept> for more information.</source>
            <target state="new">See the developer reference documentation on <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>StatefulService<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> and <bpt id="4CapsExtId1">&lt;link&gt;</bpt><bpt id="4CapsExtId2">&lt;linkText&gt;</bpt>StatefulServiceBase<ept id="4CapsExtId2">&lt;/linkText&gt;</ept><bpt id="4CapsExtId3">&lt;title&gt;</bpt><ept id="4CapsExtId3">&lt;/title&gt;</ept><ept id="4CapsExtId1">&lt;/link&gt;</ept> for more information.</target>
          </trans-unit>
          <trans-unit id="133" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>Task OnChangeRoleAsync(ReplicaRole, CancellationToken)<ept id="1">&lt;/code&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>Task OnChangeRoleAsync(ReplicaRole, CancellationToken)<ept id="1">&lt;/code&gt;</ept></target>
          </trans-unit>
          <trans-unit id="134" xml:space="preserve">
            <source>OnChangeRoleAsync is called when the stateful service is changing roles, for example to Primary or Secondary.</source>
            <target state="new">OnChangeRoleAsync is called when the stateful service is changing roles, for example to Primary or Secondary.</target>
          </trans-unit>
          <trans-unit id="135" xml:space="preserve">
            <source>Primary replicas are given write status (are allowed to create and write to the reliable collections), while Secondary replicas are given read status (can only read from existing reliable collections).</source>
            <target state="new">Primary replicas are given write status (are allowed to create and write to the reliable collections), while Secondary replicas are given read status (can only read from existing reliable collections).</target>
          </trans-unit>
          <trans-unit id="136" xml:space="preserve">
            <source>You can start or update the background tasks in response to role changes, such as performing read-only validation, report generation, or data mining on a Secondary.</source>
            <target state="new">You can start or update the background tasks in response to role changes, such as performing read-only validation, report generation, or data mining on a Secondary.</target>
          </trans-unit>
          <trans-unit id="137" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>IStateProviderReplica CreateStateProviderReplica()<ept id="1">&lt;/code&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>IStateProviderReplica CreateStateProviderReplica()<ept id="1">&lt;/code&gt;</ept></target>
          </trans-unit>
          <trans-unit id="138" xml:space="preserve">
            <source>A stateful service is expected to have a reliable state provider.</source>
            <target state="new">A stateful service is expected to have a reliable state provider.</target>
          </trans-unit>
          <trans-unit id="139" xml:space="preserve">
            <source>StatefulService uses the ReliableStateManager class, which provides the reliable collections (e.g. dictionaries and queues).</source>
            <target state="new">StatefulService uses the ReliableStateManager class, which provides the reliable collections (e.g. dictionaries and queues).</target>
          </trans-unit>
          <trans-unit id="140" xml:space="preserve">
            <source>You may want to supply your own provider if you wish to manage the state yourself, or extend the functionality of one of the built-in state providers.</source>
            <target state="new">You may want to supply your own provider if you wish to manage the state yourself, or extend the functionality of one of the built-in state providers.</target>
          </trans-unit>
          <trans-unit id="141" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>bool EnableCommunicationListenerOnSecondary { get; }<ept id="1">&lt;/code&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>bool EnableCommunicationListenerOnSecondary { get; }<ept id="1">&lt;/code&gt;</ept></target>
          </trans-unit>
          <trans-unit id="142" xml:space="preserve">
            <source>By default, communication listeners are only created on Primaries.</source>
            <target state="new">By default, communication listeners are only created on Primaries.</target>
          </trans-unit>
          <trans-unit id="143" xml:space="preserve">
            <source>Both StatefulService and StatefulServiceBase allow you to override this property to allow communication listeners to be created on Secondaries.</source>
            <target state="new">Both StatefulService and StatefulServiceBase allow you to override this property to allow communication listeners to be created on Secondaries.</target>
          </trans-unit>
          <trans-unit id="144" xml:space="preserve">
            <source>You may want to allow your Secondaries to handle read-only requests, to improve the throughput on read-heavy workloads.</source>
            <target state="new">You may want to allow your Secondaries to handle read-only requests, to improve the throughput on read-heavy workloads.</target>
          </trans-unit>
          <trans-unit id="145" xml:space="preserve">
            <source>You are responsible for ensuring your Secondaries do not attempt to create or write to reliable collections.</source>
            <target state="new">You are responsible for ensuring your Secondaries do not attempt to create or write to reliable collections.</target>
          </trans-unit>
          <trans-unit id="146" xml:space="preserve">
            <source>Attempts to write on a Secondary will cause an exception which, if unhandled, will cause the replica to be closed and reopened.</source>
            <target state="new">Attempts to write on a Secondary will cause an exception which, if unhandled, will cause the replica to be closed and reopened.</target>
          </trans-unit>
          <trans-unit id="147" xml:space="preserve">
            <source>StatefulServiceBase also provides the same four lifecycle events as StatelessServiceBase, with the same semantics and use cases:</source>
            <target state="new">StatefulServiceBase also provides the same four lifecycle events as StatelessServiceBase, with the same semantics and use cases:</target>
          </trans-unit>
          <trans-unit id="148" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>void OnInitialize(StatefulServiceInitializiationParameters)<ept id="1">&lt;/code&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>void OnInitialize(StatefulServiceInitializiationParameters)<ept id="1">&lt;/code&gt;</ept></target>
          </trans-unit>
          <trans-unit id="149" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>Task OnOpenAsync(IStatefulServicePartition, CancellationToken)<ept id="1">&lt;/code&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>Task OnOpenAsync(IStatefulServicePartition, CancellationToken)<ept id="1">&lt;/code&gt;</ept></target>
          </trans-unit>
          <trans-unit id="150" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>Task OnCloseAsync(CancellationToken)<ept id="1">&lt;/code&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>Task OnCloseAsync(CancellationToken)<ept id="1">&lt;/code&gt;</ept></target>
          </trans-unit>
          <trans-unit id="151" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>void OnAbort()<ept id="1">&lt;/code&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>void OnAbort()<ept id="1">&lt;/code&gt;</ept></target>
          </trans-unit>
          <trans-unit id="152" xml:space="preserve">
            <source>Next steps</source>
            <target state="new">Next steps</target>
          </trans-unit>
          <trans-unit id="153" xml:space="preserve">
            <source>For more advanced topics related to Service Fabric, see the following articles.</source>
            <target state="new">For more advanced topics related to Service Fabric, see the following articles.</target>
          </trans-unit>
          <trans-unit id="154" xml:space="preserve">
            <source><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Configuring Stateful Reliable Services<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></source>
            <target state="new"><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Configuring Stateful Reliable Services<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></target>
          </trans-unit>
          <trans-unit id="155" xml:space="preserve">
            <source><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Service Fabric Health Introduction<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></source>
            <target state="new"><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Service Fabric Health Introduction<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></target>
          </trans-unit>
          <trans-unit id="156" xml:space="preserve">
            <source><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Using System health reports for troubleshooting<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></source>
            <target state="new"><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Using System health reports for troubleshooting<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></target>
          </trans-unit>
          <trans-unit id="157" xml:space="preserve">
            <source><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Placement Constraints Overview<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></source>
            <target state="new"><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Placement Constraints Overview<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></target>
          </trans-unit>
          <trans-unit id="158" xml:space="preserve">
            <source><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Secure Replication traffic of Stateful Services in Azure Service Fabric<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></source>
            <target state="new"><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Secure Replication traffic of Stateful Services in Azure Service Fabric<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></target>
          </trans-unit>
        </group>
      </group>
    </body>
  </file>
</xliff>