<?xml version="1.0" encoding="utf-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" source-language="en-us" target-language="ja-jp" original="2/21/2016 12:21:45 PM" tool-id="MarkdownTransformer" product-name="N/A" product-version="N/A" build-num="1">
    <header>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3ecc59b34e3322a7a96844a4552bb4fbfef8b5ae</xliffext:olfilehash>
      <tool tool-id="MarkdownTransformer" tool-name="MarkdownToXliff" tool-version="1.0" tool-company="Microsoft" />
    </header>
    <body>
      <group extype="content">
        <group id="101">
          <trans-unit id="101" xml:space="preserve">
            <source>Learning PowerShell Workflow</source>
            <target state="new">Learning PowerShell Workflow</target>
          </trans-unit>
          <trans-unit id="102" xml:space="preserve">
            <source>Runbooks in Azure Automation are based on Windows PowerShell Workflow.  This article is intended as a quick lesson for authors familiar with PowerShell to understand the specific differences between PowerShell and PowerShell Workflow.</source>
            <target state="new">Runbooks in Azure Automation are based on Windows PowerShell Workflow.  This article is intended as a quick lesson for authors familiar with PowerShell to understand the specific differences between PowerShell and PowerShell Workflow.</target>
          </trans-unit>
          <trans-unit id="103" xml:space="preserve">
            <source>Learning Windows PowerShell Workflow</source>
            <target state="new">Learning Windows PowerShell Workflow</target>
          </trans-unit>
          <trans-unit id="104" xml:space="preserve">
            <source>Runbooks in Azure Automation are implemented as Windows PowerShell Workflows.</source>
            <target state="new">Runbooks in Azure Automation are implemented as Windows PowerShell Workflows.</target>
          </trans-unit>
          <trans-unit id="105" xml:space="preserve">
            <source>A Windows PowerShell Workflow is similar to a Windows PowerShell script but has some significant differences that can be confusing to a new user.</source>
            <target state="new">A Windows PowerShell Workflow is similar to a Windows PowerShell script but has some significant differences that can be confusing to a new user.</target>
          </trans-unit>
          <trans-unit id="106" xml:space="preserve">
            <source>This article is intended for users already familiar with PowerShell and briefly explains concepts that you require if you are converting a PowerShell script to a PowerShell Workflow for use in a runbook.</source>
            <target state="new">This article is intended for users already familiar with PowerShell and briefly explains concepts that you require if you are converting a PowerShell script to a PowerShell Workflow for use in a runbook.</target>
          </trans-unit>
          <trans-unit id="107" xml:space="preserve">
            <source>A workflow is a sequence of programmed, connected steps that perform long-running tasks or require the coordination of multiple steps across multiple devices or managed nodes.</source>
            <target state="new">A workflow is a sequence of programmed, connected steps that perform long-running tasks or require the coordination of multiple steps across multiple devices or managed nodes.</target>
          </trans-unit>
          <trans-unit id="108" xml:space="preserve">
            <source>The benefits of a workflow over a normal script include the ability to simultaneously perform an action against multiple devices and the ability to automatically recover from failures.</source>
            <target state="new">The benefits of a workflow over a normal script include the ability to simultaneously perform an action against multiple devices and the ability to automatically recover from failures.</target>
          </trans-unit>
          <trans-unit id="109" xml:space="preserve">
            <source>A Windows PowerShell Workflow is a Windows PowerShell script that leverages Windows Workflow Foundation.</source>
            <target state="new">A Windows PowerShell Workflow is a Windows PowerShell script that leverages Windows Workflow Foundation.</target>
          </trans-unit>
          <trans-unit id="110" xml:space="preserve">
            <source>While the workflow is written with Windows PowerShell syntax and launched by Windows PowerShell, it is processed by Windows Workflow Foundation.</source>
            <target state="new">While the workflow is written with Windows PowerShell syntax and launched by Windows PowerShell, it is processed by Windows Workflow Foundation.</target>
          </trans-unit>
          <trans-unit id="111" xml:space="preserve">
            <source>For complete details on the topics in this article, see <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Getting Started with Windows PowerShell Workflow<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">For complete details on the topics in this article, see <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Getting Started with Windows PowerShell Workflow<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="112" xml:space="preserve">
            <source>Types of runbook</source>
            <target state="new">Types of runbook</target>
          </trans-unit>
          <trans-unit id="113" xml:space="preserve">
            <source>There are two types of runbook in Azure Automation, <bpt id="2">&lt;em&gt;</bpt>textual<ept id="2">&lt;/em&gt;</ept> and <bpt id="4">&lt;em&gt;</bpt>graphical<ept id="4">&lt;/em&gt;</ept>.</source>
            <target state="new">There are two types of runbook in Azure Automation, <bpt id="2">&lt;em&gt;</bpt>textual<ept id="2">&lt;/em&gt;</ept> and <bpt id="4">&lt;em&gt;</bpt>graphical<ept id="4">&lt;/em&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="114" xml:space="preserve">
            <source>You define the runbook type when you create the runbook, and you can't convert a runbook to the other type once it's been created.</source>
            <target state="new">You define the runbook type when you create the runbook, and you can't convert a runbook to the other type once it's been created.</target>
          </trans-unit>
          <trans-unit id="115" xml:space="preserve">
            <source>Textual runbooks are for users who prefer to work directly with the PowerShell workflow code either using the textual editor in Azure Automation or an offline editor such as PowerShell ISE.</source>
            <target state="new">Textual runbooks are for users who prefer to work directly with the PowerShell workflow code either using the textual editor in Azure Automation or an offline editor such as PowerShell ISE.</target>
          </trans-unit>
          <trans-unit id="116" xml:space="preserve">
            <source>You should understand the information in this article if you are creating a textual runbook.</source>
            <target state="new">You should understand the information in this article if you are creating a textual runbook.</target>
          </trans-unit>
          <trans-unit id="117" xml:space="preserve">
            <source>Graphical runbooks allow you to create a runbook using the same activities and cmdlets but using a graphical interface that hides the complexities of the underlying PowerShell workflow.</source>
            <target state="new">Graphical runbooks allow you to create a runbook using the same activities and cmdlets but using a graphical interface that hides the complexities of the underlying PowerShell workflow.</target>
          </trans-unit>
          <trans-unit id="118" xml:space="preserve">
            <source>Concepts in this article such as checkpoints and parallel execution still apply to graphical runbooks, but you won't have to worry about the detailed syntax.</source>
            <target state="new">Concepts in this article such as checkpoints and parallel execution still apply to graphical runbooks, but you won't have to worry about the detailed syntax.</target>
          </trans-unit>
          <trans-unit id="119" xml:space="preserve">
            <source>Basic structure of a workflow</source>
            <target state="new">Basic structure of a workflow</target>
          </trans-unit>
          <trans-unit id="120" xml:space="preserve">
            <source>The first step to converting a PowerShell script to a PowerShell workflow is enclosing it with the <bpt id="2">&lt;strong&gt;</bpt>Workflow<ept id="2">&lt;/strong&gt;</ept> keyword.</source>
            <target state="new">The first step to converting a PowerShell script to a PowerShell workflow is enclosing it with the <bpt id="2">&lt;strong&gt;</bpt>Workflow<ept id="2">&lt;/strong&gt;</ept> keyword.</target>
          </trans-unit>
          <trans-unit id="121" xml:space="preserve">
            <source>A workflow starts with the <bpt id="2">&lt;strong&gt;</bpt>Workflow<ept id="2">&lt;/strong&gt;</ept> keyword followed by the body of the script enclosed in braces.</source>
            <target state="new">A workflow starts with the <bpt id="2">&lt;strong&gt;</bpt>Workflow<ept id="2">&lt;/strong&gt;</ept> keyword followed by the body of the script enclosed in braces.</target>
          </trans-unit>
          <trans-unit id="122" xml:space="preserve">
            <source>The name of the workflow follows the <bpt id="2">&lt;strong&gt;</bpt>Workflow<ept id="2">&lt;/strong&gt;</ept> keyword as shown in the following syntax.</source>
            <target state="new">The name of the workflow follows the <bpt id="2">&lt;strong&gt;</bpt>Workflow<ept id="2">&lt;/strong&gt;</ept> keyword as shown in the following syntax.</target>
          </trans-unit>
          <trans-unit id="123" xml:space="preserve">
            <source>The name of the workflow must match the name of the Automation runbook.</source>
            <target state="new">The name of the workflow must match the name of the Automation runbook.</target>
          </trans-unit>
          <trans-unit id="124" xml:space="preserve">
            <source>If the runbook is being imported, then the filename must match the workflow name and must end in .ps1.</source>
            <target state="new">If the runbook is being imported, then the filename must match the workflow name and must end in .ps1.</target>
          </trans-unit>
          <trans-unit id="125" xml:space="preserve">
            <source>To add parameters to the workflow, use the <bpt id="2">&lt;strong&gt;</bpt>Param<ept id="2">&lt;/strong&gt;</ept> keyword just as you would to a script.</source>
            <target state="new">To add parameters to the workflow, use the <bpt id="2">&lt;strong&gt;</bpt>Param<ept id="2">&lt;/strong&gt;</ept> keyword just as you would to a script.</target>
          </trans-unit>
          <trans-unit id="126" xml:space="preserve">
            <source>Code changes</source>
            <target state="new">Code changes</target>
          </trans-unit>
          <trans-unit id="127" xml:space="preserve">
            <source>PowerShell workflow code looks almost identical to PowerShell script code except for a few significant changes.</source>
            <target state="new">PowerShell workflow code looks almost identical to PowerShell script code except for a few significant changes.</target>
          </trans-unit>
          <trans-unit id="128" xml:space="preserve">
            <source>The following sections describe changes that you will need to make to a PowerShell script for it to run in a workflow.</source>
            <target state="new">The following sections describe changes that you will need to make to a PowerShell script for it to run in a workflow.</target>
          </trans-unit>
          <trans-unit id="129" xml:space="preserve">
            <source>Activities</source>
            <target state="new">Activities</target>
          </trans-unit>
          <trans-unit id="130" xml:space="preserve">
            <source>An activity is a specific task in a workflow.</source>
            <target state="new">An activity is a specific task in a workflow.</target>
          </trans-unit>
          <trans-unit id="131" xml:space="preserve">
            <source>Just as a script is composed of one or more commands, a workflow is composed of one or more activities that are carried out in a sequence.</source>
            <target state="new">Just as a script is composed of one or more commands, a workflow is composed of one or more activities that are carried out in a sequence.</target>
          </trans-unit>
          <trans-unit id="132" xml:space="preserve">
            <source>Windows PowerShell Workflow automatically converts many of the Windows PowerShell cmdlets to activities when it runs a workflow.</source>
            <target state="new">Windows PowerShell Workflow automatically converts many of the Windows PowerShell cmdlets to activities when it runs a workflow.</target>
          </trans-unit>
          <trans-unit id="133" xml:space="preserve">
            <source>When you specify one of these cmdlets in your runbook, the corresponding activity is actually run by Windows Workflow Foundation.</source>
            <target state="new">When you specify one of these cmdlets in your runbook, the corresponding activity is actually run by Windows Workflow Foundation.</target>
          </trans-unit>
          <trans-unit id="134" xml:space="preserve">
            <source>For those cmdlets without a corresponding activity, Windows PowerShell Workflow automatically runs the cmdlet within an <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>InlineScript<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> activity.</source>
            <target state="new">For those cmdlets without a corresponding activity, Windows PowerShell Workflow automatically runs the cmdlet within an <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>InlineScript<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> activity.</target>
          </trans-unit>
          <trans-unit id="135" xml:space="preserve">
            <source>There is a set of cmdlets that are excluded and cannot be used in a workflow unless you explicitly include them in an InlineScript block.</source>
            <target state="new">There is a set of cmdlets that are excluded and cannot be used in a workflow unless you explicitly include them in an InlineScript block.</target>
          </trans-unit>
          <trans-unit id="136" xml:space="preserve">
            <source>For further details on these concepts, see <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Using Activities in Script Workflows<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">For further details on these concepts, see <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Using Activities in Script Workflows<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="137" xml:space="preserve">
            <source>Workflow activities share a set of common parameters to configure their operation.</source>
            <target state="new">Workflow activities share a set of common parameters to configure their operation.</target>
          </trans-unit>
          <trans-unit id="138" xml:space="preserve">
            <source>For details about the workflow common parameters, see <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>about_WorkflowCommonParameters<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">For details about the workflow common parameters, see <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>about_WorkflowCommonParameters<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="139" xml:space="preserve">
            <source>Positional parameters</source>
            <target state="new">Positional parameters</target>
          </trans-unit>
          <trans-unit id="140" xml:space="preserve">
            <source>You can't use positional parameters with activities and cmdlets in a workflow.</source>
            <target state="new">You can't use positional parameters with activities and cmdlets in a workflow.</target>
          </trans-unit>
          <trans-unit id="141" xml:space="preserve">
            <source>All this means is that you must use parameter names.</source>
            <target state="new">All this means is that you must use parameter names.</target>
          </trans-unit>
          <trans-unit id="142" xml:space="preserve">
            <source>For example, consider the following code that gets all running services.</source>
            <target state="new">For example, consider the following code that gets all running services.</target>
          </trans-unit>
          <trans-unit id="143" xml:space="preserve">
            <source>If you try to run this same code in a workflow, you'll get a message like "Parameter set cannot be resolved using the specified named parameters."</source>
            <target state="new">If you try to run this same code in a workflow, you'll get a message like "Parameter set cannot be resolved using the specified named parameters."</target>
          </trans-unit>
          <trans-unit id="144" xml:space="preserve">
            <source>To correct this, simply provide the parameter name as in the following.</source>
            <target state="new">To correct this, simply provide the parameter name as in the following.</target>
          </trans-unit>
          <trans-unit id="145" xml:space="preserve">
            <source>Deserialized objects</source>
            <target state="new">Deserialized objects</target>
          </trans-unit>
          <trans-unit id="146" xml:space="preserve">
            <source>Objects in workflows are deserialized.</source>
            <target state="new">Objects in workflows are deserialized.</target>
          </trans-unit>
          <trans-unit id="147" xml:space="preserve">
            <source>This means that their properties are still available, but not their methods.</source>
            <target state="new">This means that their properties are still available, but not their methods.</target>
          </trans-unit>
          <trans-unit id="148" xml:space="preserve">
            <source>For example, consider the following PowerShell code that stops a service using the Stop method of the Service object.</source>
            <target state="new">For example, consider the following PowerShell code that stops a service using the Stop method of the Service object.</target>
          </trans-unit>
          <trans-unit id="149" xml:space="preserve">
            <source>If you try to run this in a workflow, you'll get an error saying "Method invocation is not supported in a Windows PowerShell Workflow".</source>
            <target state="new">If you try to run this in a workflow, you'll get an error saying "Method invocation is not supported in a Windows PowerShell Workflow".</target>
          </trans-unit>
          <trans-unit id="150" xml:space="preserve">
            <source>One option is to wrap these two lines of code in an <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>InlineScript<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> block in which case $Service would be a service object within the block.</source>
            <target state="new">One option is to wrap these two lines of code in an <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>InlineScript<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> block in which case $Service would be a service object within the block.</target>
          </trans-unit>
          <trans-unit id="151" xml:space="preserve">
            <source>Another option is to use another cmdlet that performs the same functionality as the method, if one is available.</source>
            <target state="new">Another option is to use another cmdlet that performs the same functionality as the method, if one is available.</target>
          </trans-unit>
          <trans-unit id="152" xml:space="preserve">
            <source>In the case of our sample, the Stop-Service cmdlet provides the same functionality as the Stop method, and you could use the following for a workflow.</source>
            <target state="new">In the case of our sample, the Stop-Service cmdlet provides the same functionality as the Stop method, and you could use the following for a workflow.</target>
          </trans-unit>
          <trans-unit id="153" xml:space="preserve">
            <source>InlineScript</source>
            <target state="new">InlineScript</target>
          </trans-unit>
          <trans-unit id="154" xml:space="preserve">
            <source>The <bpt id="2">&lt;strong&gt;</bpt>InlineScript<ept id="2">&lt;/strong&gt;</ept> activity is useful when you need to run one or more commands as traditional PowerShell script instead of PowerShell workflow.</source>
            <target state="new">The <bpt id="2">&lt;strong&gt;</bpt>InlineScript<ept id="2">&lt;/strong&gt;</ept> activity is useful when you need to run one or more commands as traditional PowerShell script instead of PowerShell workflow.</target>
          </trans-unit>
          <trans-unit id="155" xml:space="preserve">
            <source>While commands in a workflow are sent to Windows Workflow Foundation for processing, commands in an InlineScript block are processed by Windows PowerShell.</source>
            <target state="new">While commands in a workflow are sent to Windows Workflow Foundation for processing, commands in an InlineScript block are processed by Windows PowerShell.</target>
          </trans-unit>
          <trans-unit id="156" xml:space="preserve">
            <source>InlineScript uses the syntax shown below.</source>
            <target state="new">InlineScript uses the syntax shown below.</target>
          </trans-unit>
          <trans-unit id="157" xml:space="preserve">
            <source>You can return output from an InlineScript by assigning the output to a variable.</source>
            <target state="new">You can return output from an InlineScript by assigning the output to a variable.</target>
          </trans-unit>
          <trans-unit id="158" xml:space="preserve">
            <source>The following example stops a service and then outputs the service name.</source>
            <target state="new">The following example stops a service and then outputs the service name.</target>
          </trans-unit>
          <trans-unit id="159" xml:space="preserve">
            <source>You can pass values into an InlineScript block, but you must use <bpt id="2">&lt;strong&gt;</bpt>$Using<ept id="2">&lt;/strong&gt;</ept> scope modifier.</source>
            <target state="new">You can pass values into an InlineScript block, but you must use <bpt id="2">&lt;strong&gt;</bpt>$Using<ept id="2">&lt;/strong&gt;</ept> scope modifier.</target>
          </trans-unit>
          <trans-unit id="160" xml:space="preserve">
            <source>The following example is identical to the previous example except that the service name is provided by a variable.</source>
            <target state="new">The following example is identical to the previous example except that the service name is provided by a variable.</target>
          </trans-unit>
          <trans-unit id="161" xml:space="preserve">
            <source>While InlineScript activities may be critical in certain workflows, they do not support workflow constructs and should only be used when necessary for the following reasons:</source>
            <target state="new">While InlineScript activities may be critical in certain workflows, they do not support workflow constructs and should only be used when necessary for the following reasons:</target>
          </trans-unit>
          <trans-unit id="162" xml:space="preserve">
            <source>You cannot use <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>checkpoints<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> inside of an InlineScript block.</source>
            <target state="new">You cannot use <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>checkpoints<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> inside of an InlineScript block.</target>
          </trans-unit>
          <trans-unit id="163" xml:space="preserve">
            <source>If a failure occurs within the block, it must be resumed from the beginning of the block.</source>
            <target state="new">If a failure occurs within the block, it must be resumed from the beginning of the block.</target>
          </trans-unit>
          <trans-unit id="164" xml:space="preserve">
            <source>You cannot use <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>parallel execution<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> inside of an InlineScriptBlock.</source>
            <target state="new">You cannot use <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>parallel execution<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> inside of an InlineScriptBlock.</target>
          </trans-unit>
          <trans-unit id="165" xml:space="preserve">
            <source>InlineScript affects scalability of the workflow since it holds the Windows PowerShell session for the entire length of the InlineScript block.</source>
            <target state="new">InlineScript affects scalability of the workflow since it holds the Windows PowerShell session for the entire length of the InlineScript block.</target>
          </trans-unit>
          <trans-unit id="166" xml:space="preserve">
            <source>For further details on using InlineScript, see <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Running Windows PowerShell Commands in a Workflow<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> and <bpt id="4CapsExtId1">&lt;link&gt;</bpt><bpt id="4CapsExtId2">&lt;linkText&gt;</bpt>about_InlineScript<ept id="4CapsExtId2">&lt;/linkText&gt;</ept><bpt id="4CapsExtId3">&lt;title&gt;</bpt><ept id="4CapsExtId3">&lt;/title&gt;</ept><ept id="4CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">For further details on using InlineScript, see <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Running Windows PowerShell Commands in a Workflow<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> and <bpt id="4CapsExtId1">&lt;link&gt;</bpt><bpt id="4CapsExtId2">&lt;linkText&gt;</bpt>about_InlineScript<ept id="4CapsExtId2">&lt;/linkText&gt;</ept><bpt id="4CapsExtId3">&lt;title&gt;</bpt><ept id="4CapsExtId3">&lt;/title&gt;</ept><ept id="4CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="167" xml:space="preserve">
            <source>Parallel processing</source>
            <target state="new">Parallel processing</target>
          </trans-unit>
          <trans-unit id="168" xml:space="preserve">
            <source>One advantage of Windows PowerShell Workflows is the ability to perform a set of commands in parallel instead of sequentially as with a typical script.</source>
            <target state="new">One advantage of Windows PowerShell Workflows is the ability to perform a set of commands in parallel instead of sequentially as with a typical script.</target>
          </trans-unit>
          <trans-unit id="169" xml:space="preserve">
            <source>You can use the <bpt id="2">&lt;strong&gt;</bpt>Parallel<ept id="2">&lt;/strong&gt;</ept> keyword to create a script block with multiple commands that will run concurrently.</source>
            <target state="new">You can use the <bpt id="2">&lt;strong&gt;</bpt>Parallel<ept id="2">&lt;/strong&gt;</ept> keyword to create a script block with multiple commands that will run concurrently.</target>
          </trans-unit>
          <trans-unit id="170" xml:space="preserve">
            <source>This uses the syntax shown below.</source>
            <target state="new">This uses the syntax shown below.</target>
          </trans-unit>
          <trans-unit id="171" xml:space="preserve">
            <source>In this case, Activity1 and Activity2 will start at the same time.</source>
            <target state="new">In this case, Activity1 and Activity2 will start at the same time.</target>
          </trans-unit>
          <trans-unit id="172" xml:space="preserve">
            <source>Activity3 will start only after both Activity1 and Activity2 have completed.</source>
            <target state="new">Activity3 will start only after both Activity1 and Activity2 have completed.</target>
          </trans-unit>
          <trans-unit id="173" xml:space="preserve">
            <source>For example, consider the following PowerShell commands that copy multiple files to a network destination.</source>
            <target state="new">For example, consider the following PowerShell commands that copy multiple files to a network destination.</target>
          </trans-unit>
          <trans-unit id="174" xml:space="preserve">
            <source>These commands are run sequentially so that one file must finish copying before the next is started.</source>
            <target state="new">These commands are run sequentially so that one file must finish copying before the next is started.</target>
          </trans-unit>
          <trans-unit id="175" xml:space="preserve">
            <source>The following workflow runs these same commands in parallel so that they all start copying at the same time.</source>
            <target state="new">The following workflow runs these same commands in parallel so that they all start copying at the same time.</target>
          </trans-unit>
          <trans-unit id="176" xml:space="preserve">
            <source>Only after they are all completely copied is the completion message displayed.</source>
            <target state="new">Only after they are all completely copied is the completion message displayed.</target>
          </trans-unit>
          <trans-unit id="177" xml:space="preserve">
            <source>You can use the <bpt id="2">&lt;strong&gt;</bpt>ForEach -Parallel<ept id="2">&lt;/strong&gt;</ept> construct to process commands for each item in a collection concurrently.</source>
            <target state="new">You can use the <bpt id="2">&lt;strong&gt;</bpt>ForEach -Parallel<ept id="2">&lt;/strong&gt;</ept> construct to process commands for each item in a collection concurrently.</target>
          </trans-unit>
          <trans-unit id="178" xml:space="preserve">
            <source>The items in the collection are processed in parallel while the commands in the script block run sequentially.</source>
            <target state="new">The items in the collection are processed in parallel while the commands in the script block run sequentially.</target>
          </trans-unit>
          <trans-unit id="179" xml:space="preserve">
            <source>This uses the syntax shown below.</source>
            <target state="new">This uses the syntax shown below.</target>
          </trans-unit>
          <trans-unit id="180" xml:space="preserve">
            <source>In this case, Activity1 will start at the same time for all items in the collection.</source>
            <target state="new">In this case, Activity1 will start at the same time for all items in the collection.</target>
          </trans-unit>
          <trans-unit id="181" xml:space="preserve">
            <source>For each item, Activity2 will start after Activity1 is complete.</source>
            <target state="new">For each item, Activity2 will start after Activity1 is complete.</target>
          </trans-unit>
          <trans-unit id="182" xml:space="preserve">
            <source>Activity3 will start only after both Activity1 and Activity2 have completed for all items.</source>
            <target state="new">Activity3 will start only after both Activity1 and Activity2 have completed for all items.</target>
          </trans-unit>
          <trans-unit id="183" xml:space="preserve">
            <source>The following example is similar to the previous example copying files in parallel.</source>
            <target state="new">The following example is similar to the previous example copying files in parallel.</target>
          </trans-unit>
          <trans-unit id="184" xml:space="preserve">
            <source>In this case, a message is displayed for each file after it copies.</source>
            <target state="new">In this case, a message is displayed for each file after it copies.</target>
          </trans-unit>
          <trans-unit id="185" xml:space="preserve">
            <source>Only after they are all completely copied is the final completion message displayed.</source>
            <target state="new">Only after they are all completely copied is the final completion message displayed.</target>
          </trans-unit>
          <trans-unit id="186" xml:space="preserve">
            <source>We do not recommend running child runbooks in parallel since this has been shown to give unreliable results.</source>
            <target state="new">We do not recommend running child runbooks in parallel since this has been shown to give unreliable results.</target>
          </trans-unit>
          <trans-unit id="187" xml:space="preserve">
            <source>The output from the child runbook sometimes will not show up, and settings in one child runbook can affect the other parallel child runbooks</source>
            <target state="new">The output from the child runbook sometimes will not show up, and settings in one child runbook can affect the other parallel child runbooks</target>
          </trans-unit>
          <trans-unit id="188" xml:space="preserve">
            <source>Checkpoints</source>
            <target state="new">Checkpoints</target>
          </trans-unit>
          <trans-unit id="189" xml:space="preserve">
            <source>A <bpt id="2">&lt;em&gt;</bpt>checkpoint<ept id="2">&lt;/em&gt;</ept> is a snapshot of the current state of the workflow that includes the current value for variables and any output generated to that point.</source>
            <target state="new">A <bpt id="2">&lt;em&gt;</bpt>checkpoint<ept id="2">&lt;/em&gt;</ept> is a snapshot of the current state of the workflow that includes the current value for variables and any output generated to that point.</target>
          </trans-unit>
          <trans-unit id="190" xml:space="preserve">
            <source>If a workflow ends in error or is <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>suspended<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>, then the next time it is run it will start from its last checkpoint instead of the start of the worfklow.</source>
            <target state="new">If a workflow ends in error or is <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>suspended<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>, then the next time it is run it will start from its last checkpoint instead of the start of the worfklow.</target>
          </trans-unit>
          <trans-unit id="191" xml:space="preserve">
            <source>You can set a checkpoint in a workflow with the <bpt id="2">&lt;strong&gt;</bpt>Checkpoint-Workflow<ept id="2">&lt;/strong&gt;</ept> activity.</source>
            <target state="new">You can set a checkpoint in a workflow with the <bpt id="2">&lt;strong&gt;</bpt>Checkpoint-Workflow<ept id="2">&lt;/strong&gt;</ept> activity.</target>
          </trans-unit>
          <trans-unit id="192" xml:space="preserve">
            <source>In the following sample code, an exception occurs after Activity2 causing the workflow to end.</source>
            <target state="new">In the following sample code, an exception occurs after Activity2 causing the workflow to end.</target>
          </trans-unit>
          <trans-unit id="193" xml:space="preserve">
            <source>When the workflow is run again, it starts by running Activity2 since this was just after the last checkpoint set.</source>
            <target state="new">When the workflow is run again, it starts by running Activity2 since this was just after the last checkpoint set.</target>
          </trans-unit>
          <trans-unit id="194" xml:space="preserve">
            <source>You should set checkpoints in a workflow after activities that may be prone to exception and should not be repeated if the workflow is resumed.</source>
            <target state="new">You should set checkpoints in a workflow after activities that may be prone to exception and should not be repeated if the workflow is resumed.</target>
          </trans-unit>
          <trans-unit id="195" xml:space="preserve">
            <source>For example, your workflow may create a virtual machine.</source>
            <target state="new">For example, your workflow may create a virtual machine.</target>
          </trans-unit>
          <trans-unit id="196" xml:space="preserve">
            <source>You could set a checkpoint both before and after the commands to create the virtual machine.</source>
            <target state="new">You could set a checkpoint both before and after the commands to create the virtual machine.</target>
          </trans-unit>
          <trans-unit id="197" xml:space="preserve">
            <source>If the creation fails, then the commands would be repeated if the workflow is started again.</source>
            <target state="new">If the creation fails, then the commands would be repeated if the workflow is started again.</target>
          </trans-unit>
          <trans-unit id="198" xml:space="preserve">
            <source>If the the worfklow fails after the creation succeeds, then the virtual machine will not be created again when the workflow is resumed.</source>
            <target state="new">If the the worfklow fails after the creation succeeds, then the virtual machine will not be created again when the workflow is resumed.</target>
          </trans-unit>
          <trans-unit id="199" xml:space="preserve">
            <source>The following example copies multiple files to a network location and sets a checkpoint after each file.</source>
            <target state="new">The following example copies multiple files to a network location and sets a checkpoint after each file.</target>
          </trans-unit>
          <trans-unit id="200" xml:space="preserve">
            <source>If the network location is lost, then the workflow will end in error.</source>
            <target state="new">If the network location is lost, then the workflow will end in error.</target>
          </trans-unit>
          <trans-unit id="201" xml:space="preserve">
            <source>When it is started again, it will resume at the last checkpoint meaning that only the files that have already been copied will be skipped.</source>
            <target state="new">When it is started again, it will resume at the last checkpoint meaning that only the files that have already been copied will be skipped.</target>
          </trans-unit>
          <trans-unit id="202" xml:space="preserve">
            <source>For more information about checkpoints, see <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Adding Checkpoints to a Script Workflow<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">For more information about checkpoints, see <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Adding Checkpoints to a Script Workflow<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="203" xml:space="preserve">
            <source>Related articles</source>
            <target state="new">Related articles</target>
          </trans-unit>
          <trans-unit id="204" xml:space="preserve">
            <source><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Getting Started with Windows PowerShell Workflow<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></source>
            <target state="new"><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Getting Started with Windows PowerShell Workflow<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></target>
          </trans-unit>
          <trans-unit id="205" xml:space="preserve">
            <source>test</source>
            <target state="new">test</target>
          </trans-unit>
        </group>
      </group>
    </body>
  </file>
</xliff>