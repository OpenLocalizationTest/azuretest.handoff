<?xml version="1.0" encoding="utf-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" source-language="en-us" target-language="ja-jp" original="2/21/2016 11:59:12 AM" tool-id="MarkdownTransformer" product-name="N/A" product-version="N/A" build-num="1">
    <header>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3318e45918e0449b0873d6045204a5117bf0b783</xliffext:olfilehash>
      <tool tool-id="MarkdownTransformer" tool-name="MarkdownToXliff" tool-version="1.0" tool-company="Microsoft" />
    </header>
    <body>
      <group extype="content">
        <group id="101">
          <trans-unit id="101" xml:space="preserve">
            <source>Use Logic App features</source>
            <target state="new">Use Logic App features</target>
          </trans-unit>
          <trans-unit id="102" xml:space="preserve">
            <source>Learn how to use the advanced features of logic apps.</source>
            <target state="new">Learn how to use the advanced features of logic apps.</target>
          </trans-unit>
          <trans-unit id="103" xml:space="preserve">
            <source>Use Logic Apps features</source>
            <target state="new">Use Logic Apps features</target>
          </trans-unit>
          <trans-unit id="104" xml:space="preserve">
            <source>In the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>previous topic[create a new logic app]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>, you created your first logic app.</source>
            <target state="new">In the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>previous topic[create a new logic app]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>, you created your first logic app.</target>
          </trans-unit>
          <trans-unit id="105" xml:space="preserve">
            <source>Now we will show you how to build a more complete process using App Services Logic Apps.</source>
            <target state="new">Now we will show you how to build a more complete process using App Services Logic Apps.</target>
          </trans-unit>
          <trans-unit id="106" xml:space="preserve">
            <source>This topic introduces the following new Logic Apps concepts:</source>
            <target state="new">This topic introduces the following new Logic Apps concepts:</target>
          </trans-unit>
          <trans-unit id="107" xml:space="preserve">
            <source>Conditional logic, which executes an action only when a certain condition is met.</source>
            <target state="new">Conditional logic, which executes an action only when a certain condition is met.</target>
          </trans-unit>
          <trans-unit id="108" xml:space="preserve">
            <source>Repeating actions.</source>
            <target state="new">Repeating actions.</target>
          </trans-unit>
          <trans-unit id="109" xml:space="preserve">
            <source>Code view to edit an existing logic app.</source>
            <target state="new">Code view to edit an existing logic app.</target>
          </trans-unit>
          <trans-unit id="110" xml:space="preserve">
            <source>Options for starting a workflow.</source>
            <target state="new">Options for starting a workflow.</target>
          </trans-unit>
          <trans-unit id="111" xml:space="preserve">
            <source>Before you complete this topic, you should complete the steps in [Create a new logic app].</source>
            <target state="new">Before you complete this topic, you should complete the steps in [Create a new logic app].</target>
          </trans-unit>
          <trans-unit id="112" xml:space="preserve">
            <source>In the [Azure portal], browse to your logic app and click <bpt id="2">&lt;strong&gt;</bpt>Triggers and Actions<ept id="2">&lt;/strong&gt;</ept> in the summary to edit the logic app definition.</source>
            <target state="new">In the [Azure portal], browse to your logic app and click <bpt id="2">&lt;strong&gt;</bpt>Triggers and Actions<ept id="2">&lt;/strong&gt;</ept> in the summary to edit the logic app definition.</target>
          </trans-unit>
          <trans-unit id="113" xml:space="preserve">
            <source>Reference material</source>
            <target state="new">Reference material</target>
          </trans-unit>
          <trans-unit id="114" xml:space="preserve">
            <source>You may find the follow documents useful:</source>
            <target state="new">You may find the follow documents useful:</target>
          </trans-unit>
          <trans-unit id="115" xml:space="preserve">
            <source><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Management and runtime REST APIs<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept> - including how to invoke Logic apps directly</source>
            <target state="new"><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Management and runtime REST APIs<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept> - including how to invoke Logic apps directly</target>
          </trans-unit>
          <trans-unit id="116" xml:space="preserve">
            <source><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Language reference<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept> - a comprehensive list of all supported functions/expressions</source>
            <target state="new"><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Language reference<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept> - a comprehensive list of all supported functions/expressions</target>
          </trans-unit>
          <trans-unit id="117" xml:space="preserve">
            <source><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Trigger and action types<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept> - the different types of actions and the inputs they take</source>
            <target state="new"><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Trigger and action types<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept> - the different types of actions and the inputs they take</target>
          </trans-unit>
          <trans-unit id="118" xml:space="preserve">
            <source><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Overview of App Service<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept> - description of what components to choose when to build a solution</source>
            <target state="new"><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Overview of App Service<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept> - description of what components to choose when to build a solution</target>
          </trans-unit>
          <trans-unit id="119" xml:space="preserve">
            <source>Adding conditional logic and a repeat</source>
            <target state="new">Adding conditional logic and a repeat</target>
          </trans-unit>
          <trans-unit id="120" xml:space="preserve">
            <source>Although the original flow works, there are some areas that could be improved.</source>
            <target state="new">Although the original flow works, there are some areas that could be improved.</target>
          </trans-unit>
          <trans-unit id="121" xml:space="preserve">
            <source>First, the action only sends you the top tweet returned.</source>
            <target state="new">First, the action only sends you the top tweet returned.</target>
          </trans-unit>
          <trans-unit id="122" xml:space="preserve">
            <source>Logically, you would want to receive all of the tweets with the keyword.</source>
            <target state="new">Logically, you would want to receive all of the tweets with the keyword.</target>
          </trans-unit>
          <trans-unit id="123" xml:space="preserve">
            <source>To repeat an action for a list of items, such as the returned tweets, you must use the <bpt id="2">&lt;code&gt;</bpt>repeat<ept id="2">&lt;/code&gt;</ept> property.</source>
            <target state="new">To repeat an action for a list of items, such as the returned tweets, you must use the <bpt id="2">&lt;code&gt;</bpt>repeat<ept id="2">&lt;/code&gt;</ept> property.</target>
          </trans-unit>
          <trans-unit id="124" xml:space="preserve">
            <source>Repeating</source>
            <target state="new">Repeating</target>
          </trans-unit>
          <trans-unit id="125" xml:space="preserve">
            <source>Repeat takes a list of items and executes the action for each item in that list.</source>
            <target state="new">Repeat takes a list of items and executes the action for each item in that list.</target>
          </trans-unit>
          <trans-unit id="126" xml:space="preserve">
            <source>The following steps update the existing action to use repeats, which makes more sense for a list of tweets.</source>
            <target state="new">The following steps update the existing action to use repeats, which makes more sense for a list of tweets.</target>
          </trans-unit>
          <trans-unit id="127" xml:space="preserve">
            <source>Return to the workflow you created and click the <bpt id="2">&lt;strong&gt;</bpt>Definition<ept id="2">&lt;/strong&gt;</ept> link in the <bpt id="4">&lt;strong&gt;</bpt>Essentials<ept id="4">&lt;/strong&gt;</ept>.</source>
            <target state="new">Return to the workflow you created and click the <bpt id="2">&lt;strong&gt;</bpt>Definition<ept id="2">&lt;/strong&gt;</ept> link in the <bpt id="4">&lt;strong&gt;</bpt>Essentials<ept id="4">&lt;/strong&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="128" xml:space="preserve">
            <source>To edit the <bpt id="2">&lt;strong&gt;</bpt>Dropbox connector<ept id="2">&lt;/strong&gt;</ept> action, click the pencil icon.</source>
            <target state="new">To edit the <bpt id="2">&lt;strong&gt;</bpt>Dropbox connector<ept id="2">&lt;/strong&gt;</ept> action, click the pencil icon.</target>
          </trans-unit>
          <trans-unit id="129" xml:space="preserve">
            <source>Click on the gear icon, and select <bpt id="2">&lt;strong&gt;</bpt>Repeat over a list<ept id="2">&lt;/strong&gt;</ept>.</source>
            <target state="new">Click on the gear icon, and select <bpt id="2">&lt;strong&gt;</bpt>Repeat over a list<ept id="2">&lt;/strong&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="130" xml:space="preserve">
            <source>Next to the <bpt id="2">&lt;strong&gt;</bpt>Repeat<ept id="2">&lt;/strong&gt;</ept> box click the <bpt id="4">&lt;code&gt;</bpt>...<ept id="4">&lt;/code&gt;</ept> and select <bpt id="6">&lt;strong&gt;</bpt>Body<ept id="6">&lt;/strong&gt;</ept>.</source>
            <target state="new">Next to the <bpt id="2">&lt;strong&gt;</bpt>Repeat<ept id="2">&lt;/strong&gt;</ept> box click the <bpt id="4">&lt;code&gt;</bpt>...<ept id="4">&lt;/code&gt;</ept> and select <bpt id="6">&lt;strong&gt;</bpt>Body<ept id="6">&lt;/strong&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="131" xml:space="preserve">
            <source>This will input:</source>
            <target state="new">This will input:</target>
          </trans-unit>
          <trans-unit id="132" xml:space="preserve">
            <source>Into the text box.</source>
            <target state="new">Into the text box.</target>
          </trans-unit>
          <trans-unit id="133" xml:space="preserve">
            <source>This function outputs a list of tweets.</source>
            <target state="new">This function outputs a list of tweets.</target>
          </trans-unit>
          <trans-unit id="134" xml:space="preserve">
            <source>Select all of the text in the <bpt id="2">&lt;strong&gt;</bpt>Content<ept id="2">&lt;/strong&gt;</ept> text box and delete it.</source>
            <target state="new">Select all of the text in the <bpt id="2">&lt;strong&gt;</bpt>Content<ept id="2">&lt;/strong&gt;</ept> text box and delete it.</target>
          </trans-unit>
          <trans-unit id="135" xml:space="preserve">
            <source>Then, click the <bpt id="2">&lt;code&gt;</bpt>...<ept id="2">&lt;/code&gt;</ept> and select <bpt id="4">&lt;strong&gt;</bpt>Tweet Text<ept id="4">&lt;/strong&gt;</ept>.</source>
            <target state="new">Then, click the <bpt id="2">&lt;code&gt;</bpt>...<ept id="2">&lt;/code&gt;</ept> and select <bpt id="4">&lt;strong&gt;</bpt>Tweet Text<ept id="4">&lt;/strong&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="136" xml:space="preserve">
            <source>This will insert the <bpt id="2">&lt;strong&gt;</bpt>repeatItem()<ept id="2">&lt;/strong&gt;</ept> function, which returns each element in the list.</source>
            <target state="new">This will insert the <bpt id="2">&lt;strong&gt;</bpt>repeatItem()<ept id="2">&lt;/strong&gt;</ept> function, which returns each element in the list.</target>
          </trans-unit>
          <trans-unit id="137" xml:space="preserve">
            <source>Finally, note that the outputs of repeating actions are special.</source>
            <target state="new">Finally, note that the outputs of repeating actions are special.</target>
          </trans-unit>
          <trans-unit id="138" xml:space="preserve">
            <source>If you wanted to reference the results of the Dropbox operation, for example, you could <bpt id="2">&lt;em&gt;</bpt>not<ept id="2">&lt;/em&gt;</ept> do the normal <bpt id="4">&lt;code&gt;</bpt>@actions('dropboxconnector').outputs.body<ept id="4">&lt;/code&gt;</ept>, you would instead do: <bpt id="6">&lt;code&gt;</bpt>@actions('dropboxconnector').outputs.repeatItems<ept id="6">&lt;/code&gt;</ept>.</source>
            <target state="new">If you wanted to reference the results of the Dropbox operation, for example, you could <bpt id="2">&lt;em&gt;</bpt>not<ept id="2">&lt;/em&gt;</ept> do the normal <bpt id="4">&lt;code&gt;</bpt>@actions('dropboxconnector').outputs.body<ept id="4">&lt;/code&gt;</ept>, you would instead do: <bpt id="6">&lt;code&gt;</bpt>@actions('dropboxconnector').outputs.repeatItems<ept id="6">&lt;/code&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="139" xml:space="preserve">
            <source>This returns a list of all of the times that the operation ran, along with the outputs of each.</source>
            <target state="new">This returns a list of all of the times that the operation ran, along with the outputs of each.</target>
          </trans-unit>
          <trans-unit id="140" xml:space="preserve">
            <source>For example, <bpt id="2">&lt;code&gt;</bpt>@first(actions('dropboxconnector').outputs.repeatItems).outputs.body.FilePath<ept id="2">&lt;/code&gt;</ept> will return the path of the first file uploaded.</source>
            <target state="new">For example, <bpt id="2">&lt;code&gt;</bpt>@first(actions('dropboxconnector').outputs.repeatItems).outputs.body.FilePath<ept id="2">&lt;/code&gt;</ept> will return the path of the first file uploaded.</target>
          </trans-unit>
          <trans-unit id="141" xml:space="preserve">
            <source>Conditional</source>
            <target state="new">Conditional</target>
          </trans-unit>
          <trans-unit id="142" xml:space="preserve">
            <source>This logic app still results in a lot of files being uploaded to Dropbox.</source>
            <target state="new">This logic app still results in a lot of files being uploaded to Dropbox.</target>
          </trans-unit>
          <trans-unit id="143" xml:space="preserve">
            <source>The following steps add additional logic to make sure that you only receive a file when the tweet has a certain number of retweets.</source>
            <target state="new">The following steps add additional logic to make sure that you only receive a file when the tweet has a certain number of retweets.</target>
          </trans-unit>
          <trans-unit id="144" xml:space="preserve">
            <source>Click the gear icon at the top of the action and select <bpt id="2">&lt;strong&gt;</bpt>Add a condition to be met<ept id="2">&lt;/strong&gt;</ept>.</source>
            <target state="new">Click the gear icon at the top of the action and select <bpt id="2">&lt;strong&gt;</bpt>Add a condition to be met<ept id="2">&lt;/strong&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="145" xml:space="preserve">
            <source>In the text box, type the following:</source>
            <target state="new">In the text box, type the following:</target>
          </trans-unit>
          <trans-unit id="146" xml:space="preserve">
            <source>The function <bpt id="2">&lt;strong&gt;</bpt>greater<ept id="2">&lt;/strong&gt;</ept> compares two values and only allows the action to be executed when the first value is greater than the second value.</source>
            <target state="new">The function <bpt id="2">&lt;strong&gt;</bpt>greater<ept id="2">&lt;/strong&gt;</ept> compares two values and only allows the action to be executed when the first value is greater than the second value.</target>
          </trans-unit>
          <trans-unit id="147" xml:space="preserve">
            <source>You access a given property as a dot (.)</source>
            <target state="new">You access a given property as a dot (.)</target>
          </trans-unit>
          <trans-unit id="148" xml:space="preserve">
            <source>followed by the property name, such as <bpt id="2">&lt;code&gt;</bpt>.Retweet_Count<ept id="2">&lt;/code&gt;</ept> above.</source>
            <target state="new">followed by the property name, such as <bpt id="2">&lt;code&gt;</bpt>.Retweet_Count<ept id="2">&lt;/code&gt;</ept> above.</target>
          </trans-unit>
          <trans-unit id="149" xml:space="preserve">
            <source>Click the check mark to save the Dropbox action.</source>
            <target state="new">Click the check mark to save the Dropbox action.</target>
          </trans-unit>
          <trans-unit id="150" xml:space="preserve">
            <source>Using the code view to edit a Logic App</source>
            <target state="new">Using the code view to edit a Logic App</target>
          </trans-unit>
          <trans-unit id="151" xml:space="preserve">
            <source>In addition to the designer, you can directly edit the code that defines a logic app, as follows.</source>
            <target state="new">In addition to the designer, you can directly edit the code that defines a logic app, as follows.</target>
          </trans-unit>
          <trans-unit id="152" xml:space="preserve">
            <source>Click on the <bpt id="2">&lt;strong&gt;</bpt>Code view<ept id="2">&lt;/strong&gt;</ept> button in the command bar.</source>
            <target state="new">Click on the <bpt id="2">&lt;strong&gt;</bpt>Code view<ept id="2">&lt;/strong&gt;</ept> button in the command bar.</target>
          </trans-unit>
          <trans-unit id="153" xml:space="preserve">
            <source>This opens a full editor that shows the definition you just edited.</source>
            <target state="new">This opens a full editor that shows the definition you just edited.</target>
          </trans-unit>
          <trans-unit id="154" xml:space="preserve">
            <source><bpt id="1">&lt;linkText&gt;</bpt>Code view<ept id="1">&lt;/linkText&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;linkText&gt;</bpt>Code view<ept id="1">&lt;/linkText&gt;</ept></target>
          </trans-unit>
          <trans-unit id="155" xml:space="preserve">
            <source>By using the text editor, you can copy and paste any number of actions within the same logic app or between logic apps.</source>
            <target state="new">By using the text editor, you can copy and paste any number of actions within the same logic app or between logic apps.</target>
          </trans-unit>
          <trans-unit id="156" xml:space="preserve">
            <source>You can also easily add or remove entire sections from the definition, and you can also share definitions with others.</source>
            <target state="new">You can also easily add or remove entire sections from the definition, and you can also share definitions with others.</target>
          </trans-unit>
          <trans-unit id="157" xml:space="preserve">
            <source>After you make your changes in code view, simply click <bpt id="2">&lt;strong&gt;</bpt>Save<ept id="2">&lt;/strong&gt;</ept>.</source>
            <target state="new">After you make your changes in code view, simply click <bpt id="2">&lt;strong&gt;</bpt>Save<ept id="2">&lt;/strong&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="158" xml:space="preserve">
            <source>Parameters</source>
            <target state="new">Parameters</target>
          </trans-unit>
          <trans-unit id="159" xml:space="preserve">
            <source>There are some capabilities of Logic Apps that can only be used in the code view.</source>
            <target state="new">There are some capabilities of Logic Apps that can only be used in the code view.</target>
          </trans-unit>
          <trans-unit id="160" xml:space="preserve">
            <source>One example of these is parameters.</source>
            <target state="new">One example of these is parameters.</target>
          </trans-unit>
          <trans-unit id="161" xml:space="preserve">
            <source>Parameters make it easy to re-use values throughout your logic app.</source>
            <target state="new">Parameters make it easy to re-use values throughout your logic app.</target>
          </trans-unit>
          <trans-unit id="162" xml:space="preserve">
            <source>For example, if you have an email address that you want use in several actions, you should define it as a parameter.</source>
            <target state="new">For example, if you have an email address that you want use in several actions, you should define it as a parameter.</target>
          </trans-unit>
          <trans-unit id="163" xml:space="preserve">
            <source>The following updates your existing logic app to use parameters for the query term.</source>
            <target state="new">The following updates your existing logic app to use parameters for the query term.</target>
          </trans-unit>
          <trans-unit id="164" xml:space="preserve">
            <source>In the code view, locate the <bpt id="2">&lt;code&gt;</bpt>parameters : {}<ept id="2">&lt;/code&gt;</ept> object and insert the following topic object:</source>
            <target state="new">In the code view, locate the <bpt id="2">&lt;code&gt;</bpt>parameters : {}<ept id="2">&lt;/code&gt;</ept> object and insert the following topic object:</target>
          </trans-unit>
          <trans-unit id="165" xml:space="preserve">
            <source>Scroll to the <bpt id="2">&lt;code&gt;</bpt>twitterconnector<ept id="2">&lt;/code&gt;</ept> action, locate the query value and replace it with <bpt id="4">&lt;code&gt;</bpt>#@{parameters('topic')}<ept id="4">&lt;/code&gt;</ept>.</source>
            <target state="new">Scroll to the <bpt id="2">&lt;code&gt;</bpt>twitterconnector<ept id="2">&lt;/code&gt;</ept> action, locate the query value and replace it with <bpt id="4">&lt;code&gt;</bpt>#@{parameters('topic')}<ept id="4">&lt;/code&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="166" xml:space="preserve">
            <source>You could also use the  <bpt id="2">&lt;strong&gt;</bpt>concat<ept id="2">&lt;/strong&gt;</ept> function to join together two or more strings, for example: <bpt id="4">&lt;code&gt;</bpt>@concat('#',parameters('topic'))<ept id="4">&lt;/code&gt;</ept> is identical to the above.</source>
            <target state="new">You could also use the  <bpt id="2">&lt;strong&gt;</bpt>concat<ept id="2">&lt;/strong&gt;</ept> function to join together two or more strings, for example: <bpt id="4">&lt;code&gt;</bpt>@concat('#',parameters('topic'))<ept id="4">&lt;/code&gt;</ept> is identical to the above.</target>
          </trans-unit>
          <trans-unit id="167" xml:space="preserve">
            <source>Finally, go to the <bpt id="2">&lt;code&gt;</bpt>dropboxconnector<ept id="2">&lt;/code&gt;</ept> action and add the topic parameter, as follows:</source>
            <target state="new">Finally, go to the <bpt id="2">&lt;code&gt;</bpt>dropboxconnector<ept id="2">&lt;/code&gt;</ept> action and add the topic parameter, as follows:</target>
          </trans-unit>
          <trans-unit id="168" xml:space="preserve">
            <source>Parameters are a good way to pull out values that you are likely to change a lot. They are especially useful when you need to override parameters in different environments. For more information on how to override parameters based on environment, see our <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>REST API documentation<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">Parameters are a good way to pull out values that you are likely to change a lot. They are especially useful when you need to override parameters in different environments. For more information on how to override parameters based on environment, see our <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>REST API documentation<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="169" xml:space="preserve">
            <source>Now, when you click <bpt id="2">&lt;strong&gt;</bpt>Save<ept id="2">&lt;/strong&gt;</ept>, every hour you will get any new tweets that have more than 5 retweets delivered to a folder called <bpt id="4">&lt;strong&gt;</bpt>tweets<ept id="4">&lt;/strong&gt;</ept> in your Dropbox.</source>
            <target state="new">Now, when you click <bpt id="2">&lt;strong&gt;</bpt>Save<ept id="2">&lt;/strong&gt;</ept>, every hour you will get any new tweets that have more than 5 retweets delivered to a folder called <bpt id="4">&lt;strong&gt;</bpt>tweets<ept id="4">&lt;/strong&gt;</ept> in your Dropbox.</target>
          </trans-unit>
          <trans-unit id="170" xml:space="preserve">
            <source>To learn more about Logic App definitions, see <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>author Logic App definitions<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">To learn more about Logic App definitions, see <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>author Logic App definitions<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="171" xml:space="preserve">
            <source>Starting a logic app workflow</source>
            <target state="new">Starting a logic app workflow</target>
          </trans-unit>
          <trans-unit id="172" xml:space="preserve">
            <source>There are several different options for starting the workflow defined in you logic app.</source>
            <target state="new">There are several different options for starting the workflow defined in you logic app.</target>
          </trans-unit>
          <trans-unit id="173" xml:space="preserve">
            <source>A workflow can always be started on-demand in the [Azure portal].</source>
            <target state="new">A workflow can always be started on-demand in the [Azure portal].</target>
          </trans-unit>
          <trans-unit id="174" xml:space="preserve">
            <source>Recurrence triggers</source>
            <target state="new">Recurrence triggers</target>
          </trans-unit>
          <trans-unit id="175" xml:space="preserve">
            <source>A recurrence trigger run at an interval that you specify.</source>
            <target state="new">A recurrence trigger run at an interval that you specify.</target>
          </trans-unit>
          <trans-unit id="176" xml:space="preserve">
            <source>When the trigger has conditional logic, the trigger determines whether or not the workflow needs to run.</source>
            <target state="new">When the trigger has conditional logic, the trigger determines whether or not the workflow needs to run.</target>
          </trans-unit>
          <trans-unit id="177" xml:space="preserve">
            <source>A trigger indicates it should run by returning a <bpt id="2">&lt;code&gt;</bpt>200<ept id="2">&lt;/code&gt;</ept> status code.</source>
            <target state="new">A trigger indicates it should run by returning a <bpt id="2">&lt;code&gt;</bpt>200<ept id="2">&lt;/code&gt;</ept> status code.</target>
          </trans-unit>
          <trans-unit id="178" xml:space="preserve">
            <source>When is does not need to run, it returns <bpt id="2">&lt;code&gt;</bpt>202<ept id="2">&lt;/code&gt;</ept> status code.</source>
            <target state="new">When is does not need to run, it returns <bpt id="2">&lt;code&gt;</bpt>202<ept id="2">&lt;/code&gt;</ept> status code.</target>
          </trans-unit>
          <trans-unit id="179" xml:space="preserve">
            <source>Callback using REST APIs</source>
            <target state="new">Callback using REST APIs</target>
          </trans-unit>
          <trans-unit id="180" xml:space="preserve">
            <source>Services can call a logic app endpoint to start a workflow.</source>
            <target state="new">Services can call a logic app endpoint to start a workflow.</target>
          </trans-unit>
          <trans-unit id="181" xml:space="preserve">
            <source>You can find the endpoint to access by navigating to the <bpt id="2">&lt;strong&gt;</bpt>Properties<ept id="2">&lt;/strong&gt;</ept> blade from the <bpt id="4">&lt;strong&gt;</bpt>Settings<ept id="4">&lt;/strong&gt;</ept> command bar button in your logic app.</source>
            <target state="new">You can find the endpoint to access by navigating to the <bpt id="2">&lt;strong&gt;</bpt>Properties<ept id="2">&lt;/strong&gt;</ept> blade from the <bpt id="4">&lt;strong&gt;</bpt>Settings<ept id="4">&lt;/strong&gt;</ept> command bar button in your logic app.</target>
          </trans-unit>
          <trans-unit id="182" xml:space="preserve">
            <source>You can use this callback to invoke a logic app from inside your custom application.</source>
            <target state="new">You can use this callback to invoke a logic app from inside your custom application.</target>
          </trans-unit>
          <trans-unit id="183" xml:space="preserve">
            <source>You need to use <bpt id="2">&lt;strong&gt;</bpt>Basic<ept id="2">&lt;/strong&gt;</ept> authentication.</source>
            <target state="new">You need to use <bpt id="2">&lt;strong&gt;</bpt>Basic<ept id="2">&lt;/strong&gt;</ept> authentication.</target>
          </trans-unit>
          <trans-unit id="184" xml:space="preserve">
            <source>The username of <bpt id="2">&lt;code&gt;</bpt>default<ept id="2">&lt;/code&gt;</ept> is created for you, and the password is the <bpt id="4">&lt;strong&gt;</bpt>Primary Access Key<ept id="4">&lt;/strong&gt;</ept> field on the <bpt id="6">&lt;strong&gt;</bpt>Properties<ept id="6">&lt;/strong&gt;</ept> blade.</source>
            <target state="new">The username of <bpt id="2">&lt;code&gt;</bpt>default<ept id="2">&lt;/code&gt;</ept> is created for you, and the password is the <bpt id="4">&lt;strong&gt;</bpt>Primary Access Key<ept id="4">&lt;/strong&gt;</ept> field on the <bpt id="6">&lt;strong&gt;</bpt>Properties<ept id="6">&lt;/strong&gt;</ept> blade.</target>
          </trans-unit>
          <trans-unit id="185" xml:space="preserve">
            <source>For example:</source>
            <target state="new">For example:</target>
          </trans-unit>
          <trans-unit id="186" xml:space="preserve">
            <source>You can pass outputs to the workflow and reference them in the workflow.</source>
            <target state="new">You can pass outputs to the workflow and reference them in the workflow.</target>
          </trans-unit>
          <trans-unit id="187" xml:space="preserve">
            <source>For example, with the above trigger, if you include <bpt id="2">&lt;code&gt;</bpt>@triggers().outputs.property<ept id="2">&lt;/code&gt;</ept> you will get <bpt id="4">&lt;code&gt;</bpt>value<ept id="4">&lt;/code&gt;</ept>.</source>
            <target state="new">For example, with the above trigger, if you include <bpt id="2">&lt;code&gt;</bpt>@triggers().outputs.property<ept id="2">&lt;/code&gt;</ept> you will get <bpt id="4">&lt;code&gt;</bpt>value<ept id="4">&lt;/code&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="188" xml:space="preserve">
            <source>For more information, see <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>the REST documentation<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">For more information, see <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>the REST documentation<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="189" xml:space="preserve">
            <source>Manual execution</source>
            <target state="new">Manual execution</target>
          </trans-unit>
          <trans-unit id="190" xml:space="preserve">
            <source>You can define a logic app that does not have a trigger.</source>
            <target state="new">You can define a logic app that does not have a trigger.</target>
          </trans-unit>
          <trans-unit id="191" xml:space="preserve">
            <source>In this case the workflow must be started on-demand.</source>
            <target state="new">In this case the workflow must be started on-demand.</target>
          </trans-unit>
          <trans-unit id="192" xml:space="preserve">
            <source>This kind of logic app is best suited for a process that only needs to run intermittently.</source>
            <target state="new">This kind of logic app is best suited for a process that only needs to run intermittently.</target>
          </trans-unit>
          <trans-unit id="193" xml:space="preserve">
            <source>To create a logic app without a trigger, check the <bpt id="2">&lt;strong&gt;</bpt>Run this logic manually<ept id="2">&lt;/strong&gt;</ept> in the <bpt id="4">&lt;strong&gt;</bpt>Start logic<ept id="4">&lt;/strong&gt;</ept> box in the designer.</source>
            <target state="new">To create a logic app without a trigger, check the <bpt id="2">&lt;strong&gt;</bpt>Run this logic manually<ept id="2">&lt;/strong&gt;</ept> in the <bpt id="4">&lt;strong&gt;</bpt>Start logic<ept id="4">&lt;/strong&gt;</ept> box in the designer.</target>
          </trans-unit>
          <trans-unit id="194" xml:space="preserve">
            <source>To start logic app on-demand, click the <bpt id="2">&lt;strong&gt;</bpt>Run now<ept id="2">&lt;/strong&gt;</ept> button on the command bar.</source>
            <target state="new">To start logic app on-demand, click the <bpt id="2">&lt;strong&gt;</bpt>Run now<ept id="2">&lt;/strong&gt;</ept> button on the command bar.</target>
          </trans-unit>
          <trans-unit id="195" xml:space="preserve">
            <source>test</source>
            <target state="new">test</target>
          </trans-unit>
        </group>
      </group>
    </body>
  </file>
</xliff>