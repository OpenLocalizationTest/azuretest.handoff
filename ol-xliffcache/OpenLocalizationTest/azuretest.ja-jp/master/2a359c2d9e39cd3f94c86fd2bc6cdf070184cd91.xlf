<?xml version="1.0" encoding="utf-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" source-language="en-us" target-language="ja-jp" original="2/20/2016 9:36:09 AM" tool-id="MarkdownTransformer" product-name="N/A" product-version="N/A" build-num="1">
    <header>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2a359c2d9e39cd3f94c86fd2bc6cdf070184cd91</xliffext:olfilehash>
      <tool tool-id="MarkdownTransformer" tool-name="MarkdownToXliff" tool-version="1.0" tool-company="Microsoft" />
    </header>
    <body>
      <group extype="content">
        <group id="101">
          <trans-unit id="101" xml:space="preserve">
            <source>How to use Queue storage from Node.js | Microsoft Azure</source>
            <target state="new">How to use Queue storage from Node.js | Microsoft Azure</target>
          </trans-unit>
          <trans-unit id="102" xml:space="preserve">
            <source>Learn how to use the Azure Queue service to create and delete queues, and insert, get, and delete messages. Samples written in Node.js.</source>
            <target state="new">Learn how to use the Azure Queue service to create and delete queues, and insert, get, and delete messages. Samples written in Node.js.</target>
          </trans-unit>
          <trans-unit id="103" xml:space="preserve">
            <source>How to use Queue storage from Node.js</source>
            <target state="new">How to use Queue storage from Node.js</target>
          </trans-unit>
          <trans-unit id="104" xml:space="preserve">
            <source><ph id="1">&lt;token href="../../includes/storage-selector-queue-include.md"/&gt;</ph></source>
            <target state="new"><ph id="1">&lt;token href="../../includes/storage-selector-queue-include.md"/&gt;</ph></target>
          </trans-unit>
          <trans-unit id="105" xml:space="preserve">
            <source>Overview</source>
            <target state="new">Overview</target>
          </trans-unit>
          <trans-unit id="106" xml:space="preserve">
            <source>This guide shows you how to perform common scenarios using the Microsoft</source>
            <target state="new">This guide shows you how to perform common scenarios using the Microsoft</target>
          </trans-unit>
          <trans-unit id="107" xml:space="preserve">
            <source>Azure Queue service.</source>
            <target state="new">Azure Queue service.</target>
          </trans-unit>
          <trans-unit id="108" xml:space="preserve">
            <source>The samples are written using the Node.js</source>
            <target state="new">The samples are written using the Node.js</target>
          </trans-unit>
          <trans-unit id="109" xml:space="preserve">
            <source>API.</source>
            <target state="new">API.</target>
          </trans-unit>
          <trans-unit id="110" xml:space="preserve">
            <source>The scenarios covered include <bpt id="2">&lt;strong&gt;</bpt>inserting<ept id="2">&lt;/strong&gt;</ept>, <bpt id="4">&lt;strong&gt;</bpt>peeking<ept id="4">&lt;/strong&gt;</ept>,</source>
            <target state="new">The scenarios covered include <bpt id="2">&lt;strong&gt;</bpt>inserting<ept id="2">&lt;/strong&gt;</ept>, <bpt id="4">&lt;strong&gt;</bpt>peeking<ept id="4">&lt;/strong&gt;</ept>,</target>
          </trans-unit>
          <trans-unit id="111" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>getting<ept id="1">&lt;/strong&gt;</ept>, and <bpt id="3">&lt;strong&gt;</bpt>deleting<ept id="3">&lt;/strong&gt;</ept> queue messages, as well as **creating and</source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>getting<ept id="1">&lt;/strong&gt;</ept>, and <bpt id="3">&lt;strong&gt;</bpt>deleting<ept id="3">&lt;/strong&gt;</ept> queue messages, as well as **creating and</target>
          </trans-unit>
          <trans-unit id="112" xml:space="preserve">
            <source>deleting queues**.</source>
            <target state="new">deleting queues**.</target>
          </trans-unit>
          <trans-unit id="113" xml:space="preserve">
            <source><ph id="1">&lt;token href="../../includes/storage-queue-concepts-include.md"/&gt;</ph></source>
            <target state="new"><ph id="1">&lt;token href="../../includes/storage-queue-concepts-include.md"/&gt;</ph></target>
          </trans-unit>
          <trans-unit id="114" xml:space="preserve">
            <source><ph id="1">&lt;token href="../../includes/storage-create-account-include.md"/&gt;</ph></source>
            <target state="new"><ph id="1">&lt;token href="../../includes/storage-create-account-include.md"/&gt;</ph></target>
          </trans-unit>
          <trans-unit id="115" xml:space="preserve">
            <source>Create a Node.js Application</source>
            <target state="new">Create a Node.js Application</target>
          </trans-unit>
          <trans-unit id="116" xml:space="preserve">
            <source>Create a blank Node.js application.</source>
            <target state="new">Create a blank Node.js application.</target>
          </trans-unit>
          <trans-unit id="117" xml:space="preserve">
            <source>For instructions creating a Node.js application, see [Create and deploy a Node.js application to an Azure Web Site], <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Node.js Cloud Service[node.js cloud service]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> (using Windows PowerShell), or [Web Site with WebMatrix].</source>
            <target state="new">For instructions creating a Node.js application, see [Create and deploy a Node.js application to an Azure Web Site], <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Node.js Cloud Service[node.js cloud service]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> (using Windows PowerShell), or [Web Site with WebMatrix].</target>
          </trans-unit>
          <trans-unit id="118" xml:space="preserve">
            <source>Configure Your Application to Access Storage</source>
            <target state="new">Configure Your Application to Access Storage</target>
          </trans-unit>
          <trans-unit id="119" xml:space="preserve">
            <source>To use Azure storage, you need the Azure Storage SDK for Node.js, which includes a set of convenience libraries that</source>
            <target state="new">To use Azure storage, you need the Azure Storage SDK for Node.js, which includes a set of convenience libraries that</target>
          </trans-unit>
          <trans-unit id="120" xml:space="preserve">
            <source>communicate with the storage REST services.</source>
            <target state="new">communicate with the storage REST services.</target>
          </trans-unit>
          <trans-unit id="121" xml:space="preserve">
            <source>Use Node Package Manager (NPM) to obtain the package</source>
            <target state="new">Use Node Package Manager (NPM) to obtain the package</target>
          </trans-unit>
          <trans-unit id="122" xml:space="preserve">
            <source>Use a command-line interface such as <bpt id="2">&lt;strong&gt;</bpt>PowerShell<ept id="2">&lt;/strong&gt;</ept> (Windows,) <bpt id="4">&lt;strong&gt;</bpt>Terminal<ept id="4">&lt;/strong&gt;</ept> (Mac,) or <bpt id="6">&lt;strong&gt;</bpt>Bash<ept id="6">&lt;/strong&gt;</ept> (Unix), navigate to the folder where you created your sample application.</source>
            <target state="new">Use a command-line interface such as <bpt id="2">&lt;strong&gt;</bpt>PowerShell<ept id="2">&lt;/strong&gt;</ept> (Windows,) <bpt id="4">&lt;strong&gt;</bpt>Terminal<ept id="4">&lt;/strong&gt;</ept> (Mac,) or <bpt id="6">&lt;strong&gt;</bpt>Bash<ept id="6">&lt;/strong&gt;</ept> (Unix), navigate to the folder where you created your sample application.</target>
          </trans-unit>
          <trans-unit id="123" xml:space="preserve">
            <source>Type <bpt id="2">&lt;strong&gt;</bpt>npm install azure-storage<ept id="2">&lt;/strong&gt;</ept> in the command window.</source>
            <target state="new">Type <bpt id="2">&lt;strong&gt;</bpt>npm install azure-storage<ept id="2">&lt;/strong&gt;</ept> in the command window.</target>
          </trans-unit>
          <trans-unit id="124" xml:space="preserve">
            <source>Output from the command is similar to the following example.</source>
            <target state="new">Output from the command is similar to the following example.</target>
          </trans-unit>
          <trans-unit id="125" xml:space="preserve">
            <source>You can manually run the <bpt id="2">&lt;strong&gt;</bpt>ls<ept id="2">&lt;/strong&gt;</ept> command to verify that a</source>
            <target state="new">You can manually run the <bpt id="2">&lt;strong&gt;</bpt>ls<ept id="2">&lt;/strong&gt;</ept> command to verify that a</target>
          </trans-unit>
          <trans-unit id="126" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>node\_modules<ept id="1">&lt;/strong&gt;</ept> folder was created.</source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>node\_modules<ept id="1">&lt;/strong&gt;</ept> folder was created.</target>
          </trans-unit>
          <trans-unit id="127" xml:space="preserve">
            <source>Inside that folder you will</source>
            <target state="new">Inside that folder you will</target>
          </trans-unit>
          <trans-unit id="128" xml:space="preserve">
            <source>find the <bpt id="2">&lt;strong&gt;</bpt>azure-storage<ept id="2">&lt;/strong&gt;</ept> package, which contains the libraries you need to</source>
            <target state="new">find the <bpt id="2">&lt;strong&gt;</bpt>azure-storage<ept id="2">&lt;/strong&gt;</ept> package, which contains the libraries you need to</target>
          </trans-unit>
          <trans-unit id="129" xml:space="preserve">
            <source>access storage.</source>
            <target state="new">access storage.</target>
          </trans-unit>
          <trans-unit id="130" xml:space="preserve">
            <source>Import the package</source>
            <target state="new">Import the package</target>
          </trans-unit>
          <trans-unit id="131" xml:space="preserve">
            <source>Using Notepad or another text editor, add the following to the top the</source>
            <target state="new">Using Notepad or another text editor, add the following to the top the</target>
          </trans-unit>
          <trans-unit id="132" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>server.js<ept id="1">&lt;/strong&gt;</ept> file of the application where you intend to use storage:</source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>server.js<ept id="1">&lt;/strong&gt;</ept> file of the application where you intend to use storage:</target>
          </trans-unit>
          <trans-unit id="133" xml:space="preserve">
            <source>Setup an Azure Storage Connection</source>
            <target state="new">Setup an Azure Storage Connection</target>
          </trans-unit>
          <trans-unit id="134" xml:space="preserve">
            <source>The azure module will read the environment variables AZURE\_STORAGE\_ACCOUNT and AZURE\_STORAGE\_ACCESS\_KEY, or AZURE\_STORAGE\_CONNECTION\_STRING for information required to connect to your Azure storage account.</source>
            <target state="new">The azure module will read the environment variables AZURE\_STORAGE\_ACCOUNT and AZURE\_STORAGE\_ACCESS\_KEY, or AZURE\_STORAGE\_CONNECTION\_STRING for information required to connect to your Azure storage account.</target>
          </trans-unit>
          <trans-unit id="135" xml:space="preserve">
            <source>If these environment variables are not set, you must specify the account information when calling <bpt id="2">&lt;strong&gt;</bpt>createQueueService<ept id="2">&lt;/strong&gt;</ept>.</source>
            <target state="new">If these environment variables are not set, you must specify the account information when calling <bpt id="2">&lt;strong&gt;</bpt>createQueueService<ept id="2">&lt;/strong&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="136" xml:space="preserve">
            <source>For an example of setting the environment variables in the management portal for an Azure Website, see [Node.js Web Application with Storage]</source>
            <target state="new">For an example of setting the environment variables in the management portal for an Azure Website, see [Node.js Web Application with Storage]</target>
          </trans-unit>
          <trans-unit id="137" xml:space="preserve">
            <source>How To: Create a Queue</source>
            <target state="new">How To: Create a Queue</target>
          </trans-unit>
          <trans-unit id="138" xml:space="preserve">
            <source>The following code creates a <bpt id="2">&lt;strong&gt;</bpt>QueueService<ept id="2">&lt;/strong&gt;</ept> object, which enables you</source>
            <target state="new">The following code creates a <bpt id="2">&lt;strong&gt;</bpt>QueueService<ept id="2">&lt;/strong&gt;</ept> object, which enables you</target>
          </trans-unit>
          <trans-unit id="139" xml:space="preserve">
            <source>to work with queues.</source>
            <target state="new">to work with queues.</target>
          </trans-unit>
          <trans-unit id="140" xml:space="preserve">
            <source>Use the <bpt id="2">&lt;strong&gt;</bpt>createQueueIfNotExists<ept id="2">&lt;/strong&gt;</ept> method, which returns the specified</source>
            <target state="new">Use the <bpt id="2">&lt;strong&gt;</bpt>createQueueIfNotExists<ept id="2">&lt;/strong&gt;</ept> method, which returns the specified</target>
          </trans-unit>
          <trans-unit id="141" xml:space="preserve">
            <source>queue if it already exists or creates a new queue with the specified</source>
            <target state="new">queue if it already exists or creates a new queue with the specified</target>
          </trans-unit>
          <trans-unit id="142" xml:space="preserve">
            <source>name if it does not already exist.</source>
            <target state="new">name if it does not already exist.</target>
          </trans-unit>
          <trans-unit id="143" xml:space="preserve">
            <source>If the queue is created, <bpt id="2">&lt;code&gt;</bpt>result<ept id="2">&lt;/code&gt;</ept> is true.</source>
            <target state="new">If the queue is created, <bpt id="2">&lt;code&gt;</bpt>result<ept id="2">&lt;/code&gt;</ept> is true.</target>
          </trans-unit>
          <trans-unit id="144" xml:space="preserve">
            <source>If the queue exists, <bpt id="2">&lt;code&gt;</bpt>result<ept id="2">&lt;/code&gt;</ept> is false.</source>
            <target state="new">If the queue exists, <bpt id="2">&lt;code&gt;</bpt>result<ept id="2">&lt;/code&gt;</ept> is false.</target>
          </trans-unit>
          <trans-unit id="145" xml:space="preserve">
            <source>Filters</source>
            <target state="new">Filters</target>
          </trans-unit>
          <trans-unit id="146" xml:space="preserve">
            <source>Optional filtering operations can be applied to operations performed using <bpt id="2">&lt;strong&gt;</bpt>QueueService<ept id="2">&lt;/strong&gt;</ept>.</source>
            <target state="new">Optional filtering operations can be applied to operations performed using <bpt id="2">&lt;strong&gt;</bpt>QueueService<ept id="2">&lt;/strong&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="147" xml:space="preserve">
            <source>Filtering operations can include logging, automatically retrying, etc.</source>
            <target state="new">Filtering operations can include logging, automatically retrying, etc.</target>
          </trans-unit>
          <trans-unit id="148" xml:space="preserve">
            <source>Filters are objects that implement a method with the signature:</source>
            <target state="new">Filters are objects that implement a method with the signature:</target>
          </trans-unit>
          <trans-unit id="149" xml:space="preserve">
            <source>After doing its preprocessing on the request options, the method needs to call "next" passing a callback with the following signature:</source>
            <target state="new">After doing its preprocessing on the request options, the method needs to call "next" passing a callback with the following signature:</target>
          </trans-unit>
          <trans-unit id="150" xml:space="preserve">
            <source>In this callback, and after processing the returnObject (the response from the request to the server), the callback needs to either invoke next if it exists to continue processing other filters or simply invoke finalCallback otherwise to end up the service invocation.</source>
            <target state="new">In this callback, and after processing the returnObject (the response from the request to the server), the callback needs to either invoke next if it exists to continue processing other filters or simply invoke finalCallback otherwise to end up the service invocation.</target>
          </trans-unit>
          <trans-unit id="151" xml:space="preserve">
            <source>Two filters that implement retry logic are included with the Azure SDK for Node.js, <bpt id="2">&lt;strong&gt;</bpt>ExponentialRetryPolicyFilter<ept id="2">&lt;/strong&gt;</ept> and <bpt id="4">&lt;strong&gt;</bpt>LinearRetryPolicyFilter<ept id="4">&lt;/strong&gt;</ept>.</source>
            <target state="new">Two filters that implement retry logic are included with the Azure SDK for Node.js, <bpt id="2">&lt;strong&gt;</bpt>ExponentialRetryPolicyFilter<ept id="2">&lt;/strong&gt;</ept> and <bpt id="4">&lt;strong&gt;</bpt>LinearRetryPolicyFilter<ept id="4">&lt;/strong&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="152" xml:space="preserve">
            <source>The following creates a <bpt id="2">&lt;strong&gt;</bpt>QueueService<ept id="2">&lt;/strong&gt;</ept> object that uses the <bpt id="4">&lt;strong&gt;</bpt>ExponentialRetryPolicyFilter<ept id="4">&lt;/strong&gt;</ept>:</source>
            <target state="new">The following creates a <bpt id="2">&lt;strong&gt;</bpt>QueueService<ept id="2">&lt;/strong&gt;</ept> object that uses the <bpt id="4">&lt;strong&gt;</bpt>ExponentialRetryPolicyFilter<ept id="4">&lt;/strong&gt;</ept>:</target>
          </trans-unit>
          <trans-unit id="153" xml:space="preserve">
            <source>How To: Insert a Message into a Queue</source>
            <target state="new">How To: Insert a Message into a Queue</target>
          </trans-unit>
          <trans-unit id="154" xml:space="preserve">
            <source>To insert a message into a queue, use the <bpt id="2">&lt;strong&gt;</bpt>createMessage<ept id="2">&lt;/strong&gt;</ept> method to</source>
            <target state="new">To insert a message into a queue, use the <bpt id="2">&lt;strong&gt;</bpt>createMessage<ept id="2">&lt;/strong&gt;</ept> method to</target>
          </trans-unit>
          <trans-unit id="155" xml:space="preserve">
            <source>create a new message and add it to the queue.</source>
            <target state="new">create a new message and add it to the queue.</target>
          </trans-unit>
          <trans-unit id="156" xml:space="preserve">
            <source>How To: Peek at the Next Message</source>
            <target state="new">How To: Peek at the Next Message</target>
          </trans-unit>
          <trans-unit id="157" xml:space="preserve">
            <source>You can peek at the message in the front of a queue without removing it</source>
            <target state="new">You can peek at the message in the front of a queue without removing it</target>
          </trans-unit>
          <trans-unit id="158" xml:space="preserve">
            <source>from the queue by calling the <bpt id="2">&lt;strong&gt;</bpt>peekMessages<ept id="2">&lt;/strong&gt;</ept> method.</source>
            <target state="new">from the queue by calling the <bpt id="2">&lt;strong&gt;</bpt>peekMessages<ept id="2">&lt;/strong&gt;</ept> method.</target>
          </trans-unit>
          <trans-unit id="159" xml:space="preserve">
            <source>By default,</source>
            <target state="new">By default,</target>
          </trans-unit>
          <trans-unit id="160" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>peekMessages<ept id="1">&lt;/strong&gt;</ept> peeks at a single message.</source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>peekMessages<ept id="1">&lt;/strong&gt;</ept> peeks at a single message.</target>
          </trans-unit>
          <trans-unit id="161" xml:space="preserve">
            <source>The <bpt id="2">&lt;code&gt;</bpt>result<ept id="2">&lt;/code&gt;</ept> contains the message.</source>
            <target state="new">The <bpt id="2">&lt;code&gt;</bpt>result<ept id="2">&lt;/code&gt;</ept> contains the message.</target>
          </trans-unit>
          <trans-unit id="162" xml:space="preserve">
            <source>Using <bpt id="2">&lt;strong&gt;</bpt>peekMessages<ept id="2">&lt;/strong&gt;</ept> when there are no messages in the queue will not return an error, however no messages will be returned.</source>
            <target state="new">Using <bpt id="2">&lt;strong&gt;</bpt>peekMessages<ept id="2">&lt;/strong&gt;</ept> when there are no messages in the queue will not return an error, however no messages will be returned.</target>
          </trans-unit>
          <trans-unit id="163" xml:space="preserve">
            <source>How To: Dequeue the Next Message</source>
            <target state="new">How To: Dequeue the Next Message</target>
          </trans-unit>
          <trans-unit id="164" xml:space="preserve">
            <source>Processing a message is a two-stage process:</source>
            <target state="new">Processing a message is a two-stage process:</target>
          </trans-unit>
          <trans-unit id="165" xml:space="preserve">
            <source>Dequeue the message.</source>
            <target state="new">Dequeue the message.</target>
          </trans-unit>
          <trans-unit id="166" xml:space="preserve">
            <source>Delete the message.</source>
            <target state="new">Delete the message.</target>
          </trans-unit>
          <trans-unit id="167" xml:space="preserve">
            <source>To dequeue a message, use <bpt id="2">&lt;strong&gt;</bpt>getMessages<ept id="2">&lt;/strong&gt;</ept>.</source>
            <target state="new">To dequeue a message, use <bpt id="2">&lt;strong&gt;</bpt>getMessages<ept id="2">&lt;/strong&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="168" xml:space="preserve">
            <source>This makes the messages invisible in the queue, so no other clients can process them.</source>
            <target state="new">This makes the messages invisible in the queue, so no other clients can process them.</target>
          </trans-unit>
          <trans-unit id="169" xml:space="preserve">
            <source>Once your application has processed a message, call <bpt id="2">&lt;strong&gt;</bpt>deleteMessage<ept id="2">&lt;/strong&gt;</ept> to delete it from the queue.</source>
            <target state="new">Once your application has processed a message, call <bpt id="2">&lt;strong&gt;</bpt>deleteMessage<ept id="2">&lt;/strong&gt;</ept> to delete it from the queue.</target>
          </trans-unit>
          <trans-unit id="170" xml:space="preserve">
            <source>The following example gets a message, then deletes it:</source>
            <target state="new">The following example gets a message, then deletes it:</target>
          </trans-unit>
          <trans-unit id="171" xml:space="preserve">
            <source>By default, a message is only hidden for 30 seconds, after which it is visible to other clients.</source>
            <target state="new">By default, a message is only hidden for 30 seconds, after which it is visible to other clients.</target>
          </trans-unit>
          <trans-unit id="172" xml:space="preserve">
            <source>You can specify a different value by using <bpt id="2">&lt;code&gt;</bpt>options.visibilityTimeout<ept id="2">&lt;/code&gt;</ept> with <bpt id="4">&lt;strong&gt;</bpt>getMessages<ept id="4">&lt;/strong&gt;</ept>.</source>
            <target state="new">You can specify a different value by using <bpt id="2">&lt;code&gt;</bpt>options.visibilityTimeout<ept id="2">&lt;/code&gt;</ept> with <bpt id="4">&lt;strong&gt;</bpt>getMessages<ept id="4">&lt;/strong&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="173" xml:space="preserve">
            <source>Using <bpt id="2">&lt;strong&gt;</bpt>getMessages<ept id="2">&lt;/strong&gt;</ept> when there are no messages in the queue will not return an error, however no messages will be returned.</source>
            <target state="new">Using <bpt id="2">&lt;strong&gt;</bpt>getMessages<ept id="2">&lt;/strong&gt;</ept> when there are no messages in the queue will not return an error, however no messages will be returned.</target>
          </trans-unit>
          <trans-unit id="174" xml:space="preserve">
            <source>How To: Change the Contents of a Queued Message</source>
            <target state="new">How To: Change the Contents of a Queued Message</target>
          </trans-unit>
          <trans-unit id="175" xml:space="preserve">
            <source>You can change the contents of a message in-place in the queue using <bpt id="2">&lt;strong&gt;</bpt>updateMessage<ept id="2">&lt;/strong&gt;</ept>.</source>
            <target state="new">You can change the contents of a message in-place in the queue using <bpt id="2">&lt;strong&gt;</bpt>updateMessage<ept id="2">&lt;/strong&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="176" xml:space="preserve">
            <source>The following example updates the text of a message:</source>
            <target state="new">The following example updates the text of a message:</target>
          </trans-unit>
          <trans-unit id="177" xml:space="preserve">
            <source>How To: Additional Options for Dequeuing Messages</source>
            <target state="new">How To: Additional Options for Dequeuing Messages</target>
          </trans-unit>
          <trans-unit id="178" xml:space="preserve">
            <source>There are two ways you can customize message retrieval from a queue:</source>
            <target state="new">There are two ways you can customize message retrieval from a queue:</target>
          </trans-unit>
          <trans-unit id="179" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>options.numOfMessages<ept id="1">&lt;/code&gt;</ept> - Retrieve a batch of messages (up to 32.)</source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>options.numOfMessages<ept id="1">&lt;/code&gt;</ept> - Retrieve a batch of messages (up to 32.)</target>
          </trans-unit>
          <trans-unit id="180" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>options.visibilityTimeout<ept id="1">&lt;/code&gt;</ept> - Set a longer or shorter invisibility timeout.</source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>options.visibilityTimeout<ept id="1">&lt;/code&gt;</ept> - Set a longer or shorter invisibility timeout.</target>
          </trans-unit>
          <trans-unit id="181" xml:space="preserve">
            <source>The following example uses the <bpt id="2">&lt;strong&gt;</bpt>getMessages<ept id="2">&lt;/strong&gt;</ept> method to get 15 messages in one call.</source>
            <target state="new">The following example uses the <bpt id="2">&lt;strong&gt;</bpt>getMessages<ept id="2">&lt;/strong&gt;</ept> method to get 15 messages in one call.</target>
          </trans-unit>
          <trans-unit id="182" xml:space="preserve">
            <source>Then it processes</source>
            <target state="new">Then it processes</target>
          </trans-unit>
          <trans-unit id="183" xml:space="preserve">
            <source>each message using a for loop.</source>
            <target state="new">each message using a for loop.</target>
          </trans-unit>
          <trans-unit id="184" xml:space="preserve">
            <source>It also sets the invisibility timeout to five minutes for all messages returned by this method.</source>
            <target state="new">It also sets the invisibility timeout to five minutes for all messages returned by this method.</target>
          </trans-unit>
          <trans-unit id="185" xml:space="preserve">
            <source>How To: Get the Queue Length</source>
            <target state="new">How To: Get the Queue Length</target>
          </trans-unit>
          <trans-unit id="186" xml:space="preserve">
            <source>The <bpt id="2">&lt;strong&gt;</bpt>getQueueMetadata<ept id="2">&lt;/strong&gt;</ept> returns metadata about the queue, including the approximate number of messages waiting in the queue.</source>
            <target state="new">The <bpt id="2">&lt;strong&gt;</bpt>getQueueMetadata<ept id="2">&lt;/strong&gt;</ept> returns metadata about the queue, including the approximate number of messages waiting in the queue.</target>
          </trans-unit>
          <trans-unit id="187" xml:space="preserve">
            <source>How To: List Queues</source>
            <target state="new">How To: List Queues</target>
          </trans-unit>
          <trans-unit id="188" xml:space="preserve">
            <source>To retrieve a list of queues, use <bpt id="2">&lt;strong&gt;</bpt>listQueuesSegmented<ept id="2">&lt;/strong&gt;</ept>.</source>
            <target state="new">To retrieve a list of queues, use <bpt id="2">&lt;strong&gt;</bpt>listQueuesSegmented<ept id="2">&lt;/strong&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="189" xml:space="preserve">
            <source>To retrieve a list filtered by a specific prefix, use <bpt id="2">&lt;strong&gt;</bpt>listQueuesSegmentedWithPrefix<ept id="2">&lt;/strong&gt;</ept>.</source>
            <target state="new">To retrieve a list filtered by a specific prefix, use <bpt id="2">&lt;strong&gt;</bpt>listQueuesSegmentedWithPrefix<ept id="2">&lt;/strong&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="190" xml:space="preserve">
            <source>If all queues cannot be returned, <bpt id="2">&lt;code&gt;</bpt>result.continuationToken<ept id="2">&lt;/code&gt;</ept> can be used as the first parameter of <bpt id="4">&lt;strong&gt;</bpt>listQueuesSegmented<ept id="4">&lt;/strong&gt;</ept> or the second parameter of <bpt id="6">&lt;strong&gt;</bpt>listQueuesSegmentedWithPrefix<ept id="6">&lt;/strong&gt;</ept> to retrieve more results.</source>
            <target state="new">If all queues cannot be returned, <bpt id="2">&lt;code&gt;</bpt>result.continuationToken<ept id="2">&lt;/code&gt;</ept> can be used as the first parameter of <bpt id="4">&lt;strong&gt;</bpt>listQueuesSegmented<ept id="4">&lt;/strong&gt;</ept> or the second parameter of <bpt id="6">&lt;strong&gt;</bpt>listQueuesSegmentedWithPrefix<ept id="6">&lt;/strong&gt;</ept> to retrieve more results.</target>
          </trans-unit>
          <trans-unit id="191" xml:space="preserve">
            <source>How To: Delete a Queue</source>
            <target state="new">How To: Delete a Queue</target>
          </trans-unit>
          <trans-unit id="192" xml:space="preserve">
            <source>To delete a queue and all the messages contained in it, call the</source>
            <target state="new">To delete a queue and all the messages contained in it, call the</target>
          </trans-unit>
          <trans-unit id="193" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>deleteQueue<ept id="1">&lt;/strong&gt;</ept> method on the queue object.</source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>deleteQueue<ept id="1">&lt;/strong&gt;</ept> method on the queue object.</target>
          </trans-unit>
          <trans-unit id="194" xml:space="preserve">
            <source>To clear all messages from a queue without deleting it, use <bpt id="2">&lt;strong&gt;</bpt>clearMessages<ept id="2">&lt;/strong&gt;</ept>.</source>
            <target state="new">To clear all messages from a queue without deleting it, use <bpt id="2">&lt;strong&gt;</bpt>clearMessages<ept id="2">&lt;/strong&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="195" xml:space="preserve">
            <source>How to: Work with Shared Access Signatures</source>
            <target state="new">How to: Work with Shared Access Signatures</target>
          </trans-unit>
          <trans-unit id="196" xml:space="preserve">
            <source>Shared Access Signatures (SAS) are a secure way to provide granular access to queues without providing your storage account name or keys.</source>
            <target state="new">Shared Access Signatures (SAS) are a secure way to provide granular access to queues without providing your storage account name or keys.</target>
          </trans-unit>
          <trans-unit id="197" xml:space="preserve">
            <source>SAS are often used to provide limited access to your queues, such as allowing a mobile app to submit messages.</source>
            <target state="new">SAS are often used to provide limited access to your queues, such as allowing a mobile app to submit messages.</target>
          </trans-unit>
          <trans-unit id="198" xml:space="preserve">
            <source>A trusted application such as a cloud-based service generates a SAS using the <bpt id="2">&lt;strong&gt;</bpt>generateSharedAccessSignature<ept id="2">&lt;/strong&gt;</ept> of the <bpt id="4">&lt;strong&gt;</bpt>QueueService<ept id="4">&lt;/strong&gt;</ept>, and provides it to an untrusted or semi-trusted application.</source>
            <target state="new">A trusted application such as a cloud-based service generates a SAS using the <bpt id="2">&lt;strong&gt;</bpt>generateSharedAccessSignature<ept id="2">&lt;/strong&gt;</ept> of the <bpt id="4">&lt;strong&gt;</bpt>QueueService<ept id="4">&lt;/strong&gt;</ept>, and provides it to an untrusted or semi-trusted application.</target>
          </trans-unit>
          <trans-unit id="199" xml:space="preserve">
            <source>For example, a mobile app.</source>
            <target state="new">For example, a mobile app.</target>
          </trans-unit>
          <trans-unit id="200" xml:space="preserve">
            <source>The SAS is generated using a policy, which describes the start and end dates during which the SAS is valid, as well as the access level granted to the SAS holder.</source>
            <target state="new">The SAS is generated using a policy, which describes the start and end dates during which the SAS is valid, as well as the access level granted to the SAS holder.</target>
          </trans-unit>
          <trans-unit id="201" xml:space="preserve">
            <source>The following example generates a new shared access policy that will allow the SAS holder to add messages to the queue, and expires 100 minutes after the time it is created.</source>
            <target state="new">The following example generates a new shared access policy that will allow the SAS holder to add messages to the queue, and expires 100 minutes after the time it is created.</target>
          </trans-unit>
          <trans-unit id="202" xml:space="preserve">
            <source>Note that the host information must be provided also, as it is required when the SAS holder attempts to access the queue.</source>
            <target state="new">Note that the host information must be provided also, as it is required when the SAS holder attempts to access the queue.</target>
          </trans-unit>
          <trans-unit id="203" xml:space="preserve">
            <source>The client application then uses the SAS with <bpt id="2">&lt;strong&gt;</bpt>QueueServiceWithSAS<ept id="2">&lt;/strong&gt;</ept> to perform operations against the queue.</source>
            <target state="new">The client application then uses the SAS with <bpt id="2">&lt;strong&gt;</bpt>QueueServiceWithSAS<ept id="2">&lt;/strong&gt;</ept> to perform operations against the queue.</target>
          </trans-unit>
          <trans-unit id="204" xml:space="preserve">
            <source>The following example connects to the queue and creates a message.</source>
            <target state="new">The following example connects to the queue and creates a message.</target>
          </trans-unit>
          <trans-unit id="205" xml:space="preserve">
            <source>Since the SAS was generated with add access, if an attempt were made to read, update or delete messages, an error would be returned.</source>
            <target state="new">Since the SAS was generated with add access, if an attempt were made to read, update or delete messages, an error would be returned.</target>
          </trans-unit>
          <trans-unit id="206" xml:space="preserve">
            <source>Access control lists</source>
            <target state="new">Access control lists</target>
          </trans-unit>
          <trans-unit id="207" xml:space="preserve">
            <source>You can also use an Access Control List (ACL) to set the access policy for a SAS.</source>
            <target state="new">You can also use an Access Control List (ACL) to set the access policy for a SAS.</target>
          </trans-unit>
          <trans-unit id="208" xml:space="preserve">
            <source>This is useful if you wish to allow multiple clients to access the queue, but provide different access policies for each client.</source>
            <target state="new">This is useful if you wish to allow multiple clients to access the queue, but provide different access policies for each client.</target>
          </trans-unit>
          <trans-unit id="209" xml:space="preserve">
            <source>An ACL is implemented using an array of access policies, with an ID associated with each policy.</source>
            <target state="new">An ACL is implemented using an array of access policies, with an ID associated with each policy.</target>
          </trans-unit>
          <trans-unit id="210" xml:space="preserve">
            <source>The  following example defines two policies; one for 'user1' and one for 'user2':</source>
            <target state="new">The  following example defines two policies; one for 'user1' and one for 'user2':</target>
          </trans-unit>
          <trans-unit id="211" xml:space="preserve">
            <source>The following example gets the current ACL for <bpt id="2">&lt;strong&gt;</bpt>myqueue<ept id="2">&lt;/strong&gt;</ept>, then adds the new policies using <bpt id="4">&lt;strong&gt;</bpt>setQueueAcl<ept id="4">&lt;/strong&gt;</ept>.</source>
            <target state="new">The following example gets the current ACL for <bpt id="2">&lt;strong&gt;</bpt>myqueue<ept id="2">&lt;/strong&gt;</ept>, then adds the new policies using <bpt id="4">&lt;strong&gt;</bpt>setQueueAcl<ept id="4">&lt;/strong&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="212" xml:space="preserve">
            <source>This approach allows:</source>
            <target state="new">This approach allows:</target>
          </trans-unit>
          <trans-unit id="213" xml:space="preserve">
            <source>Once the ACL has been set, you can then create a SAS based on the ID for a policy.</source>
            <target state="new">Once the ACL has been set, you can then create a SAS based on the ID for a policy.</target>
          </trans-unit>
          <trans-unit id="214" xml:space="preserve">
            <source>The following example creates a new SAS for 'user2':</source>
            <target state="new">The following example creates a new SAS for 'user2':</target>
          </trans-unit>
          <trans-unit id="215" xml:space="preserve">
            <source>Next Steps</source>
            <target state="new">Next Steps</target>
          </trans-unit>
          <trans-unit id="216" xml:space="preserve">
            <source>Now that you've learned the basics of queue storage, follow these links</source>
            <target state="new">Now that you've learned the basics of queue storage, follow these links</target>
          </trans-unit>
          <trans-unit id="217" xml:space="preserve">
            <source>to learn about more complex storage tasks.</source>
            <target state="new">to learn about more complex storage tasks.</target>
          </trans-unit>
          <trans-unit id="218" xml:space="preserve">
            <source>See the MSDN Reference: <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Storing and Accessing Data in Azure[]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">See the MSDN Reference: <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Storing and Accessing Data in Azure[]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="219" xml:space="preserve">
            <source>Visit the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Azure Storage Team Blog[]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">Visit the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Azure Storage Team Blog[]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="220" xml:space="preserve">
            <source>Visit the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Azure Storage SDK for Node[]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> repository on GitHub.</source>
            <target state="new">Visit the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Azure Storage SDK for Node[]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> repository on GitHub.</target>
          </trans-unit>
        </group>
      </group>
    </body>
  </file>
</xliff>