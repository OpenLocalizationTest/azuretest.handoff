<?xml version="1.0" encoding="utf-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" source-language="en-us" target-language="ja-jp" original="2/21/2016 1:26:57 PM" tool-id="MarkdownTransformer" product-name="N/A" product-version="N/A" build-num="1">
    <header>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">df1425f94632ca8ad899d62cc7d3dbecd5521579</xliffext:olfilehash>
      <tool tool-id="MarkdownTransformer" tool-name="MarkdownToXliff" tool-version="1.0" tool-company="Microsoft" />
    </header>
    <body>
      <group extype="content">
        <group id="101">
          <trans-unit id="101" xml:space="preserve">
            <source>Windows Universal Apps Reach SDK Integration</source>
            <target state="new">Windows Universal Apps Reach SDK Integration</target>
          </trans-unit>
          <trans-unit id="102" xml:space="preserve">
            <source>How to Integrate Azure Mobile Engagement Reach with Windows Universal Apps</source>
            <target state="new">How to Integrate Azure Mobile Engagement Reach with Windows Universal Apps</target>
          </trans-unit>
          <trans-unit id="103" xml:space="preserve">
            <source>Windows Universal Apps Reach SDK Integration</source>
            <target state="new">Windows Universal Apps Reach SDK Integration</target>
          </trans-unit>
          <trans-unit id="104" xml:space="preserve">
            <source>You must follow the integration procedure described in the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Windows Universal Engagement SDK Integration<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> before following this guide.</source>
            <target state="new">You must follow the integration procedure described in the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Windows Universal Engagement SDK Integration<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> before following this guide.</target>
          </trans-unit>
          <trans-unit id="105" xml:space="preserve">
            <source>Embed the Engagement Reach SDK into your Windows Universal project</source>
            <target state="new">Embed the Engagement Reach SDK into your Windows Universal project</target>
          </trans-unit>
          <trans-unit id="106" xml:space="preserve">
            <source>You do not have anything to add.</source>
            <target state="new">You do not have anything to add.</target>
          </trans-unit>
          <trans-unit id="107" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>EngagementReach<ept id="1">&lt;/code&gt;</ept> references and resources are already in your project.</source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>EngagementReach<ept id="1">&lt;/code&gt;</ept> references and resources are already in your project.</target>
          </trans-unit>
          <trans-unit id="108" xml:space="preserve">
            <source>You can customize images located in the <bpt id="2">&lt;code&gt;</bpt>Resources<ept id="2">&lt;/code&gt;</ept> folder of your project, especially the brand icon (that default to the Engagement icon).</source>
            <target state="new">You can customize images located in the <bpt id="2">&lt;code&gt;</bpt>Resources<ept id="2">&lt;/code&gt;</ept> folder of your project, especially the brand icon (that default to the Engagement icon).</target>
          </trans-unit>
          <trans-unit id="109" xml:space="preserve">
            <source>On Universal Apps you can also move the <bpt id="2">&lt;code&gt;</bpt>Resources<ept id="2">&lt;/code&gt;</ept> folder on your shared project to share its content between apps, but you will have to keep the <bpt id="4">&lt;code&gt;</bpt>Resources\EngagementConfiguration.xml<ept id="4">&lt;/code&gt;</ept> file on its default location as it is platform dependent.</source>
            <target state="new">On Universal Apps you can also move the <bpt id="2">&lt;code&gt;</bpt>Resources<ept id="2">&lt;/code&gt;</ept> folder on your shared project to share its content between apps, but you will have to keep the <bpt id="4">&lt;code&gt;</bpt>Resources\EngagementConfiguration.xml<ept id="4">&lt;/code&gt;</ept> file on its default location as it is platform dependent.</target>
          </trans-unit>
          <trans-unit id="110" xml:space="preserve">
            <source>Enable the Windows Notification Service</source>
            <target state="new">Enable the Windows Notification Service</target>
          </trans-unit>
          <trans-unit id="111" xml:space="preserve">
            <source>In order to use the <bpt id="2">&lt;strong&gt;</bpt>Windows Notification Service<ept id="2">&lt;/strong&gt;</ept> (referred as WNS) in your <bpt id="4">&lt;code&gt;</bpt>Package.appxmanifest<ept id="4">&lt;/code&gt;</ept> file on <bpt id="6">&lt;code&gt;</bpt>Application UI<ept id="6">&lt;/code&gt;</ept> click on <bpt id="8">&lt;code&gt;</bpt>All Image Assets<ept id="8">&lt;/code&gt;</ept> in the left bot box.</source>
            <target state="new">In order to use the <bpt id="2">&lt;strong&gt;</bpt>Windows Notification Service<ept id="2">&lt;/strong&gt;</ept> (referred as WNS) in your <bpt id="4">&lt;code&gt;</bpt>Package.appxmanifest<ept id="4">&lt;/code&gt;</ept> file on <bpt id="6">&lt;code&gt;</bpt>Application UI<ept id="6">&lt;/code&gt;</ept> click on <bpt id="8">&lt;code&gt;</bpt>All Image Assets<ept id="8">&lt;/code&gt;</ept> in the left bot box.</target>
          </trans-unit>
          <trans-unit id="112" xml:space="preserve">
            <source>At the right of the box in <bpt id="2">&lt;code&gt;</bpt>Notifications<ept id="2">&lt;/code&gt;</ept>, change <bpt id="4">&lt;code&gt;</bpt>toast capable<ept id="4">&lt;/code&gt;</ept> from <bpt id="6">&lt;code&gt;</bpt>(not set)<ept id="6">&lt;/code&gt;</ept> to <bpt id="8">&lt;code&gt;</bpt>(Yes)<ept id="8">&lt;/code&gt;</ept>.</source>
            <target state="new">At the right of the box in <bpt id="2">&lt;code&gt;</bpt>Notifications<ept id="2">&lt;/code&gt;</ept>, change <bpt id="4">&lt;code&gt;</bpt>toast capable<ept id="4">&lt;/code&gt;</ept> from <bpt id="6">&lt;code&gt;</bpt>(not set)<ept id="6">&lt;/code&gt;</ept> to <bpt id="8">&lt;code&gt;</bpt>(Yes)<ept id="8">&lt;/code&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="113" xml:space="preserve">
            <source>Moreover, you need to synchronize your app to your Microsoft account and to the engagement platform.</source>
            <target state="new">Moreover, you need to synchronize your app to your Microsoft account and to the engagement platform.</target>
          </trans-unit>
          <trans-unit id="114" xml:space="preserve">
            <source>For this you need to create an account or log on <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>windows dev center<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">For this you need to create an account or log on <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>windows dev center<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="115" xml:space="preserve">
            <source>After that create a new application and find the SID and secret key.</source>
            <target state="new">After that create a new application and find the SID and secret key.</target>
          </trans-unit>
          <trans-unit id="116" xml:space="preserve">
            <source>On the engagement frontend, go on your app setting in <bpt id="2">&lt;code&gt;</bpt>native push<ept id="2">&lt;/code&gt;</ept> and paste your credentials.</source>
            <target state="new">On the engagement frontend, go on your app setting in <bpt id="2">&lt;code&gt;</bpt>native push<ept id="2">&lt;/code&gt;</ept> and paste your credentials.</target>
          </trans-unit>
          <trans-unit id="117" xml:space="preserve">
            <source>After that, right click on your project, select <bpt id="2">&lt;code&gt;</bpt>store<ept id="2">&lt;/code&gt;</ept> and <bpt id="4">&lt;code&gt;</bpt>Associate App with the Store...<ept id="4">&lt;/code&gt;</ept>.</source>
            <target state="new">After that, right click on your project, select <bpt id="2">&lt;code&gt;</bpt>store<ept id="2">&lt;/code&gt;</ept> and <bpt id="4">&lt;code&gt;</bpt>Associate App with the Store...<ept id="4">&lt;/code&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="118" xml:space="preserve">
            <source>You just need to select the application you have create before to synchronize it.</source>
            <target state="new">You just need to select the application you have create before to synchronize it.</target>
          </trans-unit>
          <trans-unit id="119" xml:space="preserve">
            <source>Initialize the Engagement Reach SDK</source>
            <target state="new">Initialize the Engagement Reach SDK</target>
          </trans-unit>
          <trans-unit id="120" xml:space="preserve">
            <source>Modify the <bpt id="2">&lt;code&gt;</bpt>App.xaml.cs<ept id="2">&lt;/code&gt;</ept>:</source>
            <target state="new">Modify the <bpt id="2">&lt;code&gt;</bpt>App.xaml.cs<ept id="2">&lt;/code&gt;</ept>:</target>
          </trans-unit>
          <trans-unit id="121" xml:space="preserve">
            <source>Add to your <bpt id="2">&lt;code&gt;</bpt>using<ept id="2">&lt;/code&gt;</ept> statements :</source>
            <target state="new">Add to your <bpt id="2">&lt;code&gt;</bpt>using<ept id="2">&lt;/code&gt;</ept> statements :</target>
          </trans-unit>
          <trans-unit id="122" xml:space="preserve">
            <source>Insert <bpt id="2">&lt;code&gt;</bpt>EngagementReach.Instance.Init<ept id="2">&lt;/code&gt;</ept> just after <bpt id="4">&lt;code&gt;</bpt>EngagementAgent.Instance.Init<ept id="4">&lt;/code&gt;</ept> in <bpt id="6">&lt;code&gt;</bpt>OnLaunched<ept id="6">&lt;/code&gt;</ept> :</source>
            <target state="new">Insert <bpt id="2">&lt;code&gt;</bpt>EngagementReach.Instance.Init<ept id="2">&lt;/code&gt;</ept> just after <bpt id="4">&lt;code&gt;</bpt>EngagementAgent.Instance.Init<ept id="4">&lt;/code&gt;</ept> in <bpt id="6">&lt;code&gt;</bpt>OnLaunched<ept id="6">&lt;/code&gt;</ept> :</target>
          </trans-unit>
          <trans-unit id="123" xml:space="preserve">
            <source>If you want to enable engagement reach when your app is activated by a command, another application or a custom scheme, override <bpt id="2">&lt;code&gt;</bpt>OnActivated<ept id="2">&lt;/code&gt;</ept> method:</source>
            <target state="new">If you want to enable engagement reach when your app is activated by a command, another application or a custom scheme, override <bpt id="2">&lt;code&gt;</bpt>OnActivated<ept id="2">&lt;/code&gt;</ept> method:</target>
          </trans-unit>
          <trans-unit id="124" xml:space="preserve">
            <source>The <bpt id="2">&lt;code&gt;</bpt>EngagementReach.Instance.Init<ept id="2">&lt;/code&gt;</ept> runs in a dedicated thread.</source>
            <target state="new">The <bpt id="2">&lt;code&gt;</bpt>EngagementReach.Instance.Init<ept id="2">&lt;/code&gt;</ept> runs in a dedicated thread.</target>
          </trans-unit>
          <trans-unit id="125" xml:space="preserve">
            <source>You do not have to do it yourself.</source>
            <target state="new">You do not have to do it yourself.</target>
          </trans-unit>
          <trans-unit id="126" xml:space="preserve">
            <source>You can specify the name of the WNS push channel of your application in the <bpt id="2">&lt;code&gt;</bpt>Resources\EngagementConfiguration.xml<ept id="2">&lt;/code&gt;</ept> file of your project on <bpt id="4">&lt;code&gt;</bpt>&lt;channelName&gt;&lt;/channelName&gt;<ept id="4">&lt;/code&gt;</ept>.</source>
            <target state="new">You can specify the name of the WNS push channel of your application in the <bpt id="2">&lt;code&gt;</bpt>Resources\EngagementConfiguration.xml<ept id="2">&lt;/code&gt;</ept> file of your project on <bpt id="4">&lt;code&gt;</bpt>&lt;channelName&gt;&lt;/channelName&gt;<ept id="4">&lt;/code&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="127" xml:space="preserve">
            <source>By default, Engagement creates a name based on the appId.</source>
            <target state="new">By default, Engagement creates a name based on the appId.</target>
          </trans-unit>
          <trans-unit id="128" xml:space="preserve">
            <source>You have no need to specify the name yourself, except if you plan to use the push channel outside of Engagement.</source>
            <target state="new">You have no need to specify the name yourself, except if you plan to use the push channel outside of Engagement.</target>
          </trans-unit>
          <trans-unit id="129" xml:space="preserve">
            <source>Integration</source>
            <target state="new">Integration</target>
          </trans-unit>
          <trans-unit id="130" xml:space="preserve">
            <source>Engagement provides two ways to implement Reach notification and announcement: the Overlay integration and the Web View integration.</source>
            <target state="new">Engagement provides two ways to implement Reach notification and announcement: the Overlay integration and the Web View integration.</target>
          </trans-unit>
          <trans-unit id="131" xml:space="preserve">
            <source>Overlay integration doesn't require a lot of code to write into your application.</source>
            <target state="new">Overlay integration doesn't require a lot of code to write into your application.</target>
          </trans-unit>
          <trans-unit id="132" xml:space="preserve">
            <source>You just need to tag your pages, xaml and cs files, with EngagementPageOverlay.</source>
            <target state="new">You just need to tag your pages, xaml and cs files, with EngagementPageOverlay.</target>
          </trans-unit>
          <trans-unit id="133" xml:space="preserve">
            <source>Moreover, if you customize the Engagement default view, your customization will be shared with all tagged pages and just defined once.</source>
            <target state="new">Moreover, if you customize the Engagement default view, your customization will be shared with all tagged pages and just defined once.</target>
          </trans-unit>
          <trans-unit id="134" xml:space="preserve">
            <source>But if your pages need to inherit from an object other than EngagementPageOverlay, you are stuck and forced to use Web View integration.</source>
            <target state="new">But if your pages need to inherit from an object other than EngagementPageOverlay, you are stuck and forced to use Web View integration.</target>
          </trans-unit>
          <trans-unit id="135" xml:space="preserve">
            <source>Webview integration is more complicated to be implemented.</source>
            <target state="new">Webview integration is more complicated to be implemented.</target>
          </trans-unit>
          <trans-unit id="136" xml:space="preserve">
            <source>But if your App pages need to inherit from an object other than "Page", then you have to integrate the Web View and its behavior.</source>
            <target state="new">But if your App pages need to inherit from an object other than "Page", then you have to integrate the Web View and its behavior.</target>
          </trans-unit>
          <trans-unit id="137" xml:space="preserve">
            <source>You should consider adding a root level <bpt id="2">&lt;code&gt;</bpt>&lt;Grid&gt;&lt;/Grid&gt;<ept id="2">&lt;/code&gt;</ept> element to surround all page content.</source>
            <target state="new">You should consider adding a root level <bpt id="2">&lt;code&gt;</bpt>&lt;Grid&gt;&lt;/Grid&gt;<ept id="2">&lt;/code&gt;</ept> element to surround all page content.</target>
          </trans-unit>
          <trans-unit id="138" xml:space="preserve">
            <source>For Webview integration, just add Webview as child of this grid.</source>
            <target state="new">For Webview integration, just add Webview as child of this grid.</target>
          </trans-unit>
          <trans-unit id="139" xml:space="preserve">
            <source>If you need to set Engagement component elsewhere, remember that you have to manage the display size yourself.</source>
            <target state="new">If you need to set Engagement component elsewhere, remember that you have to manage the display size yourself.</target>
          </trans-unit>
          <trans-unit id="140" xml:space="preserve">
            <source>Overlay integration</source>
            <target state="new">Overlay integration</target>
          </trans-unit>
          <trans-unit id="141" xml:space="preserve">
            <source>Engagement provides an overlay for notification and announcement display.</source>
            <target state="new">Engagement provides an overlay for notification and announcement display.</target>
          </trans-unit>
          <trans-unit id="142" xml:space="preserve">
            <source>If you want to use it, do not use webview integration.</source>
            <target state="new">If you want to use it, do not use webview integration.</target>
          </trans-unit>
          <trans-unit id="143" xml:space="preserve">
            <source>In your .xaml file change EngagementPage reference to EngagementPageOverlay</source>
            <target state="new">In your .xaml file change EngagementPage reference to EngagementPageOverlay</target>
          </trans-unit>
          <trans-unit id="144" xml:space="preserve">
            <source>Add to your namespaces declarations:</source>
            <target state="new">Add to your namespaces declarations:</target>
          </trans-unit>
          <trans-unit id="145" xml:space="preserve">
            <source>Replace <bpt id="2">&lt;code&gt;</bpt>engagement:EngagementPage<ept id="2">&lt;/code&gt;</ept> with <bpt id="4">&lt;code&gt;</bpt>engagement:EngagementPageOverlay<ept id="4">&lt;/code&gt;</ept>:</source>
            <target state="new">Replace <bpt id="2">&lt;code&gt;</bpt>engagement:EngagementPage<ept id="2">&lt;/code&gt;</ept> with <bpt id="4">&lt;code&gt;</bpt>engagement:EngagementPageOverlay<ept id="4">&lt;/code&gt;</ept>:</target>
          </trans-unit>
          <trans-unit id="146" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>With EngagementPage:<ept id="1">&lt;/strong&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>With EngagementPage:<ept id="1">&lt;/strong&gt;</ept></target>
          </trans-unit>
          <trans-unit id="147" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>With EngagementPageOverlay:<ept id="1">&lt;/strong&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>With EngagementPageOverlay:<ept id="1">&lt;/strong&gt;</ept></target>
          </trans-unit>
          <trans-unit id="148" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>With EngagementPageOverlay for 8.1:<ept id="1">&lt;/strong&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>With EngagementPageOverlay for 8.1:<ept id="1">&lt;/strong&gt;</ept></target>
          </trans-unit>
          <trans-unit id="149" xml:space="preserve">
            <source>Then in your .cs file tag your page in "EngagementPageOverlay" instead of "EngagementPage" and import "Microsoft.Azure.Engagement.Overlay".</source>
            <target state="new">Then in your .cs file tag your page in "EngagementPageOverlay" instead of "EngagementPage" and import "Microsoft.Azure.Engagement.Overlay".</target>
          </trans-unit>
          <trans-unit id="150" xml:space="preserve">
            <source>Replace <bpt id="2">&lt;code&gt;</bpt>EngagementPage<ept id="2">&lt;/code&gt;</ept> with <bpt id="4">&lt;code&gt;</bpt>EngagementPageOverlay<ept id="4">&lt;/code&gt;</ept>:</source>
            <target state="new">Replace <bpt id="2">&lt;code&gt;</bpt>EngagementPage<ept id="2">&lt;/code&gt;</ept> with <bpt id="4">&lt;code&gt;</bpt>EngagementPageOverlay<ept id="4">&lt;/code&gt;</ept>:</target>
          </trans-unit>
          <trans-unit id="151" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>With EngagementPage:<ept id="1">&lt;/strong&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>With EngagementPage:<ept id="1">&lt;/strong&gt;</ept></target>
          </trans-unit>
          <trans-unit id="152" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>With EngagementPageOverlay:<ept id="1">&lt;/strong&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>With EngagementPageOverlay:<ept id="1">&lt;/strong&gt;</ept></target>
          </trans-unit>
          <trans-unit id="153" xml:space="preserve">
            <source>Now this page uses the engagement overlay mechanism, you don't have to insert a web view.</source>
            <target state="new">Now this page uses the engagement overlay mechanism, you don't have to insert a web view.</target>
          </trans-unit>
          <trans-unit id="154" xml:space="preserve">
            <source>The Engagement overlay uses the first “Grid” element it finds in your xaml file to add two web views on your page.</source>
            <target state="new">The Engagement overlay uses the first “Grid” element it finds in your xaml file to add two web views on your page.</target>
          </trans-unit>
          <trans-unit id="155" xml:space="preserve">
            <source>If you want to locate where web views will be set, you can define a grid named “EngagementGrid” like this:</source>
            <target state="new">If you want to locate where web views will be set, you can define a grid named “EngagementGrid” like this:</target>
          </trans-unit>
          <trans-unit id="156" xml:space="preserve">
            <source>You can customize the overlay notification and announcement directly on their xaml and cs files:</source>
            <target state="new">You can customize the overlay notification and announcement directly on their xaml and cs files:</target>
          </trans-unit>
          <trans-unit id="157" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>EngagementAnnouncement.html<ept id="1">&lt;/code&gt;</ept> : The <bpt id="3">&lt;code&gt;</bpt>Announcement<ept id="3">&lt;/code&gt;</ept> web view html design.</source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>EngagementAnnouncement.html<ept id="1">&lt;/code&gt;</ept> : The <bpt id="3">&lt;code&gt;</bpt>Announcement<ept id="3">&lt;/code&gt;</ept> web view html design.</target>
          </trans-unit>
          <trans-unit id="158" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>EngagementOverlayAnnouncement.xaml<ept id="1">&lt;/code&gt;</ept> : The <bpt id="3">&lt;code&gt;</bpt>Announcement<ept id="3">&lt;/code&gt;</ept> xaml design.</source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>EngagementOverlayAnnouncement.xaml<ept id="1">&lt;/code&gt;</ept> : The <bpt id="3">&lt;code&gt;</bpt>Announcement<ept id="3">&lt;/code&gt;</ept> xaml design.</target>
          </trans-unit>
          <trans-unit id="159" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>EngagementOverlayAnnouncement.xaml.cs<ept id="1">&lt;/code&gt;</ept> : The <bpt id="3">&lt;code&gt;</bpt>EngagementOverlayAnnouncement.xaml<ept id="3">&lt;/code&gt;</ept> linked code.</source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>EngagementOverlayAnnouncement.xaml.cs<ept id="1">&lt;/code&gt;</ept> : The <bpt id="3">&lt;code&gt;</bpt>EngagementOverlayAnnouncement.xaml<ept id="3">&lt;/code&gt;</ept> linked code.</target>
          </trans-unit>
          <trans-unit id="160" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>EngagementNotification.html<ept id="1">&lt;/code&gt;</ept> : The <bpt id="3">&lt;code&gt;</bpt>Notification<ept id="3">&lt;/code&gt;</ept> web view html design.</source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>EngagementNotification.html<ept id="1">&lt;/code&gt;</ept> : The <bpt id="3">&lt;code&gt;</bpt>Notification<ept id="3">&lt;/code&gt;</ept> web view html design.</target>
          </trans-unit>
          <trans-unit id="161" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>EngagementOverlayNotification.xaml<ept id="1">&lt;/code&gt;</ept> : The <bpt id="3">&lt;code&gt;</bpt>Notification<ept id="3">&lt;/code&gt;</ept> xaml design.</source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>EngagementOverlayNotification.xaml<ept id="1">&lt;/code&gt;</ept> : The <bpt id="3">&lt;code&gt;</bpt>Notification<ept id="3">&lt;/code&gt;</ept> xaml design.</target>
          </trans-unit>
          <trans-unit id="162" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>EngagementOverlayNotification.xaml.cs<ept id="1">&lt;/code&gt;</ept> : The <bpt id="3">&lt;code&gt;</bpt>EngagementOverlayNotification.xaml<ept id="3">&lt;/code&gt;</ept> linked code.</source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>EngagementOverlayNotification.xaml.cs<ept id="1">&lt;/code&gt;</ept> : The <bpt id="3">&lt;code&gt;</bpt>EngagementOverlayNotification.xaml<ept id="3">&lt;/code&gt;</ept> linked code.</target>
          </trans-unit>
          <trans-unit id="163" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>EngagementPageOverlay.cs<ept id="1">&lt;/code&gt;</ept> : The <bpt id="3">&lt;code&gt;</bpt>Overlay<ept id="3">&lt;/code&gt;</ept> announcement and notification display code.</source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>EngagementPageOverlay.cs<ept id="1">&lt;/code&gt;</ept> : The <bpt id="3">&lt;code&gt;</bpt>Overlay<ept id="3">&lt;/code&gt;</ept> announcement and notification display code.</target>
          </trans-unit>
          <trans-unit id="164" xml:space="preserve">
            <source>Web View integration</source>
            <target state="new">Web View integration</target>
          </trans-unit>
          <trans-unit id="165" xml:space="preserve">
            <source>If you want to use it, do not use Overlay integration.</source>
            <target state="new">If you want to use it, do not use Overlay integration.</target>
          </trans-unit>
          <trans-unit id="166" xml:space="preserve">
            <source>To display engagement content, you need to integrate the two xaml WebView in each page and you need to display notification and announcement.</source>
            <target state="new">To display engagement content, you need to integrate the two xaml WebView in each page and you need to display notification and announcement.</target>
          </trans-unit>
          <trans-unit id="167" xml:space="preserve">
            <source>So add this code in your xaml file:</source>
            <target state="new">So add this code in your xaml file:</target>
          </trans-unit>
          <trans-unit id="168" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>For 8.1 integration:<ept id="1">&lt;/strong&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>For 8.1 integration:<ept id="1">&lt;/strong&gt;</ept></target>
          </trans-unit>
          <trans-unit id="169" xml:space="preserve">
            <source>And your associate .cs file have to look like:</source>
            <target state="new">And your associate .cs file have to look like:</target>
          </trans-unit>
          <trans-unit id="170" xml:space="preserve">
            <source>This implementation embedded WebView resizing when the device screen is turned.</source>
            <target state="new">This implementation embedded WebView resizing when the device screen is turned.</target>
          </trans-unit>
          <trans-unit id="171" xml:space="preserve">
            <source>Handle datapush (optional)</source>
            <target state="new">Handle datapush (optional)</target>
          </trans-unit>
          <trans-unit id="172" xml:space="preserve">
            <source>If you want your application to be able to receive Reach data pushes, you have to implement two events of the EngagementReach class:</source>
            <target state="new">If you want your application to be able to receive Reach data pushes, you have to implement two events of the EngagementReach class:</target>
          </trans-unit>
          <trans-unit id="173" xml:space="preserve">
            <source>In App.xaml.cs in "Public App(){}" add:</source>
            <target state="new">In App.xaml.cs in "Public App(){}" add:</target>
          </trans-unit>
          <trans-unit id="174" xml:space="preserve">
            <source>You can see that the callback of each method returns a boolean.</source>
            <target state="new">You can see that the callback of each method returns a boolean.</target>
          </trans-unit>
          <trans-unit id="175" xml:space="preserve">
            <source>Engagement sends a feedback to its back-end after dispatching the data push.</source>
            <target state="new">Engagement sends a feedback to its back-end after dispatching the data push.</target>
          </trans-unit>
          <trans-unit id="176" xml:space="preserve">
            <source>If the callback returns false, the <bpt id="2">&lt;code&gt;</bpt>exit<ept id="2">&lt;/code&gt;</ept> feedback will be send.</source>
            <target state="new">If the callback returns false, the <bpt id="2">&lt;code&gt;</bpt>exit<ept id="2">&lt;/code&gt;</ept> feedback will be send.</target>
          </trans-unit>
          <trans-unit id="177" xml:space="preserve">
            <source>Otherwise, it will be <bpt id="2">&lt;code&gt;</bpt>action<ept id="2">&lt;/code&gt;</ept>.</source>
            <target state="new">Otherwise, it will be <bpt id="2">&lt;code&gt;</bpt>action<ept id="2">&lt;/code&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="178" xml:space="preserve">
            <source>If no callback is set for the events, the <bpt id="2">&lt;code&gt;</bpt>drop<ept id="2">&lt;/code&gt;</ept> feedback will be returned to Engagement.</source>
            <target state="new">If no callback is set for the events, the <bpt id="2">&lt;code&gt;</bpt>drop<ept id="2">&lt;/code&gt;</ept> feedback will be returned to Engagement.</target>
          </trans-unit>
          <trans-unit id="179" xml:space="preserve">
            <source>Engagement is not able to receive multiples feedbacks for a data push.</source>
            <target state="new">Engagement is not able to receive multiples feedbacks for a data push.</target>
          </trans-unit>
          <trans-unit id="180" xml:space="preserve">
            <source>If you plan to set several handlers on an event, be aware that the feedback will correspond to the last one sent.</source>
            <target state="new">If you plan to set several handlers on an event, be aware that the feedback will correspond to the last one sent.</target>
          </trans-unit>
          <trans-unit id="181" xml:space="preserve">
            <source>In this case, we recommend to always returns the same value to avoid having confusing feedback on the front-end.</source>
            <target state="new">In this case, we recommend to always returns the same value to avoid having confusing feedback on the front-end.</target>
          </trans-unit>
          <trans-unit id="182" xml:space="preserve">
            <source>Customize UI (optional)</source>
            <target state="new">Customize UI (optional)</target>
          </trans-unit>
          <trans-unit id="183" xml:space="preserve">
            <source>First step</source>
            <target state="new">First step</target>
          </trans-unit>
          <trans-unit id="184" xml:space="preserve">
            <source>We allow you to customize the reach UI.</source>
            <target state="new">We allow you to customize the reach UI.</target>
          </trans-unit>
          <trans-unit id="185" xml:space="preserve">
            <source>To do so, you have to create a subclass of the <bpt id="2">&lt;code&gt;</bpt>EngagementReachHandler<ept id="2">&lt;/code&gt;</ept> class.</source>
            <target state="new">To do so, you have to create a subclass of the <bpt id="2">&lt;code&gt;</bpt>EngagementReachHandler<ept id="2">&lt;/code&gt;</ept> class.</target>
          </trans-unit>
          <trans-unit id="186" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Sample Code :<ept id="1">&lt;/strong&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Sample Code :<ept id="1">&lt;/strong&gt;</ept></target>
          </trans-unit>
          <trans-unit id="187" xml:space="preserve">
            <source>Then, set the content of the <bpt id="2">&lt;code&gt;</bpt>EngagementReach.Instance.Handler<ept id="2">&lt;/code&gt;</ept> field with your custom object in your <bpt id="4">&lt;code&gt;</bpt>App.xaml.cs<ept id="4">&lt;/code&gt;</ept> class within the <bpt id="6">&lt;code&gt;</bpt>App()<ept id="6">&lt;/code&gt;</ept> method.</source>
            <target state="new">Then, set the content of the <bpt id="2">&lt;code&gt;</bpt>EngagementReach.Instance.Handler<ept id="2">&lt;/code&gt;</ept> field with your custom object in your <bpt id="4">&lt;code&gt;</bpt>App.xaml.cs<ept id="4">&lt;/code&gt;</ept> class within the <bpt id="6">&lt;code&gt;</bpt>App()<ept id="6">&lt;/code&gt;</ept> method.</target>
          </trans-unit>
          <trans-unit id="188" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Sample Code :<ept id="1">&lt;/strong&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Sample Code :<ept id="1">&lt;/strong&gt;</ept></target>
          </trans-unit>
          <trans-unit id="189" xml:space="preserve">
            <source>By default, Engagement uses its own implementation of <bpt id="2">&lt;code&gt;</bpt>EngagementReachHandler<ept id="2">&lt;/code&gt;</ept>.</source>
            <target state="new">By default, Engagement uses its own implementation of <bpt id="2">&lt;code&gt;</bpt>EngagementReachHandler<ept id="2">&lt;/code&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="190" xml:space="preserve">
            <source>You don't have to create your own, and if you do so, you don't have to override every method.</source>
            <target state="new">You don't have to create your own, and if you do so, you don't have to override every method.</target>
          </trans-unit>
          <trans-unit id="191" xml:space="preserve">
            <source>The default behavior is to select the Engagement base object.</source>
            <target state="new">The default behavior is to select the Engagement base object.</target>
          </trans-unit>
          <trans-unit id="192" xml:space="preserve">
            <source>Web View</source>
            <target state="new">Web View</target>
          </trans-unit>
          <trans-unit id="193" xml:space="preserve">
            <source>By default, Reach will use the embedded resources of the DLL to display the notifications and pages.</source>
            <target state="new">By default, Reach will use the embedded resources of the DLL to display the notifications and pages.</target>
          </trans-unit>
          <trans-unit id="194" xml:space="preserve">
            <source>To provide a full customization possibilities we only use web view.</source>
            <target state="new">To provide a full customization possibilities we only use web view.</target>
          </trans-unit>
          <trans-unit id="195" xml:space="preserve">
            <source>If you want to customize layouts, override directly the resources files <bpt id="2">&lt;code&gt;</bpt>EngagementAnnouncement.html<ept id="2">&lt;/code&gt;</ept> and <bpt id="4">&lt;code&gt;</bpt>EngagementNotification.html<ept id="4">&lt;/code&gt;</ept>.</source>
            <target state="new">If you want to customize layouts, override directly the resources files <bpt id="2">&lt;code&gt;</bpt>EngagementAnnouncement.html<ept id="2">&lt;/code&gt;</ept> and <bpt id="4">&lt;code&gt;</bpt>EngagementNotification.html<ept id="4">&lt;/code&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="196" xml:space="preserve">
            <source>Engagement needs all code in <bpt id="2">&lt;code&gt;</bpt>&lt;body&gt;&lt;/body&gt;<ept id="2">&lt;/code&gt;</ept> to run correctly.</source>
            <target state="new">Engagement needs all code in <bpt id="2">&lt;code&gt;</bpt>&lt;body&gt;&lt;/body&gt;<ept id="2">&lt;/code&gt;</ept> to run correctly.</target>
          </trans-unit>
          <trans-unit id="197" xml:space="preserve">
            <source>But you can add tag outer <bpt id="2">&lt;code&gt;</bpt>engagement_webview_area<ept id="2">&lt;/code&gt;</ept>.</source>
            <target state="new">But you can add tag outer <bpt id="2">&lt;code&gt;</bpt>engagement_webview_area<ept id="2">&lt;/code&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="198" xml:space="preserve">
            <source>However, you can decide to use your own resources.</source>
            <target state="new">However, you can decide to use your own resources.</target>
          </trans-unit>
          <trans-unit id="199" xml:space="preserve">
            <source>You can override <bpt id="2">&lt;code&gt;</bpt>EngagementReachHandler<ept id="2">&lt;/code&gt;</ept> methods in your subclass to tell Engagement to use your layouts, but take care to embedded the engagement mechanism:</source>
            <target state="new">You can override <bpt id="2">&lt;code&gt;</bpt>EngagementReachHandler<ept id="2">&lt;/code&gt;</ept> methods in your subclass to tell Engagement to use your layouts, but take care to embedded the engagement mechanism:</target>
          </trans-unit>
          <trans-unit id="200" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Sample Code :<ept id="1">&lt;/strong&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Sample Code :<ept id="1">&lt;/strong&gt;</ept></target>
          </trans-unit>
          <trans-unit id="201" xml:space="preserve">
            <source>By default, AnnouncementHTML is <bpt id="2">&lt;code&gt;</bpt>ms-appx-web:///Resources/EngagementAnnouncement.html<ept id="2">&lt;/code&gt;</ept>.</source>
            <target state="new">By default, AnnouncementHTML is <bpt id="2">&lt;code&gt;</bpt>ms-appx-web:///Resources/EngagementAnnouncement.html<ept id="2">&lt;/code&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="202" xml:space="preserve">
            <source>It represents the html file that design the content of a push message (Text announcement, Web anoucement and Poll announcement).</source>
            <target state="new">It represents the html file that design the content of a push message (Text announcement, Web anoucement and Poll announcement).</target>
          </trans-unit>
          <trans-unit id="203" xml:space="preserve">
            <source>AnnouncementName is <bpt id="2">&lt;code&gt;</bpt>engagement_announcement_content<ept id="2">&lt;/code&gt;</ept>.</source>
            <target state="new">AnnouncementName is <bpt id="2">&lt;code&gt;</bpt>engagement_announcement_content<ept id="2">&lt;/code&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="204" xml:space="preserve">
            <source>It is the name of the webview design in your xaml page.</source>
            <target state="new">It is the name of the webview design in your xaml page.</target>
          </trans-unit>
          <trans-unit id="205" xml:space="preserve">
            <source>NotfificationHTML is <bpt id="2">&lt;code&gt;</bpt>ms-appx-web:///Resources/EngagementNotification.html<ept id="2">&lt;/code&gt;</ept>.</source>
            <target state="new">NotfificationHTML is <bpt id="2">&lt;code&gt;</bpt>ms-appx-web:///Resources/EngagementNotification.html<ept id="2">&lt;/code&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="206" xml:space="preserve">
            <source>It represents the html file that design the notification of a push message.</source>
            <target state="new">It represents the html file that design the notification of a push message.</target>
          </trans-unit>
          <trans-unit id="207" xml:space="preserve">
            <source>NotfificationName is <bpt id="2">&lt;code&gt;</bpt>engagement_notification_content<ept id="2">&lt;/code&gt;</ept>.</source>
            <target state="new">NotfificationName is <bpt id="2">&lt;code&gt;</bpt>engagement_notification_content<ept id="2">&lt;/code&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="208" xml:space="preserve">
            <source>It is the name of the webview design in your xaml page.</source>
            <target state="new">It is the name of the webview design in your xaml page.</target>
          </trans-unit>
          <trans-unit id="209" xml:space="preserve">
            <source>Customization</source>
            <target state="new">Customization</target>
          </trans-unit>
          <trans-unit id="210" xml:space="preserve">
            <source>You can customize notification and announcement web view has you want if you preserve Engagement object.</source>
            <target state="new">You can customize notification and announcement web view has you want if you preserve Engagement object.</target>
          </trans-unit>
          <trans-unit id="211" xml:space="preserve">
            <source>Take care that webview object is described three times - the first time in your xaml, second time in your .cs file in the "setwebview()" method, and third time in the html file.</source>
            <target state="new">Take care that webview object is described three times - the first time in your xaml, second time in your .cs file in the "setwebview()" method, and third time in the html file.</target>
          </trans-unit>
          <trans-unit id="212" xml:space="preserve">
            <source>In your xaml you describe the current graphical layout webview component.</source>
            <target state="new">In your xaml you describe the current graphical layout webview component.</target>
          </trans-unit>
          <trans-unit id="213" xml:space="preserve">
            <source>In your .cs file you can define "setwebview()" in which you set the dimension of the two webview (notification, announcement).</source>
            <target state="new">In your .cs file you can define "setwebview()" in which you set the dimension of the two webview (notification, announcement).</target>
          </trans-unit>
          <trans-unit id="214" xml:space="preserve">
            <source>It is very effective when the application is resizing.</source>
            <target state="new">It is very effective when the application is resizing.</target>
          </trans-unit>
          <trans-unit id="215" xml:space="preserve">
            <source>In the Engagement html file we describe the webview content, design and the elements positions between each other.</source>
            <target state="new">In the Engagement html file we describe the webview content, design and the elements positions between each other.</target>
          </trans-unit>
          <trans-unit id="216" xml:space="preserve">
            <source>Launch message</source>
            <target state="new">Launch message</target>
          </trans-unit>
          <trans-unit id="217" xml:space="preserve">
            <source>When a user clicks on a system notification (a toast), Engagement launches the application, load the content of the push messages, and display the page for the corresponding campaign.</source>
            <target state="new">When a user clicks on a system notification (a toast), Engagement launches the application, load the content of the push messages, and display the page for the corresponding campaign.</target>
          </trans-unit>
          <trans-unit id="218" xml:space="preserve">
            <source>There is a delay between the launch of the application and the display of the page (depending on the speed of your network).</source>
            <target state="new">There is a delay between the launch of the application and the display of the page (depending on the speed of your network).</target>
          </trans-unit>
          <trans-unit id="219" xml:space="preserve">
            <source>To indicate to the user that something is loading, you should provide a visual information, like a progress bar or a progress indicator.</source>
            <target state="new">To indicate to the user that something is loading, you should provide a visual information, like a progress bar or a progress indicator.</target>
          </trans-unit>
          <trans-unit id="220" xml:space="preserve">
            <source>Engagement cannot handle that itself, but provides a few handlers for you.</source>
            <target state="new">Engagement cannot handle that itself, but provides a few handlers for you.</target>
          </trans-unit>
          <trans-unit id="221" xml:space="preserve">
            <source>To implement the callback, in App.xaml.cs in "Public App(){}" add:</source>
            <target state="new">To implement the callback, in App.xaml.cs in "Public App(){}" add:</target>
          </trans-unit>
          <trans-unit id="222" xml:space="preserve">
            <source>You can set the callback in your "Public App(){}" method of your <bpt id="2">&lt;code&gt;</bpt>App.xaml.cs<ept id="2">&lt;/code&gt;</ept> file, preferably before the <bpt id="4">&lt;code&gt;</bpt>EngagementReach.Instance.Init()<ept id="4">&lt;/code&gt;</ept> call.</source>
            <target state="new">You can set the callback in your "Public App(){}" method of your <bpt id="2">&lt;code&gt;</bpt>App.xaml.cs<ept id="2">&lt;/code&gt;</ept> file, preferably before the <bpt id="4">&lt;code&gt;</bpt>EngagementReach.Instance.Init()<ept id="4">&lt;/code&gt;</ept> call.</target>
          </trans-unit>
          <trans-unit id="223" xml:space="preserve">
            <source>Each handler is called by the UI Thread.</source>
            <target state="new">Each handler is called by the UI Thread.</target>
          </trans-unit>
          <trans-unit id="224" xml:space="preserve">
            <source>You do not have to worry when using a MessageBox or something UI-related.</source>
            <target state="new">You do not have to worry when using a MessageBox or something UI-related.</target>
          </trans-unit>
          <trans-unit id="225" xml:space="preserve">
            <source>Custom scheme tip</source>
            <target state="new">Custom scheme tip</target>
          </trans-unit>
          <trans-unit id="226" xml:space="preserve">
            <source>We provide custom scheme use.</source>
            <target state="new">We provide custom scheme use.</target>
          </trans-unit>
          <trans-unit id="227" xml:space="preserve">
            <source>You can send different type of URI from engagement frontend to be used in your engagement application.</source>
            <target state="new">You can send different type of URI from engagement frontend to be used in your engagement application.</target>
          </trans-unit>
          <trans-unit id="228" xml:space="preserve">
            <source>Default scheme like <bpt id="2">&lt;code&gt;</bpt>http, ftp, ...<ept id="2">&lt;/code&gt;</ept> are manage by Windows, a window will prompt if they are no default application installed on device.</source>
            <target state="new">Default scheme like <bpt id="2">&lt;code&gt;</bpt>http, ftp, ...<ept id="2">&lt;/code&gt;</ept> are manage by Windows, a window will prompt if they are no default application installed on device.</target>
          </trans-unit>
          <trans-unit id="229" xml:space="preserve">
            <source>Other scheme like application scheme can be used.</source>
            <target state="new">Other scheme like application scheme can be used.</target>
          </trans-unit>
          <trans-unit id="230" xml:space="preserve">
            <source>Moreover, you can use a custom scheme for your application.</source>
            <target state="new">Moreover, you can use a custom scheme for your application.</target>
          </trans-unit>
          <trans-unit id="231" xml:space="preserve">
            <source>The simple way to set a custom scheme in your application is to open your <bpt id="2">&lt;code&gt;</bpt>Package.appxmanifest<ept id="2">&lt;/code&gt;</ept> go in <bpt id="4">&lt;code&gt;</bpt>Declarations<ept id="4">&lt;/code&gt;</ept> panel.</source>
            <target state="new">The simple way to set a custom scheme in your application is to open your <bpt id="2">&lt;code&gt;</bpt>Package.appxmanifest<ept id="2">&lt;/code&gt;</ept> go in <bpt id="4">&lt;code&gt;</bpt>Declarations<ept id="4">&lt;/code&gt;</ept> panel.</target>
          </trans-unit>
          <trans-unit id="232" xml:space="preserve">
            <source>Select <bpt id="2">&lt;code&gt;</bpt>Protocol<ept id="2">&lt;/code&gt;</ept> in the Available Declarations scroll box and add it.</source>
            <target state="new">Select <bpt id="2">&lt;code&gt;</bpt>Protocol<ept id="2">&lt;/code&gt;</ept> in the Available Declarations scroll box and add it.</target>
          </trans-unit>
          <trans-unit id="233" xml:space="preserve">
            <source>Edit the <bpt id="2">&lt;code&gt;</bpt>Name<ept id="2">&lt;/code&gt;</ept> field with your new protocol desired name.</source>
            <target state="new">Edit the <bpt id="2">&lt;code&gt;</bpt>Name<ept id="2">&lt;/code&gt;</ept> field with your new protocol desired name.</target>
          </trans-unit>
          <trans-unit id="234" xml:space="preserve">
            <source>Now to use this protocol, edit your <bpt id="2">&lt;code&gt;</bpt>App.xaml.cs<ept id="2">&lt;/code&gt;</ept> with the <bpt id="4">&lt;code&gt;</bpt>OnActivated<ept id="4">&lt;/code&gt;</ept> method, and don't forget to initialize engagement here also:</source>
            <target state="new">Now to use this protocol, edit your <bpt id="2">&lt;code&gt;</bpt>App.xaml.cs<ept id="2">&lt;/code&gt;</ept> with the <bpt id="4">&lt;code&gt;</bpt>OnActivated<ept id="4">&lt;/code&gt;</ept> method, and don't forget to initialize engagement here also:</target>
          </trans-unit>
          <trans-unit id="235" xml:space="preserve">
            <source>test</source>
            <target state="new">test</target>
          </trans-unit>
        </group>
      </group>
    </body>
  </file>
</xliff>