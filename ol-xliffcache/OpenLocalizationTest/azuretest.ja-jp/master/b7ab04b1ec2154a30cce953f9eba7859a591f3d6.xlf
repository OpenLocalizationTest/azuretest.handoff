<?xml version="1.0" encoding="utf-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" source-language="en-us" target-language="ja-jp" original="2/21/2016 12:40:47 PM" tool-id="MarkdownTransformer" product-name="N/A" product-version="N/A" build-num="1">
    <header>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b7ab04b1ec2154a30cce953f9eba7859a591f3d6</xliffext:olfilehash>
      <tool tool-id="MarkdownTransformer" tool-name="MarkdownToXliff" tool-version="1.0" tool-company="Microsoft" />
    </header>
    <body>
      <group extype="content">
        <group id="101">
          <trans-unit id="101" xml:space="preserve">
            <source>Data Factory - Create Predictive Pipelines using Data Factory and Machine Learning | Microsoft Azure</source>
            <target state="new">Data Factory - Create Predictive Pipelines using Data Factory and Machine Learning | Microsoft Azure</target>
          </trans-unit>
          <trans-unit id="102" xml:space="preserve">
            <source>Describes how to create create predictive pipelines using Azuer Data Factory and Azure Machine Learning</source>
            <target state="new">Describes how to create create predictive pipelines using Azuer Data Factory and Azure Machine Learning</target>
          </trans-unit>
          <trans-unit id="103" xml:space="preserve">
            <source>Create Predictive Pipelines using Azure Data Factory and Azure Machine Learning</source>
            <target state="new">Create Predictive Pipelines using Azure Data Factory and Azure Machine Learning</target>
          </trans-unit>
          <trans-unit id="104" xml:space="preserve">
            <source>Overview</source>
            <target state="new">Overview</target>
          </trans-unit>
          <trans-unit id="105" xml:space="preserve">
            <source>Azure Data Factory enables you to easily create pipelines that leverages a published <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Azure Machine Learning[azure-machine-learning]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> web service for predictive analytics.</source>
            <target state="new">Azure Data Factory enables you to easily create pipelines that leverages a published <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Azure Machine Learning[azure-machine-learning]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> web service for predictive analytics.</target>
          </trans-unit>
          <trans-unit id="106" xml:space="preserve">
            <source>This enables you to use Azure Data Factory to orchestrate  data movement and processing, and then perform batch scoring using Azure Machine Learning.</source>
            <target state="new">This enables you to use Azure Data Factory to orchestrate  data movement and processing, and then perform batch scoring using Azure Machine Learning.</target>
          </trans-unit>
          <trans-unit id="107" xml:space="preserve">
            <source>To achieve this, you will need to do the following:</source>
            <target state="new">To achieve this, you will need to do the following:</target>
          </trans-unit>
          <trans-unit id="108" xml:space="preserve">
            <source>Use the <bpt id="2">&lt;strong&gt;</bpt>AzureMLBatchScoring<ept id="2">&lt;/strong&gt;</ept> activity.</source>
            <target state="new">Use the <bpt id="2">&lt;strong&gt;</bpt>AzureMLBatchScoring<ept id="2">&lt;/strong&gt;</ept> activity.</target>
          </trans-unit>
          <trans-unit id="109" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Request URI<ept id="1">&lt;/strong&gt;</ept> for the Batch Execution API.</source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Request URI<ept id="1">&lt;/strong&gt;</ept> for the Batch Execution API.</target>
          </trans-unit>
          <trans-unit id="110" xml:space="preserve">
            <source>You can find the Request URI by clicking on the <bpt id="2">&lt;strong&gt;</bpt>BATCH EXECUTION<ept id="2">&lt;/strong&gt;</ept> link in the web services page (shown below).</source>
            <target state="new">You can find the Request URI by clicking on the <bpt id="2">&lt;strong&gt;</bpt>BATCH EXECUTION<ept id="2">&lt;/strong&gt;</ept> link in the web services page (shown below).</target>
          </trans-unit>
          <trans-unit id="111" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>API key<ept id="1">&lt;/strong&gt;</ept> for the published Azure Machine Learning web service.</source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>API key<ept id="1">&lt;/strong&gt;</ept> for the published Azure Machine Learning web service.</target>
          </trans-unit>
          <trans-unit id="112" xml:space="preserve">
            <source>You can find this information by clicking on the web service that you have published.</source>
            <target state="new">You can find this information by clicking on the web service that you have published.</target>
          </trans-unit>
          <trans-unit id="113" xml:space="preserve">
            <source><bpt id="1">&lt;linkText&gt;</bpt>Machine Learning Dashboard<ept id="1">&lt;/linkText&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;linkText&gt;</bpt>Machine Learning Dashboard<ept id="1">&lt;/linkText&gt;</ept></target>
          </trans-unit>
          <trans-unit id="114" xml:space="preserve">
            <source>A <bpt id="2">&lt;strong&gt;</bpt>predictive pipeline<ept id="2">&lt;/strong&gt;</ept> has these parts:</source>
            <target state="new">A <bpt id="2">&lt;strong&gt;</bpt>predictive pipeline<ept id="2">&lt;/strong&gt;</ept> has these parts:</target>
          </trans-unit>
          <trans-unit id="115" xml:space="preserve">
            <source>Input and output tables</source>
            <target state="new">Input and output tables</target>
          </trans-unit>
          <trans-unit id="116" xml:space="preserve">
            <source>Azure Storage/Azure SQL and Azure ML linked services</source>
            <target state="new">Azure Storage/Azure SQL and Azure ML linked services</target>
          </trans-unit>
          <trans-unit id="117" xml:space="preserve">
            <source>A pipeline with Azure ML Batch Scoring Activity</source>
            <target state="new">A pipeline with Azure ML Batch Scoring Activity</target>
          </trans-unit>
          <trans-unit id="118" xml:space="preserve">
            <source>You can use Web service parameters that are exposed by a published Azure Machine Learning Web service in Azure Data Factory (ADF) pipelines.</source>
            <target state="new">You can use Web service parameters that are exposed by a published Azure Machine Learning Web service in Azure Data Factory (ADF) pipelines.</target>
          </trans-unit>
          <trans-unit id="119" xml:space="preserve">
            <source>For more information, see the Web Service Parameters section in this article.</source>
            <target state="new">For more information, see the Web Service Parameters section in this article.</target>
          </trans-unit>
          <trans-unit id="120" xml:space="preserve">
            <source>Example</source>
            <target state="new">Example</target>
          </trans-unit>
          <trans-unit id="121" xml:space="preserve">
            <source>This example uses Azure Storage to hold both the input and output data.</source>
            <target state="new">This example uses Azure Storage to hold both the input and output data.</target>
          </trans-unit>
          <trans-unit id="122" xml:space="preserve">
            <source>You can also use Azure SQL Database instead of using Azure Storage.</source>
            <target state="new">You can also use Azure SQL Database instead of using Azure Storage.</target>
          </trans-unit>
          <trans-unit id="123" xml:space="preserve">
            <source>We recommend that you go through the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Build your first pipeline with Data Factory[adf-build-1st-pipeline]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> tutorial prior to going through this example and use the Data Factory Editor to create Data Factory artifacts (linked services, tables, pipeline) in this example.</source>
            <target state="new">We recommend that you go through the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Build your first pipeline with Data Factory[adf-build-1st-pipeline]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> tutorial prior to going through this example and use the Data Factory Editor to create Data Factory artifacts (linked services, tables, pipeline) in this example.</target>
          </trans-unit>
          <trans-unit id="124" xml:space="preserve">
            <source>Create a <bpt id="2">&lt;strong&gt;</bpt>linked service<ept id="2">&lt;/strong&gt;</ept> for your <bpt id="4">&lt;strong&gt;</bpt>Azure Storage<ept id="4">&lt;/strong&gt;</ept>.</source>
            <target state="new">Create a <bpt id="2">&lt;strong&gt;</bpt>linked service<ept id="2">&lt;/strong&gt;</ept> for your <bpt id="4">&lt;strong&gt;</bpt>Azure Storage<ept id="4">&lt;/strong&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="125" xml:space="preserve">
            <source>If the scoring input and output files will be in different storage accounts, you will need two linked services.</source>
            <target state="new">If the scoring input and output files will be in different storage accounts, you will need two linked services.</target>
          </trans-unit>
          <trans-unit id="126" xml:space="preserve">
            <source>Here is a JSON example:</source>
            <target state="new">Here is a JSON example:</target>
          </trans-unit>
          <trans-unit id="127" xml:space="preserve">
            <source>Create the <bpt id="2">&lt;strong&gt;</bpt>input<ept id="2">&lt;/strong&gt;</ept> Azure Data Factory <bpt id="4">&lt;strong&gt;</bpt>table<ept id="4">&lt;/strong&gt;</ept>.</source>
            <target state="new">Create the <bpt id="2">&lt;strong&gt;</bpt>input<ept id="2">&lt;/strong&gt;</ept> Azure Data Factory <bpt id="4">&lt;strong&gt;</bpt>table<ept id="4">&lt;/strong&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="128" xml:space="preserve">
            <source>Note that unlike some other Data Factory tables, these must both contain both <bpt id="2">&lt;strong&gt;</bpt>folderPath<ept id="2">&lt;/strong&gt;</ept> and <bpt id="4">&lt;strong&gt;</bpt>fileName<ept id="4">&lt;/strong&gt;</ept> values.</source>
            <target state="new">Note that unlike some other Data Factory tables, these must both contain both <bpt id="2">&lt;strong&gt;</bpt>folderPath<ept id="2">&lt;/strong&gt;</ept> and <bpt id="4">&lt;strong&gt;</bpt>fileName<ept id="4">&lt;/strong&gt;</ept> values.</target>
          </trans-unit>
          <trans-unit id="129" xml:space="preserve">
            <source>You can use partitioning to cause each batch execution (each data slice) to process or produce unique input and output files.</source>
            <target state="new">You can use partitioning to cause each batch execution (each data slice) to process or produce unique input and output files.</target>
          </trans-unit>
          <trans-unit id="130" xml:space="preserve">
            <source>You will likely need to include some upstream activity to transform the input into the CSV file format and place it in the storage account for each slice.</source>
            <target state="new">You will likely need to include some upstream activity to transform the input into the CSV file format and place it in the storage account for each slice.</target>
          </trans-unit>
          <trans-unit id="131" xml:space="preserve">
            <source>In that case, you would not include the <bpt id="2">&lt;strong&gt;</bpt>external<ept id="2">&lt;/strong&gt;</ept> and <bpt id="4">&lt;strong&gt;</bpt>externalData<ept id="4">&lt;/strong&gt;</ept> settings shown in the example below, and your ScoringInputBlob would be the output table of a different Activity.</source>
            <target state="new">In that case, you would not include the <bpt id="2">&lt;strong&gt;</bpt>external<ept id="2">&lt;/strong&gt;</ept> and <bpt id="4">&lt;strong&gt;</bpt>externalData<ept id="4">&lt;/strong&gt;</ept> settings shown in the example below, and your ScoringInputBlob would be the output table of a different Activity.</target>
          </trans-unit>
          <trans-unit id="132" xml:space="preserve">
            <source>Your batch scoring csv file must have the column header row.</source>
            <target state="new">Your batch scoring csv file must have the column header row.</target>
          </trans-unit>
          <trans-unit id="133" xml:space="preserve">
            <source>If you are using the <bpt id="2">&lt;strong&gt;</bpt>Copy Activity<ept id="2">&lt;/strong&gt;</ept> to create/move the csv into the blob storage, you should set the sink property <bpt id="4">&lt;strong&gt;</bpt>blobWriterAddHeader<ept id="4">&lt;/strong&gt;</ept> to <bpt id="6">&lt;strong&gt;</bpt>true<ept id="6">&lt;/strong&gt;</ept>.</source>
            <target state="new">If you are using the <bpt id="2">&lt;strong&gt;</bpt>Copy Activity<ept id="2">&lt;/strong&gt;</ept> to create/move the csv into the blob storage, you should set the sink property <bpt id="4">&lt;strong&gt;</bpt>blobWriterAddHeader<ept id="4">&lt;/strong&gt;</ept> to <bpt id="6">&lt;strong&gt;</bpt>true<ept id="6">&lt;/strong&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="134" xml:space="preserve">
            <source>For example:</source>
            <target state="new">For example:</target>
          </trans-unit>
          <trans-unit id="135" xml:space="preserve">
            <source>If the csv file does not have the header row, you may see the following error: **Error in Activity: Error reading string.</source>
            <target state="new">If the csv file does not have the header row, you may see the following error: **Error in Activity: Error reading string.</target>
          </trans-unit>
          <trans-unit id="136" xml:space="preserve">
            <source>Unexpected token: StartObject.</source>
            <target state="new">Unexpected token: StartObject.</target>
          </trans-unit>
          <trans-unit id="137" xml:space="preserve">
            <source>Path '', line 1, position 1**.</source>
            <target state="new">Path '', line 1, position 1**.</target>
          </trans-unit>
          <trans-unit id="138" xml:space="preserve">
            <source>Create the <bpt id="2">&lt;strong&gt;</bpt>output<ept id="2">&lt;/strong&gt;</ept> Azure Data Factory <bpt id="4">&lt;strong&gt;</bpt>table<ept id="4">&lt;/strong&gt;</ept>.</source>
            <target state="new">Create the <bpt id="2">&lt;strong&gt;</bpt>output<ept id="2">&lt;/strong&gt;</ept> Azure Data Factory <bpt id="4">&lt;strong&gt;</bpt>table<ept id="4">&lt;/strong&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="139" xml:space="preserve">
            <source>This example uses partitioning to create a unique output path for each slice execution.</source>
            <target state="new">This example uses partitioning to create a unique output path for each slice execution.</target>
          </trans-unit>
          <trans-unit id="140" xml:space="preserve">
            <source>Without this, the activity would overwrite the file.</source>
            <target state="new">Without this, the activity would overwrite the file.</target>
          </trans-unit>
          <trans-unit id="141" xml:space="preserve">
            <source>Create a <bpt id="2">&lt;strong&gt;</bpt>linked service<ept id="2">&lt;/strong&gt;</ept> of type: <bpt id="4">&lt;strong&gt;</bpt>AzureMLLinkedService<ept id="4">&lt;/strong&gt;</ept>, providing the API key and model batch scoring URL.</source>
            <target state="new">Create a <bpt id="2">&lt;strong&gt;</bpt>linked service<ept id="2">&lt;/strong&gt;</ept> of type: <bpt id="4">&lt;strong&gt;</bpt>AzureMLLinkedService<ept id="4">&lt;/strong&gt;</ept>, providing the API key and model batch scoring URL.</target>
          </trans-unit>
          <trans-unit id="142" xml:space="preserve">
            <source>Finally, author a pipeline containing an <bpt id="2">&lt;strong&gt;</bpt>AzureMLBatchScoringActivity<ept id="2">&lt;/strong&gt;</ept>.</source>
            <target state="new">Finally, author a pipeline containing an <bpt id="2">&lt;strong&gt;</bpt>AzureMLBatchScoringActivity<ept id="2">&lt;/strong&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="143" xml:space="preserve">
            <source>It will get the location of the input file from your input tables, call the AzureML batch scoring API, and copy the batch scoring output to the blob given in your output table.</source>
            <target state="new">It will get the location of the input file from your input tables, call the AzureML batch scoring API, and copy the batch scoring output to the blob given in your output table.</target>
          </trans-unit>
          <trans-unit id="144" xml:space="preserve">
            <source>Unlike some other Data Factory activities, AzureMLBatchScoringActivity can have only one input and one output table.</source>
            <target state="new">Unlike some other Data Factory activities, AzureMLBatchScoringActivity can have only one input and one output table.</target>
          </trans-unit>
          <trans-unit id="145" xml:space="preserve">
            <source>Web Service Parameters</source>
            <target state="new">Web Service Parameters</target>
          </trans-unit>
          <trans-unit id="146" xml:space="preserve">
            <source>You can use Web service parameters that are exposed by a published Azure Machine Learning Web service in Azure Data Factory (ADF) pipelines.</source>
            <target state="new">You can use Web service parameters that are exposed by a published Azure Machine Learning Web service in Azure Data Factory (ADF) pipelines.</target>
          </trans-unit>
          <trans-unit id="147" xml:space="preserve">
            <source>You can create an experiment in Azure Machine Learning and publish it as a web service, and then use that web service in multiple ADF pipelines or activities, passing in different inputs via the Web Service Parameters.</source>
            <target state="new">You can create an experiment in Azure Machine Learning and publish it as a web service, and then use that web service in multiple ADF pipelines or activities, passing in different inputs via the Web Service Parameters.</target>
          </trans-unit>
          <trans-unit id="148" xml:space="preserve">
            <source>Passing values for Web service parameters</source>
            <target state="new">Passing values for Web service parameters</target>
          </trans-unit>
          <trans-unit id="149" xml:space="preserve">
            <source>Add a <bpt id="2">&lt;strong&gt;</bpt>typeProperties<ept id="2">&lt;/strong&gt;</ept> section to the <bpt id="4">&lt;strong&gt;</bpt>AzureMLBatchScoringActivty<ept id="4">&lt;/strong&gt;</ept> section in the pipeline JSON to specify values for Web service parameters in that section as shown in the following example:</source>
            <target state="new">Add a <bpt id="2">&lt;strong&gt;</bpt>typeProperties<ept id="2">&lt;/strong&gt;</ept> section to the <bpt id="4">&lt;strong&gt;</bpt>AzureMLBatchScoringActivty<ept id="4">&lt;/strong&gt;</ept> section in the pipeline JSON to specify values for Web service parameters in that section as shown in the following example:</target>
          </trans-unit>
          <trans-unit id="150" xml:space="preserve">
            <source>You can also use <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Data Factory Functions<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> in passing values for the Web service parameters as shown in the following example:</source>
            <target state="new">You can also use <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Data Factory Functions<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> in passing values for the Web service parameters as shown in the following example:</target>
          </trans-unit>
          <trans-unit id="151" xml:space="preserve">
            <source>The Web service parameters are case-sensitive, so ensure that the names you specify in the activity JSON match the ones exposed by the Web service.</source>
            <target state="new">The Web service parameters are case-sensitive, so ensure that the names you specify in the activity JSON match the ones exposed by the Web service.</target>
          </trans-unit>
          <trans-unit id="152" xml:space="preserve">
            <source>Reader and Writer Modules</source>
            <target state="new">Reader and Writer Modules</target>
          </trans-unit>
          <trans-unit id="153" xml:space="preserve">
            <source>A common scenario for using Web service parameters is the use of Azure SQL Readers and Writers.</source>
            <target state="new">A common scenario for using Web service parameters is the use of Azure SQL Readers and Writers.</target>
          </trans-unit>
          <trans-unit id="154" xml:space="preserve">
            <source>The reader module is used to load data into an experiment from data management services outside Azure Machine Learning Studio and the writer module is to save data from your experiments into data management services outside Azure Machine Learning Studio.</source>
            <target state="new">The reader module is used to load data into an experiment from data management services outside Azure Machine Learning Studio and the writer module is to save data from your experiments into data management services outside Azure Machine Learning Studio.</target>
          </trans-unit>
          <trans-unit id="155" xml:space="preserve">
            <source>For details about Azure Blob/Azure SQL reader/writer, see <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Reader<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> and <bpt id="4CapsExtId1">&lt;link&gt;</bpt><bpt id="4CapsExtId2">&lt;linkText&gt;</bpt>Writer<ept id="4CapsExtId2">&lt;/linkText&gt;</ept><bpt id="4CapsExtId3">&lt;title&gt;</bpt><ept id="4CapsExtId3">&lt;/title&gt;</ept><ept id="4CapsExtId1">&lt;/link&gt;</ept> topics on MSDN Library.</source>
            <target state="new">For details about Azure Blob/Azure SQL reader/writer, see <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Reader<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> and <bpt id="4CapsExtId1">&lt;link&gt;</bpt><bpt id="4CapsExtId2">&lt;linkText&gt;</bpt>Writer<ept id="4CapsExtId2">&lt;/linkText&gt;</ept><bpt id="4CapsExtId3">&lt;title&gt;</bpt><ept id="4CapsExtId3">&lt;/title&gt;</ept><ept id="4CapsExtId1">&lt;/link&gt;</ept> topics on MSDN Library.</target>
          </trans-unit>
          <trans-unit id="156" xml:space="preserve">
            <source>The example in the previous section used the Azure Blob reader and Azure Blob writer.</source>
            <target state="new">The example in the previous section used the Azure Blob reader and Azure Blob writer.</target>
          </trans-unit>
          <trans-unit id="157" xml:space="preserve">
            <source>This section discusses using Azure SQL reader and Azure SQL writer.</source>
            <target state="new">This section discusses using Azure SQL reader and Azure SQL writer.</target>
          </trans-unit>
          <trans-unit id="158" xml:space="preserve">
            <source>Azure SQL as a data source</source>
            <target state="new">Azure SQL as a data source</target>
          </trans-unit>
          <trans-unit id="159" xml:space="preserve">
            <source>In Azure ML Studio, you can build an experiment and publish a Web service with an Azure SQL Reader for the input.</source>
            <target state="new">In Azure ML Studio, you can build an experiment and publish a Web service with an Azure SQL Reader for the input.</target>
          </trans-unit>
          <trans-unit id="160" xml:space="preserve">
            <source>The Azure SQL Reader has connection properties that can be exposed as Web service parameters, allowing values for the connection properties to be passed at runtime in the batch scoring request.</source>
            <target state="new">The Azure SQL Reader has connection properties that can be exposed as Web service parameters, allowing values for the connection properties to be passed at runtime in the batch scoring request.</target>
          </trans-unit>
          <trans-unit id="161" xml:space="preserve">
            <source>At runtime, the details from the input Data Factory table will be used by the Data Factory service to fill in the Web service parameters.</source>
            <target state="new">At runtime, the details from the input Data Factory table will be used by the Data Factory service to fill in the Web service parameters.</target>
          </trans-unit>
          <trans-unit id="162" xml:space="preserve">
            <source>Note that you must use default names (Database server name, Database name, Server user account name, Server user account password) for the Web service parameters for this integration with the Data Factory service to work.</source>
            <target state="new">Note that you must use default names (Database server name, Database name, Server user account name, Server user account password) for the Web service parameters for this integration with the Data Factory service to work.</target>
          </trans-unit>
          <trans-unit id="163" xml:space="preserve">
            <source>If you have any additional Web service parameters, use the <bpt id="2">&lt;strong&gt;</bpt>webServiceParameters<ept id="2">&lt;/strong&gt;</ept> section of the activity JSON.</source>
            <target state="new">If you have any additional Web service parameters, use the <bpt id="2">&lt;strong&gt;</bpt>webServiceParameters<ept id="2">&lt;/strong&gt;</ept> section of the activity JSON.</target>
          </trans-unit>
          <trans-unit id="164" xml:space="preserve">
            <source>If you specify values for Azure SQL Reader parameters in this section, the values will override the values picked up from the input Azure SQL linked service.</source>
            <target state="new">If you specify values for Azure SQL Reader parameters in this section, the values will override the values picked up from the input Azure SQL linked service.</target>
          </trans-unit>
          <trans-unit id="165" xml:space="preserve">
            <source>We do not recommend you specify values for Azure SQL Reader directly in the webServiceParameters section.</source>
            <target state="new">We do not recommend you specify values for Azure SQL Reader directly in the webServiceParameters section.</target>
          </trans-unit>
          <trans-unit id="166" xml:space="preserve">
            <source>Use the section to pass values for any additional parameters.</source>
            <target state="new">Use the section to pass values for any additional parameters.</target>
          </trans-unit>
          <trans-unit id="167" xml:space="preserve">
            <source>To use an Azure SQL Reader via an Azure Data Factory pipeline, do the following:</source>
            <target state="new">To use an Azure SQL Reader via an Azure Data Factory pipeline, do the following:</target>
          </trans-unit>
          <trans-unit id="168" xml:space="preserve">
            <source>Create an <bpt id="2">&lt;strong&gt;</bpt>Azure SQL linked service<ept id="2">&lt;/strong&gt;</ept>.</source>
            <target state="new">Create an <bpt id="2">&lt;strong&gt;</bpt>Azure SQL linked service<ept id="2">&lt;/strong&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="169" xml:space="preserve">
            <source>Create a Data Factory <bpt id="2">&lt;strong&gt;</bpt>table<ept id="2">&lt;/strong&gt;</ept> that uses <bpt id="4">&lt;strong&gt;</bpt>AzureSqlTable<ept id="4">&lt;/strong&gt;</ept>.</source>
            <target state="new">Create a Data Factory <bpt id="2">&lt;strong&gt;</bpt>table<ept id="2">&lt;/strong&gt;</ept> that uses <bpt id="4">&lt;strong&gt;</bpt>AzureSqlTable<ept id="4">&lt;/strong&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="170" xml:space="preserve">
            <source>Set that Data Factory <bpt id="2">&lt;strong&gt;</bpt>table<ept id="2">&lt;/strong&gt;</ept> as the <bpt id="4">&lt;strong&gt;</bpt>input<ept id="4">&lt;/strong&gt;</ept> for the <bpt id="6">&lt;strong&gt;</bpt>AzureMLBatchScoringActivity<ept id="6">&lt;/strong&gt;</ept> in the pipeline JSON.</source>
            <target state="new">Set that Data Factory <bpt id="2">&lt;strong&gt;</bpt>table<ept id="2">&lt;/strong&gt;</ept> as the <bpt id="4">&lt;strong&gt;</bpt>input<ept id="4">&lt;/strong&gt;</ept> for the <bpt id="6">&lt;strong&gt;</bpt>AzureMLBatchScoringActivity<ept id="6">&lt;/strong&gt;</ept> in the pipeline JSON.</target>
          </trans-unit>
          <trans-unit id="171" xml:space="preserve">
            <source>Azure SQL as a data sink</source>
            <target state="new">Azure SQL as a data sink</target>
          </trans-unit>
          <trans-unit id="172" xml:space="preserve">
            <source>As with Azure SQL Reader, an Azure SQL Writer can also have its properties exposed as Web service parameters.</source>
            <target state="new">As with Azure SQL Reader, an Azure SQL Writer can also have its properties exposed as Web service parameters.</target>
          </trans-unit>
          <trans-unit id="173" xml:space="preserve">
            <source>An Azure SQL Writer uses settings from either the linked service associated with the input table or the output table.</source>
            <target state="new">An Azure SQL Writer uses settings from either the linked service associated with the input table or the output table.</target>
          </trans-unit>
          <trans-unit id="174" xml:space="preserve">
            <source>The following table describes when the input linked service is used vs. output linked service.</source>
            <target state="new">The following table describes when the input linked service is used vs. output linked service.</target>
          </trans-unit>
          <trans-unit id="175" xml:space="preserve">
            <source>Output/Input</source>
            <target state="new">Output/Input</target>
          </trans-unit>
          <trans-unit id="176" xml:space="preserve">
            <source>Input is Azure SQL</source>
            <target state="new">Input is Azure SQL</target>
          </trans-unit>
          <trans-unit id="177" xml:space="preserve">
            <source>Input is Azure Blob</source>
            <target state="new">Input is Azure Blob</target>
          </trans-unit>
          <trans-unit id="178" xml:space="preserve">
            <source>Output is Azure SQL</source>
            <target state="new">Output is Azure SQL</target>
          </trans-unit>
          <trans-unit id="179" xml:space="preserve">
            <source><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept>The Data Factory service uses the connection string information from the INPUT linked service to generate the web service parameters with names: "Database server name", "Database name", "Server user account name", "Server user account password".Note that you must use these default names for Web service parameters in Azure ML Studio.<bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept><bpt id="4">&lt;html&gt;</bpt><ept id="4">&lt;/html&gt;</ept>If the Azure SQL Reader and Azure SQL Writer in your Azure ML model share the same Web service parameters mentioned above, you are fine.If they do not share same Web service paramers, for example, if the Azure SQL Writer uses parameters names: Database server name1, Database name1, Server user account name1, Server user account password1 (with '1' at the end), you must pass values for these OUTPUT web service parameters in the webServiceParameters section of activity JSON.<bpt id="6">&lt;html&gt;</bpt><ept id="6">&lt;/html&gt;</ept><bpt id="7">&lt;html&gt;</bpt><ept id="7">&lt;/html&gt;</ept>You can pass values for any other Web service parameters using the webServiceParameters section of activity JSON.<bpt id="9">&lt;html&gt;</bpt><ept id="9">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept>The Data Factory service uses the connection string information from the INPUT linked service to generate the web service parameters with names: "Database server name", "Database name", "Server user account name", "Server user account password".Note that you must use these default names for Web service parameters in Azure ML Studio.<bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept><bpt id="4">&lt;html&gt;</bpt><ept id="4">&lt;/html&gt;</ept>If the Azure SQL Reader and Azure SQL Writer in your Azure ML model share the same Web service parameters mentioned above, you are fine.If they do not share same Web service paramers, for example, if the Azure SQL Writer uses parameters names: Database server name1, Database name1, Server user account name1, Server user account password1 (with '1' at the end), you must pass values for these OUTPUT web service parameters in the webServiceParameters section of activity JSON.<bpt id="6">&lt;html&gt;</bpt><ept id="6">&lt;/html&gt;</ept><bpt id="7">&lt;html&gt;</bpt><ept id="7">&lt;/html&gt;</ept>You can pass values for any other Web service parameters using the webServiceParameters section of activity JSON.<bpt id="9">&lt;html&gt;</bpt><ept id="9">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="180" xml:space="preserve">
            <source><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept>The Data Factory service uses the connection string information from the OUTPUT linked service to generate the web service parameters with names: "Database server name", "Database name", "Server user account name", "Server user account password". Note that you must use these default names for Web service parameters in Azure ML Studio.<bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept><bpt id="4">&lt;html&gt;</bpt><ept id="4">&lt;/html&gt;</ept>You can pass values for any other Web service parameters using the webServiceParameters section of activity JSON . <bpt id="6">&lt;html&gt;</bpt><ept id="6">&lt;/html&gt;</ept>Input blob will be used as input location.<bpt id="8">&lt;html&gt;</bpt><ept id="8">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept>The Data Factory service uses the connection string information from the OUTPUT linked service to generate the web service parameters with names: "Database server name", "Database name", "Server user account name", "Server user account password". Note that you must use these default names for Web service parameters in Azure ML Studio.<bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept><bpt id="4">&lt;html&gt;</bpt><ept id="4">&lt;/html&gt;</ept>You can pass values for any other Web service parameters using the webServiceParameters section of activity JSON . <bpt id="6">&lt;html&gt;</bpt><ept id="6">&lt;/html&gt;</ept>Input blob will be used as input location.<bpt id="8">&lt;html&gt;</bpt><ept id="8">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="181" xml:space="preserve">
            <source>Output is Azure Blob</source>
            <target state="new">Output is Azure Blob</target>
          </trans-unit>
          <trans-unit id="182" xml:space="preserve">
            <source>The Data Factory service uses the connection string information from the INPUT linked service to generate the web service parameters with names: "Database server name", "Database name", "Server user account name", "Server user account password".</source>
            <target state="new">The Data Factory service uses the connection string information from the INPUT linked service to generate the web service parameters with names: "Database server name", "Database name", "Server user account name", "Server user account password".</target>
          </trans-unit>
          <trans-unit id="183" xml:space="preserve">
            <source>Note that you must use these default names for Web service parameters in Azure ML Studio.</source>
            <target state="new">Note that you must use these default names for Web service parameters in Azure ML Studio.</target>
          </trans-unit>
          <trans-unit id="184" xml:space="preserve">
            <source><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept>You must pass values for any Web service parameters using the WebServiceParameters section of activity JSON.<bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept><bpt id="4">&lt;html&gt;</bpt><ept id="4">&lt;/html&gt;</ept>Blobs will be used as input and output locations.<bpt id="6">&lt;html&gt;</bpt><ept id="6">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept>You must pass values for any Web service parameters using the WebServiceParameters section of activity JSON.<bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept><bpt id="4">&lt;html&gt;</bpt><ept id="4">&lt;/html&gt;</ept>Blobs will be used as input and output locations.<bpt id="6">&lt;html&gt;</bpt><ept id="6">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="185" xml:space="preserve">
            <source>Azure SQL Writer may encounter key violations if it is overwriting an identity column.</source>
            <target state="new">Azure SQL Writer may encounter key violations if it is overwriting an identity column.</target>
          </trans-unit>
          <trans-unit id="186" xml:space="preserve">
            <source>You should ensure that you structure your output table to avoid this situation.</source>
            <target state="new">You should ensure that you structure your output table to avoid this situation.</target>
          </trans-unit>
          <trans-unit id="187" xml:space="preserve">
            <source>You can use staging tables with a Stored Procedure Activity to merge rows, or to truncate the data before scoring.</source>
            <target state="new">You can use staging tables with a Stored Procedure Activity to merge rows, or to truncate the data before scoring.</target>
          </trans-unit>
          <trans-unit id="188" xml:space="preserve">
            <source>If you use this approach, set concurrency setting of the executionPolicy to 1.</source>
            <target state="new">If you use this approach, set concurrency setting of the executionPolicy to 1.</target>
          </trans-unit>
          <trans-unit id="189" xml:space="preserve">
            <source>Azure Blob as a source</source>
            <target state="new">Azure Blob as a source</target>
          </trans-unit>
          <trans-unit id="190" xml:space="preserve">
            <source>When using the Reader module in an Azure Machine Learning experiment, you can specify Azure Blob as an input.</source>
            <target state="new">When using the Reader module in an Azure Machine Learning experiment, you can specify Azure Blob as an input.</target>
          </trans-unit>
          <trans-unit id="191" xml:space="preserve">
            <source>The files in the Azure blob storage can be the output files (e.g. 000000_0) that are produced by a Pig and Hive script running on HDInsight.</source>
            <target state="new">The files in the Azure blob storage can be the output files (e.g. 000000_0) that are produced by a Pig and Hive script running on HDInsight.</target>
          </trans-unit>
          <trans-unit id="192" xml:space="preserve">
            <source>The Reader module allows you to read files (with no extensions) by configuring the <bpt id="2">&lt;strong&gt;</bpt>Path to container, directory or blob<ept id="2">&lt;/strong&gt;</ept> property of the reader module to point to the container/folder that contains the files as shown below.</source>
            <target state="new">The Reader module allows you to read files (with no extensions) by configuring the <bpt id="2">&lt;strong&gt;</bpt>Path to container, directory or blob<ept id="2">&lt;/strong&gt;</ept> property of the reader module to point to the container/folder that contains the files as shown below.</target>
          </trans-unit>
          <trans-unit id="193" xml:space="preserve">
            <source>Note, the asterisk (i.e. \*) <bpt id="2">&lt;strong&gt;</bpt>specifies that all the files in the container/folder (i.e. data/aggregateddata/year=2014/month-6/\*)<ept id="2">&lt;/strong&gt;</ept> will be read as part of the experiment.</source>
            <target state="new">Note, the asterisk (i.e. \*) <bpt id="2">&lt;strong&gt;</bpt>specifies that all the files in the container/folder (i.e. data/aggregateddata/year=2014/month-6/\*)<ept id="2">&lt;/strong&gt;</ept> will be read as part of the experiment.</target>
          </trans-unit>
          <trans-unit id="194" xml:space="preserve">
            <source><bpt id="1">&lt;linkText&gt;</bpt>Azure Blob properties<ept id="1">&lt;/linkText&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;linkText&gt;</bpt>Azure Blob properties<ept id="1">&lt;/linkText&gt;</ept></target>
          </trans-unit>
          <trans-unit id="195" xml:space="preserve">
            <source>Example of using Web service parameters</source>
            <target state="new">Example of using Web service parameters</target>
          </trans-unit>
          <trans-unit id="196" xml:space="preserve">
            <source>Pipeline with AzureMLBatchScoringActivity with Web Service Parameters</source>
            <target state="new">Pipeline with AzureMLBatchScoringActivity with Web Service Parameters</target>
          </trans-unit>
          <trans-unit id="197" xml:space="preserve">
            <source>In the above JSON example:</source>
            <target state="new">In the above JSON example:</target>
          </trans-unit>
          <trans-unit id="198" xml:space="preserve">
            <source>The Azure ML model uses both Azure SQL Reader and Azure SQL Writer</source>
            <target state="new">The Azure ML model uses both Azure SQL Reader and Azure SQL Writer</target>
          </trans-unit>
          <trans-unit id="199" xml:space="preserve">
            <source>When exposed via Web service, the default names are used for the parameters</source>
            <target state="new">When exposed via Web service, the default names are used for the parameters</target>
          </trans-unit>
          <trans-unit id="200" xml:space="preserve">
            <source>For the <bpt id="2">&lt;strong&gt;</bpt>reader<ept id="2">&lt;/strong&gt;</ept>: Database server name, Database name, Server user account name, and Server user account password.</source>
            <target state="new">For the <bpt id="2">&lt;strong&gt;</bpt>reader<ept id="2">&lt;/strong&gt;</ept>: Database server name, Database name, Server user account name, and Server user account password.</target>
          </trans-unit>
          <trans-unit id="201" xml:space="preserve">
            <source>For the <bpt id="2">&lt;strong&gt;</bpt>writer<ept id="2">&lt;/strong&gt;</ept>: Database server name1, Database name1, Server user account name1, and Server user account password1.</source>
            <target state="new">For the <bpt id="2">&lt;strong&gt;</bpt>writer<ept id="2">&lt;/strong&gt;</ept>: Database server name1, Database name1, Server user account name1, and Server user account password1.</target>
          </trans-unit>
          <trans-unit id="202" xml:space="preserve">
            <source>The Data Factory service automatically generates values for Web service parameters with the names <bpt id="2">&lt;strong&gt;</bpt>Database server name<ept id="2">&lt;/strong&gt;</ept>, <bpt id="4">&lt;strong&gt;</bpt>Database name<ept id="4">&lt;/strong&gt;</ept>, <bpt id="6">&lt;strong&gt;</bpt>Server user account name<ept id="6">&lt;/strong&gt;</ept>, and <bpt id="8">&lt;strong&gt;</bpt>Server user account password<ept id="8">&lt;/strong&gt;</ept>, which match the names of the input reader.</source>
            <target state="new">The Data Factory service automatically generates values for Web service parameters with the names <bpt id="2">&lt;strong&gt;</bpt>Database server name<ept id="2">&lt;/strong&gt;</ept>, <bpt id="4">&lt;strong&gt;</bpt>Database name<ept id="4">&lt;/strong&gt;</ept>, <bpt id="6">&lt;strong&gt;</bpt>Server user account name<ept id="6">&lt;/strong&gt;</ept>, and <bpt id="8">&lt;strong&gt;</bpt>Server user account password<ept id="8">&lt;/strong&gt;</ept>, which match the names of the input reader.</target>
          </trans-unit>
          <trans-unit id="203" xml:space="preserve">
            <source>Therefore, you do not need to explicitly pass the values for these parameters via <bpt id="2">&lt;strong&gt;</bpt>webServiceParameters<ept id="2">&lt;/strong&gt;</ept> in the activity JSON below.</source>
            <target state="new">Therefore, you do not need to explicitly pass the values for these parameters via <bpt id="2">&lt;strong&gt;</bpt>webServiceParameters<ept id="2">&lt;/strong&gt;</ept> in the activity JSON below.</target>
          </trans-unit>
          <trans-unit id="204" xml:space="preserve">
            <source>The parameters for writer (the ones with '1' suffix) are not automatically filled in by the Data Factory service.</source>
            <target state="new">The parameters for writer (the ones with '1' suffix) are not automatically filled in by the Data Factory service.</target>
          </trans-unit>
          <trans-unit id="205" xml:space="preserve">
            <source>Therefore, you need to specify values for these parameters in the <bpt id="2">&lt;strong&gt;</bpt>webServiceParameters<ept id="2">&lt;/strong&gt;</ept> section of the activity JSON.</source>
            <target state="new">Therefore, you need to specify values for these parameters in the <bpt id="2">&lt;strong&gt;</bpt>webServiceParameters<ept id="2">&lt;/strong&gt;</ept> section of the activity JSON.</target>
          </trans-unit>
          <trans-unit id="206" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Customer ID<ept id="1">&lt;/strong&gt;</ept>, <bpt id="3">&lt;strong&gt;</bpt>scored labels<ept id="3">&lt;/strong&gt;</ept>, and <bpt id="5">&lt;strong&gt;</bpt>scored probabilities<ept id="5">&lt;/strong&gt;</ept> are saved as comma separated columns.</source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Customer ID<ept id="1">&lt;/strong&gt;</ept>, <bpt id="3">&lt;strong&gt;</bpt>scored labels<ept id="3">&lt;/strong&gt;</ept>, and <bpt id="5">&lt;strong&gt;</bpt>scored probabilities<ept id="5">&lt;/strong&gt;</ept> are saved as comma separated columns.</target>
          </trans-unit>
          <trans-unit id="207" xml:space="preserve">
            <source>The <bpt id="2">&lt;strong&gt;</bpt>Data table name<ept id="2">&lt;/strong&gt;</ept> in this example corresponds to a table in the output database.</source>
            <target state="new">The <bpt id="2">&lt;strong&gt;</bpt>Data table name<ept id="2">&lt;/strong&gt;</ept> in this example corresponds to a table in the output database.</target>
          </trans-unit>
          <trans-unit id="208" xml:space="preserve">
            <source>Both <bpt id="2">&lt;strong&gt;</bpt>start<ept id="2">&lt;/strong&gt;</ept> and <bpt id="4">&lt;strong&gt;</bpt>end<ept id="4">&lt;/strong&gt;</ept> datetimes must be in <bpt id="6CapsExtId1">&lt;link&gt;</bpt><bpt id="6CapsExtId2">&lt;linkText&gt;</bpt>ISO format<ept id="6CapsExtId2">&lt;/linkText&gt;</ept><bpt id="6CapsExtId3">&lt;title&gt;</bpt><ept id="6CapsExtId3">&lt;/title&gt;</ept><ept id="6CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">Both <bpt id="2">&lt;strong&gt;</bpt>start<ept id="2">&lt;/strong&gt;</ept> and <bpt id="4">&lt;strong&gt;</bpt>end<ept id="4">&lt;/strong&gt;</ept> datetimes must be in <bpt id="6CapsExtId1">&lt;link&gt;</bpt><bpt id="6CapsExtId2">&lt;linkText&gt;</bpt>ISO format<ept id="6CapsExtId2">&lt;/linkText&gt;</ept><bpt id="6CapsExtId3">&lt;title&gt;</bpt><ept id="6CapsExtId3">&lt;/title&gt;</ept><ept id="6CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="209" xml:space="preserve">
            <source>For example: 2014-10-14T16:32:41Z.</source>
            <target state="new">For example: 2014-10-14T16:32:41Z.</target>
          </trans-unit>
          <trans-unit id="210" xml:space="preserve">
            <source>The <bpt id="2">&lt;strong&gt;</bpt>end<ept id="2">&lt;/strong&gt;</ept> time is optional.</source>
            <target state="new">The <bpt id="2">&lt;strong&gt;</bpt>end<ept id="2">&lt;/strong&gt;</ept> time is optional.</target>
          </trans-unit>
          <trans-unit id="211" xml:space="preserve">
            <source>If you do not specify value for the <bpt id="2">&lt;strong&gt;</bpt>end<ept id="2">&lt;/strong&gt;</ept> property, it is calculated as "<bpt id="4">&lt;strong&gt;</bpt>start + 48 hours<ept id="4">&lt;/strong&gt;</ept>".</source>
            <target state="new">If you do not specify value for the <bpt id="2">&lt;strong&gt;</bpt>end<ept id="2">&lt;/strong&gt;</ept> property, it is calculated as "<bpt id="4">&lt;strong&gt;</bpt>start + 48 hours<ept id="4">&lt;/strong&gt;</ept>".</target>
          </trans-unit>
          <trans-unit id="212" xml:space="preserve">
            <source>To run the pipeline indefinitely, specify <bpt id="2">&lt;strong&gt;</bpt>9999-09-09<ept id="2">&lt;/strong&gt;</ept> as the value for the <bpt id="4">&lt;strong&gt;</bpt>end<ept id="4">&lt;/strong&gt;</ept> property.</source>
            <target state="new">To run the pipeline indefinitely, specify <bpt id="2">&lt;strong&gt;</bpt>9999-09-09<ept id="2">&lt;/strong&gt;</ept> as the value for the <bpt id="4">&lt;strong&gt;</bpt>end<ept id="4">&lt;/strong&gt;</ept> property.</target>
          </trans-unit>
          <trans-unit id="213" xml:space="preserve">
            <source>See <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>JSON Scripting Reference<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> for details about JSON properties.</source>
            <target state="new">See <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>JSON Scripting Reference<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> for details about JSON properties.</target>
          </trans-unit>
          <trans-unit id="214" xml:space="preserve">
            <source>test</source>
            <target state="new">test</target>
          </trans-unit>
        </group>
      </group>
    </body>
  </file>
</xliff>