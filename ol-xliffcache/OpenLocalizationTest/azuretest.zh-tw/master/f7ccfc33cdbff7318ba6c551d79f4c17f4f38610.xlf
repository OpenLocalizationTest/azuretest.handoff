<?xml version="1.0" encoding="utf-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" source-language="en-us" target-language="zh-tw" original="2/21/2016 7:35:45 PM" tool-id="MarkdownTransformer" product-name="N/A" product-version="N/A" build-num="1">
    <header>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f7ccfc33cdbff7318ba6c551d79f4c17f4f38610</xliffext:olfilehash>
      <tool tool-id="MarkdownTransformer" tool-name="MarkdownToXliff" tool-version="1.0" tool-company="Microsoft" />
    </header>
    <body>
      <group extype="content">
        <group id="101">
          <trans-unit id="101" xml:space="preserve">
            <source>Authoring Azure Resource Manager Templates</source>
            <target state="new">Authoring Azure Resource Manager Templates</target>
          </trans-unit>
          <trans-unit id="102" xml:space="preserve">
            <source>Create Azure Resource Manager templates using declarative JSON syntax to deploy applications to Azure.</source>
            <target state="new">Create Azure Resource Manager templates using declarative JSON syntax to deploy applications to Azure.</target>
          </trans-unit>
          <trans-unit id="103" xml:space="preserve">
            <source>Authoring Azure Resource Manager templates</source>
            <target state="new">Authoring Azure Resource Manager templates</target>
          </trans-unit>
          <trans-unit id="104" xml:space="preserve">
            <source>Azure applications typically require a combination of resources (such as a database server, database, or website) to meet the desired goals.</source>
            <target state="new">Azure applications typically require a combination of resources (such as a database server, database, or website) to meet the desired goals.</target>
          </trans-unit>
          <trans-unit id="105" xml:space="preserve">
            <source>Rather than deploying and managing each resource separately, you can create an Azure Resource Manager template that deploys and provisions all of the resources for your application in a single, coordinated operation.</source>
            <target state="new">Rather than deploying and managing each resource separately, you can create an Azure Resource Manager template that deploys and provisions all of the resources for your application in a single, coordinated operation.</target>
          </trans-unit>
          <trans-unit id="106" xml:space="preserve">
            <source>In the template, you define the resources that are needed for the application and specify deployment parameters to input values for different environments.</source>
            <target state="new">In the template, you define the resources that are needed for the application and specify deployment parameters to input values for different environments.</target>
          </trans-unit>
          <trans-unit id="107" xml:space="preserve">
            <source>The template consists of JSON and expressions which you can use to construct values for your deployment.</source>
            <target state="new">The template consists of JSON and expressions which you can use to construct values for your deployment.</target>
          </trans-unit>
          <trans-unit id="108" xml:space="preserve">
            <source>This topic describes the sections of the template.</source>
            <target state="new">This topic describes the sections of the template.</target>
          </trans-unit>
          <trans-unit id="109" xml:space="preserve">
            <source>For the actual schemas, see <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Azure Resource Manager Schemas<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">For the actual schemas, see <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Azure Resource Manager Schemas<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="110" xml:space="preserve">
            <source>You must limit the size your template to 1 MB, and each parameter file to 64 KB.</source>
            <target state="new">You must limit the size your template to 1 MB, and each parameter file to 64 KB.</target>
          </trans-unit>
          <trans-unit id="111" xml:space="preserve">
            <source>The 1 MB limit applies to the final state of the template after it has been expanded with iterative resource definitions, and values for variables and parameters.</source>
            <target state="new">The 1 MB limit applies to the final state of the template after it has been expanded with iterative resource definitions, and values for variables and parameters.</target>
          </trans-unit>
          <trans-unit id="112" xml:space="preserve">
            <source>Template format</source>
            <target state="new">Template format</target>
          </trans-unit>
          <trans-unit id="113" xml:space="preserve">
            <source>The following example shows the sections that make up the basic structure of a template.</source>
            <target state="new">The following example shows the sections that make up the basic structure of a template.</target>
          </trans-unit>
          <trans-unit id="114" xml:space="preserve">
            <source>Element name</source>
            <target state="new">Element name</target>
          </trans-unit>
          <trans-unit id="115" xml:space="preserve">
            <source>Required</source>
            <target state="new">Required</target>
          </trans-unit>
          <trans-unit id="116" xml:space="preserve">
            <source>Description</source>
            <target state="new">Description</target>
          </trans-unit>
          <trans-unit id="117" xml:space="preserve">
            <source>$schema</source>
            <target state="new">$schema</target>
          </trans-unit>
          <trans-unit id="118" xml:space="preserve">
            <source>Yes</source>
            <target state="new">Yes</target>
          </trans-unit>
          <trans-unit id="119" xml:space="preserve">
            <source>Location of the JSON schema file that describes the version of the template language.</source>
            <target state="new">Location of the JSON schema file that describes the version of the template language.</target>
          </trans-unit>
          <trans-unit id="120" xml:space="preserve">
            <source>contentVersion</source>
            <target state="new">contentVersion</target>
          </trans-unit>
          <trans-unit id="121" xml:space="preserve">
            <source>Yes</source>
            <target state="new">Yes</target>
          </trans-unit>
          <trans-unit id="122" xml:space="preserve">
            <source>Version of the template (such as 1.0.0.0).</source>
            <target state="new">Version of the template (such as 1.0.0.0).</target>
          </trans-unit>
          <trans-unit id="123" xml:space="preserve">
            <source>When deploying resources using the template, this value can be used to make sure that the right template is being used.</source>
            <target state="new">When deploying resources using the template, this value can be used to make sure that the right template is being used.</target>
          </trans-unit>
          <trans-unit id="124" xml:space="preserve">
            <source>parameters</source>
            <target state="new">parameters</target>
          </trans-unit>
          <trans-unit id="125" xml:space="preserve">
            <source>No</source>
            <target state="new">No</target>
          </trans-unit>
          <trans-unit id="126" xml:space="preserve">
            <source>Values that are provided when deployment is executed to customize resource deployment.</source>
            <target state="new">Values that are provided when deployment is executed to customize resource deployment.</target>
          </trans-unit>
          <trans-unit id="127" xml:space="preserve">
            <source>variables</source>
            <target state="new">variables</target>
          </trans-unit>
          <trans-unit id="128" xml:space="preserve">
            <source>No</source>
            <target state="new">No</target>
          </trans-unit>
          <trans-unit id="129" xml:space="preserve">
            <source>Values that are used as JSON fragments in the template to simplify template language expressions.</source>
            <target state="new">Values that are used as JSON fragments in the template to simplify template language expressions.</target>
          </trans-unit>
          <trans-unit id="130" xml:space="preserve">
            <source>resources</source>
            <target state="new">resources</target>
          </trans-unit>
          <trans-unit id="131" xml:space="preserve">
            <source>Yes</source>
            <target state="new">Yes</target>
          </trans-unit>
          <trans-unit id="132" xml:space="preserve">
            <source>Types of services that are deployed or updated in a resource group.</source>
            <target state="new">Types of services that are deployed or updated in a resource group.</target>
          </trans-unit>
          <trans-unit id="133" xml:space="preserve">
            <source>outputs</source>
            <target state="new">outputs</target>
          </trans-unit>
          <trans-unit id="134" xml:space="preserve">
            <source>No</source>
            <target state="new">No</target>
          </trans-unit>
          <trans-unit id="135" xml:space="preserve">
            <source>Values that are returned after deployment.</source>
            <target state="new">Values that are returned after deployment.</target>
          </trans-unit>
          <trans-unit id="136" xml:space="preserve">
            <source>We will examine the sections of the template in greater detail later in this topic.</source>
            <target state="new">We will examine the sections of the template in greater detail later in this topic.</target>
          </trans-unit>
          <trans-unit id="137" xml:space="preserve">
            <source>For now, we will review some of the syntax that makes up the template.</source>
            <target state="new">For now, we will review some of the syntax that makes up the template.</target>
          </trans-unit>
          <trans-unit id="138" xml:space="preserve">
            <source>Expressions and functions</source>
            <target state="new">Expressions and functions</target>
          </trans-unit>
          <trans-unit id="139" xml:space="preserve">
            <source>The basic syntax of the template is JSON; however, expressions and functions extend the JSON that is available in the template and enable you to create values that are not strict literal values.</source>
            <target state="new">The basic syntax of the template is JSON; however, expressions and functions extend the JSON that is available in the template and enable you to create values that are not strict literal values.</target>
          </trans-unit>
          <trans-unit id="140" xml:space="preserve">
            <source>Expressions are enclosed with brackets ([ and ]), and are evaluated when the template is deployed.</source>
            <target state="new">Expressions are enclosed with brackets ([ and ]), and are evaluated when the template is deployed.</target>
          </trans-unit>
          <trans-unit id="141" xml:space="preserve">
            <source>Expressions can appear anywhere in a JSON string value and always return another JSON value.</source>
            <target state="new">Expressions can appear anywhere in a JSON string value and always return another JSON value.</target>
          </trans-unit>
          <trans-unit id="142" xml:space="preserve">
            <source>If you need to use a literal string that starts with a bracket [, you must use two brackets [[.</source>
            <target state="new">If you need to use a literal string that starts with a bracket [, you must use two brackets [[.</target>
          </trans-unit>
          <trans-unit id="143" xml:space="preserve">
            <source>Typically, you use expressions with functions to perform operations for configuring the deployment.</source>
            <target state="new">Typically, you use expressions with functions to perform operations for configuring the deployment.</target>
          </trans-unit>
          <trans-unit id="144" xml:space="preserve">
            <source>Just like in JavaScript, function calls are formatted as <bpt id="2">&lt;strong&gt;</bpt>functionName(arg1,arg2,arg3)<ept id="2">&lt;/strong&gt;</ept>.</source>
            <target state="new">Just like in JavaScript, function calls are formatted as <bpt id="2">&lt;strong&gt;</bpt>functionName(arg1,arg2,arg3)<ept id="2">&lt;/strong&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="145" xml:space="preserve">
            <source>You reference properties by using the dot and [index] operators.</source>
            <target state="new">You reference properties by using the dot and [index] operators.</target>
          </trans-unit>
          <trans-unit id="146" xml:space="preserve">
            <source>The following list shows common functions.</source>
            <target state="new">The following list shows common functions.</target>
          </trans-unit>
          <trans-unit id="147" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>parameters(parameterName)<ept id="1">&lt;/strong&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>parameters(parameterName)<ept id="1">&lt;/strong&gt;</ept></target>
          </trans-unit>
          <trans-unit id="148" xml:space="preserve">
            <source>Returns a parameter value that is provided when the deployment is executed.</source>
            <target state="new">Returns a parameter value that is provided when the deployment is executed.</target>
          </trans-unit>
          <trans-unit id="149" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>variables(variableName)<ept id="1">&lt;/strong&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>variables(variableName)<ept id="1">&lt;/strong&gt;</ept></target>
          </trans-unit>
          <trans-unit id="150" xml:space="preserve">
            <source>Returns a variable that is defined in the template.</source>
            <target state="new">Returns a variable that is defined in the template.</target>
          </trans-unit>
          <trans-unit id="151" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>concat(arg1,arg2,arg3,...)<ept id="1">&lt;/strong&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>concat(arg1,arg2,arg3,...)<ept id="1">&lt;/strong&gt;</ept></target>
          </trans-unit>
          <trans-unit id="152" xml:space="preserve">
            <source>Combines multiple string values.</source>
            <target state="new">Combines multiple string values.</target>
          </trans-unit>
          <trans-unit id="153" xml:space="preserve">
            <source>This function can take any number of arguments.</source>
            <target state="new">This function can take any number of arguments.</target>
          </trans-unit>
          <trans-unit id="154" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>base64(inputString)<ept id="1">&lt;/strong&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>base64(inputString)<ept id="1">&lt;/strong&gt;</ept></target>
          </trans-unit>
          <trans-unit id="155" xml:space="preserve">
            <source>Returns the base64 representation of the input string.</source>
            <target state="new">Returns the base64 representation of the input string.</target>
          </trans-unit>
          <trans-unit id="156" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>resourceGroup()<ept id="1">&lt;/strong&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>resourceGroup()<ept id="1">&lt;/strong&gt;</ept></target>
          </trans-unit>
          <trans-unit id="157" xml:space="preserve">
            <source>Returns a structured object (with id, name, and location properties) that represents the current resource group.</source>
            <target state="new">Returns a structured object (with id, name, and location properties) that represents the current resource group.</target>
          </trans-unit>
          <trans-unit id="158" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>resourceId([resourceGroupName], resourceType, resourceName1, [resourceName2]...)<ept id="1">&lt;/strong&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>resourceId([resourceGroupName], resourceType, resourceName1, [resourceName2]...)<ept id="1">&lt;/strong&gt;</ept></target>
          </trans-unit>
          <trans-unit id="159" xml:space="preserve">
            <source>Returns the unique identifier of a resource.</source>
            <target state="new">Returns the unique identifier of a resource.</target>
          </trans-unit>
          <trans-unit id="160" xml:space="preserve">
            <source>Can be used to retrieve resource from another resource group.</source>
            <target state="new">Can be used to retrieve resource from another resource group.</target>
          </trans-unit>
          <trans-unit id="161" xml:space="preserve">
            <source>The following example shows how to use several of the functions when constructing values:</source>
            <target state="new">The following example shows how to use several of the functions when constructing values:</target>
          </trans-unit>
          <trans-unit id="162" xml:space="preserve">
            <source>For now, you know enough about expressions and functions to understand the sections of the template.</source>
            <target state="new">For now, you know enough about expressions and functions to understand the sections of the template.</target>
          </trans-unit>
          <trans-unit id="163" xml:space="preserve">
            <source>For more detailed information about all of the template functions, including parameters and the format of returned values,</source>
            <target state="new">For more detailed information about all of the template functions, including parameters and the format of returned values,</target>
          </trans-unit>
          <trans-unit id="164" xml:space="preserve">
            <source>see <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Azure Resource Manager template functions<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">see <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Azure Resource Manager template functions<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="165" xml:space="preserve">
            <source>Parameters</source>
            <target state="new">Parameters</target>
          </trans-unit>
          <trans-unit id="166" xml:space="preserve">
            <source>In the parameters section of the template, you specify which values a user can input when deploying the resources.</source>
            <target state="new">In the parameters section of the template, you specify which values a user can input when deploying the resources.</target>
          </trans-unit>
          <trans-unit id="167" xml:space="preserve">
            <source>You can use these parameter values throughout the template to set values for the deployed resources.</source>
            <target state="new">You can use these parameter values throughout the template to set values for the deployed resources.</target>
          </trans-unit>
          <trans-unit id="168" xml:space="preserve">
            <source>Only parameters that are declared in the parameters section can be used in other sections of the template.</source>
            <target state="new">Only parameters that are declared in the parameters section can be used in other sections of the template.</target>
          </trans-unit>
          <trans-unit id="169" xml:space="preserve">
            <source>Within parameters section, you cannot use a parameter value to construct another parameter value.</source>
            <target state="new">Within parameters section, you cannot use a parameter value to construct another parameter value.</target>
          </trans-unit>
          <trans-unit id="170" xml:space="preserve">
            <source>That type of operation typically happens in the variables section.</source>
            <target state="new">That type of operation typically happens in the variables section.</target>
          </trans-unit>
          <trans-unit id="171" xml:space="preserve">
            <source>You define parameters with the following structure:</source>
            <target state="new">You define parameters with the following structure:</target>
          </trans-unit>
          <trans-unit id="172" xml:space="preserve">
            <source>Element name</source>
            <target state="new">Element name</target>
          </trans-unit>
          <trans-unit id="173" xml:space="preserve">
            <source>Required</source>
            <target state="new">Required</target>
          </trans-unit>
          <trans-unit id="174" xml:space="preserve">
            <source>Description</source>
            <target state="new">Description</target>
          </trans-unit>
          <trans-unit id="175" xml:space="preserve">
            <source>parameterName</source>
            <target state="new">parameterName</target>
          </trans-unit>
          <trans-unit id="176" xml:space="preserve">
            <source>Yes</source>
            <target state="new">Yes</target>
          </trans-unit>
          <trans-unit id="177" xml:space="preserve">
            <source>Name of the parameter.</source>
            <target state="new">Name of the parameter.</target>
          </trans-unit>
          <trans-unit id="178" xml:space="preserve">
            <source>Must be a valid JavaScript identifier.</source>
            <target state="new">Must be a valid JavaScript identifier.</target>
          </trans-unit>
          <trans-unit id="179" xml:space="preserve">
            <source>type</source>
            <target state="new">type</target>
          </trans-unit>
          <trans-unit id="180" xml:space="preserve">
            <source>Yes</source>
            <target state="new">Yes</target>
          </trans-unit>
          <trans-unit id="181" xml:space="preserve">
            <source>Type of the parameter value.</source>
            <target state="new">Type of the parameter value.</target>
          </trans-unit>
          <trans-unit id="182" xml:space="preserve">
            <source>See the list below of allowed types.</source>
            <target state="new">See the list below of allowed types.</target>
          </trans-unit>
          <trans-unit id="183" xml:space="preserve">
            <source>defaultValue</source>
            <target state="new">defaultValue</target>
          </trans-unit>
          <trans-unit id="184" xml:space="preserve">
            <source>No</source>
            <target state="new">No</target>
          </trans-unit>
          <trans-unit id="185" xml:space="preserve">
            <source>Default value for the parameter, if no value is provided for the parameter.</source>
            <target state="new">Default value for the parameter, if no value is provided for the parameter.</target>
          </trans-unit>
          <trans-unit id="186" xml:space="preserve">
            <source>allowedValues</source>
            <target state="new">allowedValues</target>
          </trans-unit>
          <trans-unit id="187" xml:space="preserve">
            <source>No</source>
            <target state="new">No</target>
          </trans-unit>
          <trans-unit id="188" xml:space="preserve">
            <source>Array of allowed values for the parameter to make sure that the right value is provided.</source>
            <target state="new">Array of allowed values for the parameter to make sure that the right value is provided.</target>
          </trans-unit>
          <trans-unit id="189" xml:space="preserve">
            <source>The allowed types and values are:</source>
            <target state="new">The allowed types and values are:</target>
          </trans-unit>
          <trans-unit id="190" xml:space="preserve">
            <source>string or secureString - any valid JSON string</source>
            <target state="new">string or secureString - any valid JSON string</target>
          </trans-unit>
          <trans-unit id="191" xml:space="preserve">
            <source>int - any valid JSON integer</source>
            <target state="new">int - any valid JSON integer</target>
          </trans-unit>
          <trans-unit id="192" xml:space="preserve">
            <source>bool - any valid JSON boolean</source>
            <target state="new">bool - any valid JSON boolean</target>
          </trans-unit>
          <trans-unit id="193" xml:space="preserve">
            <source>object or secureObject - any valid JSON object</source>
            <target state="new">object or secureObject - any valid JSON object</target>
          </trans-unit>
          <trans-unit id="194" xml:space="preserve">
            <source>array - any valid JSON array</source>
            <target state="new">array - any valid JSON array</target>
          </trans-unit>
          <trans-unit id="195" xml:space="preserve">
            <source>All passwords, keys, and other secrets should use the <bpt id="2">&lt;strong&gt;</bpt>secureString<ept id="2">&lt;/strong&gt;</ept> type.</source>
            <target state="new">All passwords, keys, and other secrets should use the <bpt id="2">&lt;strong&gt;</bpt>secureString<ept id="2">&lt;/strong&gt;</ept> type.</target>
          </trans-unit>
          <trans-unit id="196" xml:space="preserve">
            <source>Template parameters with the secureString type cannot be read after resource deployment.</source>
            <target state="new">Template parameters with the secureString type cannot be read after resource deployment.</target>
          </trans-unit>
          <trans-unit id="197" xml:space="preserve">
            <source>The following example shows how to define parameters:</source>
            <target state="new">The following example shows how to define parameters:</target>
          </trans-unit>
          <trans-unit id="198" xml:space="preserve">
            <source>Variables</source>
            <target state="new">Variables</target>
          </trans-unit>
          <trans-unit id="199" xml:space="preserve">
            <source>In the variables section, you construct values that can be used to simplify template language expressions.</source>
            <target state="new">In the variables section, you construct values that can be used to simplify template language expressions.</target>
          </trans-unit>
          <trans-unit id="200" xml:space="preserve">
            <source>Typically, these variables will be based on values provided from the parameters.</source>
            <target state="new">Typically, these variables will be based on values provided from the parameters.</target>
          </trans-unit>
          <trans-unit id="201" xml:space="preserve">
            <source>The following example shows how to define a variable that is constructed from two parameter values:</source>
            <target state="new">The following example shows how to define a variable that is constructed from two parameter values:</target>
          </trans-unit>
          <trans-unit id="202" xml:space="preserve">
            <source>The next example shows a variable that is a complex JSON type, and variables that are constructed from other variables:</source>
            <target state="new">The next example shows a variable that is a complex JSON type, and variables that are constructed from other variables:</target>
          </trans-unit>
          <trans-unit id="203" xml:space="preserve">
            <source>Resources</source>
            <target state="new">Resources</target>
          </trans-unit>
          <trans-unit id="204" xml:space="preserve">
            <source>In the resources section, you define the resources are deployed or updated.</source>
            <target state="new">In the resources section, you define the resources are deployed or updated.</target>
          </trans-unit>
          <trans-unit id="205" xml:space="preserve">
            <source>You define resources with the following structure:</source>
            <target state="new">You define resources with the following structure:</target>
          </trans-unit>
          <trans-unit id="206" xml:space="preserve">
            <source>Element name</source>
            <target state="new">Element name</target>
          </trans-unit>
          <trans-unit id="207" xml:space="preserve">
            <source>Required</source>
            <target state="new">Required</target>
          </trans-unit>
          <trans-unit id="208" xml:space="preserve">
            <source>Description</source>
            <target state="new">Description</target>
          </trans-unit>
          <trans-unit id="209" xml:space="preserve">
            <source>apiVersion</source>
            <target state="new">apiVersion</target>
          </trans-unit>
          <trans-unit id="210" xml:space="preserve">
            <source>Yes</source>
            <target state="new">Yes</target>
          </trans-unit>
          <trans-unit id="211" xml:space="preserve">
            <source>Version of the API that supports the resource.</source>
            <target state="new">Version of the API that supports the resource.</target>
          </trans-unit>
          <trans-unit id="212" xml:space="preserve">
            <source>For the available versions and schemas for resources, see <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Azure Resource Manager Schemas<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">For the available versions and schemas for resources, see <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Azure Resource Manager Schemas<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="213" xml:space="preserve">
            <source>type</source>
            <target state="new">type</target>
          </trans-unit>
          <trans-unit id="214" xml:space="preserve">
            <source>Yes</source>
            <target state="new">Yes</target>
          </trans-unit>
          <trans-unit id="215" xml:space="preserve">
            <source>Type of the resource.</source>
            <target state="new">Type of the resource.</target>
          </trans-unit>
          <trans-unit id="216" xml:space="preserve">
            <source>This value is a combination of the namespace of the resource provider and the resource type that the resource provider supports.</source>
            <target state="new">This value is a combination of the namespace of the resource provider and the resource type that the resource provider supports.</target>
          </trans-unit>
          <trans-unit id="217" xml:space="preserve">
            <source>name</source>
            <target state="new">name</target>
          </trans-unit>
          <trans-unit id="218" xml:space="preserve">
            <source>Yes</source>
            <target state="new">Yes</target>
          </trans-unit>
          <trans-unit id="219" xml:space="preserve">
            <source>Name of the resource.</source>
            <target state="new">Name of the resource.</target>
          </trans-unit>
          <trans-unit id="220" xml:space="preserve">
            <source>The name must follow URI component restrictions defined in RFC3986.</source>
            <target state="new">The name must follow URI component restrictions defined in RFC3986.</target>
          </trans-unit>
          <trans-unit id="221" xml:space="preserve">
            <source>location</source>
            <target state="new">location</target>
          </trans-unit>
          <trans-unit id="222" xml:space="preserve">
            <source>No</source>
            <target state="new">No</target>
          </trans-unit>
          <trans-unit id="223" xml:space="preserve">
            <source>Supported geo-locations of the provided resource.</source>
            <target state="new">Supported geo-locations of the provided resource.</target>
          </trans-unit>
          <trans-unit id="224" xml:space="preserve">
            <source>tags</source>
            <target state="new">tags</target>
          </trans-unit>
          <trans-unit id="225" xml:space="preserve">
            <source>No</source>
            <target state="new">No</target>
          </trans-unit>
          <trans-unit id="226" xml:space="preserve">
            <source>Tags that are associated with the resource.</source>
            <target state="new">Tags that are associated with the resource.</target>
          </trans-unit>
          <trans-unit id="227" xml:space="preserve">
            <source>dependsOn</source>
            <target state="new">dependsOn</target>
          </trans-unit>
          <trans-unit id="228" xml:space="preserve">
            <source>No</source>
            <target state="new">No</target>
          </trans-unit>
          <trans-unit id="229" xml:space="preserve">
            <source>Resources that the resource being defined depends on.</source>
            <target state="new">Resources that the resource being defined depends on.</target>
          </trans-unit>
          <trans-unit id="230" xml:space="preserve">
            <source>The dependencies between resources are evaluated and resources are deployed in their dependent order.</source>
            <target state="new">The dependencies between resources are evaluated and resources are deployed in their dependent order.</target>
          </trans-unit>
          <trans-unit id="231" xml:space="preserve">
            <source>When resources are not dependent on each other, they are attempted to be deployed in parallel.</source>
            <target state="new">When resources are not dependent on each other, they are attempted to be deployed in parallel.</target>
          </trans-unit>
          <trans-unit id="232" xml:space="preserve">
            <source>The value can be a comma separated list of a resource names or resource unique identifiers.</source>
            <target state="new">The value can be a comma separated list of a resource names or resource unique identifiers.</target>
          </trans-unit>
          <trans-unit id="233" xml:space="preserve">
            <source>properties</source>
            <target state="new">properties</target>
          </trans-unit>
          <trans-unit id="234" xml:space="preserve">
            <source>No</source>
            <target state="new">No</target>
          </trans-unit>
          <trans-unit id="235" xml:space="preserve">
            <source>Resource specific configuration settings.</source>
            <target state="new">Resource specific configuration settings.</target>
          </trans-unit>
          <trans-unit id="236" xml:space="preserve">
            <source>resources</source>
            <target state="new">resources</target>
          </trans-unit>
          <trans-unit id="237" xml:space="preserve">
            <source>No</source>
            <target state="new">No</target>
          </trans-unit>
          <trans-unit id="238" xml:space="preserve">
            <source>Child resources that depend on the resource being defined.</source>
            <target state="new">Child resources that depend on the resource being defined.</target>
          </trans-unit>
          <trans-unit id="239" xml:space="preserve">
            <source>If the resource name is not unique, you can use the <bpt id="2">&lt;strong&gt;</bpt>resourceId<ept id="2">&lt;/strong&gt;</ept> helper function (described below) to get the unique identifier for any resource.</source>
            <target state="new">If the resource name is not unique, you can use the <bpt id="2">&lt;strong&gt;</bpt>resourceId<ept id="2">&lt;/strong&gt;</ept> helper function (described below) to get the unique identifier for any resource.</target>
          </trans-unit>
          <trans-unit id="240" xml:space="preserve">
            <source>The following example shows a <bpt id="2">&lt;strong&gt;</bpt>Microsoft.Web/serverfarms<ept id="2">&lt;/strong&gt;</ept> resource and a <bpt id="4">&lt;strong&gt;</bpt>Microsoft.Web/sites<ept id="4">&lt;/strong&gt;</ept> resource with a nested <bpt id="6">&lt;strong&gt;</bpt>Extensions<ept id="6">&lt;/strong&gt;</ept> resource:</source>
            <target state="new">The following example shows a <bpt id="2">&lt;strong&gt;</bpt>Microsoft.Web/serverfarms<ept id="2">&lt;/strong&gt;</ept> resource and a <bpt id="4">&lt;strong&gt;</bpt>Microsoft.Web/sites<ept id="4">&lt;/strong&gt;</ept> resource with a nested <bpt id="6">&lt;strong&gt;</bpt>Extensions<ept id="6">&lt;/strong&gt;</ept> resource:</target>
          </trans-unit>
          <trans-unit id="241" xml:space="preserve">
            <source>Outputs</source>
            <target state="new">Outputs</target>
          </trans-unit>
          <trans-unit id="242" xml:space="preserve">
            <source>In the Outputs section, you specify values that are returned from deployment.</source>
            <target state="new">In the Outputs section, you specify values that are returned from deployment.</target>
          </trans-unit>
          <trans-unit id="243" xml:space="preserve">
            <source>For example, you could return the URI to access a deployed resource.</source>
            <target state="new">For example, you could return the URI to access a deployed resource.</target>
          </trans-unit>
          <trans-unit id="244" xml:space="preserve">
            <source>The following example shows the structure of an output definition:</source>
            <target state="new">The following example shows the structure of an output definition:</target>
          </trans-unit>
          <trans-unit id="245" xml:space="preserve">
            <source>Element name</source>
            <target state="new">Element name</target>
          </trans-unit>
          <trans-unit id="246" xml:space="preserve">
            <source>Required</source>
            <target state="new">Required</target>
          </trans-unit>
          <trans-unit id="247" xml:space="preserve">
            <source>Description</source>
            <target state="new">Description</target>
          </trans-unit>
          <trans-unit id="248" xml:space="preserve">
            <source>outputName</source>
            <target state="new">outputName</target>
          </trans-unit>
          <trans-unit id="249" xml:space="preserve">
            <source>Yes</source>
            <target state="new">Yes</target>
          </trans-unit>
          <trans-unit id="250" xml:space="preserve">
            <source>Name of the output value.</source>
            <target state="new">Name of the output value.</target>
          </trans-unit>
          <trans-unit id="251" xml:space="preserve">
            <source>Must be a valid JavaScript identifier.</source>
            <target state="new">Must be a valid JavaScript identifier.</target>
          </trans-unit>
          <trans-unit id="252" xml:space="preserve">
            <source>type</source>
            <target state="new">type</target>
          </trans-unit>
          <trans-unit id="253" xml:space="preserve">
            <source>Yes</source>
            <target state="new">Yes</target>
          </trans-unit>
          <trans-unit id="254" xml:space="preserve">
            <source>Type of the output value.</source>
            <target state="new">Type of the output value.</target>
          </trans-unit>
          <trans-unit id="255" xml:space="preserve">
            <source>Output values support the same types as template input parameters.</source>
            <target state="new">Output values support the same types as template input parameters.</target>
          </trans-unit>
          <trans-unit id="256" xml:space="preserve">
            <source>value</source>
            <target state="new">value</target>
          </trans-unit>
          <trans-unit id="257" xml:space="preserve">
            <source>Yes</source>
            <target state="new">Yes</target>
          </trans-unit>
          <trans-unit id="258" xml:space="preserve">
            <source>Template language expression which will be evaluated and returned as output value.</source>
            <target state="new">Template language expression which will be evaluated and returned as output value.</target>
          </trans-unit>
          <trans-unit id="259" xml:space="preserve">
            <source>The following example shows a value that is returned in the Outputs section.</source>
            <target state="new">The following example shows a value that is returned in the Outputs section.</target>
          </trans-unit>
          <trans-unit id="260" xml:space="preserve">
            <source>More advanced scenarios.</source>
            <target state="new">More advanced scenarios.</target>
          </trans-unit>
          <trans-unit id="261" xml:space="preserve">
            <source>This topic provides an introductory look at the template.</source>
            <target state="new">This topic provides an introductory look at the template.</target>
          </trans-unit>
          <trans-unit id="262" xml:space="preserve">
            <source>However, your scenario may require more advanced tasks.</source>
            <target state="new">However, your scenario may require more advanced tasks.</target>
          </trans-unit>
          <trans-unit id="263" xml:space="preserve">
            <source>You may need to merge two templates together or use a child template within a parent template.</source>
            <target state="new">You may need to merge two templates together or use a child template within a parent template.</target>
          </trans-unit>
          <trans-unit id="264" xml:space="preserve">
            <source>For more information, see <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Using linked templates with Azure Resource Manager<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">For more information, see <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Using linked templates with Azure Resource Manager<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="265" xml:space="preserve">
            <source>To iterate a specified number of times when creating a type of resource, see <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Create multiple instances of resources in Azure Resource Manager<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">To iterate a specified number of times when creating a type of resource, see <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Create multiple instances of resources in Azure Resource Manager<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="266" xml:space="preserve">
            <source>You may need to use resources that exist within a different resource group.</source>
            <target state="new">You may need to use resources that exist within a different resource group.</target>
          </trans-unit>
          <trans-unit id="267" xml:space="preserve">
            <source>This is common when working with storage accounts or virtual networks that are shared across multiple resource groups.</source>
            <target state="new">This is common when working with storage accounts or virtual networks that are shared across multiple resource groups.</target>
          </trans-unit>
          <trans-unit id="268" xml:space="preserve">
            <source>For more information, see the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>resourceId function<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">For more information, see the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>resourceId function<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="269" xml:space="preserve">
            <source>Complete template</source>
            <target state="new">Complete template</target>
          </trans-unit>
          <trans-unit id="270" xml:space="preserve">
            <source>The following template deploys a web app and provisions it with code from a .zip file.</source>
            <target state="new">The following template deploys a web app and provisions it with code from a .zip file.</target>
          </trans-unit>
          <trans-unit id="271" xml:space="preserve">
            <source>Next Steps</source>
            <target state="new">Next Steps</target>
          </trans-unit>
          <trans-unit id="272" xml:space="preserve">
            <source>For details about the functions you can use from within a template, see <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Azure Resource Manager Template Functions<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept></source>
            <target state="new">For details about the functions you can use from within a template, see <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Azure Resource Manager Template Functions<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept></target>
          </trans-unit>
          <trans-unit id="273" xml:space="preserve">
            <source>To see how to deploy the template you have created, see <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Deploy an application with Azure Resource Manager Template<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept></source>
            <target state="new">To see how to deploy the template you have created, see <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Deploy an application with Azure Resource Manager Template<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept></target>
          </trans-unit>
          <trans-unit id="274" xml:space="preserve">
            <source>For an in-depth example of deploying an application, see <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Provision and deploy microservices predictably in Azure<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept></source>
            <target state="new">For an in-depth example of deploying an application, see <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Provision and deploy microservices predictably in Azure<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept></target>
          </trans-unit>
          <trans-unit id="275" xml:space="preserve">
            <source>To see the available schemas, see <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Azure Resource Manager Schemas<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept></source>
            <target state="new">To see the available schemas, see <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Azure Resource Manager Schemas<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept></target>
          </trans-unit>
          <trans-unit id="276" xml:space="preserve">
            <source>test</source>
            <target state="new">test</target>
          </trans-unit>
        </group>
      </group>
    </body>
  </file>
</xliff>