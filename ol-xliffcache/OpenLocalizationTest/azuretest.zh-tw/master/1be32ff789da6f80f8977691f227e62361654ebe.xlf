<?xml version="1.0" encoding="utf-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" source-language="en-us" target-language="zh-tw" original="2/20/2016 12:57:44 PM" tool-id="MarkdownTransformer" product-name="N/A" product-version="N/A" build-num="1">
    <header>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1be32ff789da6f80f8977691f227e62361654ebe</xliffext:olfilehash>
      <tool tool-id="MarkdownTransformer" tool-name="MarkdownToXliff" tool-version="1.0" tool-company="Microsoft" />
    </header>
    <body>
      <group extype="content">
        <group id="101">
          <trans-unit id="101" xml:space="preserve">
            <source>How to Use CoreOS | Microsoft Azure</source>
            <target state="new">How to Use CoreOS | Microsoft Azure</target>
          </trans-unit>
          <trans-unit id="102" xml:space="preserve">
            <source>Describes CoreOS, how to create a CoreOS virtual machine cluster on Azure, and its basic usage.</source>
            <target state="new">Describes CoreOS, how to create a CoreOS virtual machine cluster on Azure, and its basic usage.</target>
          </trans-unit>
          <trans-unit id="103" xml:space="preserve">
            <source>How to Use CoreOS on Azure</source>
            <target state="new">How to Use CoreOS on Azure</target>
          </trans-unit>
          <trans-unit id="104" xml:space="preserve">
            <source>This topic describes [CoreOS] and shows how to create a cluster of three CoreOS virtual machines on Azure as a quick start to understanding this operating system.</source>
            <target state="new">This topic describes [CoreOS] and shows how to create a cluster of three CoreOS virtual machines on Azure as a quick start to understanding this operating system.</target>
          </trans-unit>
          <trans-unit id="105" xml:space="preserve">
            <source>It uses the very basic elements of CoreOS deployments and examples from [CoreOS with Azure], [Tim Park's CoreOS Tutorial], and [Patrick Chanezon's CoreOS Tutorial] to demonstrate the absolute minimum requirements to both understand the basic structure of a CoreOS deployment and get a cluster of three virtual machines running successfully.</source>
            <target state="new">It uses the very basic elements of CoreOS deployments and examples from [CoreOS with Azure], [Tim Park's CoreOS Tutorial], and [Patrick Chanezon's CoreOS Tutorial] to demonstrate the absolute minimum requirements to both understand the basic structure of a CoreOS deployment and get a cluster of three virtual machines running successfully.</target>
          </trans-unit>
          <trans-unit id="106" xml:space="preserve">
            <source>This article shows you how to use the Azure command-line interface with Service Management commands to create the CoreOS VMs.</source>
            <target state="new">This article shows you how to use the Azure command-line interface with Service Management commands to create the CoreOS VMs.</target>
          </trans-unit>
          <trans-unit id="107" xml:space="preserve">
            <source>To get started with CoreOS in Azure Resource Manager, try this <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>quickstart template<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">To get started with CoreOS in Azure Resource Manager, try this <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>quickstart template<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="108" xml:space="preserve">
            <source><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept>CoreOS, clusters, and Linux containers<bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept>CoreOS, clusters, and Linux containers<bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="109" xml:space="preserve">
            <source>CoreOS is a lightweight version of Linux designed to support rapid creation of potentially very large clusters of VMs that use Linux containers as the only packaging mechanism, including [Docker] containers.</source>
            <target state="new">CoreOS is a lightweight version of Linux designed to support rapid creation of potentially very large clusters of VMs that use Linux containers as the only packaging mechanism, including [Docker] containers.</target>
          </trans-unit>
          <trans-unit id="110" xml:space="preserve">
            <source>CoreOS is intended to support:</source>
            <target state="new">CoreOS is intended to support:</target>
          </trans-unit>
          <trans-unit id="111" xml:space="preserve">
            <source>a very high level of automation</source>
            <target state="new">a very high level of automation</target>
          </trans-unit>
          <trans-unit id="112" xml:space="preserve">
            <source>easier and more consistent application deployment</source>
            <target state="new">easier and more consistent application deployment</target>
          </trans-unit>
          <trans-unit id="113" xml:space="preserve">
            <source>scalability at the application level and system level</source>
            <target state="new">scalability at the application level and system level</target>
          </trans-unit>
          <trans-unit id="114" xml:space="preserve">
            <source>At a high level, the CoreOS features that support these goals are:</source>
            <target state="new">At a high level, the CoreOS features that support these goals are:</target>
          </trans-unit>
          <trans-unit id="115" xml:space="preserve">
            <source>One package system: CoreOS runs only Linux container images that run in Linux containers for speed, uniformity, and ease of deployment</source>
            <target state="new">One package system: CoreOS runs only Linux container images that run in Linux containers for speed, uniformity, and ease of deployment</target>
          </trans-unit>
          <trans-unit id="116" xml:space="preserve">
            <source>Operating system updates that are performed atomically so that operating systems are updated as a single entity and can be easily rolled back to a known state</source>
            <target state="new">Operating system updates that are performed atomically so that operating systems are updated as a single entity and can be easily rolled back to a known state</target>
          </trans-unit>
          <trans-unit id="117" xml:space="preserve">
            <source>Built-in <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>etcd<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> and <bpt id="4CapsExtId1">&lt;link&gt;</bpt><bpt id="4CapsExtId2">&lt;linkText&gt;</bpt>fleet<ept id="4CapsExtId2">&lt;/linkText&gt;</ept><bpt id="4CapsExtId3">&lt;title&gt;</bpt><ept id="4CapsExtId3">&lt;/title&gt;</ept><ept id="4CapsExtId1">&lt;/link&gt;</ept> daemons (services) for dynamic VM and cluster communication and management</source>
            <target state="new">Built-in <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>etcd<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> and <bpt id="4CapsExtId1">&lt;link&gt;</bpt><bpt id="4CapsExtId2">&lt;linkText&gt;</bpt>fleet<ept id="4CapsExtId2">&lt;/linkText&gt;</ept><bpt id="4CapsExtId3">&lt;title&gt;</bpt><ept id="4CapsExtId3">&lt;/title&gt;</ept><ept id="4CapsExtId1">&lt;/link&gt;</ept> daemons (services) for dynamic VM and cluster communication and management</target>
          </trans-unit>
          <trans-unit id="118" xml:space="preserve">
            <source>This is a very general description of CoreOS and its features.</source>
            <target state="new">This is a very general description of CoreOS and its features.</target>
          </trans-unit>
          <trans-unit id="119" xml:space="preserve">
            <source>For more complete information about CoreOS, see the [CoreOS Overview].</source>
            <target state="new">For more complete information about CoreOS, see the [CoreOS Overview].</target>
          </trans-unit>
          <trans-unit id="120" xml:space="preserve">
            <source><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept>Security considerations<bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept>Security considerations<bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="121" xml:space="preserve">
            <source>Currently, CoreOS assumes that those who can SSH into the cluster have permission to manage it.</source>
            <target state="new">Currently, CoreOS assumes that those who can SSH into the cluster have permission to manage it.</target>
          </trans-unit>
          <trans-unit id="122" xml:space="preserve">
            <source>The result is that without modification, CoreOS clusters are outstanding for test and development environments, but you should apply further security measures in any production environment.</source>
            <target state="new">The result is that without modification, CoreOS clusters are outstanding for test and development environments, but you should apply further security measures in any production environment.</target>
          </trans-unit>
          <trans-unit id="123" xml:space="preserve">
            <source><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept>How to use CoreOS on Azure<bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept>How to use CoreOS on Azure<bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="124" xml:space="preserve">
            <source>This section describes how to create an Azure cloud cervice with three CoreOS virtual machines in it using the [Azure Command-line Interface (Azure CLI)].</source>
            <target state="new">This section describes how to create an Azure cloud cervice with three CoreOS virtual machines in it using the [Azure Command-line Interface (Azure CLI)].</target>
          </trans-unit>
          <trans-unit id="125" xml:space="preserve">
            <source>The basic steps are as follows:</source>
            <target state="new">The basic steps are as follows:</target>
          </trans-unit>
          <trans-unit id="126" xml:space="preserve">
            <source>Create the SSH certificates and keys to secure communication with the CoreOS virtual machine</source>
            <target state="new">Create the SSH certificates and keys to secure communication with the CoreOS virtual machine</target>
          </trans-unit>
          <trans-unit id="127" xml:space="preserve">
            <source>Obtain your cluster's etcd id for intercommunication</source>
            <target state="new">Obtain your cluster's etcd id for intercommunication</target>
          </trans-unit>
          <trans-unit id="128" xml:space="preserve">
            <source>Create a cloud-config file in [YAML] format</source>
            <target state="new">Create a cloud-config file in [YAML] format</target>
          </trans-unit>
          <trans-unit id="129" xml:space="preserve">
            <source>Use the Azure CLI to create a new Azure cloud service and three CoreOS VMs</source>
            <target state="new">Use the Azure CLI to create a new Azure cloud service and three CoreOS VMs</target>
          </trans-unit>
          <trans-unit id="130" xml:space="preserve">
            <source>Test your CoreOS cluster from an Azure VM</source>
            <target state="new">Test your CoreOS cluster from an Azure VM</target>
          </trans-unit>
          <trans-unit id="131" xml:space="preserve">
            <source>Test your CoreOS cluster from localhost</source>
            <target state="new">Test your CoreOS cluster from localhost</target>
          </trans-unit>
          <trans-unit id="132" xml:space="preserve">
            <source>Create public and private keys for communication</source>
            <target state="new">Create public and private keys for communication</target>
          </trans-unit>
          <trans-unit id="133" xml:space="preserve">
            <source>Use the instructions in <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>How to Use SSH with Linux on Azure<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> to create a public and private key for SSH.</source>
            <target state="new">Use the instructions in <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>How to Use SSH with Linux on Azure<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> to create a public and private key for SSH.</target>
          </trans-unit>
          <trans-unit id="134" xml:space="preserve">
            <source>(The basic steps are in the instructions below.)</source>
            <target state="new">(The basic steps are in the instructions below.)</target>
          </trans-unit>
          <trans-unit id="135" xml:space="preserve">
            <source>You are going to use these keys to connect to VMs in the cluster to verify that they are working and can communicate with each other.</source>
            <target state="new">You are going to use these keys to connect to VMs in the cluster to verify that they are working and can communicate with each other.</target>
          </trans-unit>
          <trans-unit id="136" xml:space="preserve">
            <source>This topic assumes that you do not have these keys, and requires you to create <bpt id="2">&lt;code&gt;</bpt>myPrivateKey.pem<ept id="2">&lt;/code&gt;</ept> and <bpt id="4">&lt;code&gt;</bpt>myCert.pem<ept id="4">&lt;/code&gt;</ept> files for clarity.</source>
            <target state="new">This topic assumes that you do not have these keys, and requires you to create <bpt id="2">&lt;code&gt;</bpt>myPrivateKey.pem<ept id="2">&lt;/code&gt;</ept> and <bpt id="4">&lt;code&gt;</bpt>myCert.pem<ept id="4">&lt;/code&gt;</ept> files for clarity.</target>
          </trans-unit>
          <trans-unit id="137" xml:space="preserve">
            <source>If you already have a public and private key pair saved to <bpt id="2">&lt;code&gt;</bpt>~/.ssh/id_rsa<ept id="2">&lt;/code&gt;</ept>, you can just type <bpt id="4">&lt;code&gt;</bpt>openssl req -x509 -key ~/.ssh/id_rsa -nodes -days 365 -newkey rsa:2048 -out myCert.pem<ept id="4">&lt;/code&gt;</ept> to obtain the .pem file that you need to upload to Azure.</source>
            <target state="new">If you already have a public and private key pair saved to <bpt id="2">&lt;code&gt;</bpt>~/.ssh/id_rsa<ept id="2">&lt;/code&gt;</ept>, you can just type <bpt id="4">&lt;code&gt;</bpt>openssl req -x509 -key ~/.ssh/id_rsa -nodes -days 365 -newkey rsa:2048 -out myCert.pem<ept id="4">&lt;/code&gt;</ept> to obtain the .pem file that you need to upload to Azure.</target>
          </trans-unit>
          <trans-unit id="138" xml:space="preserve">
            <source>In a working directory, type <bpt id="2">&lt;code&gt;</bpt>openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout myPrivateKey.key -out myCert.pem<ept id="2">&lt;/code&gt;</ept> to create the private key and an the X.509 certificate associated with it.</source>
            <target state="new">In a working directory, type <bpt id="2">&lt;code&gt;</bpt>openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout myPrivateKey.key -out myCert.pem<ept id="2">&lt;/code&gt;</ept> to create the private key and an the X.509 certificate associated with it.</target>
          </trans-unit>
          <trans-unit id="139" xml:space="preserve">
            <source>To assert that the private key's owner can read or write the file, type <bpt id="2">&lt;code&gt;</bpt>chmod 600 myPrivateKey.key<ept id="2">&lt;/code&gt;</ept>.</source>
            <target state="new">To assert that the private key's owner can read or write the file, type <bpt id="2">&lt;code&gt;</bpt>chmod 600 myPrivateKey.key<ept id="2">&lt;/code&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="140" xml:space="preserve">
            <source>You should now have both a <bpt id="2">&lt;code&gt;</bpt>myPrivateKey.key<ept id="2">&lt;/code&gt;</ept> and a <bpt id="4">&lt;code&gt;</bpt>myCert.pem<ept id="4">&lt;/code&gt;</ept> file in your working directory.</source>
            <target state="new">You should now have both a <bpt id="2">&lt;code&gt;</bpt>myPrivateKey.key<ept id="2">&lt;/code&gt;</ept> and a <bpt id="4">&lt;code&gt;</bpt>myCert.pem<ept id="4">&lt;/code&gt;</ept> file in your working directory.</target>
          </trans-unit>
          <trans-unit id="141" xml:space="preserve">
            <source>Obtain your cluster's etcd id</source>
            <target state="new">Obtain your cluster's etcd id</target>
          </trans-unit>
          <trans-unit id="142" xml:space="preserve">
            <source>CoreOS's <bpt id="2">&lt;code&gt;</bpt>etcd<ept id="2">&lt;/code&gt;</ept> daemon requires a discovery id to query for all nodes in the cluster automatically.</source>
            <target state="new">CoreOS's <bpt id="2">&lt;code&gt;</bpt>etcd<ept id="2">&lt;/code&gt;</ept> daemon requires a discovery id to query for all nodes in the cluster automatically.</target>
          </trans-unit>
          <trans-unit id="143" xml:space="preserve">
            <source>To retrieve your discovery id and save it to an <bpt id="2">&lt;code&gt;</bpt>etcdid<ept id="2">&lt;/code&gt;</ept> file, type</source>
            <target state="new">To retrieve your discovery id and save it to an <bpt id="2">&lt;code&gt;</bpt>etcdid<ept id="2">&lt;/code&gt;</ept> file, type</target>
          </trans-unit>
          <trans-unit id="144" xml:space="preserve">
            <source>Create a cloud-config file</source>
            <target state="new">Create a cloud-config file</target>
          </trans-unit>
          <trans-unit id="145" xml:space="preserve">
            <source>Still in the same working directory, create a file with your favorite text editor with the following text and save it as <bpt id="2">&lt;code&gt;</bpt>cloud-config.yaml<ept id="2">&lt;/code&gt;</ept>.</source>
            <target state="new">Still in the same working directory, create a file with your favorite text editor with the following text and save it as <bpt id="2">&lt;code&gt;</bpt>cloud-config.yaml<ept id="2">&lt;/code&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="146" xml:space="preserve">
            <source>(You can save it as any file name you want, but when you create your VMs in the next step, you'll need to reference this file's name in your <bpt id="2">&lt;strong&gt;</bpt>--custom-data<ept id="2">&lt;/strong&gt;</ept> option for the <bpt id="4">&lt;strong&gt;</bpt>azure vm create<ept id="4">&lt;/strong&gt;</ept> command.)</source>
            <target state="new">(You can save it as any file name you want, but when you create your VMs in the next step, you'll need to reference this file's name in your <bpt id="2">&lt;strong&gt;</bpt>--custom-data<ept id="2">&lt;/strong&gt;</ept> option for the <bpt id="4">&lt;strong&gt;</bpt>azure vm create<ept id="4">&lt;/strong&gt;</ept> command.)</target>
          </trans-unit>
          <trans-unit id="147" xml:space="preserve">
            <source>Remember to type <bpt id="2">&lt;code&gt;</bpt>cat etcdid<ept id="2">&lt;/code&gt;</ept> to retrieve the etcd discovery id from the <bpt id="4">&lt;code&gt;</bpt>etcdid<ept id="4">&lt;/code&gt;</ept> file you created above and replace <bpt id="6">&lt;code&gt;</bpt>&lt;token&gt;<ept id="6">&lt;/code&gt;</ept> in the following <bpt id="8">&lt;code&gt;</bpt>cloud-config.yaml<ept id="8">&lt;/code&gt;</ept> file with the generated number from your <bpt id="10">&lt;code&gt;</bpt>etcdid<ept id="10">&lt;/code&gt;</ept> file. If you are unable to validate your cluster at the end, this may be one of the steps you overlooked!</source>
            <target state="new">Remember to type <bpt id="2">&lt;code&gt;</bpt>cat etcdid<ept id="2">&lt;/code&gt;</ept> to retrieve the etcd discovery id from the <bpt id="4">&lt;code&gt;</bpt>etcdid<ept id="4">&lt;/code&gt;</ept> file you created above and replace <bpt id="6">&lt;code&gt;</bpt>&lt;token&gt;<ept id="6">&lt;/code&gt;</ept> in the following <bpt id="8">&lt;code&gt;</bpt>cloud-config.yaml<ept id="8">&lt;/code&gt;</ept> file with the generated number from your <bpt id="10">&lt;code&gt;</bpt>etcdid<ept id="10">&lt;/code&gt;</ept> file. If you are unable to validate your cluster at the end, this may be one of the steps you overlooked!</target>
          </trans-unit>
          <trans-unit id="148" xml:space="preserve">
            <source>(For more complete information about the cloud-config file, see <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Using Cloud-Config<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> in the CoreOS documentation.)</source>
            <target state="new">(For more complete information about the cloud-config file, see <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Using Cloud-Config<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> in the CoreOS documentation.)</target>
          </trans-unit>
          <trans-unit id="149" xml:space="preserve">
            <source>Use the Azure CLI to create a new CoreOS VM</source>
            <target state="new">Use the Azure CLI to create a new CoreOS VM</target>
          </trans-unit>
          <trans-unit id="150" xml:space="preserve">
            <source>Install the [Azure Command-line Interface (Azure CLI)] if you have not already done so, and either login using a work or school ID, or download a .publishsettings file and import that into your account.</source>
            <target state="new">Install the [Azure Command-line Interface (Azure CLI)] if you have not already done so, and either login using a work or school ID, or download a .publishsettings file and import that into your account.</target>
          </trans-unit>
          <trans-unit id="151" xml:space="preserve">
            <source>Locate your CoreOS image.</source>
            <target state="new">Locate your CoreOS image.</target>
          </trans-unit>
          <trans-unit id="152" xml:space="preserve">
            <source>To locate the images available at any time, type <bpt id="2">&lt;code&gt;</bpt>azure vm image list | grep CoreOS<ept id="2">&lt;/code&gt;</ept> and you should see a list of results similar to:</source>
            <target state="new">To locate the images available at any time, type <bpt id="2">&lt;code&gt;</bpt>azure vm image list | grep CoreOS<ept id="2">&lt;/code&gt;</ept> and you should see a list of results similar to:</target>
          </trans-unit>
          <trans-unit id="153" xml:space="preserve">
            <source>data:    2b171e93f07c4903bcad35bda10acf22__CoreOS-Stable-522.6.0              Public    Linux</source>
            <target state="new">data:    2b171e93f07c4903bcad35bda10acf22__CoreOS-Stable-522.6.0              Public    Linux</target>
          </trans-unit>
          <trans-unit id="154" xml:space="preserve">
            <source>Create a cloud service for your basic cluster by typing</source>
            <target state="new">Create a cloud service for your basic cluster by typing</target>
          </trans-unit>
          <trans-unit id="155" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>azure service create &lt;cloud-service-name&gt;<ept id="1">&lt;/code&gt;</ept> where <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept> is the name for your CoreOS cloud service. This sample uses the name **<bpt id="5">&lt;code&gt;</bpt>coreos-cluster<ept id="5">&lt;/code&gt;</ept>**; you will need to reuse the name that you choose to create your CoreOS VM instances inside the cloud service.</source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>azure service create &lt;cloud-service-name&gt;<ept id="1">&lt;/code&gt;</ept> where <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept> is the name for your CoreOS cloud service. This sample uses the name **<bpt id="5">&lt;code&gt;</bpt>coreos-cluster<ept id="5">&lt;/code&gt;</ept>**; you will need to reuse the name that you choose to create your CoreOS VM instances inside the cloud service.</target>
          </trans-unit>
          <trans-unit id="156" xml:space="preserve">
            <source>One note: If you observe your work so far in the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>preview portal<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>, you'll find your cloud service name is both a resource group and domain, as the following image shows:</source>
            <target state="new">One note: If you observe your work so far in the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>preview portal<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>, you'll find your cloud service name is both a resource group and domain, as the following image shows:</target>
          </trans-unit>
          <trans-unit id="157" xml:space="preserve">
            <source><bpt id="1">&lt;linkText&gt;</bpt><ept id="1">&lt;/linkText&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;linkText&gt;</bpt><ept id="1">&lt;/linkText&gt;</ept></target>
          </trans-unit>
          <trans-unit id="158" xml:space="preserve">
            <source>Connect to your cloud service and create a new CoreOS VM inside by using the <bpt id="2">&lt;strong&gt;</bpt>azure vm create<ept id="2">&lt;/strong&gt;</ept> command.</source>
            <target state="new">Connect to your cloud service and create a new CoreOS VM inside by using the <bpt id="2">&lt;strong&gt;</bpt>azure vm create<ept id="2">&lt;/strong&gt;</ept> command.</target>
          </trans-unit>
          <trans-unit id="159" xml:space="preserve">
            <source>You'll pass the location of your X.509 certificate in the <bpt id="2">&lt;strong&gt;</bpt>--ssh-cert<ept id="2">&lt;/strong&gt;</ept> option.</source>
            <target state="new">You'll pass the location of your X.509 certificate in the <bpt id="2">&lt;strong&gt;</bpt>--ssh-cert<ept id="2">&lt;/strong&gt;</ept> option.</target>
          </trans-unit>
          <trans-unit id="160" xml:space="preserve">
            <source>Create your first VM image by typing the following, remembering to replace <bpt id="2">&lt;strong&gt;</bpt>coreos-cluster<ept id="2">&lt;/strong&gt;</ept> with the cloud service name that you created:</source>
            <target state="new">Create your first VM image by typing the following, remembering to replace <bpt id="2">&lt;strong&gt;</bpt>coreos-cluster<ept id="2">&lt;/strong&gt;</ept> with the cloud service name that you created:</target>
          </trans-unit>
          <trans-unit id="161" xml:space="preserve">
            <source>Create the second node by repeating the command in step 4, replacing the <bpt id="2">&lt;strong&gt;</bpt>--vm-name<ept id="2">&lt;/strong&gt;</ept> value with <bpt id="4">&lt;strong&gt;</bpt>node-2<ept id="4">&lt;/strong&gt;</ept> and the <bpt id="6">&lt;strong&gt;</bpt>--ssh<ept id="6">&lt;/strong&gt;</ept> port value with 2022.</source>
            <target state="new">Create the second node by repeating the command in step 4, replacing the <bpt id="2">&lt;strong&gt;</bpt>--vm-name<ept id="2">&lt;/strong&gt;</ept> value with <bpt id="4">&lt;strong&gt;</bpt>node-2<ept id="4">&lt;/strong&gt;</ept> and the <bpt id="6">&lt;strong&gt;</bpt>--ssh<ept id="6">&lt;/strong&gt;</ept> port value with 2022.</target>
          </trans-unit>
          <trans-unit id="162" xml:space="preserve">
            <source>Create the third node by repeating the command in step 4, replacing the <bpt id="2">&lt;strong&gt;</bpt>--vm-name<ept id="2">&lt;/strong&gt;</ept> value with <bpt id="4">&lt;strong&gt;</bpt>node-3<ept id="4">&lt;/strong&gt;</ept> and the <bpt id="6">&lt;strong&gt;</bpt>--ssh<ept id="6">&lt;/strong&gt;</ept> port value with 3022.</source>
            <target state="new">Create the third node by repeating the command in step 4, replacing the <bpt id="2">&lt;strong&gt;</bpt>--vm-name<ept id="2">&lt;/strong&gt;</ept> value with <bpt id="4">&lt;strong&gt;</bpt>node-3<ept id="4">&lt;/strong&gt;</ept> and the <bpt id="6">&lt;strong&gt;</bpt>--ssh<ept id="6">&lt;/strong&gt;</ept> port value with 3022.</target>
          </trans-unit>
          <trans-unit id="163" xml:space="preserve">
            <source>You can see from the shot below how the CoreOS cluster appears in the portal.</source>
            <target state="new">You can see from the shot below how the CoreOS cluster appears in the portal.</target>
          </trans-unit>
          <trans-unit id="164" xml:space="preserve">
            <source><bpt id="1">&lt;linkText&gt;</bpt><ept id="1">&lt;/linkText&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;linkText&gt;</bpt><ept id="1">&lt;/linkText&gt;</ept></target>
          </trans-unit>
          <trans-unit id="165" xml:space="preserve">
            <source>Test your CoreOS cluster from an Azure VM</source>
            <target state="new">Test your CoreOS cluster from an Azure VM</target>
          </trans-unit>
          <trans-unit id="166" xml:space="preserve">
            <source>To test your cluster, make sure you are in your working directory and then connect to <bpt id="2">&lt;strong&gt;</bpt>node-1<ept id="2">&lt;/strong&gt;</ept> using <bpt id="4">&lt;strong&gt;</bpt>ssh<ept id="4">&lt;/strong&gt;</ept>, passing the private key by typing:</source>
            <target state="new">To test your cluster, make sure you are in your working directory and then connect to <bpt id="2">&lt;strong&gt;</bpt>node-1<ept id="2">&lt;/strong&gt;</ept> using <bpt id="4">&lt;strong&gt;</bpt>ssh<ept id="4">&lt;/strong&gt;</ept>, passing the private key by typing:</target>
          </trans-unit>
          <trans-unit id="167" xml:space="preserve">
            <source>Once connected, type <bpt id="2">&lt;code&gt;</bpt>sudo fleetctl list-machines<ept id="2">&lt;/code&gt;</ept> to see whether the cluster has already identified all VMs in the cluster.</source>
            <target state="new">Once connected, type <bpt id="2">&lt;code&gt;</bpt>sudo fleetctl list-machines<ept id="2">&lt;/code&gt;</ept> to see whether the cluster has already identified all VMs in the cluster.</target>
          </trans-unit>
          <trans-unit id="168" xml:space="preserve">
            <source>You should receive a response similar to the following:</source>
            <target state="new">You should receive a response similar to the following:</target>
          </trans-unit>
          <trans-unit id="169" xml:space="preserve">
            <source>Test your CoreOS cluster from localhost</source>
            <target state="new">Test your CoreOS cluster from localhost</target>
          </trans-unit>
          <trans-unit id="170" xml:space="preserve">
            <source>Finally, let's test your CoreOS cluster from your local Linux client.</source>
            <target state="new">Finally, let's test your CoreOS cluster from your local Linux client.</target>
          </trans-unit>
          <trans-unit id="171" xml:space="preserve">
            <source>You might be able to install <bpt id="2">&lt;strong&gt;</bpt>fleetctl<ept id="2">&lt;/strong&gt;</ept> by using <bpt id="4">&lt;strong&gt;</bpt>npm<ept id="4">&lt;/strong&gt;</ept>, or you might want to install <bpt id="6">&lt;strong&gt;</bpt>fleet<ept id="6">&lt;/strong&gt;</ept> and build <bpt id="8">&lt;strong&gt;</bpt>fleetctl<ept id="8">&lt;/strong&gt;</ept> yourself on your local client.</source>
            <target state="new">You might be able to install <bpt id="2">&lt;strong&gt;</bpt>fleetctl<ept id="2">&lt;/strong&gt;</ept> by using <bpt id="4">&lt;strong&gt;</bpt>npm<ept id="4">&lt;/strong&gt;</ept>, or you might want to install <bpt id="6">&lt;strong&gt;</bpt>fleet<ept id="6">&lt;/strong&gt;</ept> and build <bpt id="8">&lt;strong&gt;</bpt>fleetctl<ept id="8">&lt;/strong&gt;</ept> yourself on your local client.</target>
          </trans-unit>
          <trans-unit id="172" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>fleet<ept id="1">&lt;/strong&gt;</ept> requires <bpt id="3">&lt;strong&gt;</bpt>golang<ept id="3">&lt;/strong&gt;</ept>, so you may need to install that first by typing:</source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>fleet<ept id="1">&lt;/strong&gt;</ept> requires <bpt id="3">&lt;strong&gt;</bpt>golang<ept id="3">&lt;/strong&gt;</ept>, so you may need to install that first by typing:</target>
          </trans-unit>
          <trans-unit id="173" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>sudo apt-get install golang<ept id="1">&lt;/code&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>sudo apt-get install golang<ept id="1">&lt;/code&gt;</ept></target>
          </trans-unit>
          <trans-unit id="174" xml:space="preserve">
            <source>Then clone the <bpt id="2">&lt;strong&gt;</bpt>fleet<ept id="2">&lt;/strong&gt;</ept> repository from github by typing:</source>
            <target state="new">Then clone the <bpt id="2">&lt;strong&gt;</bpt>fleet<ept id="2">&lt;/strong&gt;</ept> repository from github by typing:</target>
          </trans-unit>
          <trans-unit id="175" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>git clone https://github.com/coreos/fleet.git<ept id="1">&lt;/code&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>git clone https://github.com/coreos/fleet.git<ept id="1">&lt;/code&gt;</ept></target>
          </trans-unit>
          <trans-unit id="176" xml:space="preserve">
            <source>Build <bpt id="2">&lt;strong&gt;</bpt>fleet<ept id="2">&lt;/strong&gt;</ept> by changing to the <bpt id="4">&lt;code&gt;</bpt>fleet<ept id="4">&lt;/code&gt;</ept> directory and type</source>
            <target state="new">Build <bpt id="2">&lt;strong&gt;</bpt>fleet<ept id="2">&lt;/strong&gt;</ept> by changing to the <bpt id="4">&lt;code&gt;</bpt>fleet<ept id="4">&lt;/code&gt;</ept> directory and type</target>
          </trans-unit>
          <trans-unit id="177" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>./build<ept id="1">&lt;/code&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>./build<ept id="1">&lt;/code&gt;</ept></target>
          </trans-unit>
          <trans-unit id="178" xml:space="preserve">
            <source>And finally place <bpt id="2">&lt;strong&gt;</bpt>fleet<ept id="2">&lt;/strong&gt;</ept> for easy use (depending upon your configuration you may or may not need to <bpt id="4">&lt;strong&gt;</bpt>sudo<ept id="4">&lt;/strong&gt;</ept>):</source>
            <target state="new">And finally place <bpt id="2">&lt;strong&gt;</bpt>fleet<ept id="2">&lt;/strong&gt;</ept> for easy use (depending upon your configuration you may or may not need to <bpt id="4">&lt;strong&gt;</bpt>sudo<ept id="4">&lt;/strong&gt;</ept>):</target>
          </trans-unit>
          <trans-unit id="179" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>cp bin/fleetctl /usr/local/bin<ept id="1">&lt;/code&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>cp bin/fleetctl /usr/local/bin<ept id="1">&lt;/code&gt;</ept></target>
          </trans-unit>
          <trans-unit id="180" xml:space="preserve">
            <source>Make sure <bpt id="2">&lt;strong&gt;</bpt>fleet<ept id="2">&lt;/strong&gt;</ept> has access to your <bpt id="4">&lt;code&gt;</bpt>myPrivateKey.key<ept id="4">&lt;/code&gt;</ept> in the working directory by typing:</source>
            <target state="new">Make sure <bpt id="2">&lt;strong&gt;</bpt>fleet<ept id="2">&lt;/strong&gt;</ept> has access to your <bpt id="4">&lt;code&gt;</bpt>myPrivateKey.key<ept id="4">&lt;/code&gt;</ept> in the working directory by typing:</target>
          </trans-unit>
          <trans-unit id="181" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>ssh-add ./myPrivateKey.key<ept id="1">&lt;/code&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>ssh-add ./myPrivateKey.key<ept id="1">&lt;/code&gt;</ept></target>
          </trans-unit>
          <trans-unit id="182" xml:space="preserve">
            <source>If you are already using the <bpt id="2">&lt;code&gt;</bpt>~/.ssh/id_rsa<ept id="2">&lt;/code&gt;</ept> key, then add that with <bpt id="4">&lt;code&gt;</bpt>ssh-add ~/.ssh/id_rsa<ept id="4">&lt;/code&gt;</ept>.</source>
            <target state="new">If you are already using the <bpt id="2">&lt;code&gt;</bpt>~/.ssh/id_rsa<ept id="2">&lt;/code&gt;</ept> key, then add that with <bpt id="4">&lt;code&gt;</bpt>ssh-add ~/.ssh/id_rsa<ept id="4">&lt;/code&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="183" xml:space="preserve">
            <source>Now you are ready to test remotely using the same <bpt id="2">&lt;strong&gt;</bpt>fleetctl<ept id="2">&lt;/strong&gt;</ept> command you used from <bpt id="4">&lt;strong&gt;</bpt>node-1<ept id="4">&lt;/strong&gt;</ept>, but passing some remote arguments:</source>
            <target state="new">Now you are ready to test remotely using the same <bpt id="2">&lt;strong&gt;</bpt>fleetctl<ept id="2">&lt;/strong&gt;</ept> command you used from <bpt id="4">&lt;strong&gt;</bpt>node-1<ept id="4">&lt;/strong&gt;</ept>, but passing some remote arguments:</target>
          </trans-unit>
          <trans-unit id="184" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>fleetctl --tunnel coreos-cluster.cloudapp.net:22 list-machines<ept id="1">&lt;/code&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>fleetctl --tunnel coreos-cluster.cloudapp.net:22 list-machines<ept id="1">&lt;/code&gt;</ept></target>
          </trans-unit>
          <trans-unit id="185" xml:space="preserve">
            <source>The results should be exactly the same:</source>
            <target state="new">The results should be exactly the same:</target>
          </trans-unit>
          <trans-unit id="186" xml:space="preserve">
            <source>Next steps</source>
            <target state="new">Next steps</target>
          </trans-unit>
          <trans-unit id="187" xml:space="preserve">
            <source>You should now have a running three-node CoreOS cluster on Azure.</source>
            <target state="new">You should now have a running three-node CoreOS cluster on Azure.</target>
          </trans-unit>
          <trans-unit id="188" xml:space="preserve">
            <source>From here, you can explore how to create more complex clusters and use Docker and create more interesting applications.</source>
            <target state="new">From here, you can explore how to create more complex clusters and use Docker and create more interesting applications.</target>
          </trans-unit>
          <trans-unit id="189" xml:space="preserve">
            <source>To try a couple of quick examples, see [Get Started with Fleet on CoreOS on Azure].</source>
            <target state="new">To try a couple of quick examples, see [Get Started with Fleet on CoreOS on Azure].</target>
          </trans-unit>
        </group>
      </group>
    </body>
  </file>
</xliff>