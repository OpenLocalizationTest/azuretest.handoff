<?xml version="1.0" encoding="utf-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" source-language="en-us" target-language="zh-tw" original="2/20/2016 1:31:34 PM" tool-id="MarkdownTransformer" product-name="N/A" product-version="N/A" build-num="1">
    <header>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">65415ae9d52a0f0c076cfc027d6b19969177f8ee</xliffext:olfilehash>
      <tool tool-id="MarkdownTransformer" tool-name="MarkdownToXliff" tool-version="1.0" tool-company="Microsoft" />
    </header>
    <body>
      <group extype="content">
        <group id="101">
          <trans-unit id="101" xml:space="preserve">
            <source>In this step, you test the availability group listener using a client application running on the same network.</source>
            <target state="new">In this step, you test the availability group listener using a client application running on the same network.</target>
          </trans-unit>
          <trans-unit id="102" xml:space="preserve">
            <source>For client connectivity, please note the following requirements:</source>
            <target state="new">For client connectivity, please note the following requirements:</target>
          </trans-unit>
          <trans-unit id="103" xml:space="preserve">
            <source>Client connections to the listener must come from machines that reside in a different cloud service than the one that hosts the AlwaysOn Availability replicas.</source>
            <target state="new">Client connections to the listener must come from machines that reside in a different cloud service than the one that hosts the AlwaysOn Availability replicas.</target>
          </trans-unit>
          <trans-unit id="104" xml:space="preserve">
            <source>If the AlwaysOn replicas are in different subnets, clients must specify "MultisubnetFailover=True" in the connection string.</source>
            <target state="new">If the AlwaysOn replicas are in different subnets, clients must specify "MultisubnetFailover=True" in the connection string.</target>
          </trans-unit>
          <trans-unit id="105" xml:space="preserve">
            <source>This results in parallel connection attempts to replicas in the different subnets.</source>
            <target state="new">This results in parallel connection attempts to replicas in the different subnets.</target>
          </trans-unit>
          <trans-unit id="106" xml:space="preserve">
            <source>Note that this scenario includes a cross-region AlwaysOn Availability Group deployment.</source>
            <target state="new">Note that this scenario includes a cross-region AlwaysOn Availability Group deployment.</target>
          </trans-unit>
          <trans-unit id="107" xml:space="preserve">
            <source>One example would be to connect to the listener from one of the VMs in the same Azure VNet (but not one that hosts a replica).</source>
            <target state="new">One example would be to connect to the listener from one of the VMs in the same Azure VNet (but not one that hosts a replica).</target>
          </trans-unit>
          <trans-unit id="108" xml:space="preserve">
            <source>An easy way to complete this test is to try to connect SSMS to the availability group listener.</source>
            <target state="new">An easy way to complete this test is to try to connect SSMS to the availability group listener.</target>
          </trans-unit>
          <trans-unit id="109" xml:space="preserve">
            <source>Another simple method is to run <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>SQLCMD.exe<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> as follows:</source>
            <target state="new">Another simple method is to run <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>SQLCMD.exe<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> as follows:</target>
          </trans-unit>
          <trans-unit id="110" xml:space="preserve">
            <source>If the EndpointPort value is 1433, it is not required to specify it in the call.</source>
            <target state="new">If the EndpointPort value is 1433, it is not required to specify it in the call.</target>
          </trans-unit>
          <trans-unit id="111" xml:space="preserve">
            <source>The previous call also assumes that the client machine is joined to the same domain and that the caller has been granted permissions on the database using windows authentication.</source>
            <target state="new">The previous call also assumes that the client machine is joined to the same domain and that the caller has been granted permissions on the database using windows authentication.</target>
          </trans-unit>
          <trans-unit id="112" xml:space="preserve">
            <source>When testing the listener, be sure to fail over the availability group to make sure that clients can connect to the listener across failovers.</source>
            <target state="new">When testing the listener, be sure to fail over the availability group to make sure that clients can connect to the listener across failovers.</target>
          </trans-unit>
        </group>
      </group>
    </body>
  </file>
</xliff>