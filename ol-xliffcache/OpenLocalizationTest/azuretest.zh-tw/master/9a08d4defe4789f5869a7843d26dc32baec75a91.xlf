<?xml version="1.0" encoding="utf-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" source-language="en-us" target-language="zh-tw" original="2/21/2016 5:47:57 PM" tool-id="MarkdownTransformer" product-name="N/A" product-version="N/A" build-num="1">
    <header>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9a08d4defe4789f5869a7843d26dc32baec75a91</xliffext:olfilehash>
      <tool tool-id="MarkdownTransformer" tool-name="MarkdownToXliff" tool-version="1.0" tool-company="Microsoft" />
    </header>
    <body>
      <group extype="content">
        <group id="101">
          <trans-unit id="101" xml:space="preserve">
            <source>App Model v2.0 | Microsoft Azure</source>
            <target state="new">App Model v2.0 | Microsoft Azure</target>
          </trans-unit>
          <trans-unit id="102" xml:space="preserve">
            <source>How to build a .NET MVC Web App that calls web services using personal Microsoft accounts and work or school accounts for sign-in.</source>
            <target state="new">How to build a .NET MVC Web App that calls web services using personal Microsoft accounts and work or school accounts for sign-in.</target>
          </trans-unit>
          <trans-unit id="103" xml:space="preserve">
            <source>App model v2.0 preview: Calling a web API from a .NET web app</source>
            <target state="new">App model v2.0 preview: Calling a web API from a .NET web app</target>
          </trans-unit>
          <trans-unit id="104" xml:space="preserve">
            <source>This information applies to the v2.0 endpoint public preview.</source>
            <target state="new">This information applies to the v2.0 endpoint public preview.</target>
          </trans-unit>
          <trans-unit id="105" xml:space="preserve">
            <source>For instructions on how to integrate with the generally available Azure AD service, please refer to the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Azure Active Directory Developer Guide<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">For instructions on how to integrate with the generally available Azure AD service, please refer to the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Azure Active Directory Developer Guide<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="106" xml:space="preserve">
            <source>With the v2.0 app model, you can quickly add authentication to your web apps and web APIs with support for both personal Microsoft accounts and work or school accounts.</source>
            <target state="new">With the v2.0 app model, you can quickly add authentication to your web apps and web APIs with support for both personal Microsoft accounts and work or school accounts.</target>
          </trans-unit>
          <trans-unit id="107" xml:space="preserve">
            <source>Here, we'll build an MVC web app that:</source>
            <target state="new">Here, we'll build an MVC web app that:</target>
          </trans-unit>
          <trans-unit id="108" xml:space="preserve">
            <source>Signs users in using OpenID Connect, with some help from Microsoft's OWIN middleware.</source>
            <target state="new">Signs users in using OpenID Connect, with some help from Microsoft's OWIN middleware.</target>
          </trans-unit>
          <trans-unit id="109" xml:space="preserve">
            <source>Gets OAuth 2.0 access tokens for a web API using ADAL.</source>
            <target state="new">Gets OAuth 2.0 access tokens for a web API using ADAL.</target>
          </trans-unit>
          <trans-unit id="110" xml:space="preserve">
            <source>Creates, Reads, and Deletes items on a user's "To-Do List", which is hosted on the web api and secured by OAuth 2.0.</source>
            <target state="new">Creates, Reads, and Deletes items on a user's "To-Do List", which is hosted on the web api and secured by OAuth 2.0.</target>
          </trans-unit>
          <trans-unit id="111" xml:space="preserve">
            <source>This tutorial will focus primarily on getting and using access tokens in a web app, described in full <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>here<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">This tutorial will focus primarily on getting and using access tokens in a web app, described in full <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>here<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="112" xml:space="preserve">
            <source>As prerequisites, you may want to first learn how to <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>add basic sign-in to a web app<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> or how to <bpt id="4CapsExtId1">&lt;link&gt;</bpt><bpt id="4CapsExtId2">&lt;linkText&gt;</bpt>properly secure a web API<ept id="4CapsExtId2">&lt;/linkText&gt;</ept><bpt id="4CapsExtId3">&lt;title&gt;</bpt><ept id="4CapsExtId3">&lt;/title&gt;</ept><ept id="4CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">As prerequisites, you may want to first learn how to <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>add basic sign-in to a web app<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> or how to <bpt id="4CapsExtId1">&lt;link&gt;</bpt><bpt id="4CapsExtId2">&lt;linkText&gt;</bpt>properly secure a web API<ept id="4CapsExtId2">&lt;/linkText&gt;</ept><bpt id="4CapsExtId3">&lt;title&gt;</bpt><ept id="4CapsExtId3">&lt;/title&gt;</ept><ept id="4CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="113" xml:space="preserve">
            <source>The basic steps to call the To-Do List Web API from the client are:</source>
            <target state="new">The basic steps to call the To-Do List Web API from the client are:</target>
          </trans-unit>
          <trans-unit id="114" xml:space="preserve">
            <source>Register an app</source>
            <target state="new">Register an app</target>
          </trans-unit>
          <trans-unit id="115" xml:space="preserve">
            <source>Sign the user into the web app using OpenID Connect</source>
            <target state="new">Sign the user into the web app using OpenID Connect</target>
          </trans-unit>
          <trans-unit id="116" xml:space="preserve">
            <source>Use ADAL to get an access token upon user sign-in</source>
            <target state="new">Use ADAL to get an access token upon user sign-in</target>
          </trans-unit>
          <trans-unit id="117" xml:space="preserve">
            <source>Call the To-Do List Web API with an access token.</source>
            <target state="new">Call the To-Do List Web API with an access token.</target>
          </trans-unit>
          <trans-unit id="118" xml:space="preserve">
            <source>The code for this tutorial is maintained <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>on GitHub<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">The code for this tutorial is maintained <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>on GitHub<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="119" xml:space="preserve">
            <source>To follow along, you can <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>download the app's skeleton as a .zip<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> or clone the skeleton:</source>
            <target state="new">To follow along, you can <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>download the app's skeleton as a .zip<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> or clone the skeleton:</target>
          </trans-unit>
          <trans-unit id="120" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>git clone --branch skeleton https://github.com/AzureADQuickStarts/AppModelv2-WebApp-WebAPI-OpenIdConnect-DotNet.git<ept id="1">&lt;/code&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>git clone --branch skeleton https://github.com/AzureADQuickStarts/AppModelv2-WebApp-WebAPI-OpenIdConnect-DotNet.git<ept id="1">&lt;/code&gt;</ept></target>
          </trans-unit>
          <trans-unit id="121" xml:space="preserve">
            <source>Alternatively, you can <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>download the completed app as a .zip<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> or clone the completed app:</source>
            <target state="new">Alternatively, you can <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>download the completed app as a .zip<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> or clone the completed app:</target>
          </trans-unit>
          <trans-unit id="122" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>git clone --branch complete https://github.com/AzureADQuickStarts/AppModelv2-WebApp-WebAPI-OpenIdConnect-DotNet.git<ept id="1">&lt;/code&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>git clone --branch complete https://github.com/AzureADQuickStarts/AppModelv2-WebApp-WebAPI-OpenIdConnect-DotNet.git<ept id="1">&lt;/code&gt;</ept></target>
          </trans-unit>
          <trans-unit id="123" xml:space="preserve">
            <source>1. Register an App</source>
            <target state="new">1. Register an App</target>
          </trans-unit>
          <trans-unit id="124" xml:space="preserve">
            <source>Create a new app at <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>apps.dev.microsoft.com<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>, or follow these <bpt id="4CapsExtId1">&lt;link&gt;</bpt><bpt id="4CapsExtId2">&lt;linkText&gt;</bpt>detailed steps<ept id="4CapsExtId2">&lt;/linkText&gt;</ept><bpt id="4CapsExtId3">&lt;title&gt;</bpt><ept id="4CapsExtId3">&lt;/title&gt;</ept><ept id="4CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">Create a new app at <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>apps.dev.microsoft.com<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>, or follow these <bpt id="4CapsExtId1">&lt;link&gt;</bpt><bpt id="4CapsExtId2">&lt;linkText&gt;</bpt>detailed steps<ept id="4CapsExtId2">&lt;/linkText&gt;</ept><bpt id="4CapsExtId3">&lt;title&gt;</bpt><ept id="4CapsExtId3">&lt;/title&gt;</ept><ept id="4CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="125" xml:space="preserve">
            <source>Make sure to:</source>
            <target state="new">Make sure to:</target>
          </trans-unit>
          <trans-unit id="126" xml:space="preserve">
            <source>Copy down the <bpt id="2">&lt;strong&gt;</bpt>Application Id<ept id="2">&lt;/strong&gt;</ept> assigned to your app, you'll need it soon.</source>
            <target state="new">Copy down the <bpt id="2">&lt;strong&gt;</bpt>Application Id<ept id="2">&lt;/strong&gt;</ept> assigned to your app, you'll need it soon.</target>
          </trans-unit>
          <trans-unit id="127" xml:space="preserve">
            <source>Create an <bpt id="2">&lt;strong&gt;</bpt>App Secret<ept id="2">&lt;/strong&gt;</ept> of the <bpt id="4">&lt;strong&gt;</bpt>Password<ept id="4">&lt;/strong&gt;</ept> type, and copy down its value for later</source>
            <target state="new">Create an <bpt id="2">&lt;strong&gt;</bpt>App Secret<ept id="2">&lt;/strong&gt;</ept> of the <bpt id="4">&lt;strong&gt;</bpt>Password<ept id="4">&lt;/strong&gt;</ept> type, and copy down its value for later</target>
          </trans-unit>
          <trans-unit id="128" xml:space="preserve">
            <source>Add the <bpt id="2">&lt;strong&gt;</bpt>Web<ept id="2">&lt;/strong&gt;</ept> platform for your app.</source>
            <target state="new">Add the <bpt id="2">&lt;strong&gt;</bpt>Web<ept id="2">&lt;/strong&gt;</ept> platform for your app.</target>
          </trans-unit>
          <trans-unit id="129" xml:space="preserve">
            <source>Enter the correct <bpt id="2">&lt;strong&gt;</bpt>Redirect URI<ept id="2">&lt;/strong&gt;</ept>.</source>
            <target state="new">Enter the correct <bpt id="2">&lt;strong&gt;</bpt>Redirect URI<ept id="2">&lt;/strong&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="130" xml:space="preserve">
            <source>The redirect uri indicates to Azure AD where authentication responses should be directed - the default for this tutorial is <bpt id="2">&lt;code&gt;</bpt>https://localhost:44326/<ept id="2">&lt;/code&gt;</ept>.</source>
            <target state="new">The redirect uri indicates to Azure AD where authentication responses should be directed - the default for this tutorial is <bpt id="2">&lt;code&gt;</bpt>https://localhost:44326/<ept id="2">&lt;/code&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="131" xml:space="preserve">
            <source>2. Sign the user in with OpenID Connect</source>
            <target state="new">2. Sign the user in with OpenID Connect</target>
          </trans-unit>
          <trans-unit id="132" xml:space="preserve">
            <source>Here, we'll configure the OWIN middleware to use the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>OpenID Connect authentication protocol<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">Here, we'll configure the OWIN middleware to use the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>OpenID Connect authentication protocol<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="133" xml:space="preserve">
            <source>OWIN will be used to issue sign-in and sign-out requests, manage the user's session, and get information about the user, amongst other things.</source>
            <target state="new">OWIN will be used to issue sign-in and sign-out requests, manage the user's session, and get information about the user, amongst other things.</target>
          </trans-unit>
          <trans-unit id="134" xml:space="preserve">
            <source>To begin, open the <bpt id="2">&lt;code&gt;</bpt>web.config<ept id="2">&lt;/code&gt;</ept> file in the root of the <bpt id="4">&lt;code&gt;</bpt>TodoList-WebApp<ept id="4">&lt;/code&gt;</ept> project, and enter your app's configuration values in the <bpt id="6">&lt;code&gt;</bpt>&lt;appSettings&gt;<ept id="6">&lt;/code&gt;</ept> section.</source>
            <target state="new">To begin, open the <bpt id="2">&lt;code&gt;</bpt>web.config<ept id="2">&lt;/code&gt;</ept> file in the root of the <bpt id="4">&lt;code&gt;</bpt>TodoList-WebApp<ept id="4">&lt;/code&gt;</ept> project, and enter your app's configuration values in the <bpt id="6">&lt;code&gt;</bpt>&lt;appSettings&gt;<ept id="6">&lt;/code&gt;</ept> section.</target>
          </trans-unit>
          <trans-unit id="135" xml:space="preserve">
            <source>The <bpt id="2">&lt;code&gt;</bpt>ida:ClientId<ept id="2">&lt;/code&gt;</ept> is the <bpt id="4">&lt;strong&gt;</bpt>Application Id<ept id="4">&lt;/strong&gt;</ept> assigned to your app in the registration portal.</source>
            <target state="new">The <bpt id="2">&lt;code&gt;</bpt>ida:ClientId<ept id="2">&lt;/code&gt;</ept> is the <bpt id="4">&lt;strong&gt;</bpt>Application Id<ept id="4">&lt;/strong&gt;</ept> assigned to your app in the registration portal.</target>
          </trans-unit>
          <trans-unit id="136" xml:space="preserve">
            <source>The <bpt id="2">&lt;code&gt;</bpt>ida:ClientSecret<ept id="2">&lt;/code&gt;</ept> is the <bpt id="4">&lt;strong&gt;</bpt>App Secret<ept id="4">&lt;/strong&gt;</ept> you created in the registration portal.</source>
            <target state="new">The <bpt id="2">&lt;code&gt;</bpt>ida:ClientSecret<ept id="2">&lt;/code&gt;</ept> is the <bpt id="4">&lt;strong&gt;</bpt>App Secret<ept id="4">&lt;/strong&gt;</ept> you created in the registration portal.</target>
          </trans-unit>
          <trans-unit id="137" xml:space="preserve">
            <source>The <bpt id="2">&lt;code&gt;</bpt>ida:RedirectUri<ept id="2">&lt;/code&gt;</ept> is the <bpt id="4">&lt;strong&gt;</bpt>Redirect Uri<ept id="4">&lt;/strong&gt;</ept> you entered in the portal.</source>
            <target state="new">The <bpt id="2">&lt;code&gt;</bpt>ida:RedirectUri<ept id="2">&lt;/code&gt;</ept> is the <bpt id="4">&lt;strong&gt;</bpt>Redirect Uri<ept id="4">&lt;/strong&gt;</ept> you entered in the portal.</target>
          </trans-unit>
          <trans-unit id="138" xml:space="preserve">
            <source>Open the <bpt id="2">&lt;code&gt;</bpt>web.config<ept id="2">&lt;/code&gt;</ept> file in the root of the <bpt id="4">&lt;code&gt;</bpt>TodoList-Service<ept id="4">&lt;/code&gt;</ept> project, and replace the <bpt id="6">&lt;code&gt;</bpt>ida:Audience<ept id="6">&lt;/code&gt;</ept> with the same <bpt id="8">&lt;strong&gt;</bpt>Application Id<ept id="8">&lt;/strong&gt;</ept> as above.</source>
            <target state="new">Open the <bpt id="2">&lt;code&gt;</bpt>web.config<ept id="2">&lt;/code&gt;</ept> file in the root of the <bpt id="4">&lt;code&gt;</bpt>TodoList-Service<ept id="4">&lt;/code&gt;</ept> project, and replace the <bpt id="6">&lt;code&gt;</bpt>ida:Audience<ept id="6">&lt;/code&gt;</ept> with the same <bpt id="8">&lt;strong&gt;</bpt>Application Id<ept id="8">&lt;/strong&gt;</ept> as above.</target>
          </trans-unit>
          <trans-unit id="139" xml:space="preserve">
            <source>Now add the OWIN middleware NuGet packages to the <bpt id="2">&lt;code&gt;</bpt>TodoList-WebApp<ept id="2">&lt;/code&gt;</ept> project using the Package Manager Console.</source>
            <target state="new">Now add the OWIN middleware NuGet packages to the <bpt id="2">&lt;code&gt;</bpt>TodoList-WebApp<ept id="2">&lt;/code&gt;</ept> project using the Package Manager Console.</target>
          </trans-unit>
          <trans-unit id="140" xml:space="preserve">
            <source>Open the file <bpt id="2">&lt;code&gt;</bpt>App_Start\Startup.Auth.cs<ept id="2">&lt;/code&gt;</ept> and add <bpt id="4">&lt;code&gt;</bpt>using<ept id="4">&lt;/code&gt;</ept> statements for the above libraries.</source>
            <target state="new">Open the file <bpt id="2">&lt;code&gt;</bpt>App_Start\Startup.Auth.cs<ept id="2">&lt;/code&gt;</ept> and add <bpt id="4">&lt;code&gt;</bpt>using<ept id="4">&lt;/code&gt;</ept> statements for the above libraries.</target>
          </trans-unit>
          <trans-unit id="141" xml:space="preserve">
            <source>In the same file, implement the <bpt id="2">&lt;code&gt;</bpt>ConfigureAuth(...)<ept id="2">&lt;/code&gt;</ept> method.</source>
            <target state="new">In the same file, implement the <bpt id="2">&lt;code&gt;</bpt>ConfigureAuth(...)<ept id="2">&lt;/code&gt;</ept> method.</target>
          </trans-unit>
          <trans-unit id="142" xml:space="preserve">
            <source>The parameters you provide in <bpt id="2">&lt;code&gt;</bpt>OpenIDConnectAuthenticationOptions<ept id="2">&lt;/code&gt;</ept> will serve as coordinates for your app to communicate with Azure AD.</source>
            <target state="new">The parameters you provide in <bpt id="2">&lt;code&gt;</bpt>OpenIDConnectAuthenticationOptions<ept id="2">&lt;/code&gt;</ept> will serve as coordinates for your app to communicate with Azure AD.</target>
          </trans-unit>
          <trans-unit id="143" xml:space="preserve">
            <source>3. Use ADAL to get an access token upon user sign-in</source>
            <target state="new">3. Use ADAL to get an access token upon user sign-in</target>
          </trans-unit>
          <trans-unit id="144" xml:space="preserve">
            <source>In the <bpt id="2">&lt;code&gt;</bpt>AuthorizationCodeReceived<ept id="2">&lt;/code&gt;</ept> notification, we want to use <bpt id="4CapsExtId1">&lt;link&gt;</bpt><bpt id="4CapsExtId2">&lt;linkText&gt;</bpt>OAuth 2.0 in tandem with OpenID Connect<ept id="4CapsExtId2">&lt;/linkText&gt;</ept><bpt id="4CapsExtId3">&lt;title&gt;</bpt><ept id="4CapsExtId3">&lt;/title&gt;</ept><ept id="4CapsExtId1">&lt;/link&gt;</ept> to redeem the authorization_code for an access token to the To-Do List Service.</source>
            <target state="new">In the <bpt id="2">&lt;code&gt;</bpt>AuthorizationCodeReceived<ept id="2">&lt;/code&gt;</ept> notification, we want to use <bpt id="4CapsExtId1">&lt;link&gt;</bpt><bpt id="4CapsExtId2">&lt;linkText&gt;</bpt>OAuth 2.0 in tandem with OpenID Connect<ept id="4CapsExtId2">&lt;/linkText&gt;</ept><bpt id="4CapsExtId3">&lt;title&gt;</bpt><ept id="4CapsExtId3">&lt;/title&gt;</ept><ept id="4CapsExtId1">&lt;/link&gt;</ept> to redeem the authorization_code for an access token to the To-Do List Service.</target>
          </trans-unit>
          <trans-unit id="145" xml:space="preserve">
            <source>ADAL can make this process easy for you:</source>
            <target state="new">ADAL can make this process easy for you:</target>
          </trans-unit>
          <trans-unit id="146" xml:space="preserve">
            <source>First, install the preview version of ADAL:</source>
            <target state="new">First, install the preview version of ADAL:</target>
          </trans-unit>
          <trans-unit id="147" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>PM&gt; Install-Package Microsoft.Experimental.IdentityModel.Clients.ActiveDirectory -ProjectName TodoList-WebApp -IncludePrerelease<ept id="1">&lt;/code&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>PM&gt; Install-Package Microsoft.Experimental.IdentityModel.Clients.ActiveDirectory -ProjectName TodoList-WebApp -IncludePrerelease<ept id="1">&lt;/code&gt;</ept></target>
          </trans-unit>
          <trans-unit id="148" xml:space="preserve">
            <source>And add another <bpt id="2">&lt;code&gt;</bpt>using<ept id="2">&lt;/code&gt;</ept> statement to the <bpt id="4">&lt;code&gt;</bpt>App_Start\Startup.Auth.cs<ept id="4">&lt;/code&gt;</ept> file for ADAL.</source>
            <target state="new">And add another <bpt id="2">&lt;code&gt;</bpt>using<ept id="2">&lt;/code&gt;</ept> statement to the <bpt id="4">&lt;code&gt;</bpt>App_Start\Startup.Auth.cs<ept id="4">&lt;/code&gt;</ept> file for ADAL.</target>
          </trans-unit>
          <trans-unit id="149" xml:space="preserve">
            <source>Now add a new method, the <bpt id="2">&lt;code&gt;</bpt>OnAuthorizationCodeReceived<ept id="2">&lt;/code&gt;</ept> event handler.</source>
            <target state="new">Now add a new method, the <bpt id="2">&lt;code&gt;</bpt>OnAuthorizationCodeReceived<ept id="2">&lt;/code&gt;</ept> event handler.</target>
          </trans-unit>
          <trans-unit id="150" xml:space="preserve">
            <source>This handler will use ADAL to acquire an access token to the To-Do List API, and will store the token in ADAL's token cache for later:</source>
            <target state="new">This handler will use ADAL to acquire an access token to the To-Do List API, and will store the token in ADAL's token cache for later:</target>
          </trans-unit>
          <trans-unit id="151" xml:space="preserve">
            <source>In web apps, ADAL has an extensible token cache that can be used to store tokens.</source>
            <target state="new">In web apps, ADAL has an extensible token cache that can be used to store tokens.</target>
          </trans-unit>
          <trans-unit id="152" xml:space="preserve">
            <source>This sample implements the <bpt id="2">&lt;code&gt;</bpt>NaiveSessionCache<ept id="2">&lt;/code&gt;</ept> which uses http session storage to cache tokens.</source>
            <target state="new">This sample implements the <bpt id="2">&lt;code&gt;</bpt>NaiveSessionCache<ept id="2">&lt;/code&gt;</ept> which uses http session storage to cache tokens.</target>
          </trans-unit>
          <trans-unit id="153" xml:space="preserve">
            <source>4. Call the To-Do List Web API</source>
            <target state="new">4. Call the To-Do List Web API</target>
          </trans-unit>
          <trans-unit id="154" xml:space="preserve">
            <source>Now it's time to actually use the access_token you acquired in step 3.</source>
            <target state="new">Now it's time to actually use the access_token you acquired in step 3.</target>
          </trans-unit>
          <trans-unit id="155" xml:space="preserve">
            <source>Open the web app's <bpt id="2">&lt;code&gt;</bpt>Controllers\TodoListController.cs<ept id="2">&lt;/code&gt;</ept> file, which makes all the CRUD requests to the To-Do List API.</source>
            <target state="new">Open the web app's <bpt id="2">&lt;code&gt;</bpt>Controllers\TodoListController.cs<ept id="2">&lt;/code&gt;</ept> file, which makes all the CRUD requests to the To-Do List API.</target>
          </trans-unit>
          <trans-unit id="156" xml:space="preserve">
            <source>You can use ADAL again here to fetch access_tokens from the ADAL cache.</source>
            <target state="new">You can use ADAL again here to fetch access_tokens from the ADAL cache.</target>
          </trans-unit>
          <trans-unit id="157" xml:space="preserve">
            <source>First, add a <bpt id="2">&lt;code&gt;</bpt>using<ept id="2">&lt;/code&gt;</ept> statement for ADAL to this file.</source>
            <target state="new">First, add a <bpt id="2">&lt;code&gt;</bpt>using<ept id="2">&lt;/code&gt;</ept> statement for ADAL to this file.</target>
          </trans-unit>
          <trans-unit id="158" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>using Microsoft.Experimental.IdentityModel.Clients.ActiveDirectory;<ept id="1">&lt;/code&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>using Microsoft.Experimental.IdentityModel.Clients.ActiveDirectory;<ept id="1">&lt;/code&gt;</ept></target>
          </trans-unit>
          <trans-unit id="159" xml:space="preserve">
            <source>In the <bpt id="2">&lt;code&gt;</bpt>Index<ept id="2">&lt;/code&gt;</ept> action, use ADAL's <bpt id="4">&lt;code&gt;</bpt>AcquireTokenSilentAsync<ept id="4">&lt;/code&gt;</ept> method to get an access_token that can be used to read data from the To-Do List service:</source>
            <target state="new">In the <bpt id="2">&lt;code&gt;</bpt>Index<ept id="2">&lt;/code&gt;</ept> action, use ADAL's <bpt id="4">&lt;code&gt;</bpt>AcquireTokenSilentAsync<ept id="4">&lt;/code&gt;</ept> method to get an access_token that can be used to read data from the To-Do List service:</target>
          </trans-unit>
          <trans-unit id="160" xml:space="preserve">
            <source>The sample then adds the resulting token to the HTTP GET request as the <bpt id="2">&lt;code&gt;</bpt>Authorization<ept id="2">&lt;/code&gt;</ept> header, which the To-Do List service uses to authenticate the request.</source>
            <target state="new">The sample then adds the resulting token to the HTTP GET request as the <bpt id="2">&lt;code&gt;</bpt>Authorization<ept id="2">&lt;/code&gt;</ept> header, which the To-Do List service uses to authenticate the request.</target>
          </trans-unit>
          <trans-unit id="161" xml:space="preserve">
            <source>If the To-Do List service returns a <bpt id="2">&lt;code&gt;</bpt>401 Unauthorized<ept id="2">&lt;/code&gt;</ept> response, the access_tokens in ADAL have become invalid for some reason.</source>
            <target state="new">If the To-Do List service returns a <bpt id="2">&lt;code&gt;</bpt>401 Unauthorized<ept id="2">&lt;/code&gt;</ept> response, the access_tokens in ADAL have become invalid for some reason.</target>
          </trans-unit>
          <trans-unit id="162" xml:space="preserve">
            <source>In this case, you should drop any access_tokens from the ADAL cache and show the user a message that they may need to sign in again, which will restart the token acquisition flow.</source>
            <target state="new">In this case, you should drop any access_tokens from the ADAL cache and show the user a message that they may need to sign in again, which will restart the token acquisition flow.</target>
          </trans-unit>
          <trans-unit id="163" xml:space="preserve">
            <source>Similarly, if ADAL is unable to return an access_token for any reason, you should instruct the user to sign in again.</source>
            <target state="new">Similarly, if ADAL is unable to return an access_token for any reason, you should instruct the user to sign in again.</target>
          </trans-unit>
          <trans-unit id="164" xml:space="preserve">
            <source>This is as simple as catching any <bpt id="2">&lt;code&gt;</bpt>AdalException<ept id="2">&lt;/code&gt;</ept>:</source>
            <target state="new">This is as simple as catching any <bpt id="2">&lt;code&gt;</bpt>AdalException<ept id="2">&lt;/code&gt;</ept>:</target>
          </trans-unit>
          <trans-unit id="165" xml:space="preserve">
            <source>The exact same <bpt id="2">&lt;code&gt;</bpt>AcquireTokenSilentAsync<ept id="2">&lt;/code&gt;</ept> call is implementd in the <bpt id="4">&lt;code&gt;</bpt>Create<ept id="4">&lt;/code&gt;</ept> and <bpt id="6">&lt;code&gt;</bpt>Delete<ept id="6">&lt;/code&gt;</ept> actions.</source>
            <target state="new">The exact same <bpt id="2">&lt;code&gt;</bpt>AcquireTokenSilentAsync<ept id="2">&lt;/code&gt;</ept> call is implementd in the <bpt id="4">&lt;code&gt;</bpt>Create<ept id="4">&lt;/code&gt;</ept> and <bpt id="6">&lt;code&gt;</bpt>Delete<ept id="6">&lt;/code&gt;</ept> actions.</target>
          </trans-unit>
          <trans-unit id="166" xml:space="preserve">
            <source>In web apps, you can use this ADAL method to get access_tokens whenever you need them in your app.</source>
            <target state="new">In web apps, you can use this ADAL method to get access_tokens whenever you need them in your app.</target>
          </trans-unit>
          <trans-unit id="167" xml:space="preserve">
            <source>ADAL will take care of acquiring, caching, and refreshing tokens for you.</source>
            <target state="new">ADAL will take care of acquiring, caching, and refreshing tokens for you.</target>
          </trans-unit>
          <trans-unit id="168" xml:space="preserve">
            <source>Finally, build and run your app!  Sign in with either a Microsoft Account or an Azure AD Account, and notice how the user's identity is reflected in the top navigation bar.  Add and delete some items from the user's To-Do List to see the OAuth 2.0 secured API calls in action.  You now have a web app &amp; web API, both secured using industry standard protocols, that can authenticate users with both their personal and work/school accounts.</source>
            <target state="new">Finally, build and run your app!  Sign in with either a Microsoft Account or an Azure AD Account, and notice how the user's identity is reflected in the top navigation bar.  Add and delete some items from the user's To-Do List to see the OAuth 2.0 secured API calls in action.  You now have a web app &amp; web API, both secured using industry standard protocols, that can authenticate users with both their personal and work/school accounts.</target>
          </trans-unit>
          <trans-unit id="169" xml:space="preserve">
            <source>For reference, the completed sample (without your configuration values) <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>is provided here<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">For reference, the completed sample (without your configuration values) <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>is provided here<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="170" xml:space="preserve">
            <source>Next Steps</source>
            <target state="new">Next Steps</target>
          </trans-unit>
          <trans-unit id="171" xml:space="preserve">
            <source>For additional resources, check out:</source>
            <target state="new">For additional resources, check out:</target>
          </trans-unit>
          <trans-unit id="172" xml:space="preserve">
            <source><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>The App Model v2.0 Preview &gt;&gt;<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></source>
            <target state="new"><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>The App Model v2.0 Preview &gt;&gt;<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></target>
          </trans-unit>
          <trans-unit id="173" xml:space="preserve">
            <source><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>StackOverflow "adal" tag &gt;&gt;<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></source>
            <target state="new"><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>StackOverflow "adal" tag &gt;&gt;<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></target>
          </trans-unit>
          <trans-unit id="174" xml:space="preserve">
            <source>test</source>
            <target state="new">test</target>
          </trans-unit>
        </group>
      </group>
    </body>
  </file>
</xliff>