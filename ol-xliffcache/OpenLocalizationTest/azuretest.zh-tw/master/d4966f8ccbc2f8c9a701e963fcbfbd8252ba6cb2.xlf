<?xml version="1.0" encoding="utf-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" source-language="en-us" target-language="zh-tw" original="2/21/2016 7:01:36 PM" tool-id="MarkdownTransformer" product-name="N/A" product-version="N/A" build-num="1">
    <header>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d4966f8ccbc2f8c9a701e963fcbfbd8252ba6cb2</xliffext:olfilehash>
      <tool tool-id="MarkdownTransformer" tool-name="MarkdownToXliff" tool-version="1.0" tool-company="Microsoft" />
    </header>
    <body>
      <group extype="content">
        <group id="101">
          <trans-unit id="101" xml:space="preserve">
            <source>Analyze and Process JSON documents with Hive in HDInsight | Microsoft Azure</source>
            <target state="new">Analyze and Process JSON documents with Hive in HDInsight | Microsoft Azure</target>
          </trans-unit>
          <trans-unit id="102" xml:space="preserve">
            <source>Learn how to use JSON documents and analyze them using Hive in HDInsight.</source>
            <target state="new">Learn how to use JSON documents and analyze them using Hive in HDInsight.</target>
          </trans-unit>
          <trans-unit id="103" xml:space="preserve">
            <source>Process and analyze JSON documents using Hive in HDInsight</source>
            <target state="new">Process and analyze JSON documents using Hive in HDInsight</target>
          </trans-unit>
          <trans-unit id="104" xml:space="preserve">
            <source>Learn how to process and analyze JSON files using Hive in HDInsight.</source>
            <target state="new">Learn how to process and analyze JSON files using Hive in HDInsight.</target>
          </trans-unit>
          <trans-unit id="105" xml:space="preserve">
            <source>The following JSON document will be used in the tutorial</source>
            <target state="new">The following JSON document will be used in the tutorial</target>
          </trans-unit>
          <trans-unit id="106" xml:space="preserve">
            <source>The file can be found at wasb://processjson@hditutorialdata.blob.core.windows.net/.</source>
            <target state="new">The file can be found at wasb://processjson@hditutorialdata.blob.core.windows.net/.</target>
          </trans-unit>
          <trans-unit id="107" xml:space="preserve">
            <source>For more information on using Azure Blob storage with HDInsight, see <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Use HDFS-compatible Azure Blob storage with Hadoop in HDInsight<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">For more information on using Azure Blob storage with HDInsight, see <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Use HDFS-compatible Azure Blob storage with Hadoop in HDInsight<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="108" xml:space="preserve">
            <source>You can copy the file to the default container of your cluster if you want.</source>
            <target state="new">You can copy the file to the default container of your cluster if you want.</target>
          </trans-unit>
          <trans-unit id="109" xml:space="preserve">
            <source>In this tutorial, you will use the Hive console.</source>
            <target state="new">In this tutorial, you will use the Hive console.</target>
          </trans-unit>
          <trans-unit id="110" xml:space="preserve">
            <source>For instructions of opening the Hive console, see <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Use Hive with Hadoop on HDInsight with Remote Desktop<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">For instructions of opening the Hive console, see <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Use Hive with Hadoop on HDInsight with Remote Desktop<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="111" xml:space="preserve">
            <source>Flatten JSON documents</source>
            <target state="new">Flatten JSON documents</target>
          </trans-unit>
          <trans-unit id="112" xml:space="preserve">
            <source>The methods listed in the next section require the JSON document in a single row.</source>
            <target state="new">The methods listed in the next section require the JSON document in a single row.</target>
          </trans-unit>
          <trans-unit id="113" xml:space="preserve">
            <source>So you must flatten the JSON document to a string.</source>
            <target state="new">So you must flatten the JSON document to a string.</target>
          </trans-unit>
          <trans-unit id="114" xml:space="preserve">
            <source>If your JSON document is already flattened, you can skip this step and go straight to the next section on Analyzing JSON data.</source>
            <target state="new">If your JSON document is already flattened, you can skip this step and go straight to the next section on Analyzing JSON data.</target>
          </trans-unit>
          <trans-unit id="115" xml:space="preserve">
            <source>The raw JSON file is located at <bpt id="2">&lt;strong&gt;</bpt>wasb://processjson@hditutorialdata.blob.core.windows.net/<ept id="2">&lt;/strong&gt;</ept>.</source>
            <target state="new">The raw JSON file is located at <bpt id="2">&lt;strong&gt;</bpt>wasb://processjson@hditutorialdata.blob.core.windows.net/<ept id="2">&lt;/strong&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="116" xml:space="preserve">
            <source>The <bpt id="2">&lt;em&gt;</bpt>StudentsRaw<ept id="2">&lt;/em&gt;</ept> Hive table points to the raw un-flattened JSON document.</source>
            <target state="new">The <bpt id="2">&lt;em&gt;</bpt>StudentsRaw<ept id="2">&lt;/em&gt;</ept> Hive table points to the raw un-flattened JSON document.</target>
          </trans-unit>
          <trans-unit id="117" xml:space="preserve">
            <source>The <bpt id="2">&lt;em&gt;</bpt>StudentsOneLine<ept id="2">&lt;/em&gt;</ept> Hive table will store the data in the HDInsight default file system under the <bpt id="4">&lt;em&gt;</bpt>/json/students/<ept id="4">&lt;/em&gt;</ept> path.</source>
            <target state="new">The <bpt id="2">&lt;em&gt;</bpt>StudentsOneLine<ept id="2">&lt;/em&gt;</ept> Hive table will store the data in the HDInsight default file system under the <bpt id="4">&lt;em&gt;</bpt>/json/students/<ept id="4">&lt;/em&gt;</ept> path.</target>
          </trans-unit>
          <trans-unit id="118" xml:space="preserve">
            <source>The INSERT statement populate the StudentOneLine table with the flattened JSON data.</source>
            <target state="new">The INSERT statement populate the StudentOneLine table with the flattened JSON data.</target>
          </trans-unit>
          <trans-unit id="119" xml:space="preserve">
            <source>The SELECT statement shall only return 1 row.</source>
            <target state="new">The SELECT statement shall only return 1 row.</target>
          </trans-unit>
          <trans-unit id="120" xml:space="preserve">
            <source>Here is the output of the SELECT statement:</source>
            <target state="new">Here is the output of the SELECT statement:</target>
          </trans-unit>
          <trans-unit id="121" xml:space="preserve">
            <source><bpt id="1">&lt;linkText&gt;</bpt>Flattening of the JSON document.<ept id="1">&lt;/linkText&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;linkText&gt;</bpt>Flattening of the JSON document.<ept id="1">&lt;/linkText&gt;</ept></target>
          </trans-unit>
          <trans-unit id="122" xml:space="preserve">
            <source>Analyze JSON documents in Hive</source>
            <target state="new">Analyze JSON documents in Hive</target>
          </trans-unit>
          <trans-unit id="123" xml:space="preserve">
            <source>Hive provides three different mechanisms to run queries on JSON documents:</source>
            <target state="new">Hive provides three different mechanisms to run queries on JSON documents:</target>
          </trans-unit>
          <trans-unit id="124" xml:space="preserve">
            <source>use the GET\_JSON\_OBJECT UDF (User Defined Function)</source>
            <target state="new">use the GET\_JSON\_OBJECT UDF (User Defined Function)</target>
          </trans-unit>
          <trans-unit id="125" xml:space="preserve">
            <source>use the JSON_TUPLE UDF</source>
            <target state="new">use the JSON_TUPLE UDF</target>
          </trans-unit>
          <trans-unit id="126" xml:space="preserve">
            <source>use custom SerDe</source>
            <target state="new">use custom SerDe</target>
          </trans-unit>
          <trans-unit id="127" xml:space="preserve">
            <source>write you own UDF using Python or other languages.</source>
            <target state="new">write you own UDF using Python or other languages.</target>
          </trans-unit>
          <trans-unit id="128" xml:space="preserve">
            <source>See <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>this article[hdinsight-python]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> on running your own Python code with Hive.</source>
            <target state="new">See <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>this article[hdinsight-python]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> on running your own Python code with Hive.</target>
          </trans-unit>
          <trans-unit id="129" xml:space="preserve">
            <source>Use the GET\_JSON_OBJECT UDF</source>
            <target state="new">Use the GET\_JSON_OBJECT UDF</target>
          </trans-unit>
          <trans-unit id="130" xml:space="preserve">
            <source>Hive provides a built-in UDF called <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>get json object<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> which can perform JSON querying during run time.</source>
            <target state="new">Hive provides a built-in UDF called <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>get json object<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> which can perform JSON querying during run time.</target>
          </trans-unit>
          <trans-unit id="131" xml:space="preserve">
            <source>This method takes two arguments – the table name and method name which has the flattened JSON document and the JSON field that needs to be parsed.</source>
            <target state="new">This method takes two arguments – the table name and method name which has the flattened JSON document and the JSON field that needs to be parsed.</target>
          </trans-unit>
          <trans-unit id="132" xml:space="preserve">
            <source>Let’s look at an example to see how this UDF works.</source>
            <target state="new">Let’s look at an example to see how this UDF works.</target>
          </trans-unit>
          <trans-unit id="133" xml:space="preserve">
            <source>Get the first name and last name for each student</source>
            <target state="new">Get the first name and last name for each student</target>
          </trans-unit>
          <trans-unit id="134" xml:space="preserve">
            <source>Here is the output when running this query in console window.</source>
            <target state="new">Here is the output when running this query in console window.</target>
          </trans-unit>
          <trans-unit id="135" xml:space="preserve">
            <source><bpt id="1">&lt;linkText&gt;</bpt>get_json_object UDF<ept id="1">&lt;/linkText&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;linkText&gt;</bpt>get_json_object UDF<ept id="1">&lt;/linkText&gt;</ept></target>
          </trans-unit>
          <trans-unit id="136" xml:space="preserve">
            <source>There are a few limitations of the get-json_object UDF.</source>
            <target state="new">There are a few limitations of the get-json_object UDF.</target>
          </trans-unit>
          <trans-unit id="137" xml:space="preserve">
            <source>Because each field in the query requires re-parsing the query, it affects the performance.</source>
            <target state="new">Because each field in the query requires re-parsing the query, it affects the performance.</target>
          </trans-unit>
          <trans-unit id="138" xml:space="preserve">
            <source>GET\_JSON_OBJECT() returns the string representation of an array.</source>
            <target state="new">GET\_JSON_OBJECT() returns the string representation of an array.</target>
          </trans-unit>
          <trans-unit id="139" xml:space="preserve">
            <source>To convert this to a Hive array, you will have to use regular expressions to replace the square brackets ‘[‘ and ‘]’ and then also call split to get the array.</source>
            <target state="new">To convert this to a Hive array, you will have to use regular expressions to replace the square brackets ‘[‘ and ‘]’ and then also call split to get the array.</target>
          </trans-unit>
          <trans-unit id="140" xml:space="preserve">
            <source>This is why the Hive wiki recommends using json_tuple.</source>
            <target state="new">This is why the Hive wiki recommends using json_tuple.</target>
          </trans-unit>
          <trans-unit id="141" xml:space="preserve">
            <source>Use the JSON_TUPLE UDF</source>
            <target state="new">Use the JSON_TUPLE UDF</target>
          </trans-unit>
          <trans-unit id="142" xml:space="preserve">
            <source>Another UDF provided by Hive is called <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>json_tuple<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> which performs better than <bpt id="4CapsExtId1">&lt;link&gt;</bpt><bpt id="4CapsExtId2">&lt;linkText&gt;</bpt>get_ json _object<ept id="4CapsExtId2">&lt;/linkText&gt;</ept><bpt id="4CapsExtId3">&lt;title&gt;</bpt><ept id="4CapsExtId3">&lt;/title&gt;</ept><ept id="4CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">Another UDF provided by Hive is called <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>json_tuple<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> which performs better than <bpt id="4CapsExtId1">&lt;link&gt;</bpt><bpt id="4CapsExtId2">&lt;linkText&gt;</bpt>get_ json _object<ept id="4CapsExtId2">&lt;/linkText&gt;</ept><bpt id="4CapsExtId3">&lt;title&gt;</bpt><ept id="4CapsExtId3">&lt;/title&gt;</ept><ept id="4CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="143" xml:space="preserve">
            <source>This method takes a set of keys and a JSON string, and returns a tuple of values using one function.</source>
            <target state="new">This method takes a set of keys and a JSON string, and returns a tuple of values using one function.</target>
          </trans-unit>
          <trans-unit id="144" xml:space="preserve">
            <source>The following query returns the student id and the grade from the JSON document:</source>
            <target state="new">The following query returns the student id and the grade from the JSON document:</target>
          </trans-unit>
          <trans-unit id="145" xml:space="preserve">
            <source>The output of this script in the Hive console:</source>
            <target state="new">The output of this script in the Hive console:</target>
          </trans-unit>
          <trans-unit id="146" xml:space="preserve">
            <source><bpt id="1">&lt;linkText&gt;</bpt>json_tuple UDF<ept id="1">&lt;/linkText&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;linkText&gt;</bpt>json_tuple UDF<ept id="1">&lt;/linkText&gt;</ept></target>
          </trans-unit>
          <trans-unit id="147" xml:space="preserve">
            <source>JSON\_TUPLE uses the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>lateral view<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> syntax in Hive which allows json\_tuple to create a virtual table by applying the UDT function to each row of the original table.</source>
            <target state="new">JSON\_TUPLE uses the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>lateral view<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> syntax in Hive which allows json\_tuple to create a virtual table by applying the UDT function to each row of the original table.</target>
          </trans-unit>
          <trans-unit id="148" xml:space="preserve">
            <source>Complex JSONs become too unwieldy because of the repeated use of LATERAL VIEW.</source>
            <target state="new">Complex JSONs become too unwieldy because of the repeated use of LATERAL VIEW.</target>
          </trans-unit>
          <trans-unit id="149" xml:space="preserve">
            <source>Furthermore, JSON_TUPLE cannot handle nested JSONs.</source>
            <target state="new">Furthermore, JSON_TUPLE cannot handle nested JSONs.</target>
          </trans-unit>
          <trans-unit id="150" xml:space="preserve">
            <source>Use custom SerDe</source>
            <target state="new">Use custom SerDe</target>
          </trans-unit>
          <trans-unit id="151" xml:space="preserve">
            <source>SerDe is the best choice for parsing nested JSON documents, it allows you to define the JSON schema, and use the schema to parse the documents.</source>
            <target state="new">SerDe is the best choice for parsing nested JSON documents, it allows you to define the JSON schema, and use the schema to parse the documents.</target>
          </trans-unit>
          <trans-unit id="152" xml:space="preserve">
            <source>In this tutorial, you will use one of the more popular SerDe that has been developed by <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>rcongiu<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">In this tutorial, you will use one of the more popular SerDe that has been developed by <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>rcongiu<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="153" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>To use the custom SerDe:<ept id="1">&lt;/strong&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>To use the custom SerDe:<ept id="1">&lt;/strong&gt;</ept></target>
          </trans-unit>
          <trans-unit id="154" xml:space="preserve">
            <source>Install <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Java SE Development Kit 7u55 JDK 1.7.0_55<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">Install <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Java SE Development Kit 7u55 JDK 1.7.0_55<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="155" xml:space="preserve">
            <source>Choose the Windows X64 version of the JDK if you are going to be using the Windows deployment of HDInsight</source>
            <target state="new">Choose the Windows X64 version of the JDK if you are going to be using the Windows deployment of HDInsight</target>
          </trans-unit>
          <trans-unit id="156" xml:space="preserve">
            <source>JDK 1.8 doesn't work with this SerDe.</source>
            <target state="new">JDK 1.8 doesn't work with this SerDe.</target>
          </trans-unit>
          <trans-unit id="157" xml:space="preserve">
            <source>After the installation is completed, add a new user environment variable:</source>
            <target state="new">After the installation is completed, add a new user environment variable:</target>
          </trans-unit>
          <trans-unit id="158" xml:space="preserve">
            <source>Open <bpt id="2">&lt;strong&gt;</bpt>View advanced system settings<ept id="2">&lt;/strong&gt;</ept> from the Windows screen.</source>
            <target state="new">Open <bpt id="2">&lt;strong&gt;</bpt>View advanced system settings<ept id="2">&lt;/strong&gt;</ept> from the Windows screen.</target>
          </trans-unit>
          <trans-unit id="159" xml:space="preserve">
            <source>Click <bpt id="2">&lt;strong&gt;</bpt>Environment Variables<ept id="2">&lt;/strong&gt;</ept>.</source>
            <target state="new">Click <bpt id="2">&lt;strong&gt;</bpt>Environment Variables<ept id="2">&lt;/strong&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="160" xml:space="preserve">
            <source>Add a new <bpt id="2">&lt;strong&gt;</bpt>JAVA_HOME<ept id="2">&lt;/strong&gt;</ept> environment variable is pointing to <bpt id="4">&lt;strong&gt;</bpt>C:\Program Files\Java\jdk1.7.0_55<ept id="4">&lt;/strong&gt;</ept> or wherever your JDK is installed.</source>
            <target state="new">Add a new <bpt id="2">&lt;strong&gt;</bpt>JAVA_HOME<ept id="2">&lt;/strong&gt;</ept> environment variable is pointing to <bpt id="4">&lt;strong&gt;</bpt>C:\Program Files\Java\jdk1.7.0_55<ept id="4">&lt;/strong&gt;</ept> or wherever your JDK is installed.</target>
          </trans-unit>
          <trans-unit id="161" xml:space="preserve">
            <source><bpt id="1">&lt;linkText&gt;</bpt>Setting up correct config values for JDK<ept id="1">&lt;/linkText&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;linkText&gt;</bpt>Setting up correct config values for JDK<ept id="1">&lt;/linkText&gt;</ept></target>
          </trans-unit>
          <trans-unit id="162" xml:space="preserve">
            <source>Install <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Maven 3.3.1<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept></source>
            <target state="new">Install <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Maven 3.3.1<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept></target>
          </trans-unit>
          <trans-unit id="163" xml:space="preserve">
            <source>Add the bin folder to your path by going to Control Panel--&gt;Edit the System Variables for your account Environment variables.</source>
            <target state="new">Add the bin folder to your path by going to Control Panel--&gt;Edit the System Variables for your account Environment variables.</target>
          </trans-unit>
          <trans-unit id="164" xml:space="preserve">
            <source>The screenshot below shows you how to do this.</source>
            <target state="new">The screenshot below shows you how to do this.</target>
          </trans-unit>
          <trans-unit id="165" xml:space="preserve">
            <source><bpt id="1">&lt;linkText&gt;</bpt>Setting up Maven<ept id="1">&lt;/linkText&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;linkText&gt;</bpt>Setting up Maven<ept id="1">&lt;/linkText&gt;</ept></target>
          </trans-unit>
          <trans-unit id="166" xml:space="preserve">
            <source>Clone the project from <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Hive-JSON-SerDe<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> github site.</source>
            <target state="new">Clone the project from <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Hive-JSON-SerDe<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> github site.</target>
          </trans-unit>
          <trans-unit id="167" xml:space="preserve">
            <source>You can do this by clicking on the “Download Zip” button as shown in the screenshot below.</source>
            <target state="new">You can do this by clicking on the “Download Zip” button as shown in the screenshot below.</target>
          </trans-unit>
          <trans-unit id="168" xml:space="preserve">
            <source><bpt id="1">&lt;linkText&gt;</bpt>Cloning the project<ept id="1">&lt;/linkText&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;linkText&gt;</bpt>Cloning the project<ept id="1">&lt;/linkText&gt;</ept></target>
          </trans-unit>
          <trans-unit id="169" xml:space="preserve">
            <source>4: Go to the folder where you have downloaded this package and  type “mvn package”.</source>
            <target state="new">4: Go to the folder where you have downloaded this package and  type “mvn package”.</target>
          </trans-unit>
          <trans-unit id="170" xml:space="preserve">
            <source>This should create the necessary jar files that you can then copy over to the cluster.</source>
            <target state="new">This should create the necessary jar files that you can then copy over to the cluster.</target>
          </trans-unit>
          <trans-unit id="171" xml:space="preserve">
            <source>5: Go to the target folder under the root folder where you downloaded the package.</source>
            <target state="new">5: Go to the target folder under the root folder where you downloaded the package.</target>
          </trans-unit>
          <trans-unit id="172" xml:space="preserve">
            <source>Upload the json-serde-1.1.9.9-Hive13-jar-with-dependencies.jar file to head-node of your cluster.</source>
            <target state="new">Upload the json-serde-1.1.9.9-Hive13-jar-with-dependencies.jar file to head-node of your cluster.</target>
          </trans-unit>
          <trans-unit id="173" xml:space="preserve">
            <source>I usually put it under the hive binary folder: C:\apps\dist\hive-0.13.0.2.1.11.0-2316\bin or something similar.</source>
            <target state="new">I usually put it under the hive binary folder: C:\apps\dist\hive-0.13.0.2.1.11.0-2316\bin or something similar.</target>
          </trans-unit>
          <trans-unit id="174" xml:space="preserve">
            <source>6: In the hive prompt, type “add jar /path/to/json-serde-1.1.9.9-Hive13-jar-with-dependencies.jar”.</source>
            <target state="new">6: In the hive prompt, type “add jar /path/to/json-serde-1.1.9.9-Hive13-jar-with-dependencies.jar”.</target>
          </trans-unit>
          <trans-unit id="175" xml:space="preserve">
            <source>Since in my case, the jar is in the C:\apps\dist\hive-0.13.x\bin folder, I can directly add the jar with the name as shown below:</source>
            <target state="new">Since in my case, the jar is in the C:\apps\dist\hive-0.13.x\bin folder, I can directly add the jar with the name as shown below:</target>
          </trans-unit>
          <trans-unit id="176" xml:space="preserve">
            <source>Now, you are ready to use the SerDe to run queries against the JSON document.</source>
            <target state="new">Now, you are ready to use the SerDe to run queries against the JSON document.</target>
          </trans-unit>
          <trans-unit id="177" xml:space="preserve">
            <source>The following statement create a table with a defined schema</source>
            <target state="new">The following statement create a table with a defined schema</target>
          </trans-unit>
          <trans-unit id="178" xml:space="preserve">
            <source>To list the first name and last name of the student</source>
            <target state="new">To list the first name and last name of the student</target>
          </trans-unit>
          <trans-unit id="179" xml:space="preserve">
            <source>Here is the result from the Hive console.</source>
            <target state="new">Here is the result from the Hive console.</target>
          </trans-unit>
          <trans-unit id="180" xml:space="preserve">
            <source><bpt id="1">&lt;linkText&gt;</bpt>SerDe Query 1<ept id="1">&lt;/linkText&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;linkText&gt;</bpt>SerDe Query 1<ept id="1">&lt;/linkText&gt;</ept></target>
          </trans-unit>
          <trans-unit id="181" xml:space="preserve">
            <source>To calculate the sum of scores of the JSON document</source>
            <target state="new">To calculate the sum of scores of the JSON document</target>
          </trans-unit>
          <trans-unit id="182" xml:space="preserve">
            <source>The query above uses <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>lateral view explode<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> UDF to expand the array of scores so that they can be summed.</source>
            <target state="new">The query above uses <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>lateral view explode<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> UDF to expand the array of scores so that they can be summed.</target>
          </trans-unit>
          <trans-unit id="183" xml:space="preserve">
            <source>Here is the output from the Hive console.</source>
            <target state="new">Here is the output from the Hive console.</target>
          </trans-unit>
          <trans-unit id="184" xml:space="preserve">
            <source><bpt id="1">&lt;linkText&gt;</bpt>SerDe Query 2<ept id="1">&lt;/linkText&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;linkText&gt;</bpt>SerDe Query 2<ept id="1">&lt;/linkText&gt;</ept></target>
          </trans-unit>
          <trans-unit id="185" xml:space="preserve">
            <source>To find which subjects a given student has scored more than 80 points</source>
            <target state="new">To find which subjects a given student has scored more than 80 points</target>
          </trans-unit>
          <trans-unit id="186" xml:space="preserve">
            <source>SELECT</source>
            <target state="new">SELECT</target>
          </trans-unit>
          <trans-unit id="187" xml:space="preserve">
            <source>jt.StudentClassCollection.ClassId</source>
            <target state="new">jt.StudentClassCollection.ClassId</target>
          </trans-unit>
          <trans-unit id="188" xml:space="preserve">
            <source>FROM json_table jt</source>
            <target state="new">FROM json_table jt</target>
          </trans-unit>
          <trans-unit id="189" xml:space="preserve">
            <source>lateral view explode(jt.StudentClassCollection.Score) collection as score  where score &gt; 80;</source>
            <target state="new">lateral view explode(jt.StudentClassCollection.Score) collection as score  where score &gt; 80;</target>
          </trans-unit>
          <trans-unit id="190" xml:space="preserve">
            <source>The query above returns a Hive array unlike get\_json\_object which returns a string.</source>
            <target state="new">The query above returns a Hive array unlike get\_json\_object which returns a string.</target>
          </trans-unit>
          <trans-unit id="191" xml:space="preserve">
            <source><bpt id="1">&lt;linkText&gt;</bpt>SerDe Query 3<ept id="1">&lt;/linkText&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;linkText&gt;</bpt>SerDe Query 3<ept id="1">&lt;/linkText&gt;</ept></target>
          </trans-unit>
          <trans-unit id="192" xml:space="preserve">
            <source>If you want to skil malformed JSON, then as explained in the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>wiki page<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> of this SerDe you can achieve that by typing the code below:</source>
            <target state="new">If you want to skil malformed JSON, then as explained in the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>wiki page<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> of this SerDe you can achieve that by typing the code below:</target>
          </trans-unit>
          <trans-unit id="193" xml:space="preserve">
            <source>Summary</source>
            <target state="new">Summary</target>
          </trans-unit>
          <trans-unit id="194" xml:space="preserve">
            <source>In conclusion, the type of JSON operator in Hive that you choose depends on your scenario.</source>
            <target state="new">In conclusion, the type of JSON operator in Hive that you choose depends on your scenario.</target>
          </trans-unit>
          <trans-unit id="195" xml:space="preserve">
            <source>If you have a simple JSON document and you only have one field to look up on – you can choose to use the Hive UDF get\_json\_object.</source>
            <target state="new">If you have a simple JSON document and you only have one field to look up on – you can choose to use the Hive UDF get\_json\_object.</target>
          </trans-unit>
          <trans-unit id="196" xml:space="preserve">
            <source>If you have more than one keys to look up on then you can use json_tuple.</source>
            <target state="new">If you have more than one keys to look up on then you can use json_tuple.</target>
          </trans-unit>
          <trans-unit id="197" xml:space="preserve">
            <source>If you have a nested document, then you should use the JSON SerDe.</source>
            <target state="new">If you have a nested document, then you should use the JSON SerDe.</target>
          </trans-unit>
          <trans-unit id="198" xml:space="preserve">
            <source>For other related articles, see</source>
            <target state="new">For other related articles, see</target>
          </trans-unit>
          <trans-unit id="199" xml:space="preserve">
            <source><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Use Hive and HiveQL with Hadoop in HDInsight to analyze a sample Apache log4j file<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></source>
            <target state="new"><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Use Hive and HiveQL with Hadoop in HDInsight to analyze a sample Apache log4j file<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></target>
          </trans-unit>
          <trans-unit id="200" xml:space="preserve">
            <source><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Analyze flight delay data by using Hive in HDInsight<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></source>
            <target state="new"><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Analyze flight delay data by using Hive in HDInsight<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></target>
          </trans-unit>
          <trans-unit id="201" xml:space="preserve">
            <source><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Analyze Twitter data using Hive in HDInsight<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></source>
            <target state="new"><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Analyze Twitter data using Hive in HDInsight<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></target>
          </trans-unit>
          <trans-unit id="202" xml:space="preserve">
            <source><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Run a Hadoop job using DocumentDB and HDInsight<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></source>
            <target state="new"><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Run a Hadoop job using DocumentDB and HDInsight<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></target>
          </trans-unit>
          <trans-unit id="203" xml:space="preserve">
            <source>test</source>
            <target state="new">test</target>
          </trans-unit>
        </group>
      </group>
    </body>
  </file>
</xliff>