<?xml version="1.0" encoding="utf-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" source-language="en-us" target-language="zh-tw" original="2/20/2016 11:16:12 AM" tool-id="MarkdownTransformer" product-name="N/A" product-version="N/A" build-num="1">
    <header>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ed1dc033d46ad97988fba29cb1ffc3773463cfdd</xliffext:olfilehash>
      <tool tool-id="MarkdownTransformer" tool-name="MarkdownToXliff" tool-version="1.0" tool-company="Microsoft" />
    </header>
    <body>
      <group extype="content">
        <group id="101">
          <trans-unit id="101" xml:space="preserve">
            <source>Offline Data Sync in Azure Mobile Apps | Microsoft Azure</source>
            <target state="new">Offline Data Sync in Azure Mobile Apps | Microsoft Azure</target>
          </trans-unit>
          <trans-unit id="102" xml:space="preserve">
            <source>Conceptual reference and overview of the offline data sync feature for Azure Mobile Apps</source>
            <target state="new">Conceptual reference and overview of the offline data sync feature for Azure Mobile Apps</target>
          </trans-unit>
          <trans-unit id="103" xml:space="preserve">
            <source>Offline Data Sync in Azure Mobile Apps</source>
            <target state="new">Offline Data Sync in Azure Mobile Apps</target>
          </trans-unit>
          <trans-unit id="104" xml:space="preserve">
            <source><ph id="1">&lt;token href="../../includes/app-service-mobile-note-mobile-services-preview.md"/&gt;</ph></source>
            <target state="new"><ph id="1">&lt;token href="../../includes/app-service-mobile-note-mobile-services-preview.md"/&gt;</ph></target>
          </trans-unit>
          <trans-unit id="105" xml:space="preserve">
            <source>What is offline data sync?</source>
            <target state="new">What is offline data sync?</target>
          </trans-unit>
          <trans-unit id="106" xml:space="preserve">
            <source>Offline data sync is a client and server SDK feature of Azure Mobile Apps that makes it easy for developers to create apps that are functional without a network connection.</source>
            <target state="new">Offline data sync is a client and server SDK feature of Azure Mobile Apps that makes it easy for developers to create apps that are functional without a network connection.</target>
          </trans-unit>
          <trans-unit id="107" xml:space="preserve">
            <source>When your app is in offline mode, users can still create and modify data, which will be saved to a local store.</source>
            <target state="new">When your app is in offline mode, users can still create and modify data, which will be saved to a local store.</target>
          </trans-unit>
          <trans-unit id="108" xml:space="preserve">
            <source>When the app is back online, it can synchronize local changes with your Azure Mobile App backend.</source>
            <target state="new">When the app is back online, it can synchronize local changes with your Azure Mobile App backend.</target>
          </trans-unit>
          <trans-unit id="109" xml:space="preserve">
            <source>The feature also includes support for detecting conflicts when the same record is changed on both the client and the backend.</source>
            <target state="new">The feature also includes support for detecting conflicts when the same record is changed on both the client and the backend.</target>
          </trans-unit>
          <trans-unit id="110" xml:space="preserve">
            <source>Conflicts can then be handled either on the server or the client.</source>
            <target state="new">Conflicts can then be handled either on the server or the client.</target>
          </trans-unit>
          <trans-unit id="111" xml:space="preserve">
            <source>Offline sync has a number of benefits:</source>
            <target state="new">Offline sync has a number of benefits:</target>
          </trans-unit>
          <trans-unit id="112" xml:space="preserve">
            <source>Improve app responsiveness by caching server data locally on the device</source>
            <target state="new">Improve app responsiveness by caching server data locally on the device</target>
          </trans-unit>
          <trans-unit id="113" xml:space="preserve">
            <source>Create robust apps that remain useful when there are network issues</source>
            <target state="new">Create robust apps that remain useful when there are network issues</target>
          </trans-unit>
          <trans-unit id="114" xml:space="preserve">
            <source>Allow end-users to create and modify data even when there is no network access, supporting scenarios with little or no connectivity</source>
            <target state="new">Allow end-users to create and modify data even when there is no network access, supporting scenarios with little or no connectivity</target>
          </trans-unit>
          <trans-unit id="115" xml:space="preserve">
            <source>Sync data across multiple devices and detect conflicts when the same record is modified by two devices</source>
            <target state="new">Sync data across multiple devices and detect conflicts when the same record is modified by two devices</target>
          </trans-unit>
          <trans-unit id="116" xml:space="preserve">
            <source>Limit network use on high-latency or metered networks</source>
            <target state="new">Limit network use on high-latency or metered networks</target>
          </trans-unit>
          <trans-unit id="117" xml:space="preserve">
            <source>The following tutorials show how to add offline sync to your mobile clients using Azure Mobile Apps:</source>
            <target state="new">The following tutorials show how to add offline sync to your mobile clients using Azure Mobile Apps:</target>
          </trans-unit>
          <trans-unit id="118" xml:space="preserve">
            <source>[iOS: Enable offline sync]</source>
            <target state="new">[iOS: Enable offline sync]</target>
          </trans-unit>
          <trans-unit id="119" xml:space="preserve">
            <source>[Xamarin iOS: Enable offline sync]</source>
            <target state="new">[Xamarin iOS: Enable offline sync]</target>
          </trans-unit>
          <trans-unit id="120" xml:space="preserve">
            <source>[Xamarin Android: Enable offline sync]</source>
            <target state="new">[Xamarin Android: Enable offline sync]</target>
          </trans-unit>
          <trans-unit id="121" xml:space="preserve">
            <source>[Windows 8.1: Enable offline sync]</source>
            <target state="new">[Windows 8.1: Enable offline sync]</target>
          </trans-unit>
          <trans-unit id="122" xml:space="preserve">
            <source>What is a sync table?</source>
            <target state="new">What is a sync table?</target>
          </trans-unit>
          <trans-unit id="123" xml:space="preserve">
            <source>To access the "/tables" endpoint, the Azure Mobile client SDKs provide interfaces such as <bpt id="2">&lt;code&gt;</bpt>IMobileServiceTable<ept id="2">&lt;/code&gt;</ept> (.NET client SDK) or <bpt id="4">&lt;code&gt;</bpt>MSTable<ept id="4">&lt;/code&gt;</ept> (iOS client).</source>
            <target state="new">To access the "/tables" endpoint, the Azure Mobile client SDKs provide interfaces such as <bpt id="2">&lt;code&gt;</bpt>IMobileServiceTable<ept id="2">&lt;/code&gt;</ept> (.NET client SDK) or <bpt id="4">&lt;code&gt;</bpt>MSTable<ept id="4">&lt;/code&gt;</ept> (iOS client).</target>
          </trans-unit>
          <trans-unit id="124" xml:space="preserve">
            <source>These APIs connect directly to the Azure Mobile App backend and will fail if the client device does not have a network connection.</source>
            <target state="new">These APIs connect directly to the Azure Mobile App backend and will fail if the client device does not have a network connection.</target>
          </trans-unit>
          <trans-unit id="125" xml:space="preserve">
            <source>To support offline use, your app should instead use the <bpt id="2">&lt;em&gt;</bpt>sync table<ept id="2">&lt;/em&gt;</ept> APIs, such as <bpt id="4">&lt;code&gt;</bpt>IMobileServiceSyncTable<ept id="4">&lt;/code&gt;</ept> (.NET client SDK) or <bpt id="6">&lt;code&gt;</bpt>MSSyncTable<ept id="6">&lt;/code&gt;</ept> (iOS client).</source>
            <target state="new">To support offline use, your app should instead use the <bpt id="2">&lt;em&gt;</bpt>sync table<ept id="2">&lt;/em&gt;</ept> APIs, such as <bpt id="4">&lt;code&gt;</bpt>IMobileServiceSyncTable<ept id="4">&lt;/code&gt;</ept> (.NET client SDK) or <bpt id="6">&lt;code&gt;</bpt>MSSyncTable<ept id="6">&lt;/code&gt;</ept> (iOS client).</target>
          </trans-unit>
          <trans-unit id="126" xml:space="preserve">
            <source>All the same CRUD operations (Create, Read, Update, Delete) work against sync table APIs, except now they will read from or write to a <bpt id="2">&lt;em&gt;</bpt>local store<ept id="2">&lt;/em&gt;</ept>.</source>
            <target state="new">All the same CRUD operations (Create, Read, Update, Delete) work against sync table APIs, except now they will read from or write to a <bpt id="2">&lt;em&gt;</bpt>local store<ept id="2">&lt;/em&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="127" xml:space="preserve">
            <source>Before any sync table operations can be performed, the local store must be initialized.</source>
            <target state="new">Before any sync table operations can be performed, the local store must be initialized.</target>
          </trans-unit>
          <trans-unit id="128" xml:space="preserve">
            <source>What is a local store?</source>
            <target state="new">What is a local store?</target>
          </trans-unit>
          <trans-unit id="129" xml:space="preserve">
            <source>A local store is the data persistence layer on the client device.</source>
            <target state="new">A local store is the data persistence layer on the client device.</target>
          </trans-unit>
          <trans-unit id="130" xml:space="preserve">
            <source>The Azure Mobile Apps client SDKs provide a default local store implementation.</source>
            <target state="new">The Azure Mobile Apps client SDKs provide a default local store implementation.</target>
          </trans-unit>
          <trans-unit id="131" xml:space="preserve">
            <source>On Windows, Xamarin and Android, it is based on SQLite; on iOS, it is based on Core Data.</source>
            <target state="new">On Windows, Xamarin and Android, it is based on SQLite; on iOS, it is based on Core Data.</target>
          </trans-unit>
          <trans-unit id="132" xml:space="preserve">
            <source>To use the SQLite-based implementation on Windows Phone or Windows Store 8.1, you need to install a SQLite extension.</source>
            <target state="new">To use the SQLite-based implementation on Windows Phone or Windows Store 8.1, you need to install a SQLite extension.</target>
          </trans-unit>
          <trans-unit id="133" xml:space="preserve">
            <source>For more details, see [Windows 8.1: Enable offline sync].</source>
            <target state="new">For more details, see [Windows 8.1: Enable offline sync].</target>
          </trans-unit>
          <trans-unit id="134" xml:space="preserve">
            <source>Android and iOS ship with a version of SQLite in the device operating system itself, so it is not necessary to reference your own version of SQLite.</source>
            <target state="new">Android and iOS ship with a version of SQLite in the device operating system itself, so it is not necessary to reference your own version of SQLite.</target>
          </trans-unit>
          <trans-unit id="135" xml:space="preserve">
            <source>Developers can also implement their own local store.</source>
            <target state="new">Developers can also implement their own local store.</target>
          </trans-unit>
          <trans-unit id="136" xml:space="preserve">
            <source>For instance, if you wish to store data in an encrypted format on the mobile client, you can define a local store that uses SQLCipher for encryption.</source>
            <target state="new">For instance, if you wish to store data in an encrypted format on the mobile client, you can define a local store that uses SQLCipher for encryption.</target>
          </trans-unit>
          <trans-unit id="137" xml:space="preserve">
            <source>What is a sync context?</source>
            <target state="new">What is a sync context?</target>
          </trans-unit>
          <trans-unit id="138" xml:space="preserve">
            <source>A <bpt id="2">&lt;em&gt;</bpt>sync context<ept id="2">&lt;/em&gt;</ept> is associated with a mobile client object (such as <bpt id="4">&lt;code&gt;</bpt>IMobileServiceClient<ept id="4">&lt;/code&gt;</ept> or <bpt id="6">&lt;code&gt;</bpt>MSClient<ept id="6">&lt;/code&gt;</ept>) and tracks changes that are made with sync tables.</source>
            <target state="new">A <bpt id="2">&lt;em&gt;</bpt>sync context<ept id="2">&lt;/em&gt;</ept> is associated with a mobile client object (such as <bpt id="4">&lt;code&gt;</bpt>IMobileServiceClient<ept id="4">&lt;/code&gt;</ept> or <bpt id="6">&lt;code&gt;</bpt>MSClient<ept id="6">&lt;/code&gt;</ept>) and tracks changes that are made with sync tables.</target>
          </trans-unit>
          <trans-unit id="139" xml:space="preserve">
            <source>The sync context maintains an <bpt id="2">&lt;em&gt;</bpt>operation queue<ept id="2">&lt;/em&gt;</ept> which keeps an ordered list of CUD operations (Create, Update, Delete)  that will later be sent to the server.</source>
            <target state="new">The sync context maintains an <bpt id="2">&lt;em&gt;</bpt>operation queue<ept id="2">&lt;/em&gt;</ept> which keeps an ordered list of CUD operations (Create, Update, Delete)  that will later be sent to the server.</target>
          </trans-unit>
          <trans-unit id="140" xml:space="preserve">
            <source>A local store is associated with the sync context using an initialize method such as <bpt id="2">&lt;code&gt;</bpt>IMobileServicesSyncContext.InitializeAsync(localstore)<ept id="2">&lt;/code&gt;</ept> in the .NET client SDK.</source>
            <target state="new">A local store is associated with the sync context using an initialize method such as <bpt id="2">&lt;code&gt;</bpt>IMobileServicesSyncContext.InitializeAsync(localstore)<ept id="2">&lt;/code&gt;</ept> in the .NET client SDK.</target>
          </trans-unit>
          <trans-unit id="141" xml:space="preserve">
            <source>How offline synchronization works</source>
            <target state="new">How offline synchronization works</target>
          </trans-unit>
          <trans-unit id="142" xml:space="preserve">
            <source>When using sync tables, your client code controls when local changes will be synchronized with an Azure Mobile App backend.</source>
            <target state="new">When using sync tables, your client code controls when local changes will be synchronized with an Azure Mobile App backend.</target>
          </trans-unit>
          <trans-unit id="143" xml:space="preserve">
            <source>Nothing is sent to the backend until there is a call to <bpt id="2">&lt;em&gt;</bpt>push<ept id="2">&lt;/em&gt;</ept> local changes.</source>
            <target state="new">Nothing is sent to the backend until there is a call to <bpt id="2">&lt;em&gt;</bpt>push<ept id="2">&lt;/em&gt;</ept> local changes.</target>
          </trans-unit>
          <trans-unit id="144" xml:space="preserve">
            <source>Similarly, the local store is populated with new data only when there is a call to <bpt id="2">&lt;em&gt;</bpt>pull<ept id="2">&lt;/em&gt;</ept> data.</source>
            <target state="new">Similarly, the local store is populated with new data only when there is a call to <bpt id="2">&lt;em&gt;</bpt>pull<ept id="2">&lt;/em&gt;</ept> data.</target>
          </trans-unit>
          <trans-unit id="145" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Push<ept id="1">&lt;/strong&gt;</ept>: Push is an operation on the sync context and sends all CUD changes since the last push.</source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Push<ept id="1">&lt;/strong&gt;</ept>: Push is an operation on the sync context and sends all CUD changes since the last push.</target>
          </trans-unit>
          <trans-unit id="146" xml:space="preserve">
            <source>Note that it is not possible to send only an individual table's changes, because otherwise operations could be sent out of order.</source>
            <target state="new">Note that it is not possible to send only an individual table's changes, because otherwise operations could be sent out of order.</target>
          </trans-unit>
          <trans-unit id="147" xml:space="preserve">
            <source>Push executes a series of REST calls to your Azure Mobile App backend, which in turn will modify your server database.</source>
            <target state="new">Push executes a series of REST calls to your Azure Mobile App backend, which in turn will modify your server database.</target>
          </trans-unit>
          <trans-unit id="148" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Pull<ept id="1">&lt;/strong&gt;</ept>: Pull is performed on a per-table basis and can be customized with a query to retrieve only a subset of the server data.</source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Pull<ept id="1">&lt;/strong&gt;</ept>: Pull is performed on a per-table basis and can be customized with a query to retrieve only a subset of the server data.</target>
          </trans-unit>
          <trans-unit id="149" xml:space="preserve">
            <source>The Azure Mobile client SDKs then insert the resulting data into the local store.</source>
            <target state="new">The Azure Mobile client SDKs then insert the resulting data into the local store.</target>
          </trans-unit>
          <trans-unit id="150" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Implicit Pushes<ept id="1">&lt;/strong&gt;</ept>: If a pull is executed against a table that has pending local updates, the pull will first execute a push on the sync context.</source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Implicit Pushes<ept id="1">&lt;/strong&gt;</ept>: If a pull is executed against a table that has pending local updates, the pull will first execute a push on the sync context.</target>
          </trans-unit>
          <trans-unit id="151" xml:space="preserve">
            <source>This helps minimize conflicts between changes that are already queued and new data from the server.</source>
            <target state="new">This helps minimize conflicts between changes that are already queued and new data from the server.</target>
          </trans-unit>
          <trans-unit id="152" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Incremental Sync<ept id="1">&lt;/strong&gt;</ept>: the first parameter to the pull operation is a <bpt id="3">&lt;em&gt;</bpt>query name<ept id="3">&lt;/em&gt;</ept> that is used only on the client.</source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Incremental Sync<ept id="1">&lt;/strong&gt;</ept>: the first parameter to the pull operation is a <bpt id="3">&lt;em&gt;</bpt>query name<ept id="3">&lt;/em&gt;</ept> that is used only on the client.</target>
          </trans-unit>
          <trans-unit id="153" xml:space="preserve">
            <source>If you use a non-null query name, the Azure Mobile SDK will perform an <bpt id="2">&lt;em&gt;</bpt>incremental sync<ept id="2">&lt;/em&gt;</ept>.</source>
            <target state="new">If you use a non-null query name, the Azure Mobile SDK will perform an <bpt id="2">&lt;em&gt;</bpt>incremental sync<ept id="2">&lt;/em&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="154" xml:space="preserve">
            <source>Each time a pull operation returns a set of results, the latest <bpt id="2">&lt;code&gt;</bpt>__updatedAt<ept id="2">&lt;/code&gt;</ept> timestamp from that result set is stored in the SDK local system tables.</source>
            <target state="new">Each time a pull operation returns a set of results, the latest <bpt id="2">&lt;code&gt;</bpt>__updatedAt<ept id="2">&lt;/code&gt;</ept> timestamp from that result set is stored in the SDK local system tables.</target>
          </trans-unit>
          <trans-unit id="155" xml:space="preserve">
            <source>Subsequent pull operations will only retrieve records after that timestamp.</source>
            <target state="new">Subsequent pull operations will only retrieve records after that timestamp.</target>
          </trans-unit>
          <trans-unit id="156" xml:space="preserve">
            <source>To use incremental sync, your server must return meaningful <bpt id="2">&lt;code&gt;</bpt>__updatedAt<ept id="2">&lt;/code&gt;</ept> values and must also support sorting by this field.</source>
            <target state="new">To use incremental sync, your server must return meaningful <bpt id="2">&lt;code&gt;</bpt>__updatedAt<ept id="2">&lt;/code&gt;</ept> values and must also support sorting by this field.</target>
          </trans-unit>
          <trans-unit id="157" xml:space="preserve">
            <source>However, since the SDK adds its own sort on the updatedAt field, you cannot use a pull query that has its own <bpt id="2">&lt;code&gt;</bpt>$orderBy$<ept id="2">&lt;/code&gt;</ept> clause.</source>
            <target state="new">However, since the SDK adds its own sort on the updatedAt field, you cannot use a pull query that has its own <bpt id="2">&lt;code&gt;</bpt>$orderBy$<ept id="2">&lt;/code&gt;</ept> clause.</target>
          </trans-unit>
          <trans-unit id="158" xml:space="preserve">
            <source>The query name can be any string you choose, but it must be unique for each logical query in your app.</source>
            <target state="new">The query name can be any string you choose, but it must be unique for each logical query in your app.</target>
          </trans-unit>
          <trans-unit id="159" xml:space="preserve">
            <source>Otherwise, different pull operations could overwrite the same incremental sync timestamp and your queries can return incorrect results.</source>
            <target state="new">Otherwise, different pull operations could overwrite the same incremental sync timestamp and your queries can return incorrect results.</target>
          </trans-unit>
          <trans-unit id="160" xml:space="preserve">
            <source>If the query has a parameter, one way to create a unique query name is to incorporate the parameter value.</source>
            <target state="new">If the query has a parameter, one way to create a unique query name is to incorporate the parameter value.</target>
          </trans-unit>
          <trans-unit id="161" xml:space="preserve">
            <source>For instance, if you are filtering on userid, your query name could be as follows:</source>
            <target state="new">For instance, if you are filtering on userid, your query name could be as follows:</target>
          </trans-unit>
          <trans-unit id="162" xml:space="preserve">
            <source>If you want to opt out of incremental sync, pass <bpt id="2">&lt;code&gt;</bpt>null<ept id="2">&lt;/code&gt;</ept> as the query ID.</source>
            <target state="new">If you want to opt out of incremental sync, pass <bpt id="2">&lt;code&gt;</bpt>null<ept id="2">&lt;/code&gt;</ept> as the query ID.</target>
          </trans-unit>
          <trans-unit id="163" xml:space="preserve">
            <source>In this case, all records will be retrieved on every call to <bpt id="2">&lt;code&gt;</bpt>PullAsync<ept id="2">&lt;/code&gt;</ept>, which is potentially inefficient.</source>
            <target state="new">In this case, all records will be retrieved on every call to <bpt id="2">&lt;code&gt;</bpt>PullAsync<ept id="2">&lt;/code&gt;</ept>, which is potentially inefficient.</target>
          </trans-unit>
          <trans-unit id="164" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Purging<ept id="1">&lt;/strong&gt;</ept>: You can clear the contents of the local store using <bpt id="3">&lt;code&gt;</bpt>IMobileServiceSyncTable.PurgeAsync<ept id="3">&lt;/code&gt;</ept>.</source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Purging<ept id="1">&lt;/strong&gt;</ept>: You can clear the contents of the local store using <bpt id="3">&lt;code&gt;</bpt>IMobileServiceSyncTable.PurgeAsync<ept id="3">&lt;/code&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="165" xml:space="preserve">
            <source>This may be necessary if you have stale data in the client database, or if you wish to discard all pending changes.</source>
            <target state="new">This may be necessary if you have stale data in the client database, or if you wish to discard all pending changes.</target>
          </trans-unit>
          <trans-unit id="166" xml:space="preserve">
            <source>A purge will clear a table from the local store.</source>
            <target state="new">A purge will clear a table from the local store.</target>
          </trans-unit>
          <trans-unit id="167" xml:space="preserve">
            <source>If there are operations pending synchronization with the server database, the purge will throw an exception unless the <bpt id="2">&lt;em&gt;</bpt>force purge<ept id="2">&lt;/em&gt;</ept> parameter is set.</source>
            <target state="new">If there are operations pending synchronization with the server database, the purge will throw an exception unless the <bpt id="2">&lt;em&gt;</bpt>force purge<ept id="2">&lt;/em&gt;</ept> parameter is set.</target>
          </trans-unit>
          <trans-unit id="168" xml:space="preserve">
            <source>As an example of stale data on the client, suppose in the "todo list" example, Device1 only pulls items that are not completed.</source>
            <target state="new">As an example of stale data on the client, suppose in the "todo list" example, Device1 only pulls items that are not completed.</target>
          </trans-unit>
          <trans-unit id="169" xml:space="preserve">
            <source>Then, a todoitem "Buy milk" is marked completed on the server by another device.</source>
            <target state="new">Then, a todoitem "Buy milk" is marked completed on the server by another device.</target>
          </trans-unit>
          <trans-unit id="170" xml:space="preserve">
            <source>However, Device1 will still have the "Buy milk" todoitem in local store because it is only pulling items that are not marked complete.</source>
            <target state="new">However, Device1 will still have the "Buy milk" todoitem in local store because it is only pulling items that are not marked complete.</target>
          </trans-unit>
          <trans-unit id="171" xml:space="preserve">
            <source>A purge will clear this stale item.</source>
            <target state="new">A purge will clear this stale item.</target>
          </trans-unit>
          <trans-unit id="172" xml:space="preserve">
            <source>Next steps</source>
            <target state="new">Next steps</target>
          </trans-unit>
          <trans-unit id="173" xml:space="preserve">
            <source>[iOS: Enable offline sync]</source>
            <target state="new">[iOS: Enable offline sync]</target>
          </trans-unit>
          <trans-unit id="174" xml:space="preserve">
            <source>[Xamarin iOS: Enable offline sync]</source>
            <target state="new">[Xamarin iOS: Enable offline sync]</target>
          </trans-unit>
          <trans-unit id="175" xml:space="preserve">
            <source>[Xamarin Android: Enable offline sync]</source>
            <target state="new">[Xamarin Android: Enable offline sync]</target>
          </trans-unit>
          <trans-unit id="176" xml:space="preserve">
            <source>[Windows 8.1: Enable offline sync]</source>
            <target state="new">[Windows 8.1: Enable offline sync]</target>
          </trans-unit>
        </group>
      </group>
    </body>
  </file>
</xliff>