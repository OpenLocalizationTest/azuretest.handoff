<?xml version="1.0" encoding="utf-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" source-language="en-us" target-language="zh-tw" original="2/21/2016 7:34:37 PM" tool-id="MarkdownTransformer" product-name="N/A" product-version="N/A" build-num="1">
    <header>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">24e6198bb23881b4882af644dfd11604d2cb7b74</xliffext:olfilehash>
      <tool tool-id="MarkdownTransformer" tool-name="MarkdownToXliff" tool-version="1.0" tool-company="Microsoft" />
    </header>
    <body>
      <group extype="content">
        <group id="101">
          <trans-unit id="101" xml:space="preserve">
            <source>Using Twilio for Voice, VoIP, and SMS Messaging in Azure</source>
            <target state="new">Using Twilio for Voice, VoIP, and SMS Messaging in Azure</target>
          </trans-unit>
          <trans-unit id="102" xml:space="preserve">
            <source>Learn how to make a phone call and send a SMS message with the Twilio API service on Azure. Code samples written in Node.js.</source>
            <target state="new">Learn how to make a phone call and send a SMS message with the Twilio API service on Azure. Code samples written in Node.js.</target>
          </trans-unit>
          <trans-unit id="103" xml:space="preserve">
            <source>Using Twilio for Voice, VoIP, and SMS Messaging in Azure</source>
            <target state="new">Using Twilio for Voice, VoIP, and SMS Messaging in Azure</target>
          </trans-unit>
          <trans-unit id="104" xml:space="preserve">
            <source>This guide demonstrates how to build apps that communicate with Twilio and node.js on Azure.</source>
            <target state="new">This guide demonstrates how to build apps that communicate with Twilio and node.js on Azure.</target>
          </trans-unit>
          <trans-unit id="105" xml:space="preserve">
            <source><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="106" xml:space="preserve">
            <source>What is Twilio?</source>
            <target state="new">What is Twilio?</target>
          </trans-unit>
          <trans-unit id="107" xml:space="preserve">
            <source>Twilio is an API platform that makes it easy for developers to make and receive phone calls, send and receive text messages, and embed VoIP calling into browser-based and native mobile applications.</source>
            <target state="new">Twilio is an API platform that makes it easy for developers to make and receive phone calls, send and receive text messages, and embed VoIP calling into browser-based and native mobile applications.</target>
          </trans-unit>
          <trans-unit id="108" xml:space="preserve">
            <source>Let's briefly go over how this works before diving in.</source>
            <target state="new">Let's briefly go over how this works before diving in.</target>
          </trans-unit>
          <trans-unit id="109" xml:space="preserve">
            <source>Receiving Calls and Text Messages</source>
            <target state="new">Receiving Calls and Text Messages</target>
          </trans-unit>
          <trans-unit id="110" xml:space="preserve">
            <source>Twilio allows developers to <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>purchase programmable phone numbers[purchase_phone]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> which can be used to both send and receive calls and text messages.</source>
            <target state="new">Twilio allows developers to <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>purchase programmable phone numbers[purchase_phone]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> which can be used to both send and receive calls and text messages.</target>
          </trans-unit>
          <trans-unit id="111" xml:space="preserve">
            <source>When a Twilio number receives an inbound call or text, Twilio will send your web application an HTTP POST or GET request, asking you for instructions on how to handle the call or text.</source>
            <target state="new">When a Twilio number receives an inbound call or text, Twilio will send your web application an HTTP POST or GET request, asking you for instructions on how to handle the call or text.</target>
          </trans-unit>
          <trans-unit id="112" xml:space="preserve">
            <source>Your server will respond to Twilio's HTTP request with <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>TwiML[twiml]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>, a simple set of XML tags that contain instructions on how to handle a call or text.</source>
            <target state="new">Your server will respond to Twilio's HTTP request with <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>TwiML[twiml]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>, a simple set of XML tags that contain instructions on how to handle a call or text.</target>
          </trans-unit>
          <trans-unit id="113" xml:space="preserve">
            <source>We will see examples of TwiML in just a moment.</source>
            <target state="new">We will see examples of TwiML in just a moment.</target>
          </trans-unit>
          <trans-unit id="114" xml:space="preserve">
            <source>Making Calls and Sending Text Messages</source>
            <target state="new">Making Calls and Sending Text Messages</target>
          </trans-unit>
          <trans-unit id="115" xml:space="preserve">
            <source>By making HTTP requests to the Twilio web service API, developers can send text messages or initiate outbound phone calls.</source>
            <target state="new">By making HTTP requests to the Twilio web service API, developers can send text messages or initiate outbound phone calls.</target>
          </trans-unit>
          <trans-unit id="116" xml:space="preserve">
            <source>For outbound calls, the developer must also specify a URL that returns TwiML instructions for how to handle the outbound call once it is connected.</source>
            <target state="new">For outbound calls, the developer must also specify a URL that returns TwiML instructions for how to handle the outbound call once it is connected.</target>
          </trans-unit>
          <trans-unit id="117" xml:space="preserve">
            <source>Embedding VoIP Capabilities in UI code (JavaScript, iOS, or Android)</source>
            <target state="new">Embedding VoIP Capabilities in UI code (JavaScript, iOS, or Android)</target>
          </trans-unit>
          <trans-unit id="118" xml:space="preserve">
            <source>Twilio provides a client-side SDK which can turn any desktop web browser, iOS app, or Android app into a VoIP phone.</source>
            <target state="new">Twilio provides a client-side SDK which can turn any desktop web browser, iOS app, or Android app into a VoIP phone.</target>
          </trans-unit>
          <trans-unit id="119" xml:space="preserve">
            <source>In this article, we will focus on how to use VoIP calling in the browser.</source>
            <target state="new">In this article, we will focus on how to use VoIP calling in the browser.</target>
          </trans-unit>
          <trans-unit id="120" xml:space="preserve">
            <source>In addition to the Twilio JavaScript SDK running in the browser, a server-side application (our node.js application) must be used to issue a "capability token" to the JavaScript client.</source>
            <target state="new">In addition to the Twilio JavaScript SDK running in the browser, a server-side application (our node.js application) must be used to issue a "capability token" to the JavaScript client.</target>
          </trans-unit>
          <trans-unit id="121" xml:space="preserve">
            <source>You can read more about using VoIP with node.js <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>on the Twilio dev blog[voipnode]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">You can read more about using VoIP with node.js <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>on the Twilio dev blog[voipnode]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="122" xml:space="preserve">
            <source><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="123" xml:space="preserve">
            <source>Sign Up For Twilio (Microsoft Discount)</source>
            <target state="new">Sign Up For Twilio (Microsoft Discount)</target>
          </trans-unit>
          <trans-unit id="124" xml:space="preserve">
            <source>Before using Twilio services, you must first <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>sign up for an account[signup]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">Before using Twilio services, you must first <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>sign up for an account[signup]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="125" xml:space="preserve">
            <source>Microsoft Azure customers receive a special discount - <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>be sure to sign up here[signup]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>!</source>
            <target state="new">Microsoft Azure customers receive a special discount - <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>be sure to sign up here[signup]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>!</target>
          </trans-unit>
          <trans-unit id="126" xml:space="preserve">
            <source><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="127" xml:space="preserve">
            <source>Create and Deploy a node.js Azure Website</source>
            <target state="new">Create and Deploy a node.js Azure Website</target>
          </trans-unit>
          <trans-unit id="128" xml:space="preserve">
            <source>Next, you will need to create a node.js website running on Azure.</source>
            <target state="new">Next, you will need to create a node.js website running on Azure.</target>
          </trans-unit>
          <trans-unit id="129" xml:space="preserve">
            <source><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>The official documentation for doing this is located here[azure_new_site]<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new"><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>The official documentation for doing this is located here[azure_new_site]<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="130" xml:space="preserve">
            <source>At a high level, you will be doing the following:</source>
            <target state="new">At a high level, you will be doing the following:</target>
          </trans-unit>
          <trans-unit id="131" xml:space="preserve">
            <source>Signing up for an Azure account, if you don't have one already</source>
            <target state="new">Signing up for an Azure account, if you don't have one already</target>
          </trans-unit>
          <trans-unit id="132" xml:space="preserve">
            <source>Using the Azure admin console to create a new website</source>
            <target state="new">Using the Azure admin console to create a new website</target>
          </trans-unit>
          <trans-unit id="133" xml:space="preserve">
            <source>Adding source control support (we will assume you used git)</source>
            <target state="new">Adding source control support (we will assume you used git)</target>
          </trans-unit>
          <trans-unit id="134" xml:space="preserve">
            <source>Creating a file <bpt id="2">&lt;code&gt;</bpt>server.js<ept id="2">&lt;/code&gt;</ept> with a simple node.js web application</source>
            <target state="new">Creating a file <bpt id="2">&lt;code&gt;</bpt>server.js<ept id="2">&lt;/code&gt;</ept> with a simple node.js web application</target>
          </trans-unit>
          <trans-unit id="135" xml:space="preserve">
            <source>Deploying this simple application to Azure</source>
            <target state="new">Deploying this simple application to Azure</target>
          </trans-unit>
          <trans-unit id="136" xml:space="preserve">
            <source><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="137" xml:space="preserve">
            <source>Configure the Twilio Module</source>
            <target state="new">Configure the Twilio Module</target>
          </trans-unit>
          <trans-unit id="138" xml:space="preserve">
            <source>Next, we will begin to write a simple node.js application which makes use of the Twilio API.</source>
            <target state="new">Next, we will begin to write a simple node.js application which makes use of the Twilio API.</target>
          </trans-unit>
          <trans-unit id="139" xml:space="preserve">
            <source>Before we begin, we need to configure our Twilio account credentials.</source>
            <target state="new">Before we begin, we need to configure our Twilio account credentials.</target>
          </trans-unit>
          <trans-unit id="140" xml:space="preserve">
            <source>Configuring Twilio Credentials in System Environment Variables</source>
            <target state="new">Configuring Twilio Credentials in System Environment Variables</target>
          </trans-unit>
          <trans-unit id="141" xml:space="preserve">
            <source>In order to make authenticated requests against the Twilio back end, we need our account SID and auth token, which function as the username and password set for our Twilio account.</source>
            <target state="new">In order to make authenticated requests against the Twilio back end, we need our account SID and auth token, which function as the username and password set for our Twilio account.</target>
          </trans-unit>
          <trans-unit id="142" xml:space="preserve">
            <source>The most secure way to configure these for use with the node module in Azure is via system environment variables, which you can set directly in the Azure admin console.</source>
            <target state="new">The most secure way to configure these for use with the node module in Azure is via system environment variables, which you can set directly in the Azure admin console.</target>
          </trans-unit>
          <trans-unit id="143" xml:space="preserve">
            <source>Select your node.js website, and click the "CONFIGURE" link.</source>
            <target state="new">Select your node.js website, and click the "CONFIGURE" link.</target>
          </trans-unit>
          <trans-unit id="144" xml:space="preserve">
            <source>If you scroll down a bit, you will see an area where you can set configuration properties for your application.</source>
            <target state="new">If you scroll down a bit, you will see an area where you can set configuration properties for your application.</target>
          </trans-unit>
          <trans-unit id="145" xml:space="preserve">
            <source>Enter your Twilio account credentials (<bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>found on your Twilio dashboard[twilio_dashboard]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>) as shown - make sure to name them "TWILIO_ACCOUNT_SID" and "TWILIO_AUTH_TOKEN", respectively:</source>
            <target state="new">Enter your Twilio account credentials (<bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>found on your Twilio dashboard[twilio_dashboard]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>) as shown - make sure to name them "TWILIO_ACCOUNT_SID" and "TWILIO_AUTH_TOKEN", respectively:</target>
          </trans-unit>
          <trans-unit id="146" xml:space="preserve">
            <source><bpt id="1">&lt;linkText&gt;</bpt>Azure admin console<ept id="1">&lt;/linkText&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;linkText&gt;</bpt>Azure admin console<ept id="1">&lt;/linkText&gt;</ept></target>
          </trans-unit>
          <trans-unit id="147" xml:space="preserve">
            <source>Once you have configured these variables, restart your application in the Azure console.</source>
            <target state="new">Once you have configured these variables, restart your application in the Azure console.</target>
          </trans-unit>
          <trans-unit id="148" xml:space="preserve">
            <source>Declaring the Twilio module in package.json</source>
            <target state="new">Declaring the Twilio module in package.json</target>
          </trans-unit>
          <trans-unit id="149" xml:space="preserve">
            <source>Next, we need to create a package.json to manage our node module dependencies via [npm].</source>
            <target state="new">Next, we need to create a package.json to manage our node module dependencies via [npm].</target>
          </trans-unit>
          <trans-unit id="150" xml:space="preserve">
            <source>At the same level as the "server.js" file you created in the Azure/node.js tutorial, create a file named "package.json".</source>
            <target state="new">At the same level as the "server.js" file you created in the Azure/node.js tutorial, create a file named "package.json".</target>
          </trans-unit>
          <trans-unit id="151" xml:space="preserve">
            <source>Inside this file, place the following:</source>
            <target state="new">Inside this file, place the following:</target>
          </trans-unit>
          <trans-unit id="152" xml:space="preserve">
            <source>{</source>
            <target state="new">{</target>
          </trans-unit>
          <trans-unit id="153" xml:space="preserve">
            <source>"name": "application-name",</source>
            <target state="new">"name": "application-name",</target>
          </trans-unit>
          <trans-unit id="154" xml:space="preserve">
            <source>"version": "0.0.1",</source>
            <target state="new">"version": "0.0.1",</target>
          </trans-unit>
          <trans-unit id="155" xml:space="preserve">
            <source>"private": true,</source>
            <target state="new">"private": true,</target>
          </trans-unit>
          <trans-unit id="156" xml:space="preserve">
            <source>"scripts": {</source>
            <target state="new">"scripts": {</target>
          </trans-unit>
          <trans-unit id="157" xml:space="preserve">
            <source>"start": "node server"</source>
            <target state="new">"start": "node server"</target>
          </trans-unit>
          <trans-unit id="158" xml:space="preserve">
            <source>},</source>
            <target state="new">},</target>
          </trans-unit>
          <trans-unit id="159" xml:space="preserve">
            <source>"dependencies": {</source>
            <target state="new">"dependencies": {</target>
          </trans-unit>
          <trans-unit id="160" xml:space="preserve">
            <source>"express": "3.1.0",</source>
            <target state="new">"express": "3.1.0",</target>
          </trans-unit>
          <trans-unit id="161" xml:space="preserve">
            <source>"ejs": "*",</source>
            <target state="new">"ejs": "*",</target>
          </trans-unit>
          <trans-unit id="162" xml:space="preserve">
            <source>"twilio":"*"</source>
            <target state="new">"twilio":"*"</target>
          </trans-unit>
          <trans-unit id="163" xml:space="preserve">
            <source>}</source>
            <target state="new">}</target>
          </trans-unit>
          <trans-unit id="164" xml:space="preserve">
            <source>}</source>
            <target state="new">}</target>
          </trans-unit>
          <trans-unit id="165" xml:space="preserve">
            <source>This declares the twilio module as a dependency, as well as the popular <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>express web framework[express]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> and the EJS template engine.</source>
            <target state="new">This declares the twilio module as a dependency, as well as the popular <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>express web framework[express]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> and the EJS template engine.</target>
          </trans-unit>
          <trans-unit id="166" xml:space="preserve">
            <source>Okay, now we're all set - let's write some code!</source>
            <target state="new">Okay, now we're all set - let's write some code!</target>
          </trans-unit>
          <trans-unit id="167" xml:space="preserve">
            <source><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="168" xml:space="preserve">
            <source>Make an Outbound Call</source>
            <target state="new">Make an Outbound Call</target>
          </trans-unit>
          <trans-unit id="169" xml:space="preserve">
            <source>Let's create a simple form that will place a call to a number we choose.</source>
            <target state="new">Let's create a simple form that will place a call to a number we choose.</target>
          </trans-unit>
          <trans-unit id="170" xml:space="preserve">
            <source>Open up server.js, and enter the following code.</source>
            <target state="new">Open up server.js, and enter the following code.</target>
          </trans-unit>
          <trans-unit id="171" xml:space="preserve">
            <source>Note where it says "CHANGE_ME" - put the name of your azure website there:</source>
            <target state="new">Note where it says "CHANGE_ME" - put the name of your azure website there:</target>
          </trans-unit>
          <trans-unit id="172" xml:space="preserve">
            <source>Next, create a directory called "views" - inside this directory, create a file named "index.ejs" with the following contents:</source>
            <target state="new">Next, create a directory called "views" - inside this directory, create a file named "index.ejs" with the following contents:</target>
          </trans-unit>
          <trans-unit id="173" xml:space="preserve">
            <source>Now, deploy your website to Azure and open your home .</source>
            <target state="new">Now, deploy your website to Azure and open your home .</target>
          </trans-unit>
          <trans-unit id="174" xml:space="preserve">
            <source>You should be able to enter your phone number in the text field, and receive a call from your Twilio number!</source>
            <target state="new">You should be able to enter your phone number in the text field, and receive a call from your Twilio number!</target>
          </trans-unit>
          <trans-unit id="175" xml:space="preserve">
            <source><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="176" xml:space="preserve">
            <source>Send an SMS Message</source>
            <target state="new">Send an SMS Message</target>
          </trans-unit>
          <trans-unit id="177" xml:space="preserve">
            <source>Now, let's set up a user interface and form handling logic to send a text message.</source>
            <target state="new">Now, let's set up a user interface and form handling logic to send a text message.</target>
          </trans-unit>
          <trans-unit id="178" xml:space="preserve">
            <source>Open up "server.js", and add the following code after the last call to "app.post":</source>
            <target state="new">Open up "server.js", and add the following code after the last call to "app.post":</target>
          </trans-unit>
          <trans-unit id="179" xml:space="preserve">
            <source>In "views/index.ejs", add another form under the first one to submit a number and a text message:</source>
            <target state="new">In "views/index.ejs", add another form under the first one to submit a number and a text message:</target>
          </trans-unit>
          <trans-unit id="180" xml:space="preserve">
            <source>Redeploy your application to Azure, and you should now be able to submit that form and send yourself (or any of your closest friends) a text message!</source>
            <target state="new">Redeploy your application to Azure, and you should now be able to submit that form and send yourself (or any of your closest friends) a text message!</target>
          </trans-unit>
          <trans-unit id="181" xml:space="preserve">
            <source><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="182" xml:space="preserve">
            <source>Next Steps</source>
            <target state="new">Next Steps</target>
          </trans-unit>
          <trans-unit id="183" xml:space="preserve">
            <source>You have now learned the basics of using node.js and Twilio to build apps that communicate.</source>
            <target state="new">You have now learned the basics of using node.js and Twilio to build apps that communicate.</target>
          </trans-unit>
          <trans-unit id="184" xml:space="preserve">
            <source>But these examples barely scratch the surface of what's possible with Twilio and node.js.</source>
            <target state="new">But these examples barely scratch the surface of what's possible with Twilio and node.js.</target>
          </trans-unit>
          <trans-unit id="185" xml:space="preserve">
            <source>For more information using Twilio with node.js, check out the following resources:</source>
            <target state="new">For more information using Twilio with node.js, check out the following resources:</target>
          </trans-unit>
          <trans-unit id="186" xml:space="preserve">
            <source><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Official module docs[docs]<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></source>
            <target state="new"><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Official module docs[docs]<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></target>
          </trans-unit>
          <trans-unit id="187" xml:space="preserve">
            <source><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Tutorial on VoIP with node.js applications[voipnode]<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></source>
            <target state="new"><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Tutorial on VoIP with node.js applications[voipnode]<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></target>
          </trans-unit>
          <trans-unit id="188" xml:space="preserve">
            <source><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Votr - a real-time SMS voting application with node.js and CouchDB (three parts)[votr]<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></source>
            <target state="new"><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Votr - a real-time SMS voting application with node.js and CouchDB (three parts)[votr]<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></target>
          </trans-unit>
          <trans-unit id="189" xml:space="preserve">
            <source><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Pair programming in the browser with node.js[pair]<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></source>
            <target state="new"><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Pair programming in the browser with node.js[pair]<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></target>
          </trans-unit>
          <trans-unit id="190" xml:space="preserve">
            <source>We hope you love hacking node.js and Twilio on Azure!</source>
            <target state="new">We hope you love hacking node.js and Twilio on Azure!</target>
          </trans-unit>
          <trans-unit id="191" xml:space="preserve">
            <source>test</source>
            <target state="new">test</target>
          </trans-unit>
        </group>
      </group>
    </body>
  </file>
</xliff>