<?xml version="1.0" encoding="utf-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" source-language="en-us" target-language="zh-tw" original="2/20/2016 12:30:39 PM" tool-id="MarkdownTransformer" product-name="N/A" product-version="N/A" build-num="1">
    <header>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b034e034d6971d77dabf1b1ebb7b5572c07c32f3</xliffext:olfilehash>
      <tool tool-id="MarkdownTransformer" tool-name="MarkdownToXliff" tool-version="1.0" tool-company="Microsoft" />
    </header>
    <body>
      <group extype="content">
        <group id="101">
          <trans-unit id="101" xml:space="preserve">
            <source>Reliable Actors Distributed Computation pattern</source>
            <target state="new">Reliable Actors Distributed Computation pattern</target>
          </trans-unit>
          <trans-unit id="102" xml:space="preserve">
            <source>Service Fabric Reliable Actors are a good fit with parallel asynchronous messaging, easily managed distributed state, and parallel computation.</source>
            <target state="new">Service Fabric Reliable Actors are a good fit with parallel asynchronous messaging, easily managed distributed state, and parallel computation.</target>
          </trans-unit>
          <trans-unit id="103" xml:space="preserve">
            <source>Reliable Actors design pattern: distributed computation</source>
            <target state="new">Reliable Actors design pattern: distributed computation</target>
          </trans-unit>
          <trans-unit id="104" xml:space="preserve">
            <source>We owe this one in part to watching a real life customer whip out a financial calculation in Service Fabric Reliable Actors in an absurdly small amount of time—a Monte Carlo simulation for risk calculation to be exact.</source>
            <target state="new">We owe this one in part to watching a real life customer whip out a financial calculation in Service Fabric Reliable Actors in an absurdly small amount of time—a Monte Carlo simulation for risk calculation to be exact.</target>
          </trans-unit>
          <trans-unit id="105" xml:space="preserve">
            <source>At first, especially to those who do not have domain specific knowledge, Azure Service Fabric's handling of this kind of workload, as opposed to say more traditional approaches such as Map/Reduce or MPI, may not be obvious.</source>
            <target state="new">At first, especially to those who do not have domain specific knowledge, Azure Service Fabric's handling of this kind of workload, as opposed to say more traditional approaches such as Map/Reduce or MPI, may not be obvious.</target>
          </trans-unit>
          <trans-unit id="106" xml:space="preserve">
            <source>But it turns out that Azure Service Fabric is a good fit with parallel asynchronous messaging, easily managed distributed state, and parallel computation as the following diagram depicts:</source>
            <target state="new">But it turns out that Azure Service Fabric is a good fit with parallel asynchronous messaging, easily managed distributed state, and parallel computation as the following diagram depicts:</target>
          </trans-unit>
          <trans-unit id="107" xml:space="preserve">
            <source><bpt id="1">&lt;linkText&gt;</bpt><ept id="1">&lt;/linkText&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;linkText&gt;</bpt><ept id="1">&lt;/linkText&gt;</ept></target>
          </trans-unit>
          <trans-unit id="108" xml:space="preserve">
            <source>In the following example, we simply calculate Pi using a Monte Carlo Simulation.</source>
            <target state="new">In the following example, we simply calculate Pi using a Monte Carlo Simulation.</target>
          </trans-unit>
          <trans-unit id="109" xml:space="preserve">
            <source>We have the following actors:</source>
            <target state="new">We have the following actors:</target>
          </trans-unit>
          <trans-unit id="110" xml:space="preserve">
            <source>Processor responsible for calculating Pi using PoolTask Actors.</source>
            <target state="new">Processor responsible for calculating Pi using PoolTask Actors.</target>
          </trans-unit>
          <trans-unit id="111" xml:space="preserve">
            <source>PoolTask responsible for Monte Carlo simulation and sending results to Aggregator.</source>
            <target state="new">PoolTask responsible for Monte Carlo simulation and sending results to Aggregator.</target>
          </trans-unit>
          <trans-unit id="112" xml:space="preserve">
            <source>Aggregator responsible for, well, aggregating results and sending them to Finaliser.</source>
            <target state="new">Aggregator responsible for, well, aggregating results and sending them to Finaliser.</target>
          </trans-unit>
          <trans-unit id="113" xml:space="preserve">
            <source>Finaliser responsible for calculating the final result and printing on screen.</source>
            <target state="new">Finaliser responsible for calculating the final result and printing on screen.</target>
          </trans-unit>
          <trans-unit id="114" xml:space="preserve">
            <source>Distributed computation code sample – Monte Carlo simulation</source>
            <target state="new">Distributed computation code sample – Monte Carlo simulation</target>
          </trans-unit>
          <trans-unit id="115" xml:space="preserve">
            <source>A common way of aggregating results in Azure Service Fabric is to use timers.</source>
            <target state="new">A common way of aggregating results in Azure Service Fabric is to use timers.</target>
          </trans-unit>
          <trans-unit id="116" xml:space="preserve">
            <source>We are using stateless actors for two main reasons: the runtime will decide how many aggregators are needed dynamically, therefore giving us scale on demand; and it will instantiate these actors “locally” – in other words in the same silo of the calling actor, reducing network hops.</source>
            <target state="new">We are using stateless actors for two main reasons: the runtime will decide how many aggregators are needed dynamically, therefore giving us scale on demand; and it will instantiate these actors “locally” – in other words in the same silo of the calling actor, reducing network hops.</target>
          </trans-unit>
          <trans-unit id="117" xml:space="preserve">
            <source>Here is how the Aggregator and Finaliser look:</source>
            <target state="new">Here is how the Aggregator and Finaliser look:</target>
          </trans-unit>
          <trans-unit id="118" xml:space="preserve">
            <source>Distributed computation code sample – aggregator</source>
            <target state="new">Distributed computation code sample – aggregator</target>
          </trans-unit>
          <trans-unit id="119" xml:space="preserve">
            <source>At this point, it should be clear how we could potentially enhance the Leaderboard example with an aggregator for scale and performance.</source>
            <target state="new">At this point, it should be clear how we could potentially enhance the Leaderboard example with an aggregator for scale and performance.</target>
          </trans-unit>
          <trans-unit id="120" xml:space="preserve">
            <source>We are by no means asserting that Azure Service Fabric is a drop-in replacement for other distributed computation of big data frameworks or high performance computing.</source>
            <target state="new">We are by no means asserting that Azure Service Fabric is a drop-in replacement for other distributed computation of big data frameworks or high performance computing.</target>
          </trans-unit>
          <trans-unit id="121" xml:space="preserve">
            <source>There are some things it is just built to handle better than others.</source>
            <target state="new">There are some things it is just built to handle better than others.</target>
          </trans-unit>
          <trans-unit id="122" xml:space="preserve">
            <source>However one can model workflows and distributed parallel computation in Azure Service Fabric while still getting the simplicity benefits it provides.</source>
            <target state="new">However one can model workflows and distributed parallel computation in Azure Service Fabric while still getting the simplicity benefits it provides.</target>
          </trans-unit>
          <trans-unit id="123" xml:space="preserve">
            <source>Next Steps</source>
            <target state="new">Next Steps</target>
          </trans-unit>
          <trans-unit id="124" xml:space="preserve">
            <source><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Pattern: Smart Cache<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></source>
            <target state="new"><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Pattern: Smart Cache<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></target>
          </trans-unit>
          <trans-unit id="125" xml:space="preserve">
            <source><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Pattern: Distributed Networks and Graphs<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></source>
            <target state="new"><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Pattern: Distributed Networks and Graphs<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></target>
          </trans-unit>
          <trans-unit id="126" xml:space="preserve">
            <source><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Pattern: Resource Governance<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></source>
            <target state="new"><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Pattern: Resource Governance<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></target>
          </trans-unit>
          <trans-unit id="127" xml:space="preserve">
            <source><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Pattern: Stateful Service Composition<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></source>
            <target state="new"><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Pattern: Stateful Service Composition<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></target>
          </trans-unit>
          <trans-unit id="128" xml:space="preserve">
            <source><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Pattern: Internet of Things<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></source>
            <target state="new"><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Pattern: Internet of Things<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></target>
          </trans-unit>
          <trans-unit id="129" xml:space="preserve">
            <source><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Some Anti-patterns<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></source>
            <target state="new"><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Some Anti-patterns<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></target>
          </trans-unit>
          <trans-unit id="130" xml:space="preserve">
            <source><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Introduction to Service Fabric Actors<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></source>
            <target state="new"><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Introduction to Service Fabric Actors<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></target>
          </trans-unit>
        </group>
      </group>
    </body>
  </file>
</xliff>