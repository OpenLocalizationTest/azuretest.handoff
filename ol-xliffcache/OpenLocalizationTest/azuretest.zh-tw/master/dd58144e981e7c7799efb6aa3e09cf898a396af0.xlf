<?xml version="1.0" encoding="utf-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" source-language="en-us" target-language="zh-tw" original="2/20/2016 12:31:10 PM" tool-id="MarkdownTransformer" product-name="N/A" product-version="N/A" build-num="1">
    <header>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dd58144e981e7c7799efb6aa3e09cf898a396af0</xliffext:olfilehash>
      <tool tool-id="MarkdownTransformer" tool-name="MarkdownToXliff" tool-version="1.0" tool-company="Microsoft" />
    </header>
    <body>
      <group extype="content">
        <group id="101">
          <trans-unit id="101" xml:space="preserve">
            <source>Default communication stack provided by Service Fabric</source>
            <target state="new">Default communication stack provided by Service Fabric</target>
          </trans-unit>
          <trans-unit id="102" xml:space="preserve">
            <source>This article describes the default communication stack provided by the Reliable Service's Framework for Services and clients to communicate.</source>
            <target state="new">This article describes the default communication stack provided by the Reliable Service's Framework for Services and clients to communicate.</target>
          </trans-unit>
          <trans-unit id="103" xml:space="preserve">
            <source>Default communication stack provided by Reliable Services Framework</source>
            <target state="new">Default communication stack provided by Reliable Services Framework</target>
          </trans-unit>
          <trans-unit id="104" xml:space="preserve">
            <source>For service authors who are not tied to a particular implementation of communication stack(WebAPI, WCF etc), the framework provides Client and Service side communication pieces that can be used to setup communication between the Service and Client.</source>
            <target state="new">For service authors who are not tied to a particular implementation of communication stack(WebAPI, WCF etc), the framework provides Client and Service side communication pieces that can be used to setup communication between the Service and Client.</target>
          </trans-unit>
          <trans-unit id="105" xml:space="preserve">
            <source>Please update to the latest nuget packges to get the features mentioned below.</source>
            <target state="new">Please update to the latest nuget packges to get the features mentioned below.</target>
          </trans-unit>
          <trans-unit id="106" xml:space="preserve">
            <source>Service Communication Listener</source>
            <target state="new">Service Communication Listener</target>
          </trans-unit>
          <trans-unit id="107" xml:space="preserve">
            <source>The default communication listener for the service is implemented in the <bpt id="2">&lt;code&gt;</bpt>ServiceCommunicationListener<ept id="2">&lt;/code&gt;</ept> class</source>
            <target state="new">The default communication listener for the service is implemented in the <bpt id="2">&lt;code&gt;</bpt>ServiceCommunicationListener<ept id="2">&lt;/code&gt;</ept> class</target>
          </trans-unit>
          <trans-unit id="108" xml:space="preserve">
            <source>The methods that the service service implements and wants to expose to its clients are defined as asynchronous methods in an interface which inherits from the <bpt id="2">&lt;code&gt;</bpt>IService<ept id="2">&lt;/code&gt;</ept> interface.</source>
            <target state="new">The methods that the service service implements and wants to expose to its clients are defined as asynchronous methods in an interface which inherits from the <bpt id="2">&lt;code&gt;</bpt>IService<ept id="2">&lt;/code&gt;</ept> interface.</target>
          </trans-unit>
          <trans-unit id="109" xml:space="preserve">
            <source>The service can then just instantiate the <bpt id="2">&lt;code&gt;</bpt>ServiceCommunicationListener<ept id="2">&lt;/code&gt;</ept> object and return it in the [<bpt id="4">&lt;code&gt;</bpt>CreateCommunicationListener<ept id="4">&lt;/code&gt;</ept> method](service-fabric-reliable-services-communication.md).</source>
            <target state="new">The service can then just instantiate the <bpt id="2">&lt;code&gt;</bpt>ServiceCommunicationListener<ept id="2">&lt;/code&gt;</ept> object and return it in the [<bpt id="4">&lt;code&gt;</bpt>CreateCommunicationListener<ept id="4">&lt;/code&gt;</ept> method](service-fabric-reliable-services-communication.md).</target>
          </trans-unit>
          <trans-unit id="110" xml:space="preserve">
            <source>For example, the HelloWorld service code to setup this communication stack may be defined as follows.</source>
            <target state="new">For example, the HelloWorld service code to setup this communication stack may be defined as follows.</target>
          </trans-unit>
          <trans-unit id="111" xml:space="preserve">
            <source>The arguments and the return types in the Service Interface, for example the Message class above, are expected to be serializable by the .net <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>DataContractSerializer<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">The arguments and the return types in the Service Interface, for example the Message class above, are expected to be serializable by the .net <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>DataContractSerializer<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="112" xml:space="preserve">
            <source>Writing Clients to communicate with ServiceCommunicationListener</source>
            <target state="new">Writing Clients to communicate with ServiceCommunicationListener</target>
          </trans-unit>
          <trans-unit id="113" xml:space="preserve">
            <source>For clients to communicate to services using the <bpt id="2">&lt;code&gt;</bpt>ServiceCommunicationListener<ept id="2">&lt;/code&gt;</ept>, the framework provides a <bpt id="4">&lt;code&gt;</bpt>ServiceProxy<ept id="4">&lt;/code&gt;</ept> class.</source>
            <target state="new">For clients to communicate to services using the <bpt id="2">&lt;code&gt;</bpt>ServiceCommunicationListener<ept id="2">&lt;/code&gt;</ept>, the framework provides a <bpt id="4">&lt;code&gt;</bpt>ServiceProxy<ept id="4">&lt;/code&gt;</ept> class.</target>
          </trans-unit>
          <trans-unit id="114" xml:space="preserve">
            <source>Clients can instantiate a service proxy object that implements the corresponding Service Interface and invoke methods on the proxy object.</source>
            <target state="new">Clients can instantiate a service proxy object that implements the corresponding Service Interface and invoke methods on the proxy object.</target>
          </trans-unit>
          <trans-unit id="115" xml:space="preserve">
            <source>The communication framework takes care of propagating exceptions thrown at the service to the client.</source>
            <target state="new">The communication framework takes care of propagating exceptions thrown at the service to the client.</target>
          </trans-unit>
          <trans-unit id="116" xml:space="preserve">
            <source>So exception handling logic at the client using ServiceProxy can directly handle for execeptions that the service can potentially throw.</source>
            <target state="new">So exception handling logic at the client using ServiceProxy can directly handle for execeptions that the service can potentially throw.</target>
          </trans-unit>
        </group>
      </group>
    </body>
  </file>
</xliff>