<?xml version="1.0" encoding="utf-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" source-language="en-us" target-language="ru-ru" original="2/22/2016 12:10:04 AM" tool-id="MarkdownTransformer" product-name="N/A" product-version="N/A" build-num="1">
    <header>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0bd5a418f2b09bfd4b6b132550451f5ccc2e5c5b</xliffext:olfilehash>
      <tool tool-id="MarkdownTransformer" tool-name="MarkdownToXliff" tool-version="1.0" tool-company="Microsoft" />
    </header>
    <body>
      <group extype="content">
        <group id="101">
          <trans-unit id="101" xml:space="preserve">
            <source>Diagnose failures and exceptions in ASP.NET apps with Application Insights</source>
            <target state="new">Diagnose failures and exceptions in ASP.NET apps with Application Insights</target>
          </trans-unit>
          <trans-unit id="102" xml:space="preserve">
            <source>Configure your app to get a compelling diagnostic experience by capturing exceptions along with request telemetry.</source>
            <target state="new">Configure your app to get a compelling diagnostic experience by capturing exceptions along with request telemetry.</target>
          </trans-unit>
          <trans-unit id="103" xml:space="preserve">
            <source>Diagnose failures and exceptions in ASP.NET apps with Application Insights</source>
            <target state="new">Diagnose failures and exceptions in ASP.NET apps with Application Insights</target>
          </trans-unit>
          <trans-unit id="104" xml:space="preserve">
            <source>By monitoring your application with <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Visual Studio Application Insights[start]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>, you can correlate failed requests with exceptions and other events at both the client and server, so that you can quickly diagnose the causes.</source>
            <target state="new">By monitoring your application with <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Visual Studio Application Insights[start]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>, you can correlate failed requests with exceptions and other events at both the client and server, so that you can quickly diagnose the causes.</target>
          </trans-unit>
          <trans-unit id="105" xml:space="preserve">
            <source>To monitor an ASP.NET app, you have to <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>add Application Insights SDK[greenbrown]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> to your application, or <bpt id="4CapsExtId1">&lt;link&gt;</bpt><bpt id="4CapsExtId2">&lt;linkText&gt;</bpt>install Status Monitor on your IIS server[redfield]<ept id="4CapsExtId2">&lt;/linkText&gt;</ept><bpt id="4CapsExtId3">&lt;title&gt;</bpt><ept id="4CapsExtId3">&lt;/title&gt;</ept><ept id="4CapsExtId1">&lt;/link&gt;</ept>, or, if your app is an Azure Web App, add the <bpt id="6CapsExtId1">&lt;link&gt;</bpt><bpt id="6CapsExtId2">&lt;linkText&gt;</bpt>Application Insights Extension[azure]<ept id="6CapsExtId2">&lt;/linkText&gt;</ept><bpt id="6CapsExtId3">&lt;title&gt;</bpt><ept id="6CapsExtId3">&lt;/title&gt;</ept><ept id="6CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">To monitor an ASP.NET app, you have to <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>add Application Insights SDK[greenbrown]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> to your application, or <bpt id="4CapsExtId1">&lt;link&gt;</bpt><bpt id="4CapsExtId2">&lt;linkText&gt;</bpt>install Status Monitor on your IIS server[redfield]<ept id="4CapsExtId2">&lt;/linkText&gt;</ept><bpt id="4CapsExtId3">&lt;title&gt;</bpt><ept id="4CapsExtId3">&lt;/title&gt;</ept><ept id="4CapsExtId1">&lt;/link&gt;</ept>, or, if your app is an Azure Web App, add the <bpt id="6CapsExtId1">&lt;link&gt;</bpt><bpt id="6CapsExtId2">&lt;linkText&gt;</bpt>Application Insights Extension[azure]<ept id="6CapsExtId2">&lt;/linkText&gt;</ept><bpt id="6CapsExtId3">&lt;title&gt;</bpt><ept id="6CapsExtId3">&lt;/title&gt;</ept><ept id="6CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="106" xml:space="preserve">
            <source>Diagnosing failures</source>
            <target state="new">Diagnosing failures</target>
          </trans-unit>
          <trans-unit id="107" xml:space="preserve">
            <source>From the overview blade, the Failures tile shows you charts of exceptions and failed HTTP requests, together with a list of the request URLs that cause the most frequent failures.</source>
            <target state="new">From the overview blade, the Failures tile shows you charts of exceptions and failed HTTP requests, together with a list of the request URLs that cause the most frequent failures.</target>
          </trans-unit>
          <trans-unit id="108" xml:space="preserve">
            <source><bpt id="1">&lt;linkText&gt;</bpt>Select Failures<ept id="1">&lt;/linkText&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;linkText&gt;</bpt>Select Failures<ept id="1">&lt;/linkText&gt;</ept></target>
          </trans-unit>
          <trans-unit id="109" xml:space="preserve">
            <source>Click through one of the failed request types in the list to get to individual occurrences of the failure.</source>
            <target state="new">Click through one of the failed request types in the list to get to individual occurrences of the failure.</target>
          </trans-unit>
          <trans-unit id="110" xml:space="preserve">
            <source>From there, click through to the exceptions or any trace data associated with it:</source>
            <target state="new">From there, click through to the exceptions or any trace data associated with it:</target>
          </trans-unit>
          <trans-unit id="111" xml:space="preserve">
            <source><bpt id="1">&lt;linkText&gt;</bpt>Select an instance of a failed request, and under exception details, get to instances of the exception.<ept id="1">&lt;/linkText&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;linkText&gt;</bpt>Select an instance of a failed request, and under exception details, get to instances of the exception.<ept id="1">&lt;/linkText&gt;</ept></target>
          </trans-unit>
          <trans-unit id="112" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Alternatively,<ept id="1">&lt;/strong&gt;</ept> you can start from the list of exceptions that you'll find further down the Failures blade.</source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Alternatively,<ept id="1">&lt;/strong&gt;</ept> you can start from the list of exceptions that you'll find further down the Failures blade.</target>
          </trans-unit>
          <trans-unit id="113" xml:space="preserve">
            <source>Keep clicking until you eventually get to individual exceptions.</source>
            <target state="new">Keep clicking until you eventually get to individual exceptions.</target>
          </trans-unit>
          <trans-unit id="114" xml:space="preserve">
            <source><bpt id="1">&lt;linkText&gt;</bpt>Drill through<ept id="1">&lt;/linkText&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;linkText&gt;</bpt>Drill through<ept id="1">&lt;/linkText&gt;</ept></target>
          </trans-unit>
          <trans-unit id="115" xml:space="preserve">
            <source>*No exceptions showing?</source>
            <target state="new">*No exceptions showing?</target>
          </trans-unit>
          <trans-unit id="116" xml:space="preserve">
            <source>See <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Capture exceptions<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.*</source>
            <target state="new">See <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Capture exceptions<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.*</target>
          </trans-unit>
          <trans-unit id="117" xml:space="preserve">
            <source>From there you can look at the stack trace and detailed properties of each exception and find related log trace or other events.</source>
            <target state="new">From there you can look at the stack trace and detailed properties of each exception and find related log trace or other events.</target>
          </trans-unit>
          <trans-unit id="118" xml:space="preserve">
            <source><bpt id="1">&lt;linkText&gt;</bpt>Drill through<ept id="1">&lt;/linkText&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;linkText&gt;</bpt>Drill through<ept id="1">&lt;/linkText&gt;</ept></target>
          </trans-unit>
          <trans-unit id="119" xml:space="preserve">
            <source><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Learn more about Diagnostic Search[diagnostic]<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new"><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Learn more about Diagnostic Search[diagnostic]<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="120" xml:space="preserve">
            <source>Dependency failures</source>
            <target state="new">Dependency failures</target>
          </trans-unit>
          <trans-unit id="121" xml:space="preserve">
            <source>A <bpt id="2">&lt;em&gt;</bpt>dependency<ept id="2">&lt;/em&gt;</ept> is a service that your application calls, typically through a REST API or database connection.</source>
            <target state="new">A <bpt id="2">&lt;em&gt;</bpt>dependency<ept id="2">&lt;/em&gt;</ept> is a service that your application calls, typically through a REST API or database connection.</target>
          </trans-unit>
          <trans-unit id="122" xml:space="preserve">
            <source><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Application Insights Status Monitor[redfield]<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept> automatically monitors a variety of types of dependency call, measuring call duration and success or failure.</source>
            <target state="new"><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Application Insights Status Monitor[redfield]<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept> automatically monitors a variety of types of dependency call, measuring call duration and success or failure.</target>
          </trans-unit>
          <trans-unit id="123" xml:space="preserve">
            <source>To get dependency data, you have to <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>install Status Monitor[redfield]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> on your IIS server, or if your app is an Azure Web App, use the <bpt id="4CapsExtId1">&lt;link&gt;</bpt><bpt id="4CapsExtId2">&lt;linkText&gt;</bpt>Application Insights Extension[azure]<ept id="4CapsExtId2">&lt;/linkText&gt;</ept><bpt id="4CapsExtId3">&lt;title&gt;</bpt><ept id="4CapsExtId3">&lt;/title&gt;</ept><ept id="4CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">To get dependency data, you have to <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>install Status Monitor[redfield]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> on your IIS server, or if your app is an Azure Web App, use the <bpt id="4CapsExtId1">&lt;link&gt;</bpt><bpt id="4CapsExtId2">&lt;linkText&gt;</bpt>Application Insights Extension[azure]<ept id="4CapsExtId2">&lt;/linkText&gt;</ept><bpt id="4CapsExtId3">&lt;title&gt;</bpt><ept id="4CapsExtId3">&lt;/title&gt;</ept><ept id="4CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="124" xml:space="preserve">
            <source>You can do this either</source>
            <target state="new">You can do this either</target>
          </trans-unit>
          <trans-unit id="125" xml:space="preserve">
            <source>Failed calls to dependencies are listed on the Failures blade, and you can also find them under Related Items in the request details and exception details.</source>
            <target state="new">Failed calls to dependencies are listed on the Failures blade, and you can also find them under Related Items in the request details and exception details.</target>
          </trans-unit>
          <trans-unit id="126" xml:space="preserve">
            <source>*No dependency failures?</source>
            <target state="new">*No dependency failures?</target>
          </trans-unit>
          <trans-unit id="127" xml:space="preserve">
            <source>That's good.</source>
            <target state="new">That's good.</target>
          </trans-unit>
          <trans-unit id="128" xml:space="preserve">
            <source>But to verify that you're getting dependency data, open the Performance blade and look at the Dependency Duration chart.*</source>
            <target state="new">But to verify that you're getting dependency data, open the Performance blade and look at the Dependency Duration chart.*</target>
          </trans-unit>
          <trans-unit id="129" xml:space="preserve">
            <source>Custom tracing and log data</source>
            <target state="new">Custom tracing and log data</target>
          </trans-unit>
          <trans-unit id="130" xml:space="preserve">
            <source>To get diagnostic data specific to your app, you can insert code to send your own telemetry data.</source>
            <target state="new">To get diagnostic data specific to your app, you can insert code to send your own telemetry data.</target>
          </trans-unit>
          <trans-unit id="131" xml:space="preserve">
            <source>This displayed in diagnostic search alongside the request, page view and other automatically-collected data.</source>
            <target state="new">This displayed in diagnostic search alongside the request, page view and other automatically-collected data.</target>
          </trans-unit>
          <trans-unit id="132" xml:space="preserve">
            <source>You have several options:</source>
            <target state="new">You have several options:</target>
          </trans-unit>
          <trans-unit id="133" xml:space="preserve">
            <source><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>TrackEvent()<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept> is typically used for monitoring usage patterns, but the data it sends also appears under Custom Events in diagnostic search.</source>
            <target state="new"><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>TrackEvent()<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept> is typically used for monitoring usage patterns, but the data it sends also appears under Custom Events in diagnostic search.</target>
          </trans-unit>
          <trans-unit id="134" xml:space="preserve">
            <source>Events are named, and can carry string properties and numeric metrics on which you can <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>filter your diagnostic searches[diagnostic]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">Events are named, and can carry string properties and numeric metrics on which you can <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>filter your diagnostic searches[diagnostic]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="135" xml:space="preserve">
            <source><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>TrackTrace()<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept> lets you send longer data such as POST information.</source>
            <target state="new"><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>TrackTrace()<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept> lets you send longer data such as POST information.</target>
          </trans-unit>
          <trans-unit id="136" xml:space="preserve">
            <source><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>TrackException()<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept> sends stack traces.</source>
            <target state="new"><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>TrackException()<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept> sends stack traces.</target>
          </trans-unit>
          <trans-unit id="137" xml:space="preserve">
            <source><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>More about exceptions<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new"><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>More about exceptions<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="138" xml:space="preserve">
            <source>If you already use a logging framework like Log4Net or NLog, you can <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>capture those logs[netlogs]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> and see them in diagnostic search alongside request and exception data.</source>
            <target state="new">If you already use a logging framework like Log4Net or NLog, you can <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>capture those logs[netlogs]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> and see them in diagnostic search alongside request and exception data.</target>
          </trans-unit>
          <trans-unit id="139" xml:space="preserve">
            <source>To see these events, open <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Search[diagnostic]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>, open Filter, and then choose Custom Event, Trace, or Exception.</source>
            <target state="new">To see these events, open <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Search[diagnostic]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>, open Filter, and then choose Custom Event, Trace, or Exception.</target>
          </trans-unit>
          <trans-unit id="140" xml:space="preserve">
            <source><bpt id="1">&lt;linkText&gt;</bpt>Drill through<ept id="1">&lt;/linkText&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;linkText&gt;</bpt>Drill through<ept id="1">&lt;/linkText&gt;</ept></target>
          </trans-unit>
          <trans-unit id="141" xml:space="preserve">
            <source>How to see request POST data</source>
            <target state="new">How to see request POST data</target>
          </trans-unit>
          <trans-unit id="142" xml:space="preserve">
            <source>Request details don't include the data sent to your app in a POST call.</source>
            <target state="new">Request details don't include the data sent to your app in a POST call.</target>
          </trans-unit>
          <trans-unit id="143" xml:space="preserve">
            <source>To have this data reported:</source>
            <target state="new">To have this data reported:</target>
          </trans-unit>
          <trans-unit id="144" xml:space="preserve">
            <source><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Install the SDK[greenbrown]<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept> in your application project.</source>
            <target state="new"><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Install the SDK[greenbrown]<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept> in your application project.</target>
          </trans-unit>
          <trans-unit id="145" xml:space="preserve">
            <source>Insert code in your application to call <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Microsoft.ApplicationInsights.TrackTrace()[api]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">Insert code in your application to call <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Microsoft.ApplicationInsights.TrackTrace()[api]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="146" xml:space="preserve">
            <source>Send the POST data in the message parameter.</source>
            <target state="new">Send the POST data in the message parameter.</target>
          </trans-unit>
          <trans-unit id="147" xml:space="preserve">
            <source>There is a limit to the permitted size, so you should try to send just the essential data.</source>
            <target state="new">There is a limit to the permitted size, so you should try to send just the essential data.</target>
          </trans-unit>
          <trans-unit id="148" xml:space="preserve">
            <source>When you investigate a failed request, find the associated traces.</source>
            <target state="new">When you investigate a failed request, find the associated traces.</target>
          </trans-unit>
          <trans-unit id="149" xml:space="preserve">
            <source><bpt id="1">&lt;linkText&gt;</bpt>Drill through<ept id="1">&lt;/linkText&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;linkText&gt;</bpt>Drill through<ept id="1">&lt;/linkText&gt;</ept></target>
          </trans-unit>
          <trans-unit id="150" xml:space="preserve">
            <source><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept> Capturing exceptions and related diagnostic data</source>
            <target state="new"><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept> Capturing exceptions and related diagnostic data</target>
          </trans-unit>
          <trans-unit id="151" xml:space="preserve">
            <source>At first, you won't see in the portal all the exceptions that cause failures in your app.</source>
            <target state="new">At first, you won't see in the portal all the exceptions that cause failures in your app.</target>
          </trans-unit>
          <trans-unit id="152" xml:space="preserve">
            <source>You'll see any browser exceptions (if you're using the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>JavaScript SDK[client]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> in your web pages).</source>
            <target state="new">You'll see any browser exceptions (if you're using the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>JavaScript SDK[client]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> in your web pages).</target>
          </trans-unit>
          <trans-unit id="153" xml:space="preserve">
            <source>But most server exceptions are caught by IIS and you have to write a bit of code to see them.</source>
            <target state="new">But most server exceptions are caught by IIS and you have to write a bit of code to see them.</target>
          </trans-unit>
          <trans-unit id="154" xml:space="preserve">
            <source>You can:</source>
            <target state="new">You can:</target>
          </trans-unit>
          <trans-unit id="155" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Log exceptions explicitly<ept id="1">&lt;/strong&gt;</ept> by inserting code in exception handlers to report the exceptions.</source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Log exceptions explicitly<ept id="1">&lt;/strong&gt;</ept> by inserting code in exception handlers to report the exceptions.</target>
          </trans-unit>
          <trans-unit id="156" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Capture exceptions automatically<ept id="1">&lt;/strong&gt;</ept> by configuring your ASP.NET framework.</source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Capture exceptions automatically<ept id="1">&lt;/strong&gt;</ept> by configuring your ASP.NET framework.</target>
          </trans-unit>
          <trans-unit id="157" xml:space="preserve">
            <source>The necessary additions are different for different types of framework.</source>
            <target state="new">The necessary additions are different for different types of framework.</target>
          </trans-unit>
          <trans-unit id="158" xml:space="preserve">
            <source>Reporting exceptions explicitly</source>
            <target state="new">Reporting exceptions explicitly</target>
          </trans-unit>
          <trans-unit id="159" xml:space="preserve">
            <source>The simplest way is to insert a call to TrackException() in an exception handler.</source>
            <target state="new">The simplest way is to insert a call to TrackException() in an exception handler.</target>
          </trans-unit>
          <trans-unit id="160" xml:space="preserve">
            <source>JavaScript</source>
            <target state="new">JavaScript</target>
          </trans-unit>
          <trans-unit id="161" xml:space="preserve">
            <source>C#</source>
            <target state="new">C#</target>
          </trans-unit>
          <trans-unit id="162" xml:space="preserve">
            <source>VB</source>
            <target state="new">VB</target>
          </trans-unit>
          <trans-unit id="163" xml:space="preserve">
            <source>The properties and measurements parameters are optional, but are useful for <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>filtering and adding[diagnostic]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> extra information.</source>
            <target state="new">The properties and measurements parameters are optional, but are useful for <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>filtering and adding[diagnostic]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> extra information.</target>
          </trans-unit>
          <trans-unit id="164" xml:space="preserve">
            <source>For example, if you have an app that can run several games, you could find all the exception reports related to a particular game.</source>
            <target state="new">For example, if you have an app that can run several games, you could find all the exception reports related to a particular game.</target>
          </trans-unit>
          <trans-unit id="165" xml:space="preserve">
            <source>You can add as many items as you like to each dictionary.</source>
            <target state="new">You can add as many items as you like to each dictionary.</target>
          </trans-unit>
          <trans-unit id="166" xml:space="preserve">
            <source>Browser exceptions</source>
            <target state="new">Browser exceptions</target>
          </trans-unit>
          <trans-unit id="167" xml:space="preserve">
            <source>Most browser exceptions are reported.</source>
            <target state="new">Most browser exceptions are reported.</target>
          </trans-unit>
          <trans-unit id="168" xml:space="preserve">
            <source>If your web page includes script files from content delivery networks or other domains, ensure your script tag has the attribute <bpt id="2">&lt;code&gt;</bpt>crossorigin="anonymous"<ept id="2">&lt;/code&gt;</ept>,  and that the server sends <bpt id="4CapsExtId1">&lt;link&gt;</bpt><bpt id="4CapsExtId2">&lt;linkText&gt;</bpt>CORS headers<ept id="4CapsExtId2">&lt;/linkText&gt;</ept><bpt id="4CapsExtId3">&lt;title&gt;</bpt><ept id="4CapsExtId3">&lt;/title&gt;</ept><ept id="4CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">If your web page includes script files from content delivery networks or other domains, ensure your script tag has the attribute <bpt id="2">&lt;code&gt;</bpt>crossorigin="anonymous"<ept id="2">&lt;/code&gt;</ept>,  and that the server sends <bpt id="4CapsExtId1">&lt;link&gt;</bpt><bpt id="4CapsExtId2">&lt;linkText&gt;</bpt>CORS headers<ept id="4CapsExtId2">&lt;/linkText&gt;</ept><bpt id="4CapsExtId3">&lt;title&gt;</bpt><ept id="4CapsExtId3">&lt;/title&gt;</ept><ept id="4CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="169" xml:space="preserve">
            <source>This will allow you to get a stack trace and detail for unhandled JavaScript exceptions from these resources.</source>
            <target state="new">This will allow you to get a stack trace and detail for unhandled JavaScript exceptions from these resources.</target>
          </trans-unit>
          <trans-unit id="170" xml:space="preserve">
            <source>Web forms</source>
            <target state="new">Web forms</target>
          </trans-unit>
          <trans-unit id="171" xml:space="preserve">
            <source>For web forms, the HTTP Module will be able to collect the exceptions when there are no redirects configured with CustomErrors.</source>
            <target state="new">For web forms, the HTTP Module will be able to collect the exceptions when there are no redirects configured with CustomErrors.</target>
          </trans-unit>
          <trans-unit id="172" xml:space="preserve">
            <source>But if you have active redirects, add the following lines to the Application_Error function in Global.asax.cs.</source>
            <target state="new">But if you have active redirects, add the following lines to the Application_Error function in Global.asax.cs.</target>
          </trans-unit>
          <trans-unit id="173" xml:space="preserve">
            <source>(Add a Global.asax file if you don't already have one.)</source>
            <target state="new">(Add a Global.asax file if you don't already have one.)</target>
          </trans-unit>
          <trans-unit id="174" xml:space="preserve">
            <source><bpt id="1">&lt;em&gt;</bpt>C#<ept id="1">&lt;/em&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;em&gt;</bpt>C#<ept id="1">&lt;/em&gt;</ept></target>
          </trans-unit>
          <trans-unit id="175" xml:space="preserve">
            <source>MVC</source>
            <target state="new">MVC</target>
          </trans-unit>
          <trans-unit id="176" xml:space="preserve">
            <source>If the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>CustomErrors<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> configuration is <bpt id="4">&lt;code&gt;</bpt>Off<ept id="4">&lt;/code&gt;</ept>, then exceptions will be available for the <bpt id="6CapsExtId1">&lt;link&gt;</bpt><bpt id="6CapsExtId2">&lt;linkText&gt;</bpt>HTTP Module<ept id="6CapsExtId2">&lt;/linkText&gt;</ept><bpt id="6CapsExtId3">&lt;title&gt;</bpt><ept id="6CapsExtId3">&lt;/title&gt;</ept><ept id="6CapsExtId1">&lt;/link&gt;</ept> to collect.</source>
            <target state="new">If the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>CustomErrors<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> configuration is <bpt id="4">&lt;code&gt;</bpt>Off<ept id="4">&lt;/code&gt;</ept>, then exceptions will be available for the <bpt id="6CapsExtId1">&lt;link&gt;</bpt><bpt id="6CapsExtId2">&lt;linkText&gt;</bpt>HTTP Module<ept id="6CapsExtId2">&lt;/linkText&gt;</ept><bpt id="6CapsExtId3">&lt;title&gt;</bpt><ept id="6CapsExtId3">&lt;/title&gt;</ept><ept id="6CapsExtId1">&lt;/link&gt;</ept> to collect.</target>
          </trans-unit>
          <trans-unit id="177" xml:space="preserve">
            <source>However, if it is <bpt id="2">&lt;code&gt;</bpt>RemoteOnly<ept id="2">&lt;/code&gt;</ept> (default), or <bpt id="4">&lt;code&gt;</bpt>On<ept id="4">&lt;/code&gt;</ept>, then the exception will be cleared and not available for Application Insights to automatically collect.</source>
            <target state="new">However, if it is <bpt id="2">&lt;code&gt;</bpt>RemoteOnly<ept id="2">&lt;/code&gt;</ept> (default), or <bpt id="4">&lt;code&gt;</bpt>On<ept id="4">&lt;/code&gt;</ept>, then the exception will be cleared and not available for Application Insights to automatically collect.</target>
          </trans-unit>
          <trans-unit id="178" xml:space="preserve">
            <source>You can fix that by overriding the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>System.Web.Mvc.HandleErrorAttribute class<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>, and applying the overridden class as shown for the different MVC versions below (<bpt id="4CapsExtId1">&lt;link&gt;</bpt><bpt id="4CapsExtId2">&lt;linkText&gt;</bpt>github source<ept id="4CapsExtId2">&lt;/linkText&gt;</ept><bpt id="4CapsExtId3">&lt;title&gt;</bpt><ept id="4CapsExtId3">&lt;/title&gt;</ept><ept id="4CapsExtId1">&lt;/link&gt;</ept>:</source>
            <target state="new">You can fix that by overriding the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>System.Web.Mvc.HandleErrorAttribute class<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>, and applying the overridden class as shown for the different MVC versions below (<bpt id="4CapsExtId1">&lt;link&gt;</bpt><bpt id="4CapsExtId2">&lt;linkText&gt;</bpt>github source<ept id="4CapsExtId2">&lt;/linkText&gt;</ept><bpt id="4CapsExtId3">&lt;title&gt;</bpt><ept id="4CapsExtId3">&lt;/title&gt;</ept><ept id="4CapsExtId1">&lt;/link&gt;</ept>:</target>
          </trans-unit>
          <trans-unit id="179" xml:space="preserve">
            <source>MVC 2</source>
            <target state="new">MVC 2</target>
          </trans-unit>
          <trans-unit id="180" xml:space="preserve">
            <source>Replace the HandleError attribute with your new attribute in your controllers.</source>
            <target state="new">Replace the HandleError attribute with your new attribute in your controllers.</target>
          </trans-unit>
          <trans-unit id="181" xml:space="preserve">
            <source><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Sample<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></source>
            <target state="new"><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Sample<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></target>
          </trans-unit>
          <trans-unit id="182" xml:space="preserve">
            <source>MVC 3</source>
            <target state="new">MVC 3</target>
          </trans-unit>
          <trans-unit id="183" xml:space="preserve">
            <source>Register <bpt id="2">&lt;code&gt;</bpt>AiHandleErrorAttribute<ept id="2">&lt;/code&gt;</ept> as a global filter in Global.asax.cs:</source>
            <target state="new">Register <bpt id="2">&lt;code&gt;</bpt>AiHandleErrorAttribute<ept id="2">&lt;/code&gt;</ept> as a global filter in Global.asax.cs:</target>
          </trans-unit>
          <trans-unit id="184" xml:space="preserve">
            <source><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Sample<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></source>
            <target state="new"><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Sample<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></target>
          </trans-unit>
          <trans-unit id="185" xml:space="preserve">
            <source>MVC 4, MVC5</source>
            <target state="new">MVC 4, MVC5</target>
          </trans-unit>
          <trans-unit id="186" xml:space="preserve">
            <source>Register AiHandleErrorAttribute as a global filter in FilterConfig.cs:</source>
            <target state="new">Register AiHandleErrorAttribute as a global filter in FilterConfig.cs:</target>
          </trans-unit>
          <trans-unit id="187" xml:space="preserve">
            <source><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Sample<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></source>
            <target state="new"><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Sample<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></target>
          </trans-unit>
          <trans-unit id="188" xml:space="preserve">
            <source>Web API 1.x</source>
            <target state="new">Web API 1.x</target>
          </trans-unit>
          <trans-unit id="189" xml:space="preserve">
            <source>Override System.Web.Http.Filters.ExceptionFilterAttribute:</source>
            <target state="new">Override System.Web.Http.Filters.ExceptionFilterAttribute:</target>
          </trans-unit>
          <trans-unit id="190" xml:space="preserve">
            <source>You could add this overridden attribute to specific controllers, or add it to the global filter configuration in the WebApiConfig class:</source>
            <target state="new">You could add this overridden attribute to specific controllers, or add it to the global filter configuration in the WebApiConfig class:</target>
          </trans-unit>
          <trans-unit id="191" xml:space="preserve">
            <source><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Sample<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></source>
            <target state="new"><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Sample<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></target>
          </trans-unit>
          <trans-unit id="192" xml:space="preserve">
            <source>There are a number of cases that the exception filters cannot handle.</source>
            <target state="new">There are a number of cases that the exception filters cannot handle.</target>
          </trans-unit>
          <trans-unit id="193" xml:space="preserve">
            <source>For example:</source>
            <target state="new">For example:</target>
          </trans-unit>
          <trans-unit id="194" xml:space="preserve">
            <source>Exceptions thrown from controller constructors.</source>
            <target state="new">Exceptions thrown from controller constructors.</target>
          </trans-unit>
          <trans-unit id="195" xml:space="preserve">
            <source>Exceptions thrown from message handlers.</source>
            <target state="new">Exceptions thrown from message handlers.</target>
          </trans-unit>
          <trans-unit id="196" xml:space="preserve">
            <source>Exceptions thrown during routing.</source>
            <target state="new">Exceptions thrown during routing.</target>
          </trans-unit>
          <trans-unit id="197" xml:space="preserve">
            <source>Exceptions thrown during response content serialization.</source>
            <target state="new">Exceptions thrown during response content serialization.</target>
          </trans-unit>
          <trans-unit id="198" xml:space="preserve">
            <source>Web API 2.x</source>
            <target state="new">Web API 2.x</target>
          </trans-unit>
          <trans-unit id="199" xml:space="preserve">
            <source>Add an implementation of IExceptionLogger:</source>
            <target state="new">Add an implementation of IExceptionLogger:</target>
          </trans-unit>
          <trans-unit id="200" xml:space="preserve">
            <source>Add this to the services in WebApiConfig:</source>
            <target state="new">Add this to the services in WebApiConfig:</target>
          </trans-unit>
          <trans-unit id="201" xml:space="preserve">
            <source>}</source>
            <target state="new">}</target>
          </trans-unit>
          <trans-unit id="202" xml:space="preserve">
            <source><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Sample<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></source>
            <target state="new"><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Sample<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></target>
          </trans-unit>
          <trans-unit id="203" xml:space="preserve">
            <source>As alternatives, you could:</source>
            <target state="new">As alternatives, you could:</target>
          </trans-unit>
          <trans-unit id="204" xml:space="preserve">
            <source>Replace the only ExceptionHandler with a custom implementation of IExceptionHandler.</source>
            <target state="new">Replace the only ExceptionHandler with a custom implementation of IExceptionHandler.</target>
          </trans-unit>
          <trans-unit id="205" xml:space="preserve">
            <source>This is only called when the framework is still able to choose which response message to send (not when the connection is aborted for instance)</source>
            <target state="new">This is only called when the framework is still able to choose which response message to send (not when the connection is aborted for instance)</target>
          </trans-unit>
          <trans-unit id="206" xml:space="preserve">
            <source>Exception Filters (as described in the section on Web API 1.x controllers above) - not called in all cases.</source>
            <target state="new">Exception Filters (as described in the section on Web API 1.x controllers above) - not called in all cases.</target>
          </trans-unit>
          <trans-unit id="207" xml:space="preserve">
            <source>WCF</source>
            <target state="new">WCF</target>
          </trans-unit>
          <trans-unit id="208" xml:space="preserve">
            <source>Add a class that extends Attribute and implements IErrorHandler and IServiceBehavior.</source>
            <target state="new">Add a class that extends Attribute and implements IErrorHandler and IServiceBehavior.</target>
          </trans-unit>
          <trans-unit id="209" xml:space="preserve">
            <source>Add the attribute to the service implementations:</source>
            <target state="new">Add the attribute to the service implementations:</target>
          </trans-unit>
          <trans-unit id="210" xml:space="preserve">
            <source><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Sample<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></source>
            <target state="new"><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Sample<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></target>
          </trans-unit>
          <trans-unit id="211" xml:space="preserve">
            <source>test</source>
            <target state="new">test</target>
          </trans-unit>
        </group>
      </group>
    </body>
  </file>
</xliff>