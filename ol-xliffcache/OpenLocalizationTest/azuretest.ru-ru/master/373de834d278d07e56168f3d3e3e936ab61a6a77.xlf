<?xml version="1.0" encoding="utf-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" source-language="en-us" target-language="ru-ru" original="2/22/2016 1:02:14 AM" tool-id="MarkdownTransformer" product-name="N/A" product-version="N/A" build-num="1">
    <header>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">373de834d278d07e56168f3d3e3e936ab61a6a77</xliffext:olfilehash>
      <tool tool-id="MarkdownTransformer" tool-name="MarkdownToXliff" tool-version="1.0" tool-company="Microsoft" />
    </header>
    <body>
      <group extype="content">
        <group id="101">
          <trans-unit id="101" xml:space="preserve">
            <source>Author Custom R Modules in Azure Machine Learning | Microsoft Azure</source>
            <target state="new">Author Custom R Modules in Azure Machine Learning | Microsoft Azure</target>
          </trans-unit>
          <trans-unit id="102" xml:space="preserve">
            <source>Quick start for authoring custom R modules in Azure Machine Learning.</source>
            <target state="new">Quick start for authoring custom R modules in Azure Machine Learning.</target>
          </trans-unit>
          <trans-unit id="103" xml:space="preserve">
            <source>Author custom R modules in Azure Machine Learning</source>
            <target state="new">Author custom R modules in Azure Machine Learning</target>
          </trans-unit>
          <trans-unit id="104" xml:space="preserve">
            <source>This topic describes how to author and deploy a custom R module in Azure Machine Learning.</source>
            <target state="new">This topic describes how to author and deploy a custom R module in Azure Machine Learning.</target>
          </trans-unit>
          <trans-unit id="105" xml:space="preserve">
            <source>It explains what custom R modules are and what files are used to define them.</source>
            <target state="new">It explains what custom R modules are and what files are used to define them.</target>
          </trans-unit>
          <trans-unit id="106" xml:space="preserve">
            <source>It illustrates how to construct the files that define a module and how to register the module for deployment in a Machine Learning workspace.</source>
            <target state="new">It illustrates how to construct the files that define a module and how to register the module for deployment in a Machine Learning workspace.</target>
          </trans-unit>
          <trans-unit id="107" xml:space="preserve">
            <source>The elements and attributes used in the definition of the custom module are then described in more detail.</source>
            <target state="new">The elements and attributes used in the definition of the custom module are then described in more detail.</target>
          </trans-unit>
          <trans-unit id="108" xml:space="preserve">
            <source>How to use auxiliary functionality and files and multiple outputs is also discussed.</source>
            <target state="new">How to use auxiliary functionality and files and multiple outputs is also discussed.</target>
          </trans-unit>
          <trans-unit id="109" xml:space="preserve">
            <source><ph id="1">&lt;token href="../../includes/machine-learning-free-trial.md"/&gt;</ph></source>
            <target state="new"><ph id="1">&lt;token href="../../includes/machine-learning-free-trial.md"/&gt;</ph></target>
          </trans-unit>
          <trans-unit id="110" xml:space="preserve">
            <source>What is a custom R module?</source>
            <target state="new">What is a custom R module?</target>
          </trans-unit>
          <trans-unit id="111" xml:space="preserve">
            <source>A <bpt id="2">&lt;strong&gt;</bpt>custom module<ept id="2">&lt;/strong&gt;</ept> is a user-defined module that can be uploaded to your workspace and executed as part of an Azure Machine Learning experiment.</source>
            <target state="new">A <bpt id="2">&lt;strong&gt;</bpt>custom module<ept id="2">&lt;/strong&gt;</ept> is a user-defined module that can be uploaded to your workspace and executed as part of an Azure Machine Learning experiment.</target>
          </trans-unit>
          <trans-unit id="112" xml:space="preserve">
            <source>A <bpt id="2">&lt;strong&gt;</bpt>custom R module<ept id="2">&lt;/strong&gt;</ept> is a custom module that executes a user-defined R function.</source>
            <target state="new">A <bpt id="2">&lt;strong&gt;</bpt>custom R module<ept id="2">&lt;/strong&gt;</ept> is a custom module that executes a user-defined R function.</target>
          </trans-unit>
          <trans-unit id="113" xml:space="preserve">
            <source>R is a programming language for statistical computing and graphics that is widely used by statisticians and data scientists for implementing algorithms.</source>
            <target state="new">R is a programming language for statistical computing and graphics that is widely used by statisticians and data scientists for implementing algorithms.</target>
          </trans-unit>
          <trans-unit id="114" xml:space="preserve">
            <source>Currently, R is the only language supported in custom modules, but support for additional languages will be added in future releases.</source>
            <target state="new">Currently, R is the only language supported in custom modules, but support for additional languages will be added in future releases.</target>
          </trans-unit>
          <trans-unit id="115" xml:space="preserve">
            <source>Custom modules have <bpt id="2">&lt;strong&gt;</bpt>first-class status<ept id="2">&lt;/strong&gt;</ept> in Azure Machine Learning in the sense that they can used just like any other module.</source>
            <target state="new">Custom modules have <bpt id="2">&lt;strong&gt;</bpt>first-class status<ept id="2">&lt;/strong&gt;</ept> in Azure Machine Learning in the sense that they can used just like any other module.</target>
          </trans-unit>
          <trans-unit id="116" xml:space="preserve">
            <source>They can be executed with other modules, included in published experiments or visualizations.</source>
            <target state="new">They can be executed with other modules, included in published experiments or visualizations.</target>
          </trans-unit>
          <trans-unit id="117" xml:space="preserve">
            <source>Users have control over the algorithm implemented by the module, the input and output ports to be used, the modeling parameters, and other various runtime behaviors.</source>
            <target state="new">Users have control over the algorithm implemented by the module, the input and output ports to be used, the modeling parameters, and other various runtime behaviors.</target>
          </trans-unit>
          <trans-unit id="118" xml:space="preserve">
            <source>A custom module is only available in the workspace in which it was created and cannot be published to community experiments.</source>
            <target state="new">A custom module is only available in the workspace in which it was created and cannot be published to community experiments.</target>
          </trans-unit>
          <trans-unit id="119" xml:space="preserve">
            <source>Files in a custom R module</source>
            <target state="new">Files in a custom R module</target>
          </trans-unit>
          <trans-unit id="120" xml:space="preserve">
            <source>A custom R module is defined by a .zip file that contains, at a minimum, two files:</source>
            <target state="new">A custom R module is defined by a .zip file that contains, at a minimum, two files:</target>
          </trans-unit>
          <trans-unit id="121" xml:space="preserve">
            <source>A <bpt id="2">&lt;strong&gt;</bpt>source file<ept id="2">&lt;/strong&gt;</ept> that implements the R function exposed by the module</source>
            <target state="new">A <bpt id="2">&lt;strong&gt;</bpt>source file<ept id="2">&lt;/strong&gt;</ept> that implements the R function exposed by the module</target>
          </trans-unit>
          <trans-unit id="122" xml:space="preserve">
            <source>An <bpt id="2">&lt;strong&gt;</bpt>XML definition file<ept id="2">&lt;/strong&gt;</ept> that describes the custom module interface</source>
            <target state="new">An <bpt id="2">&lt;strong&gt;</bpt>XML definition file<ept id="2">&lt;/strong&gt;</ept> that describes the custom module interface</target>
          </trans-unit>
          <trans-unit id="123" xml:space="preserve">
            <source>Additional auxiliary files can also be included in the .zip file that provide functionality that can be accessed from the custom module.</source>
            <target state="new">Additional auxiliary files can also be included in the .zip file that provide functionality that can be accessed from the custom module.</target>
          </trans-unit>
          <trans-unit id="124" xml:space="preserve">
            <source>This option is discussed below.</source>
            <target state="new">This option is discussed below.</target>
          </trans-unit>
          <trans-unit id="125" xml:space="preserve">
            <source>Quick start example: define, package, and register a custom R module</source>
            <target state="new">Quick start example: define, package, and register a custom R module</target>
          </trans-unit>
          <trans-unit id="126" xml:space="preserve">
            <source>This example illustrates how to construct the files required by a custom R module, package them into a zip file, and then register the module in your Machine Learning workspace. The example zip package and sample files can be downloaded from <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>here<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">This example illustrates how to construct the files required by a custom R module, package them into a zip file, and then register the module in your Machine Learning workspace. The example zip package and sample files can be downloaded from <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>here<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="127" xml:space="preserve">
            <source>Consider the example of a <bpt id="2">&lt;strong&gt;</bpt>Custom Add Rows<ept id="2">&lt;/strong&gt;</ept> module that modifies the standard implementation of the Add Rows module used to concatenate rows (observations) from two datasets (data frames).</source>
            <target state="new">Consider the example of a <bpt id="2">&lt;strong&gt;</bpt>Custom Add Rows<ept id="2">&lt;/strong&gt;</ept> module that modifies the standard implementation of the Add Rows module used to concatenate rows (observations) from two datasets (data frames).</target>
          </trans-unit>
          <trans-unit id="128" xml:space="preserve">
            <source>The standard Add Rows module appends the rows of the second input dataset to the end of the first input dataset using the rbind algorithm.</source>
            <target state="new">The standard Add Rows module appends the rows of the second input dataset to the end of the first input dataset using the rbind algorithm.</target>
          </trans-unit>
          <trans-unit id="129" xml:space="preserve">
            <source>The customized <bpt id="2">&lt;code&gt;</bpt>CustomAddRows<ept id="2">&lt;/code&gt;</ept> function similarly accepts two datasets, but also accepts an additional Boolean swap parameter as an input.</source>
            <target state="new">The customized <bpt id="2">&lt;code&gt;</bpt>CustomAddRows<ept id="2">&lt;/code&gt;</ept> function similarly accepts two datasets, but also accepts an additional Boolean swap parameter as an input.</target>
          </trans-unit>
          <trans-unit id="130" xml:space="preserve">
            <source>If the swap parameter is <bpt id="2">&lt;strong&gt;</bpt>FALSE<ept id="2">&lt;/strong&gt;</ept>, it returns the same data set as the standard implementation.</source>
            <target state="new">If the swap parameter is <bpt id="2">&lt;strong&gt;</bpt>FALSE<ept id="2">&lt;/strong&gt;</ept>, it returns the same data set as the standard implementation.</target>
          </trans-unit>
          <trans-unit id="131" xml:space="preserve">
            <source>But if the swap parameter is <bpt id="2">&lt;strong&gt;</bpt>TRUE<ept id="2">&lt;/strong&gt;</ept>, it appends rows of first input dataset to the end of the second dataset instead.</source>
            <target state="new">But if the swap parameter is <bpt id="2">&lt;strong&gt;</bpt>TRUE<ept id="2">&lt;/strong&gt;</ept>, it appends rows of first input dataset to the end of the second dataset instead.</target>
          </trans-unit>
          <trans-unit id="132" xml:space="preserve">
            <source>The file that implements the R <bpt id="2">&lt;code&gt;</bpt>CustomAddRows<ept id="2">&lt;/code&gt;</ept> function exposed by the <bpt id="4">&lt;strong&gt;</bpt>Custom Add Rows<ept id="4">&lt;/strong&gt;</ept> module contains the following R code.</source>
            <target state="new">The file that implements the R <bpt id="2">&lt;code&gt;</bpt>CustomAddRows<ept id="2">&lt;/code&gt;</ept> function exposed by the <bpt id="4">&lt;strong&gt;</bpt>Custom Add Rows<ept id="4">&lt;/strong&gt;</ept> module contains the following R code.</target>
          </trans-unit>
          <trans-unit id="133" xml:space="preserve">
            <source>To expose this <bpt id="2">&lt;code&gt;</bpt>CustomAddRows<ept id="2">&lt;/code&gt;</ept> function as an Azure Machine Learning module, an XML definition file must be created to specify how the <bpt id="4">&lt;strong&gt;</bpt>Custom Add Rows<ept id="4">&lt;/strong&gt;</ept> module should look and behave.</source>
            <target state="new">To expose this <bpt id="2">&lt;code&gt;</bpt>CustomAddRows<ept id="2">&lt;/code&gt;</ept> function as an Azure Machine Learning module, an XML definition file must be created to specify how the <bpt id="4">&lt;strong&gt;</bpt>Custom Add Rows<ept id="4">&lt;/strong&gt;</ept> module should look and behave.</target>
          </trans-unit>
          <trans-unit id="134" xml:space="preserve">
            <source>Note that the value of the <bpt id="2">&lt;strong&gt;</bpt>id<ept id="2">&lt;/strong&gt;</ept> attributes of the <bpt id="4">&lt;strong&gt;</bpt>Input<ept id="4">&lt;/strong&gt;</ept> and <bpt id="6">&lt;strong&gt;</bpt>Arg<ept id="6">&lt;/strong&gt;</ept> elements in the XML file must match the function parameter names of the R code exactly (<bpt id="8">&lt;em&gt;</bpt>dataset1<ept id="8">&lt;/em&gt;</ept>, <bpt id="10">&lt;em&gt;</bpt>dataset2<ept id="10">&lt;/em&gt;</ept>, and <bpt id="12">&lt;em&gt;</bpt>swap<ept id="12">&lt;/em&gt;</ept> in the example).</source>
            <target state="new">Note that the value of the <bpt id="2">&lt;strong&gt;</bpt>id<ept id="2">&lt;/strong&gt;</ept> attributes of the <bpt id="4">&lt;strong&gt;</bpt>Input<ept id="4">&lt;/strong&gt;</ept> and <bpt id="6">&lt;strong&gt;</bpt>Arg<ept id="6">&lt;/strong&gt;</ept> elements in the XML file must match the function parameter names of the R code exactly (<bpt id="8">&lt;em&gt;</bpt>dataset1<ept id="8">&lt;/em&gt;</ept>, <bpt id="10">&lt;em&gt;</bpt>dataset2<ept id="10">&lt;/em&gt;</ept>, and <bpt id="12">&lt;em&gt;</bpt>swap<ept id="12">&lt;/em&gt;</ept> in the example).</target>
          </trans-unit>
          <trans-unit id="135" xml:space="preserve">
            <source>Similarly, the value of the <bpt id="2">&lt;strong&gt;</bpt>entryPoint<ept id="2">&lt;/strong&gt;</ept> attribute of the <bpt id="4">&lt;strong&gt;</bpt>Language<ept id="4">&lt;/strong&gt;</ept> element must match the name of the function in the R script exactly (<bpt id="6">&lt;em&gt;</bpt>CustomAddRows<ept id="6">&lt;/em&gt;</ept> in the example).</source>
            <target state="new">Similarly, the value of the <bpt id="2">&lt;strong&gt;</bpt>entryPoint<ept id="2">&lt;/strong&gt;</ept> attribute of the <bpt id="4">&lt;strong&gt;</bpt>Language<ept id="4">&lt;/strong&gt;</ept> element must match the name of the function in the R script exactly (<bpt id="6">&lt;em&gt;</bpt>CustomAddRows<ept id="6">&lt;/em&gt;</ept> in the example).</target>
          </trans-unit>
          <trans-unit id="136" xml:space="preserve">
            <source>In contrast, the <bpt id="2">&lt;strong&gt;</bpt>id<ept id="2">&lt;/strong&gt;</ept> attribute for the <bpt id="4">&lt;strong&gt;</bpt>Output<ept id="4">&lt;/strong&gt;</ept> elements do not correspond to any variables in the R script.</source>
            <target state="new">In contrast, the <bpt id="2">&lt;strong&gt;</bpt>id<ept id="2">&lt;/strong&gt;</ept> attribute for the <bpt id="4">&lt;strong&gt;</bpt>Output<ept id="4">&lt;/strong&gt;</ept> elements do not correspond to any variables in the R script.</target>
          </trans-unit>
          <trans-unit id="137" xml:space="preserve">
            <source>When more than one output is required, simply return a list from the R function with results placed in the same order as outputs are declared in the XML file.</source>
            <target state="new">When more than one output is required, simply return a list from the R function with results placed in the same order as outputs are declared in the XML file.</target>
          </trans-unit>
          <trans-unit id="138" xml:space="preserve">
            <source>Save these two files as <bpt id="2">&lt;em&gt;</bpt>CustomAddRows.R<ept id="2">&lt;/em&gt;</ept> and <bpt id="4">&lt;em&gt;</bpt>CustomAddRows.xml<ept id="4">&lt;/em&gt;</ept> and then zip them together into a <bpt id="6">&lt;em&gt;</bpt>CustomAddRows.zip<ept id="6">&lt;/em&gt;</ept> file.</source>
            <target state="new">Save these two files as <bpt id="2">&lt;em&gt;</bpt>CustomAddRows.R<ept id="2">&lt;/em&gt;</ept> and <bpt id="4">&lt;em&gt;</bpt>CustomAddRows.xml<ept id="4">&lt;/em&gt;</ept> and then zip them together into a <bpt id="6">&lt;em&gt;</bpt>CustomAddRows.zip<ept id="6">&lt;/em&gt;</ept> file.</target>
          </trans-unit>
          <trans-unit id="139" xml:space="preserve">
            <source>To register them in your Machine Learning workspace, go to your  workspace in the Machine Learning Studio, click the <bpt id="2">&lt;strong&gt;</bpt>+NEW<ept id="2">&lt;/strong&gt;</ept> button on the bottom and choose <bpt id="4">&lt;strong&gt;</bpt>MODULE -&gt; FROM ZIP PACKAGE<ept id="4">&lt;/strong&gt;</ept> to upload the new Custom Add Rows module.</source>
            <target state="new">To register them in your Machine Learning workspace, go to your  workspace in the Machine Learning Studio, click the <bpt id="2">&lt;strong&gt;</bpt>+NEW<ept id="2">&lt;/strong&gt;</ept> button on the bottom and choose <bpt id="4">&lt;strong&gt;</bpt>MODULE -&gt; FROM ZIP PACKAGE<ept id="4">&lt;/strong&gt;</ept> to upload the new Custom Add Rows module.</target>
          </trans-unit>
          <trans-unit id="140" xml:space="preserve">
            <source><bpt id="1">&lt;linkText&gt;</bpt><ept id="1">&lt;/linkText&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;linkText&gt;</bpt><ept id="1">&lt;/linkText&gt;</ept></target>
          </trans-unit>
          <trans-unit id="141" xml:space="preserve">
            <source>The <bpt id="2">&lt;strong&gt;</bpt>Custom Add Rows<ept id="2">&lt;/strong&gt;</ept> module is now ready to be accessed by your Machine Learning experiments.</source>
            <target state="new">The <bpt id="2">&lt;strong&gt;</bpt>Custom Add Rows<ept id="2">&lt;/strong&gt;</ept> module is now ready to be accessed by your Machine Learning experiments.</target>
          </trans-unit>
          <trans-unit id="142" xml:space="preserve">
            <source>Elements in the XML definition file</source>
            <target state="new">Elements in the XML definition file</target>
          </trans-unit>
          <trans-unit id="143" xml:space="preserve">
            <source>Module elements</source>
            <target state="new">Module elements</target>
          </trans-unit>
          <trans-unit id="144" xml:space="preserve">
            <source>The <bpt id="2">&lt;strong&gt;</bpt>Module<ept id="2">&lt;/strong&gt;</ept> element is used to define a custom module in the XML file.</source>
            <target state="new">The <bpt id="2">&lt;strong&gt;</bpt>Module<ept id="2">&lt;/strong&gt;</ept> element is used to define a custom module in the XML file.</target>
          </trans-unit>
          <trans-unit id="145" xml:space="preserve">
            <source>Multiple modules can be defined in one XML file using multiple <bpt id="2">&lt;strong&gt;</bpt>module<ept id="2">&lt;/strong&gt;</ept> elements.</source>
            <target state="new">Multiple modules can be defined in one XML file using multiple <bpt id="2">&lt;strong&gt;</bpt>module<ept id="2">&lt;/strong&gt;</ept> elements.</target>
          </trans-unit>
          <trans-unit id="146" xml:space="preserve">
            <source>Each module in your workspace must have a unique name.</source>
            <target state="new">Each module in your workspace must have a unique name.</target>
          </trans-unit>
          <trans-unit id="147" xml:space="preserve">
            <source>Register a custom module with the same name as an existing custom module and it will replace the existing module with the new one.</source>
            <target state="new">Register a custom module with the same name as an existing custom module and it will replace the existing module with the new one.</target>
          </trans-unit>
          <trans-unit id="148" xml:space="preserve">
            <source>Custom modules can, however, be registered with the same name as an existing Azure Machine Learning module and it will appear in the Custom category of the module palette.</source>
            <target state="new">Custom modules can, however, be registered with the same name as an existing Azure Machine Learning module and it will appear in the Custom category of the module palette.</target>
          </trans-unit>
          <trans-unit id="149" xml:space="preserve">
            <source>Within the <bpt id="2">&lt;strong&gt;</bpt>Module<ept id="2">&lt;/strong&gt;</ept> element, you can specify an optional <bpt id="4">&lt;strong&gt;</bpt>Owner<ept id="4">&lt;/strong&gt;</ept> element that is embedded into the module as well as a <bpt id="6">&lt;strong&gt;</bpt>Description<ept id="6">&lt;/strong&gt;</ept> element which is text displayed in quick help for the module and when you hover over the module in the Machine Learning UI.</source>
            <target state="new">Within the <bpt id="2">&lt;strong&gt;</bpt>Module<ept id="2">&lt;/strong&gt;</ept> element, you can specify an optional <bpt id="4">&lt;strong&gt;</bpt>Owner<ept id="4">&lt;/strong&gt;</ept> element that is embedded into the module as well as a <bpt id="6">&lt;strong&gt;</bpt>Description<ept id="6">&lt;/strong&gt;</ept> element which is text displayed in quick help for the module and when you hover over the module in the Machine Learning UI.</target>
          </trans-unit>
          <trans-unit id="150" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Rules for characters limits in the Module elements<ept id="1">&lt;/strong&gt;</ept>:</source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Rules for characters limits in the Module elements<ept id="1">&lt;/strong&gt;</ept>:</target>
          </trans-unit>
          <trans-unit id="151" xml:space="preserve">
            <source>The value of the <bpt id="2">&lt;strong&gt;</bpt>name<ept id="2">&lt;/strong&gt;</ept> attribute in the <bpt id="4">&lt;strong&gt;</bpt>Module<ept id="4">&lt;/strong&gt;</ept> element must not exceed 64 characters in length.</source>
            <target state="new">The value of the <bpt id="2">&lt;strong&gt;</bpt>name<ept id="2">&lt;/strong&gt;</ept> attribute in the <bpt id="4">&lt;strong&gt;</bpt>Module<ept id="4">&lt;/strong&gt;</ept> element must not exceed 64 characters in length.</target>
          </trans-unit>
          <trans-unit id="152" xml:space="preserve">
            <source>The content of the <bpt id="2">&lt;strong&gt;</bpt>Description<ept id="2">&lt;/strong&gt;</ept> element must not exceed 128 characters in length.</source>
            <target state="new">The content of the <bpt id="2">&lt;strong&gt;</bpt>Description<ept id="2">&lt;/strong&gt;</ept> element must not exceed 128 characters in length.</target>
          </trans-unit>
          <trans-unit id="153" xml:space="preserve">
            <source>The content of the <bpt id="2">&lt;strong&gt;</bpt>Owner<ept id="2">&lt;/strong&gt;</ept> element must not exceed 32 characters in length.</source>
            <target state="new">The content of the <bpt id="2">&lt;strong&gt;</bpt>Owner<ept id="2">&lt;/strong&gt;</ept> element must not exceed 32 characters in length.</target>
          </trans-unit>
          <trans-unit id="154" xml:space="preserve">
            <source>** Indicating whether a module's results are deterministic or nondeterministic</source>
            <target state="new">** Indicating whether a module's results are deterministic or nondeterministic</target>
          </trans-unit>
          <trans-unit id="155" xml:space="preserve">
            <source>By default, all modules are considered to be deterministic.</source>
            <target state="new">By default, all modules are considered to be deterministic.</target>
          </trans-unit>
          <trans-unit id="156" xml:space="preserve">
            <source>That is, given an  unchanging set of parameters, the module should return the same results each time it is run.</source>
            <target state="new">That is, given an  unchanging set of parameters, the module should return the same results each time it is run.</target>
          </trans-unit>
          <trans-unit id="157" xml:space="preserve">
            <source>Given this behavior, Azure Machine Learning Studio does not re-run modules marked as deterministic unless a parameter or the input data has changed.</source>
            <target state="new">Given this behavior, Azure Machine Learning Studio does not re-run modules marked as deterministic unless a parameter or the input data has changed.</target>
          </trans-unit>
          <trans-unit id="158" xml:space="preserve">
            <source>Cached results are returned resulting in faster experiment execution.</source>
            <target state="new">Cached results are returned resulting in faster experiment execution.</target>
          </trans-unit>
          <trans-unit id="159" xml:space="preserve">
            <source>However, if your module uses a function that returns different results each time it is run – for example, RAND or a function that returns the current date or time – you can specify the module as being non-deterministic by setting the optional <bpt id="2">&lt;strong&gt;</bpt>isDeterministic<ept id="2">&lt;/strong&gt;</ept> attribute to <bpt id="4">&lt;strong&gt;</bpt>false<ept id="4">&lt;/strong&gt;</ept>.</source>
            <target state="new">However, if your module uses a function that returns different results each time it is run – for example, RAND or a function that returns the current date or time – you can specify the module as being non-deterministic by setting the optional <bpt id="2">&lt;strong&gt;</bpt>isDeterministic<ept id="2">&lt;/strong&gt;</ept> attribute to <bpt id="4">&lt;strong&gt;</bpt>false<ept id="4">&lt;/strong&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="160" xml:space="preserve">
            <source>The module will be rerun each time the experiment is run, even if the module input and parameters have not changed.</source>
            <target state="new">The module will be rerun each time the experiment is run, even if the module input and parameters have not changed.</target>
          </trans-unit>
          <trans-unit id="161" xml:space="preserve">
            <source>Language Definition</source>
            <target state="new">Language Definition</target>
          </trans-unit>
          <trans-unit id="162" xml:space="preserve">
            <source>The <bpt id="2">&lt;strong&gt;</bpt>Language<ept id="2">&lt;/strong&gt;</ept> element in your XML definition file is used to specify the custom module language.</source>
            <target state="new">The <bpt id="2">&lt;strong&gt;</bpt>Language<ept id="2">&lt;/strong&gt;</ept> element in your XML definition file is used to specify the custom module language.</target>
          </trans-unit>
          <trans-unit id="163" xml:space="preserve">
            <source>Currently, R is the only supported language.</source>
            <target state="new">Currently, R is the only supported language.</target>
          </trans-unit>
          <trans-unit id="164" xml:space="preserve">
            <source>The value of the <bpt id="2">&lt;strong&gt;</bpt>sourceFile<ept id="2">&lt;/strong&gt;</ept> attribute must be the name of the R file that contains the function to call when the module is run.</source>
            <target state="new">The value of the <bpt id="2">&lt;strong&gt;</bpt>sourceFile<ept id="2">&lt;/strong&gt;</ept> attribute must be the name of the R file that contains the function to call when the module is run.</target>
          </trans-unit>
          <trans-unit id="165" xml:space="preserve">
            <source>This file must be part of the zip package.</source>
            <target state="new">This file must be part of the zip package.</target>
          </trans-unit>
          <trans-unit id="166" xml:space="preserve">
            <source>The value of the <bpt id="2">&lt;strong&gt;</bpt>entryPoint<ept id="2">&lt;/strong&gt;</ept> attribute is the name of the function being called and must match a valid function defined with in the source file.</source>
            <target state="new">The value of the <bpt id="2">&lt;strong&gt;</bpt>entryPoint<ept id="2">&lt;/strong&gt;</ept> attribute is the name of the function being called and must match a valid function defined with in the source file.</target>
          </trans-unit>
          <trans-unit id="167" xml:space="preserve">
            <source>Ports</source>
            <target state="new">Ports</target>
          </trans-unit>
          <trans-unit id="168" xml:space="preserve">
            <source>The input and output ports for a custom module are specified in child elements of the <bpt id="2">&lt;strong&gt;</bpt>Ports<ept id="2">&lt;/strong&gt;</ept> section of the XML definition file.</source>
            <target state="new">The input and output ports for a custom module are specified in child elements of the <bpt id="2">&lt;strong&gt;</bpt>Ports<ept id="2">&lt;/strong&gt;</ept> section of the XML definition file.</target>
          </trans-unit>
          <trans-unit id="169" xml:space="preserve">
            <source>The order of these elements determines the layout experienced (UX) by users.</source>
            <target state="new">The order of these elements determines the layout experienced (UX) by users.</target>
          </trans-unit>
          <trans-unit id="170" xml:space="preserve">
            <source>The first child <bpt id="2">&lt;strong&gt;</bpt>input<ept id="2">&lt;/strong&gt;</ept> or <bpt id="4">&lt;strong&gt;</bpt>output<ept id="4">&lt;/strong&gt;</ept> listed in the <bpt id="6">&lt;strong&gt;</bpt>Ports<ept id="6">&lt;/strong&gt;</ept> element  of the XML file will be the left-most input port in the Machine Learning UX.</source>
            <target state="new">The first child <bpt id="2">&lt;strong&gt;</bpt>input<ept id="2">&lt;/strong&gt;</ept> or <bpt id="4">&lt;strong&gt;</bpt>output<ept id="4">&lt;/strong&gt;</ept> listed in the <bpt id="6">&lt;strong&gt;</bpt>Ports<ept id="6">&lt;/strong&gt;</ept> element  of the XML file will be the left-most input port in the Machine Learning UX.</target>
          </trans-unit>
          <trans-unit id="171" xml:space="preserve">
            <source>Each input and output port may have an optional <bpt id="2">&lt;strong&gt;</bpt>Description<ept id="2">&lt;/strong&gt;</ept> child element that specifies the text shown when a user hovers the mouse cursor over the port in the Machine Learning UI.</source>
            <target state="new">Each input and output port may have an optional <bpt id="2">&lt;strong&gt;</bpt>Description<ept id="2">&lt;/strong&gt;</ept> child element that specifies the text shown when a user hovers the mouse cursor over the port in the Machine Learning UI.</target>
          </trans-unit>
          <trans-unit id="172" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Ports Rules<ept id="1">&lt;/strong&gt;</ept>:</source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Ports Rules<ept id="1">&lt;/strong&gt;</ept>:</target>
          </trans-unit>
          <trans-unit id="173" xml:space="preserve">
            <source>Maximum number of <bpt id="2">&lt;strong&gt;</bpt>input and output ports<ept id="2">&lt;/strong&gt;</ept> is 8 for each.</source>
            <target state="new">Maximum number of <bpt id="2">&lt;strong&gt;</bpt>input and output ports<ept id="2">&lt;/strong&gt;</ept> is 8 for each.</target>
          </trans-unit>
          <trans-unit id="174" xml:space="preserve">
            <source>Input elements</source>
            <target state="new">Input elements</target>
          </trans-unit>
          <trans-unit id="175" xml:space="preserve">
            <source>Input ports allow users to pass data to your R function and workspace.</source>
            <target state="new">Input ports allow users to pass data to your R function and workspace.</target>
          </trans-unit>
          <trans-unit id="176" xml:space="preserve">
            <source>The <bpt id="2">&lt;strong&gt;</bpt>data types<ept id="2">&lt;/strong&gt;</ept> that are supported for input ports are as follows:</source>
            <target state="new">The <bpt id="2">&lt;strong&gt;</bpt>data types<ept id="2">&lt;/strong&gt;</ept> that are supported for input ports are as follows:</target>
          </trans-unit>
          <trans-unit id="177" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>DataTable:<ept id="1">&lt;/strong&gt;</ept> This type is passed to your R function as a data.frame.</source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>DataTable:<ept id="1">&lt;/strong&gt;</ept> This type is passed to your R function as a data.frame.</target>
          </trans-unit>
          <trans-unit id="178" xml:space="preserve">
            <source>In fact, any types (for example, CSV files or ARFF files) that are supported  by Machine Learning and that are compatible with <bpt id="2">&lt;strong&gt;</bpt>DataTable<ept id="2">&lt;/strong&gt;</ept> are converted to a data.frame automatically.</source>
            <target state="new">In fact, any types (for example, CSV files or ARFF files) that are supported  by Machine Learning and that are compatible with <bpt id="2">&lt;strong&gt;</bpt>DataTable<ept id="2">&lt;/strong&gt;</ept> are converted to a data.frame automatically.</target>
          </trans-unit>
          <trans-unit id="179" xml:space="preserve">
            <source>The <bpt id="2">&lt;strong&gt;</bpt>id<ept id="2">&lt;/strong&gt;</ept> attribute associated with each <bpt id="4">&lt;strong&gt;</bpt>DataTable<ept id="4">&lt;/strong&gt;</ept> input port must have a unique value and this value must match its corresponding named parameter in your R function.</source>
            <target state="new">The <bpt id="2">&lt;strong&gt;</bpt>id<ept id="2">&lt;/strong&gt;</ept> attribute associated with each <bpt id="4">&lt;strong&gt;</bpt>DataTable<ept id="4">&lt;/strong&gt;</ept> input port must have a unique value and this value must match its corresponding named parameter in your R function.</target>
          </trans-unit>
          <trans-unit id="180" xml:space="preserve">
            <source>Optional <bpt id="2">&lt;strong&gt;</bpt>DataTable<ept id="2">&lt;/strong&gt;</ept> ports that are not passed as input in an experiment will have the value <bpt id="4">&lt;strong&gt;</bpt>NULL<ept id="4">&lt;/strong&gt;</ept> passed to the R function and optional zip ports will be ignored if the input is not connected.</source>
            <target state="new">Optional <bpt id="2">&lt;strong&gt;</bpt>DataTable<ept id="2">&lt;/strong&gt;</ept> ports that are not passed as input in an experiment will have the value <bpt id="4">&lt;strong&gt;</bpt>NULL<ept id="4">&lt;/strong&gt;</ept> passed to the R function and optional zip ports will be ignored if the input is not connected.</target>
          </trans-unit>
          <trans-unit id="181" xml:space="preserve">
            <source>The <bpt id="2">&lt;strong&gt;</bpt>isOptional<ept id="2">&lt;/strong&gt;</ept> attribute is optional for both the <bpt id="4">&lt;strong&gt;</bpt>DataTable<ept id="4">&lt;/strong&gt;</ept> and <bpt id="6">&lt;strong&gt;</bpt>Zip<ept id="6">&lt;/strong&gt;</ept> types and is <bpt id="8">&lt;em&gt;</bpt>false<ept id="8">&lt;/em&gt;</ept> by default.</source>
            <target state="new">The <bpt id="2">&lt;strong&gt;</bpt>isOptional<ept id="2">&lt;/strong&gt;</ept> attribute is optional for both the <bpt id="4">&lt;strong&gt;</bpt>DataTable<ept id="4">&lt;/strong&gt;</ept> and <bpt id="6">&lt;strong&gt;</bpt>Zip<ept id="6">&lt;/strong&gt;</ept> types and is <bpt id="8">&lt;em&gt;</bpt>false<ept id="8">&lt;/em&gt;</ept> by default.</target>
          </trans-unit>
          <trans-unit id="182" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Zip:<ept id="1">&lt;/strong&gt;</ept> Custom modules can accept a zip file as input.</source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Zip:<ept id="1">&lt;/strong&gt;</ept> Custom modules can accept a zip file as input.</target>
          </trans-unit>
          <trans-unit id="183" xml:space="preserve">
            <source>This input is unpacked into the R working directory of your function</source>
            <target state="new">This input is unpacked into the R working directory of your function</target>
          </trans-unit>
          <trans-unit id="184" xml:space="preserve">
            <source>For custom R modules, the id for a Zip port does not have to match any parameters of the R function since the zip file is automatically extracted to the R working directory.</source>
            <target state="new">For custom R modules, the id for a Zip port does not have to match any parameters of the R function since the zip file is automatically extracted to the R working directory.</target>
          </trans-unit>
          <trans-unit id="185" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Input Rules:<ept id="1">&lt;/strong&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Input Rules:<ept id="1">&lt;/strong&gt;</ept></target>
          </trans-unit>
          <trans-unit id="186" xml:space="preserve">
            <source>The value of the <bpt id="2">&lt;strong&gt;</bpt>id<ept id="2">&lt;/strong&gt;</ept> attribute of the <bpt id="4">&lt;strong&gt;</bpt>Input<ept id="4">&lt;/strong&gt;</ept> element must be a valid R variable name.</source>
            <target state="new">The value of the <bpt id="2">&lt;strong&gt;</bpt>id<ept id="2">&lt;/strong&gt;</ept> attribute of the <bpt id="4">&lt;strong&gt;</bpt>Input<ept id="4">&lt;/strong&gt;</ept> element must be a valid R variable name.</target>
          </trans-unit>
          <trans-unit id="187" xml:space="preserve">
            <source>The value of the <bpt id="2">&lt;strong&gt;</bpt>id<ept id="2">&lt;/strong&gt;</ept> attribute of the <bpt id="4">&lt;strong&gt;</bpt>Input<ept id="4">&lt;/strong&gt;</ept> element must not be longer than 64 characters.</source>
            <target state="new">The value of the <bpt id="2">&lt;strong&gt;</bpt>id<ept id="2">&lt;/strong&gt;</ept> attribute of the <bpt id="4">&lt;strong&gt;</bpt>Input<ept id="4">&lt;/strong&gt;</ept> element must not be longer than 64 characters.</target>
          </trans-unit>
          <trans-unit id="188" xml:space="preserve">
            <source>The value of the <bpt id="2">&lt;strong&gt;</bpt>name<ept id="2">&lt;/strong&gt;</ept> attribute of the <bpt id="4">&lt;strong&gt;</bpt>Input<ept id="4">&lt;/strong&gt;</ept> element  must not be longer than 64 characters.</source>
            <target state="new">The value of the <bpt id="2">&lt;strong&gt;</bpt>name<ept id="2">&lt;/strong&gt;</ept> attribute of the <bpt id="4">&lt;strong&gt;</bpt>Input<ept id="4">&lt;/strong&gt;</ept> element  must not be longer than 64 characters.</target>
          </trans-unit>
          <trans-unit id="189" xml:space="preserve">
            <source>The content of the <bpt id="2">&lt;strong&gt;</bpt>Description<ept id="2">&lt;/strong&gt;</ept> element must not be longer than 128 characters</source>
            <target state="new">The content of the <bpt id="2">&lt;strong&gt;</bpt>Description<ept id="2">&lt;/strong&gt;</ept> element must not be longer than 128 characters</target>
          </trans-unit>
          <trans-unit id="190" xml:space="preserve">
            <source>The value of the <bpt id="2">&lt;strong&gt;</bpt>type<ept id="2">&lt;/strong&gt;</ept> attribute of the <bpt id="4">&lt;strong&gt;</bpt>Input<ept id="4">&lt;/strong&gt;</ept> element must be <bpt id="6">&lt;em&gt;</bpt>Zip<ept id="6">&lt;/em&gt;</ept> or <bpt id="8">&lt;em&gt;</bpt>DataTable<ept id="8">&lt;/em&gt;</ept>.</source>
            <target state="new">The value of the <bpt id="2">&lt;strong&gt;</bpt>type<ept id="2">&lt;/strong&gt;</ept> attribute of the <bpt id="4">&lt;strong&gt;</bpt>Input<ept id="4">&lt;/strong&gt;</ept> element must be <bpt id="6">&lt;em&gt;</bpt>Zip<ept id="6">&lt;/em&gt;</ept> or <bpt id="8">&lt;em&gt;</bpt>DataTable<ept id="8">&lt;/em&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="191" xml:space="preserve">
            <source>The value of the <bpt id="2">&lt;strong&gt;</bpt>isOptional<ept id="2">&lt;/strong&gt;</ept> attribute of the <bpt id="4">&lt;strong&gt;</bpt>Input<ept id="4">&lt;/strong&gt;</ept> element is not required (and is <bpt id="6">&lt;em&gt;</bpt>false<ept id="6">&lt;/em&gt;</ept> by default when not specified); but if it is specified, it must be <bpt id="8">&lt;em&gt;</bpt>true<ept id="8">&lt;/em&gt;</ept> or <bpt id="10">&lt;em&gt;</bpt>false<ept id="10">&lt;/em&gt;</ept>.</source>
            <target state="new">The value of the <bpt id="2">&lt;strong&gt;</bpt>isOptional<ept id="2">&lt;/strong&gt;</ept> attribute of the <bpt id="4">&lt;strong&gt;</bpt>Input<ept id="4">&lt;/strong&gt;</ept> element is not required (and is <bpt id="6">&lt;em&gt;</bpt>false<ept id="6">&lt;/em&gt;</ept> by default when not specified); but if it is specified, it must be <bpt id="8">&lt;em&gt;</bpt>true<ept id="8">&lt;/em&gt;</ept> or <bpt id="10">&lt;em&gt;</bpt>false<ept id="10">&lt;/em&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="192" xml:space="preserve">
            <source>Output elements</source>
            <target state="new">Output elements</target>
          </trans-unit>
          <trans-unit id="193" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Standard output ports:<ept id="1">&lt;/strong&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Standard output ports:<ept id="1">&lt;/strong&gt;</ept></target>
          </trans-unit>
          <trans-unit id="194" xml:space="preserve">
            <source>Output ports are mapped to the return values from your R function, which can then be used by subsequent modules.</source>
            <target state="new">Output ports are mapped to the return values from your R function, which can then be used by subsequent modules.</target>
          </trans-unit>
          <trans-unit id="195" xml:space="preserve">
            <source><bpt id="1">&lt;em&gt;</bpt>DataTable<ept id="1">&lt;/em&gt;</ept> is the only standard output port type supported currently.</source>
            <target state="new"><bpt id="1">&lt;em&gt;</bpt>DataTable<ept id="1">&lt;/em&gt;</ept> is the only standard output port type supported currently.</target>
          </trans-unit>
          <trans-unit id="196" xml:space="preserve">
            <source>(Support for <bpt id="2">&lt;em&gt;</bpt>Learners<ept id="2">&lt;/em&gt;</ept> and <bpt id="4">&lt;em&gt;</bpt>Transforms<ept id="4">&lt;/em&gt;</ept> is forthcoming.)</source>
            <target state="new">(Support for <bpt id="2">&lt;em&gt;</bpt>Learners<ept id="2">&lt;/em&gt;</ept> and <bpt id="4">&lt;em&gt;</bpt>Transforms<ept id="4">&lt;/em&gt;</ept> is forthcoming.)</target>
          </trans-unit>
          <trans-unit id="197" xml:space="preserve">
            <source>A <bpt id="2">&lt;em&gt;</bpt>DataTable<ept id="2">&lt;/em&gt;</ept> output is defined as:</source>
            <target state="new">A <bpt id="2">&lt;em&gt;</bpt>DataTable<ept id="2">&lt;/em&gt;</ept> output is defined as:</target>
          </trans-unit>
          <trans-unit id="198" xml:space="preserve">
            <source>For outputs in custom R modules, the value of the <bpt id="2">&lt;strong&gt;</bpt>id<ept id="2">&lt;/strong&gt;</ept> attribute does not have to correspond with anything in the R script, but it must be unique.</source>
            <target state="new">For outputs in custom R modules, the value of the <bpt id="2">&lt;strong&gt;</bpt>id<ept id="2">&lt;/strong&gt;</ept> attribute does not have to correspond with anything in the R script, but it must be unique.</target>
          </trans-unit>
          <trans-unit id="199" xml:space="preserve">
            <source>For a single module output, the return value from the R function must be a <bpt id="2">&lt;em&gt;</bpt>data.frame<ept id="2">&lt;/em&gt;</ept>.</source>
            <target state="new">For a single module output, the return value from the R function must be a <bpt id="2">&lt;em&gt;</bpt>data.frame<ept id="2">&lt;/em&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="200" xml:space="preserve">
            <source>In order to output more than one object of a supported data type, the appropriate output ports need to be specified in the XML definition file and the objects need to be returned as a list.</source>
            <target state="new">In order to output more than one object of a supported data type, the appropriate output ports need to be specified in the XML definition file and the objects need to be returned as a list.</target>
          </trans-unit>
          <trans-unit id="201" xml:space="preserve">
            <source>The output objects will be assigned to output ports from left to right, reflecting the order in which the objects are placed in the returned list.</source>
            <target state="new">The output objects will be assigned to output ports from left to right, reflecting the order in which the objects are placed in the returned list.</target>
          </trans-unit>
          <trans-unit id="202" xml:space="preserve">
            <source>For example, if you want to output dataset, Dataset1, and Dataset2 to output ports dataset, dataset1, and dataset2 from left to right, respectively, then define the output ports in the ‘CustomAddRows.xml’ file as follows:</source>
            <target state="new">For example, if you want to output dataset, Dataset1, and Dataset2 to output ports dataset, dataset1, and dataset2 from left to right, respectively, then define the output ports in the ‘CustomAddRows.xml’ file as follows:</target>
          </trans-unit>
          <trans-unit id="203" xml:space="preserve">
            <source>For example, if you want to modify the <bpt id="2">&lt;strong&gt;</bpt>Custom Add Rows<ept id="2">&lt;/strong&gt;</ept> module to output the original two datasets, <bpt id="4">&lt;em&gt;</bpt>dataset1<ept id="4">&lt;/em&gt;</ept>, and <bpt id="6">&lt;em&gt;</bpt>dataset2<ept id="6">&lt;/em&gt;</ept>, in addition to the new joined dataset <bpt id="8">&lt;em&gt;</bpt>dataset<ept id="8">&lt;/em&gt;</ept> (in an order, from left to right, as: <bpt id="10">&lt;em&gt;</bpt>dataset<ept id="10">&lt;/em&gt;</ept>, <bpt id="12">&lt;em&gt;</bpt>dataset1<ept id="12">&lt;/em&gt;</ept>, <bpt id="14">&lt;em&gt;</bpt>dataset2<ept id="14">&lt;/em&gt;</ept>), then define the output ports in the CustomAddRows.xml file as follows:</source>
            <target state="new">For example, if you want to modify the <bpt id="2">&lt;strong&gt;</bpt>Custom Add Rows<ept id="2">&lt;/strong&gt;</ept> module to output the original two datasets, <bpt id="4">&lt;em&gt;</bpt>dataset1<ept id="4">&lt;/em&gt;</ept>, and <bpt id="6">&lt;em&gt;</bpt>dataset2<ept id="6">&lt;/em&gt;</ept>, in addition to the new joined dataset <bpt id="8">&lt;em&gt;</bpt>dataset<ept id="8">&lt;/em&gt;</ept> (in an order, from left to right, as: <bpt id="10">&lt;em&gt;</bpt>dataset<ept id="10">&lt;/em&gt;</ept>, <bpt id="12">&lt;em&gt;</bpt>dataset1<ept id="12">&lt;/em&gt;</ept>, <bpt id="14">&lt;em&gt;</bpt>dataset2<ept id="14">&lt;/em&gt;</ept>), then define the output ports in the CustomAddRows.xml file as follows:</target>
          </trans-unit>
          <trans-unit id="204" xml:space="preserve">
            <source>And return the list of objects in a list in the correct order in ‘CustomAddRows.R’:</source>
            <target state="new">And return the list of objects in a list in the correct order in ‘CustomAddRows.R’:</target>
          </trans-unit>
          <trans-unit id="205" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Visualization output:<ept id="1">&lt;/strong&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Visualization output:<ept id="1">&lt;/strong&gt;</ept></target>
          </trans-unit>
          <trans-unit id="206" xml:space="preserve">
            <source>You can also specify an output port of type <bpt id="2">&lt;em&gt;</bpt>Visualization<ept id="2">&lt;/em&gt;</ept> which displays the output from the R graphics device and console output.</source>
            <target state="new">You can also specify an output port of type <bpt id="2">&lt;em&gt;</bpt>Visualization<ept id="2">&lt;/em&gt;</ept> which displays the output from the R graphics device and console output.</target>
          </trans-unit>
          <trans-unit id="207" xml:space="preserve">
            <source>This port is not part of the R function output and does not interfere with the order of the the other output port types.</source>
            <target state="new">This port is not part of the R function output and does not interfere with the order of the the other output port types.</target>
          </trans-unit>
          <trans-unit id="208" xml:space="preserve">
            <source>To add a visualization port to the custom modules, add an <bpt id="2">&lt;strong&gt;</bpt>Output<ept id="2">&lt;/strong&gt;</ept> element with a value of <bpt id="4">&lt;em&gt;</bpt>Visualization<ept id="4">&lt;/em&gt;</ept> for its <bpt id="6">&lt;strong&gt;</bpt>type<ept id="6">&lt;/strong&gt;</ept> attribute:</source>
            <target state="new">To add a visualization port to the custom modules, add an <bpt id="2">&lt;strong&gt;</bpt>Output<ept id="2">&lt;/strong&gt;</ept> element with a value of <bpt id="4">&lt;em&gt;</bpt>Visualization<ept id="4">&lt;/em&gt;</ept> for its <bpt id="6">&lt;strong&gt;</bpt>type<ept id="6">&lt;/strong&gt;</ept> attribute:</target>
          </trans-unit>
          <trans-unit id="209" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Output Rules:<ept id="1">&lt;/strong&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Output Rules:<ept id="1">&lt;/strong&gt;</ept></target>
          </trans-unit>
          <trans-unit id="210" xml:space="preserve">
            <source>The value of the <bpt id="2">&lt;strong&gt;</bpt>id<ept id="2">&lt;/strong&gt;</ept> attribute of the <bpt id="4">&lt;strong&gt;</bpt>Output<ept id="4">&lt;/strong&gt;</ept> element must be a valid R variable name.</source>
            <target state="new">The value of the <bpt id="2">&lt;strong&gt;</bpt>id<ept id="2">&lt;/strong&gt;</ept> attribute of the <bpt id="4">&lt;strong&gt;</bpt>Output<ept id="4">&lt;/strong&gt;</ept> element must be a valid R variable name.</target>
          </trans-unit>
          <trans-unit id="211" xml:space="preserve">
            <source>The value of the <bpt id="2">&lt;strong&gt;</bpt>id<ept id="2">&lt;/strong&gt;</ept> attribute of the <bpt id="4">&lt;strong&gt;</bpt>Output<ept id="4">&lt;/strong&gt;</ept> element must not be longer than 32 characters.</source>
            <target state="new">The value of the <bpt id="2">&lt;strong&gt;</bpt>id<ept id="2">&lt;/strong&gt;</ept> attribute of the <bpt id="4">&lt;strong&gt;</bpt>Output<ept id="4">&lt;/strong&gt;</ept> element must not be longer than 32 characters.</target>
          </trans-unit>
          <trans-unit id="212" xml:space="preserve">
            <source>The value of the <bpt id="2">&lt;strong&gt;</bpt>name<ept id="2">&lt;/strong&gt;</ept> attribute of the <bpt id="4">&lt;strong&gt;</bpt>Output<ept id="4">&lt;/strong&gt;</ept> element  must not be longer than 64 characters.</source>
            <target state="new">The value of the <bpt id="2">&lt;strong&gt;</bpt>name<ept id="2">&lt;/strong&gt;</ept> attribute of the <bpt id="4">&lt;strong&gt;</bpt>Output<ept id="4">&lt;/strong&gt;</ept> element  must not be longer than 64 characters.</target>
          </trans-unit>
          <trans-unit id="213" xml:space="preserve">
            <source>The value of the <bpt id="2">&lt;strong&gt;</bpt>type<ept id="2">&lt;/strong&gt;</ept> attribute of the <bpt id="4">&lt;strong&gt;</bpt>Output<ept id="4">&lt;/strong&gt;</ept> element must be <bpt id="6">&lt;em&gt;</bpt>Visualization<ept id="6">&lt;/em&gt;</ept>.</source>
            <target state="new">The value of the <bpt id="2">&lt;strong&gt;</bpt>type<ept id="2">&lt;/strong&gt;</ept> attribute of the <bpt id="4">&lt;strong&gt;</bpt>Output<ept id="4">&lt;/strong&gt;</ept> element must be <bpt id="6">&lt;em&gt;</bpt>Visualization<ept id="6">&lt;/em&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="214" xml:space="preserve">
            <source>Arguments</source>
            <target state="new">Arguments</target>
          </trans-unit>
          <trans-unit id="215" xml:space="preserve">
            <source>Additional data can be passed to the R function via module parameters which are defined in the <bpt id="2">&lt;strong&gt;</bpt>Arguments<ept id="2">&lt;/strong&gt;</ept> element.</source>
            <target state="new">Additional data can be passed to the R function via module parameters which are defined in the <bpt id="2">&lt;strong&gt;</bpt>Arguments<ept id="2">&lt;/strong&gt;</ept> element.</target>
          </trans-unit>
          <trans-unit id="216" xml:space="preserve">
            <source>These parameters appear in the right most properties pane of the Machine Learning UI when the module is selected.</source>
            <target state="new">These parameters appear in the right most properties pane of the Machine Learning UI when the module is selected.</target>
          </trans-unit>
          <trans-unit id="217" xml:space="preserve">
            <source>Arguments can be any of the supported types or you can create a custom enumeration when needed.</source>
            <target state="new">Arguments can be any of the supported types or you can create a custom enumeration when needed.</target>
          </trans-unit>
          <trans-unit id="218" xml:space="preserve">
            <source>Similar to the <bpt id="2">&lt;strong&gt;</bpt>Ports<ept id="2">&lt;/strong&gt;</ept> elements, <bpt id="4">&lt;strong&gt;</bpt>Arguments<ept id="4">&lt;/strong&gt;</ept> elements can have an optional <bpt id="6">&lt;strong&gt;</bpt>Description<ept id="6">&lt;/strong&gt;</ept> element that specifies the text that appears when you hover the mouse over the parameter name.</source>
            <target state="new">Similar to the <bpt id="2">&lt;strong&gt;</bpt>Ports<ept id="2">&lt;/strong&gt;</ept> elements, <bpt id="4">&lt;strong&gt;</bpt>Arguments<ept id="4">&lt;/strong&gt;</ept> elements can have an optional <bpt id="6">&lt;strong&gt;</bpt>Description<ept id="6">&lt;/strong&gt;</ept> element that specifies the text that appears when you hover the mouse over the parameter name.</target>
          </trans-unit>
          <trans-unit id="219" xml:space="preserve">
            <source>Optional properties for a module, such as defaultValue, minValue and maxValue can be added to any argument as attributes to a <bpt id="2">&lt;strong&gt;</bpt>Properties<ept id="2">&lt;/strong&gt;</ept> element.</source>
            <target state="new">Optional properties for a module, such as defaultValue, minValue and maxValue can be added to any argument as attributes to a <bpt id="2">&lt;strong&gt;</bpt>Properties<ept id="2">&lt;/strong&gt;</ept> element.</target>
          </trans-unit>
          <trans-unit id="220" xml:space="preserve">
            <source>Valid properties for the <bpt id="2">&lt;strong&gt;</bpt>Properties<ept id="2">&lt;/strong&gt;</ept> element depend on the argument type and are describe with the supported argument types below.</source>
            <target state="new">Valid properties for the <bpt id="2">&lt;strong&gt;</bpt>Properties<ept id="2">&lt;/strong&gt;</ept> element depend on the argument type and are describe with the supported argument types below.</target>
          </trans-unit>
          <trans-unit id="221" xml:space="preserve">
            <source>As with inputs and outputs, it is critical that each of the parameters have unique id values associated with them.</source>
            <target state="new">As with inputs and outputs, it is critical that each of the parameters have unique id values associated with them.</target>
          </trans-unit>
          <trans-unit id="222" xml:space="preserve">
            <source>In addition, the id values must correspond to the named parameters in your R function.</source>
            <target state="new">In addition, the id values must correspond to the named parameters in your R function.</target>
          </trans-unit>
          <trans-unit id="223" xml:space="preserve">
            <source>In our quick start example the associated id/parameter was <bpt id="2">&lt;em&gt;</bpt>swap<ept id="2">&lt;/em&gt;</ept>.</source>
            <target state="new">In our quick start example the associated id/parameter was <bpt id="2">&lt;em&gt;</bpt>swap<ept id="2">&lt;/em&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="224" xml:space="preserve">
            <source>Arg element</source>
            <target state="new">Arg element</target>
          </trans-unit>
          <trans-unit id="225" xml:space="preserve">
            <source>A module parameter is defined using the <bpt id="2">&lt;strong&gt;</bpt>Arg<ept id="2">&lt;/strong&gt;</ept> child element of the <bpt id="4">&lt;strong&gt;</bpt>Arguments<ept id="4">&lt;/strong&gt;</ept> section of the XML definition file.</source>
            <target state="new">A module parameter is defined using the <bpt id="2">&lt;strong&gt;</bpt>Arg<ept id="2">&lt;/strong&gt;</ept> child element of the <bpt id="4">&lt;strong&gt;</bpt>Arguments<ept id="4">&lt;/strong&gt;</ept> section of the XML definition file.</target>
          </trans-unit>
          <trans-unit id="226" xml:space="preserve">
            <source>As with the child elements in the <bpt id="2">&lt;strong&gt;</bpt>Ports<ept id="2">&lt;/strong&gt;</ept> section, the ordering of parameters in the <bpt id="4">&lt;strong&gt;</bpt>Arguments<ept id="4">&lt;/strong&gt;</ept> section defines the layout encountered in the UX.</source>
            <target state="new">As with the child elements in the <bpt id="2">&lt;strong&gt;</bpt>Ports<ept id="2">&lt;/strong&gt;</ept> section, the ordering of parameters in the <bpt id="4">&lt;strong&gt;</bpt>Arguments<ept id="4">&lt;/strong&gt;</ept> section defines the layout encountered in the UX.</target>
          </trans-unit>
          <trans-unit id="227" xml:space="preserve">
            <source>The parameters appear from top down in the UI in the same order in which they are defined in the XML file.</source>
            <target state="new">The parameters appear from top down in the UI in the same order in which they are defined in the XML file.</target>
          </trans-unit>
          <trans-unit id="228" xml:space="preserve">
            <source>The types supported by Machine Learning for parameters are listed below.</source>
            <target state="new">The types supported by Machine Learning for parameters are listed below.</target>
          </trans-unit>
          <trans-unit id="229" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>int<ept id="1">&lt;/strong&gt;</ept> – an Integer (32-bit) type parameter.</source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>int<ept id="1">&lt;/strong&gt;</ept> – an Integer (32-bit) type parameter.</target>
          </trans-unit>
          <trans-unit id="230" xml:space="preserve">
            <source><bpt id="1">&lt;em&gt;</bpt>Optional Properties<ept id="1">&lt;/em&gt;</ept>: <bpt id="3">&lt;strong&gt;</bpt>min<ept id="3">&lt;/strong&gt;</ept>, <bpt id="5">&lt;strong&gt;</bpt>max<ept id="5">&lt;/strong&gt;</ept> and <bpt id="7">&lt;strong&gt;</bpt>default<ept id="7">&lt;/strong&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;em&gt;</bpt>Optional Properties<ept id="1">&lt;/em&gt;</ept>: <bpt id="3">&lt;strong&gt;</bpt>min<ept id="3">&lt;/strong&gt;</ept>, <bpt id="5">&lt;strong&gt;</bpt>max<ept id="5">&lt;/strong&gt;</ept> and <bpt id="7">&lt;strong&gt;</bpt>default<ept id="7">&lt;/strong&gt;</ept></target>
          </trans-unit>
          <trans-unit id="231" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>double<ept id="1">&lt;/strong&gt;</ept> – a double type parameter.</source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>double<ept id="1">&lt;/strong&gt;</ept> – a double type parameter.</target>
          </trans-unit>
          <trans-unit id="232" xml:space="preserve">
            <source><bpt id="1">&lt;em&gt;</bpt>Optional Properties<ept id="1">&lt;/em&gt;</ept>: <bpt id="3">&lt;strong&gt;</bpt>min<ept id="3">&lt;/strong&gt;</ept>, <bpt id="5">&lt;strong&gt;</bpt>max<ept id="5">&lt;/strong&gt;</ept> and <bpt id="7">&lt;strong&gt;</bpt>default<ept id="7">&lt;/strong&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;em&gt;</bpt>Optional Properties<ept id="1">&lt;/em&gt;</ept>: <bpt id="3">&lt;strong&gt;</bpt>min<ept id="3">&lt;/strong&gt;</ept>, <bpt id="5">&lt;strong&gt;</bpt>max<ept id="5">&lt;/strong&gt;</ept> and <bpt id="7">&lt;strong&gt;</bpt>default<ept id="7">&lt;/strong&gt;</ept></target>
          </trans-unit>
          <trans-unit id="233" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>bool<ept id="1">&lt;/strong&gt;</ept> – a Boolean parameter that is represented by a check-box in UX.</source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>bool<ept id="1">&lt;/strong&gt;</ept> – a Boolean parameter that is represented by a check-box in UX.</target>
          </trans-unit>
          <trans-unit id="234" xml:space="preserve">
            <source><bpt id="1">&lt;em&gt;</bpt>Optional Properties<ept id="1">&lt;/em&gt;</ept>: <bpt id="3">&lt;strong&gt;</bpt>default<ept id="3">&lt;/strong&gt;</ept> - false if not set</source>
            <target state="new"><bpt id="1">&lt;em&gt;</bpt>Optional Properties<ept id="1">&lt;/em&gt;</ept>: <bpt id="3">&lt;strong&gt;</bpt>default<ept id="3">&lt;/strong&gt;</ept> - false if not set</target>
          </trans-unit>
          <trans-unit id="235" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>string<ept id="1">&lt;/strong&gt;</ept>: a standard string</source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>string<ept id="1">&lt;/strong&gt;</ept>: a standard string</target>
          </trans-unit>
          <trans-unit id="236" xml:space="preserve">
            <source><bpt id="1">&lt;em&gt;</bpt>Optional Properties<ept id="1">&lt;/em&gt;</ept>: <bpt id="3">&lt;strong&gt;</bpt>default<ept id="3">&lt;/strong&gt;</ept> and <bpt id="5">&lt;strong&gt;</bpt>isOptional<ept id="5">&lt;/strong&gt;</ept> - An optional string without a default value will be passed as null to the R function if a value is not otherwise provided by a user.</source>
            <target state="new"><bpt id="1">&lt;em&gt;</bpt>Optional Properties<ept id="1">&lt;/em&gt;</ept>: <bpt id="3">&lt;strong&gt;</bpt>default<ept id="3">&lt;/strong&gt;</ept> and <bpt id="5">&lt;strong&gt;</bpt>isOptional<ept id="5">&lt;/strong&gt;</ept> - An optional string without a default value will be passed as null to the R function if a value is not otherwise provided by a user.</target>
          </trans-unit>
          <trans-unit id="237" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>ColumnPicker<ept id="1">&lt;/strong&gt;</ept>: a column selection parameter.</source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>ColumnPicker<ept id="1">&lt;/strong&gt;</ept>: a column selection parameter.</target>
          </trans-unit>
          <trans-unit id="238" xml:space="preserve">
            <source>This type renders in the UX as a column chooser.</source>
            <target state="new">This type renders in the UX as a column chooser.</target>
          </trans-unit>
          <trans-unit id="239" xml:space="preserve">
            <source>The <bpt id="2">&lt;strong&gt;</bpt>Property<ept id="2">&lt;/strong&gt;</ept> element is used here to specify the id of the port from which columns will be selected, where the target port type must be <bpt id="4">&lt;em&gt;</bpt>DataTable<ept id="4">&lt;/em&gt;</ept>.</source>
            <target state="new">The <bpt id="2">&lt;strong&gt;</bpt>Property<ept id="2">&lt;/strong&gt;</ept> element is used here to specify the id of the port from which columns will be selected, where the target port type must be <bpt id="4">&lt;em&gt;</bpt>DataTable<ept id="4">&lt;/em&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="240" xml:space="preserve">
            <source>The result of the column selection will be passed to the R function as a list of strings containing the selected column names.</source>
            <target state="new">The result of the column selection will be passed to the R function as a list of strings containing the selected column names.</target>
          </trans-unit>
          <trans-unit id="241" xml:space="preserve">
            <source><bpt id="1">&lt;em&gt;</bpt>Required Properties<ept id="1">&lt;/em&gt;</ept>: <bpt id="3">&lt;strong&gt;</bpt>portId<ept id="3">&lt;/strong&gt;</ept> -  matches the id of an Input element with type <bpt id="5">&lt;em&gt;</bpt>DataTable<ept id="5">&lt;/em&gt;</ept>.</source>
            <target state="new"><bpt id="1">&lt;em&gt;</bpt>Required Properties<ept id="1">&lt;/em&gt;</ept>: <bpt id="3">&lt;strong&gt;</bpt>portId<ept id="3">&lt;/strong&gt;</ept> -  matches the id of an Input element with type <bpt id="5">&lt;em&gt;</bpt>DataTable<ept id="5">&lt;/em&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="242" xml:space="preserve">
            <source><bpt id="1">&lt;em&gt;</bpt>Optional Properties<ept id="1">&lt;/em&gt;</ept>:</source>
            <target state="new"><bpt id="1">&lt;em&gt;</bpt>Optional Properties<ept id="1">&lt;/em&gt;</ept>:</target>
          </trans-unit>
          <trans-unit id="243" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>allowedTypes<ept id="1">&lt;/strong&gt;</ept> - Filter the column types the user can pick from.</source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>allowedTypes<ept id="1">&lt;/strong&gt;</ept> - Filter the column types the user can pick from.</target>
          </trans-unit>
          <trans-unit id="244" xml:space="preserve">
            <source>Valid values include:</source>
            <target state="new">Valid values include:</target>
          </trans-unit>
          <trans-unit id="245" xml:space="preserve">
            <source>*   Numeric</source>
            <target state="new">*   Numeric</target>
          </trans-unit>
          <trans-unit id="246" xml:space="preserve">
            <source>*   Boolean</source>
            <target state="new">*   Boolean</target>
          </trans-unit>
          <trans-unit id="247" xml:space="preserve">
            <source>*   Categorical</source>
            <target state="new">*   Categorical</target>
          </trans-unit>
          <trans-unit id="248" xml:space="preserve">
            <source>*   String</source>
            <target state="new">*   String</target>
          </trans-unit>
          <trans-unit id="249" xml:space="preserve">
            <source>*   Label</source>
            <target state="new">*   Label</target>
          </trans-unit>
          <trans-unit id="250" xml:space="preserve">
            <source>*   Feature</source>
            <target state="new">*   Feature</target>
          </trans-unit>
          <trans-unit id="251" xml:space="preserve">
            <source>*   Score</source>
            <target state="new">*   Score</target>
          </trans-unit>
          <trans-unit id="252" xml:space="preserve">
            <source>*   All</source>
            <target state="new">*   All</target>
          </trans-unit>
          <trans-unit id="253" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>default<ept id="1">&lt;/strong&gt;</ept> - Valid default selections for the column picker include:</source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>default<ept id="1">&lt;/strong&gt;</ept> - Valid default selections for the column picker include:</target>
          </trans-unit>
          <trans-unit id="254" xml:space="preserve">
            <source>* None</source>
            <target state="new">* None</target>
          </trans-unit>
          <trans-unit id="255" xml:space="preserve">
            <source>* NumericFeature</source>
            <target state="new">* NumericFeature</target>
          </trans-unit>
          <trans-unit id="256" xml:space="preserve">
            <source>* NumericLabel</source>
            <target state="new">* NumericLabel</target>
          </trans-unit>
          <trans-unit id="257" xml:space="preserve">
            <source>* NumericScore</source>
            <target state="new">* NumericScore</target>
          </trans-unit>
          <trans-unit id="258" xml:space="preserve">
            <source>* NumericAll</source>
            <target state="new">* NumericAll</target>
          </trans-unit>
          <trans-unit id="259" xml:space="preserve">
            <source>* BooleanFeature</source>
            <target state="new">* BooleanFeature</target>
          </trans-unit>
          <trans-unit id="260" xml:space="preserve">
            <source>* BooleanLabel</source>
            <target state="new">* BooleanLabel</target>
          </trans-unit>
          <trans-unit id="261" xml:space="preserve">
            <source>* BooleanScore</source>
            <target state="new">* BooleanScore</target>
          </trans-unit>
          <trans-unit id="262" xml:space="preserve">
            <source>* BooleanAll</source>
            <target state="new">* BooleanAll</target>
          </trans-unit>
          <trans-unit id="263" xml:space="preserve">
            <source>* CategoricalFeature</source>
            <target state="new">* CategoricalFeature</target>
          </trans-unit>
          <trans-unit id="264" xml:space="preserve">
            <source>* CategoricalLabel</source>
            <target state="new">* CategoricalLabel</target>
          </trans-unit>
          <trans-unit id="265" xml:space="preserve">
            <source>* CategoricalScore</source>
            <target state="new">* CategoricalScore</target>
          </trans-unit>
          <trans-unit id="266" xml:space="preserve">
            <source>* CategoricalAll</source>
            <target state="new">* CategoricalAll</target>
          </trans-unit>
          <trans-unit id="267" xml:space="preserve">
            <source>* StringFeature</source>
            <target state="new">* StringFeature</target>
          </trans-unit>
          <trans-unit id="268" xml:space="preserve">
            <source>* StringLabel</source>
            <target state="new">* StringLabel</target>
          </trans-unit>
          <trans-unit id="269" xml:space="preserve">
            <source>* StringScore</source>
            <target state="new">* StringScore</target>
          </trans-unit>
          <trans-unit id="270" xml:space="preserve">
            <source>* StringAll</source>
            <target state="new">* StringAll</target>
          </trans-unit>
          <trans-unit id="271" xml:space="preserve">
            <source>* AllLabel</source>
            <target state="new">* AllLabel</target>
          </trans-unit>
          <trans-unit id="272" xml:space="preserve">
            <source>* AllFeature</source>
            <target state="new">* AllFeature</target>
          </trans-unit>
          <trans-unit id="273" xml:space="preserve">
            <source>* AllScore</source>
            <target state="new">* AllScore</target>
          </trans-unit>
          <trans-unit id="274" xml:space="preserve">
            <source>* All</source>
            <target state="new">* All</target>
          </trans-unit>
          <trans-unit id="275" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>DropDown<ept id="1">&lt;/strong&gt;</ept>: a user specified enumerated (dropdown) list.</source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>DropDown<ept id="1">&lt;/strong&gt;</ept>: a user specified enumerated (dropdown) list.</target>
          </trans-unit>
          <trans-unit id="276" xml:space="preserve">
            <source>The dropdown items are specified within the <bpt id="2">&lt;strong&gt;</bpt>Properties<ept id="2">&lt;/strong&gt;</ept> element using an <bpt id="4">&lt;strong&gt;</bpt>Item<ept id="4">&lt;/strong&gt;</ept> element.</source>
            <target state="new">The dropdown items are specified within the <bpt id="2">&lt;strong&gt;</bpt>Properties<ept id="2">&lt;/strong&gt;</ept> element using an <bpt id="4">&lt;strong&gt;</bpt>Item<ept id="4">&lt;/strong&gt;</ept> element.</target>
          </trans-unit>
          <trans-unit id="277" xml:space="preserve">
            <source>The <bpt id="2">&lt;strong&gt;</bpt>id<ept id="2">&lt;/strong&gt;</ept> for each <bpt id="4">&lt;strong&gt;</bpt>Item<ept id="4">&lt;/strong&gt;</ept> must be unique and a valid R variable and the name of the item is both the text that appears to users and the value that is passed to the R function.</source>
            <target state="new">The <bpt id="2">&lt;strong&gt;</bpt>id<ept id="2">&lt;/strong&gt;</ept> for each <bpt id="4">&lt;strong&gt;</bpt>Item<ept id="4">&lt;/strong&gt;</ept> must be unique and a valid R variable and the name of the item is both the text that appears to users and the value that is passed to the R function.</target>
          </trans-unit>
          <trans-unit id="278" xml:space="preserve">
            <source><bpt id="1">&lt;em&gt;</bpt>Optional Properties<ept id="1">&lt;/em&gt;</ept>:</source>
            <target state="new"><bpt id="1">&lt;em&gt;</bpt>Optional Properties<ept id="1">&lt;/em&gt;</ept>:</target>
          </trans-unit>
          <trans-unit id="279" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>default<ept id="1">&lt;/strong&gt;</ept> - The value for the default property must correspond with an id value from one of the <bpt id="3">&lt;strong&gt;</bpt>Item<ept id="3">&lt;/strong&gt;</ept> elements.</source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>default<ept id="1">&lt;/strong&gt;</ept> - The value for the default property must correspond with an id value from one of the <bpt id="3">&lt;strong&gt;</bpt>Item<ept id="3">&lt;/strong&gt;</ept> elements.</target>
          </trans-unit>
          <trans-unit id="280" xml:space="preserve">
            <source>Auxiliary Files</source>
            <target state="new">Auxiliary Files</target>
          </trans-unit>
          <trans-unit id="281" xml:space="preserve">
            <source>Any file that is placed in your custom module ZIP file will be available for use during execution time.</source>
            <target state="new">Any file that is placed in your custom module ZIP file will be available for use during execution time.</target>
          </trans-unit>
          <trans-unit id="282" xml:space="preserve">
            <source>If there is a directory structure present it will be preserved.</source>
            <target state="new">If there is a directory structure present it will be preserved.</target>
          </trans-unit>
          <trans-unit id="283" xml:space="preserve">
            <source>This means that file sourcing will work the same locally and in Azure Machine Learning execution.</source>
            <target state="new">This means that file sourcing will work the same locally and in Azure Machine Learning execution.</target>
          </trans-unit>
          <trans-unit id="284" xml:space="preserve">
            <source>Please notice that all files are extracted to ‘src’ directory so all paths should have ‘src/’ prefix.</source>
            <target state="new">Please notice that all files are extracted to ‘src’ directory so all paths should have ‘src/’ prefix.</target>
          </trans-unit>
          <trans-unit id="285" xml:space="preserve">
            <source>For example, say you want to remove any rows with NAs from the  dataset, and also remove any duplicate rows, before outputting it into CustomAddRows, and you’ve already written an R function that does that in a file RemoveDupNARows.R:</source>
            <target state="new">For example, say you want to remove any rows with NAs from the  dataset, and also remove any duplicate rows, before outputting it into CustomAddRows, and you’ve already written an R function that does that in a file RemoveDupNARows.R:</target>
          </trans-unit>
          <trans-unit id="286" xml:space="preserve">
            <source>You can source the auxiliary file RemoveDupNARows.R in the CustomAddRows function:</source>
            <target state="new">You can source the auxiliary file RemoveDupNARows.R in the CustomAddRows function:</target>
          </trans-unit>
          <trans-unit id="287" xml:space="preserve">
            <source>Next, upload a zip file containing ‘CustomAddRows.R’, ‘CustomAddRows.xml’, and ‘RemoveDupNARows.R’ as a custom R module.</source>
            <target state="new">Next, upload a zip file containing ‘CustomAddRows.R’, ‘CustomAddRows.xml’, and ‘RemoveDupNARows.R’ as a custom R module.</target>
          </trans-unit>
          <trans-unit id="288" xml:space="preserve">
            <source>Execution Environment</source>
            <target state="new">Execution Environment</target>
          </trans-unit>
          <trans-unit id="289" xml:space="preserve">
            <source>The execution environment for the R script uses the same version of R as the <bpt id="2">&lt;strong&gt;</bpt>Execute R Script<ept id="2">&lt;/strong&gt;</ept> module, and can use the same default packages.</source>
            <target state="new">The execution environment for the R script uses the same version of R as the <bpt id="2">&lt;strong&gt;</bpt>Execute R Script<ept id="2">&lt;/strong&gt;</ept> module, and can use the same default packages.</target>
          </trans-unit>
          <trans-unit id="290" xml:space="preserve">
            <source>You can add additional R packages to your custom module by including them in the custom module zip package and loading them in your R script as you would in your own R environment.</source>
            <target state="new">You can add additional R packages to your custom module by including them in the custom module zip package and loading them in your R script as you would in your own R environment.</target>
          </trans-unit>
          <trans-unit id="291" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Limitations of the execution environment<ept id="1">&lt;/strong&gt;</ept> include:</source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Limitations of the execution environment<ept id="1">&lt;/strong&gt;</ept> include:</target>
          </trans-unit>
          <trans-unit id="292" xml:space="preserve">
            <source>Non-persistent file system: Files written when the custom module is run will not persist across multiple runs of the same module.</source>
            <target state="new">Non-persistent file system: Files written when the custom module is run will not persist across multiple runs of the same module.</target>
          </trans-unit>
          <trans-unit id="293" xml:space="preserve">
            <source>No network access</source>
            <target state="new">No network access</target>
          </trans-unit>
          <trans-unit id="294" xml:space="preserve">
            <source>test</source>
            <target state="new">test</target>
          </trans-unit>
        </group>
      </group>
    </body>
  </file>
</xliff>