<?xml version="1.0" encoding="utf-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" source-language="en-us" target-language="ru-ru" original="2/20/2016 2:12:40 PM" tool-id="MarkdownTransformer" product-name="N/A" product-version="N/A" build-num="1">
    <header>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2e607e040031cd8499a276de95ab0b4cf505db67</xliffext:olfilehash>
      <tool tool-id="MarkdownTransformer" tool-name="MarkdownToXliff" tool-version="1.0" tool-company="Microsoft" />
    </header>
    <body>
      <group extype="content">
        <group id="101">
          <trans-unit id="101" xml:space="preserve">
            <source>Getting started with Azure AD sign in and sign out using node.js</source>
            <target state="new">Getting started with Azure AD sign in and sign out using node.js</target>
          </trans-unit>
          <trans-unit id="102" xml:space="preserve">
            <source>How to build a node.js Express MVC Web App that integrates with Azure AD for sign in.</source>
            <target state="new">How to build a node.js Express MVC Web App that integrates with Azure AD for sign in.</target>
          </trans-unit>
          <trans-unit id="103" xml:space="preserve">
            <source>Web App Sign In &amp; Sign Out with Azure AD</source>
            <target state="new">Web App Sign In &amp; Sign Out with Azure AD</target>
          </trans-unit>
          <trans-unit id="104" xml:space="preserve">
            <source>Here we'll use Passport to:</source>
            <target state="new">Here we'll use Passport to:</target>
          </trans-unit>
          <trans-unit id="105" xml:space="preserve">
            <source>Sign the user into the app using Azure AD and the v2.0 app model.</source>
            <target state="new">Sign the user into the app using Azure AD and the v2.0 app model.</target>
          </trans-unit>
          <trans-unit id="106" xml:space="preserve">
            <source>Display some information about the user.</source>
            <target state="new">Display some information about the user.</target>
          </trans-unit>
          <trans-unit id="107" xml:space="preserve">
            <source>Sign the user out of the app.</source>
            <target state="new">Sign the user out of the app.</target>
          </trans-unit>
          <trans-unit id="108" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Passport<ept id="1">&lt;/strong&gt;</ept> is authentication middleware for Node.js.</source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Passport<ept id="1">&lt;/strong&gt;</ept> is authentication middleware for Node.js.</target>
          </trans-unit>
          <trans-unit id="109" xml:space="preserve">
            <source>Extremely flexible and modular, Passport can be unobtrusively dropped in to any Express-based or Resitify web application.</source>
            <target state="new">Extremely flexible and modular, Passport can be unobtrusively dropped in to any Express-based or Resitify web application.</target>
          </trans-unit>
          <trans-unit id="110" xml:space="preserve">
            <source>A comprehensive set of strategies support authentication using a username and password, Facebook, Twitter, and more.</source>
            <target state="new">A comprehensive set of strategies support authentication using a username and password, Facebook, Twitter, and more.</target>
          </trans-unit>
          <trans-unit id="111" xml:space="preserve">
            <source>We have developed a strategy for Microsoft Azure Active Directory.</source>
            <target state="new">We have developed a strategy for Microsoft Azure Active Directory.</target>
          </trans-unit>
          <trans-unit id="112" xml:space="preserve">
            <source>We will install this module and then add the Microsoft Azure Active Directory <bpt id="2">&lt;code&gt;</bpt>passport-azure-ad<ept id="2">&lt;/code&gt;</ept> plug-in.</source>
            <target state="new">We will install this module and then add the Microsoft Azure Active Directory <bpt id="2">&lt;code&gt;</bpt>passport-azure-ad<ept id="2">&lt;/code&gt;</ept> plug-in.</target>
          </trans-unit>
          <trans-unit id="113" xml:space="preserve">
            <source>In order to do this, you'll need to:</source>
            <target state="new">In order to do this, you'll need to:</target>
          </trans-unit>
          <trans-unit id="114" xml:space="preserve">
            <source>Register an app.</source>
            <target state="new">Register an app.</target>
          </trans-unit>
          <trans-unit id="115" xml:space="preserve">
            <source>Set up your app to use the Passport-azure-ad strategy.</source>
            <target state="new">Set up your app to use the Passport-azure-ad strategy.</target>
          </trans-unit>
          <trans-unit id="116" xml:space="preserve">
            <source>Use Passport to issue sign-in and sign-out requests to Azure AD.</source>
            <target state="new">Use Passport to issue sign-in and sign-out requests to Azure AD.</target>
          </trans-unit>
          <trans-unit id="117" xml:space="preserve">
            <source>Print out data about the user.</source>
            <target state="new">Print out data about the user.</target>
          </trans-unit>
          <trans-unit id="118" xml:space="preserve">
            <source>The code for this tutorial is maintained <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>on GitHub<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">The code for this tutorial is maintained <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>on GitHub<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="119" xml:space="preserve">
            <source>To follow along, you can <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>download the app's skeleton as a .zip<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> or clone the skeleton:</source>
            <target state="new">To follow along, you can <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>download the app's skeleton as a .zip<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> or clone the skeleton:</target>
          </trans-unit>
          <trans-unit id="120" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>git clone --branch skeleton https://github.com/AzureADQuickStarts/AppModelv2-WebApp-OpenIDConnect-nodejs.git<ept id="1">&lt;/code&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>git clone --branch skeleton https://github.com/AzureADQuickStarts/AppModelv2-WebApp-OpenIDConnect-nodejs.git<ept id="1">&lt;/code&gt;</ept></target>
          </trans-unit>
          <trans-unit id="121" xml:space="preserve">
            <source>The completed application is provided at the end of this tutorial as well.</source>
            <target state="new">The completed application is provided at the end of this tutorial as well.</target>
          </trans-unit>
          <trans-unit id="122" xml:space="preserve">
            <source>1. Register an App</source>
            <target state="new">1. Register an App</target>
          </trans-unit>
          <trans-unit id="123" xml:space="preserve">
            <source>Sign into the Azure Management Portal.</source>
            <target state="new">Sign into the Azure Management Portal.</target>
          </trans-unit>
          <trans-unit id="124" xml:space="preserve">
            <source>In the left hand nav, click on <bpt id="2">&lt;strong&gt;</bpt>Active Directory<ept id="2">&lt;/strong&gt;</ept>.</source>
            <target state="new">In the left hand nav, click on <bpt id="2">&lt;strong&gt;</bpt>Active Directory<ept id="2">&lt;/strong&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="125" xml:space="preserve">
            <source>Select the tenant where you wish to register the application.</source>
            <target state="new">Select the tenant where you wish to register the application.</target>
          </trans-unit>
          <trans-unit id="126" xml:space="preserve">
            <source>Click the <bpt id="2">&lt;strong&gt;</bpt>Applications<ept id="2">&lt;/strong&gt;</ept> tab, and click add in the bottom drawer.</source>
            <target state="new">Click the <bpt id="2">&lt;strong&gt;</bpt>Applications<ept id="2">&lt;/strong&gt;</ept> tab, and click add in the bottom drawer.</target>
          </trans-unit>
          <trans-unit id="127" xml:space="preserve">
            <source>Follow the prompts and create a new <bpt id="2">&lt;strong&gt;</bpt>Web Application and/or WebAPI<ept id="2">&lt;/strong&gt;</ept>.</source>
            <target state="new">Follow the prompts and create a new <bpt id="2">&lt;strong&gt;</bpt>Web Application and/or WebAPI<ept id="2">&lt;/strong&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="128" xml:space="preserve">
            <source>The <bpt id="2">&lt;strong&gt;</bpt>name<ept id="2">&lt;/strong&gt;</ept> of the application will describe your application to end-users</source>
            <target state="new">The <bpt id="2">&lt;strong&gt;</bpt>name<ept id="2">&lt;/strong&gt;</ept> of the application will describe your application to end-users</target>
          </trans-unit>
          <trans-unit id="129" xml:space="preserve">
            <source>The <bpt id="2">&lt;strong&gt;</bpt>Sign-On URL<ept id="2">&lt;/strong&gt;</ept> is the base URL of your app.</source>
            <target state="new">The <bpt id="2">&lt;strong&gt;</bpt>Sign-On URL<ept id="2">&lt;/strong&gt;</ept> is the base URL of your app.</target>
          </trans-unit>
          <trans-unit id="130" xml:space="preserve">
            <source>The skeleton's default is `http://localhost:3000/auth/openid/return``.</source>
            <target state="new">The skeleton's default is `http://localhost:3000/auth/openid/return``.</target>
          </trans-unit>
          <trans-unit id="131" xml:space="preserve">
            <source>The <bpt id="2">&lt;strong&gt;</bpt>App ID URI<ept id="2">&lt;/strong&gt;</ept> is a unique identifier for your application.  The convention is to use <bpt id="4">&lt;code&gt;</bpt>https://&lt;tenant-domain&gt;/&lt;app-name&gt;<ept id="4">&lt;/code&gt;</ept>, e.g. <bpt id="6">&lt;code&gt;</bpt>https://contoso.onmicrosoft.com/my-first-aad-app<ept id="6">&lt;/code&gt;</ept></source>
            <target state="new">The <bpt id="2">&lt;strong&gt;</bpt>App ID URI<ept id="2">&lt;/strong&gt;</ept> is a unique identifier for your application.  The convention is to use <bpt id="4">&lt;code&gt;</bpt>https://&lt;tenant-domain&gt;/&lt;app-name&gt;<ept id="4">&lt;/code&gt;</ept>, e.g. <bpt id="6">&lt;code&gt;</bpt>https://contoso.onmicrosoft.com/my-first-aad-app<ept id="6">&lt;/code&gt;</ept></target>
          </trans-unit>
          <trans-unit id="132" xml:space="preserve">
            <source>Once you've completed registration, AAD will assign your app a unique client identifier.</source>
            <target state="new">Once you've completed registration, AAD will assign your app a unique client identifier.</target>
          </trans-unit>
          <trans-unit id="133" xml:space="preserve">
            <source>You'll need this value in the next sections, so copy it from the Configure tab.</source>
            <target state="new">You'll need this value in the next sections, so copy it from the Configure tab.</target>
          </trans-unit>
          <trans-unit id="134" xml:space="preserve">
            <source>2. Add pre-requisities to your directory</source>
            <target state="new">2. Add pre-requisities to your directory</target>
          </trans-unit>
          <trans-unit id="135" xml:space="preserve">
            <source>From the command-line, change directories to your root folder if not already there and run the following commands:</source>
            <target state="new">From the command-line, change directories to your root folder if not already there and run the following commands:</target>
          </trans-unit>
          <trans-unit id="136" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>npm install express<ept id="1">&lt;/code&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>npm install express<ept id="1">&lt;/code&gt;</ept></target>
          </trans-unit>
          <trans-unit id="137" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>npm install ejs<ept id="1">&lt;/code&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>npm install ejs<ept id="1">&lt;/code&gt;</ept></target>
          </trans-unit>
          <trans-unit id="138" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>npm install ejs-locals<ept id="1">&lt;/code&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>npm install ejs-locals<ept id="1">&lt;/code&gt;</ept></target>
          </trans-unit>
          <trans-unit id="139" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>npm install restify<ept id="1">&lt;/code&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>npm install restify<ept id="1">&lt;/code&gt;</ept></target>
          </trans-unit>
          <trans-unit id="140" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>npm install mongoose<ept id="1">&lt;/code&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>npm install mongoose<ept id="1">&lt;/code&gt;</ept></target>
          </trans-unit>
          <trans-unit id="141" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>npm install bunyan<ept id="1">&lt;/code&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>npm install bunyan<ept id="1">&lt;/code&gt;</ept></target>
          </trans-unit>
          <trans-unit id="142" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>npm install assert-plus<ept id="1">&lt;/code&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>npm install assert-plus<ept id="1">&lt;/code&gt;</ept></target>
          </trans-unit>
          <trans-unit id="143" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>npm install passport<ept id="1">&lt;/code&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>npm install passport<ept id="1">&lt;/code&gt;</ept></target>
          </trans-unit>
          <trans-unit id="144" xml:space="preserve">
            <source>In addition, you'll need our <bpt id="2">&lt;code&gt;</bpt>passport-azure-ad<ept id="2">&lt;/code&gt;</ept> as well:</source>
            <target state="new">In addition, you'll need our <bpt id="2">&lt;code&gt;</bpt>passport-azure-ad<ept id="2">&lt;/code&gt;</ept> as well:</target>
          </trans-unit>
          <trans-unit id="145" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>npm install passport-azure-ad<ept id="1">&lt;/code&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>npm install passport-azure-ad<ept id="1">&lt;/code&gt;</ept></target>
          </trans-unit>
          <trans-unit id="146" xml:space="preserve">
            <source>This will install the libraries that passport-azure-ad depend on.</source>
            <target state="new">This will install the libraries that passport-azure-ad depend on.</target>
          </trans-unit>
          <trans-unit id="147" xml:space="preserve">
            <source>3. Set up your app to use the passport-node-js strategy</source>
            <target state="new">3. Set up your app to use the passport-node-js strategy</target>
          </trans-unit>
          <trans-unit id="148" xml:space="preserve">
            <source>Here, we'll configure the Express middleware to use the OpenID Connect authentication protocol.</source>
            <target state="new">Here, we'll configure the Express middleware to use the OpenID Connect authentication protocol.</target>
          </trans-unit>
          <trans-unit id="149" xml:space="preserve">
            <source>Passport will be used to issue sign-in and sign-out requests, manage the user's session, and get information about the user, amongst other things.</source>
            <target state="new">Passport will be used to issue sign-in and sign-out requests, manage the user's session, and get information about the user, amongst other things.</target>
          </trans-unit>
          <trans-unit id="150" xml:space="preserve">
            <source>To begin, open the <bpt id="2">&lt;code&gt;</bpt>config.js<ept id="2">&lt;/code&gt;</ept> file in the root of the project, and enter your app's configuration values in the <bpt id="4">&lt;code&gt;</bpt>exports.creds<ept id="4">&lt;/code&gt;</ept> section.</source>
            <target state="new">To begin, open the <bpt id="2">&lt;code&gt;</bpt>config.js<ept id="2">&lt;/code&gt;</ept> file in the root of the project, and enter your app's configuration values in the <bpt id="4">&lt;code&gt;</bpt>exports.creds<ept id="4">&lt;/code&gt;</ept> section.</target>
          </trans-unit>
          <trans-unit id="151" xml:space="preserve">
            <source>The <bpt id="2">&lt;code&gt;</bpt>clientID:<ept id="2">&lt;/code&gt;</ept> is the <bpt id="4">&lt;strong&gt;</bpt>Application Id<ept id="4">&lt;/strong&gt;</ept> assigned to your app in the registration portal.</source>
            <target state="new">The <bpt id="2">&lt;code&gt;</bpt>clientID:<ept id="2">&lt;/code&gt;</ept> is the <bpt id="4">&lt;strong&gt;</bpt>Application Id<ept id="4">&lt;/strong&gt;</ept> assigned to your app in the registration portal.</target>
          </trans-unit>
          <trans-unit id="152" xml:space="preserve">
            <source>The <bpt id="2">&lt;code&gt;</bpt>returnURL<ept id="2">&lt;/code&gt;</ept> is the <bpt id="4">&lt;strong&gt;</bpt>Redirect Uri<ept id="4">&lt;/strong&gt;</ept> you entered in the portal.</source>
            <target state="new">The <bpt id="2">&lt;code&gt;</bpt>returnURL<ept id="2">&lt;/code&gt;</ept> is the <bpt id="4">&lt;strong&gt;</bpt>Redirect Uri<ept id="4">&lt;/strong&gt;</ept> you entered in the portal.</target>
          </trans-unit>
          <trans-unit id="153" xml:space="preserve">
            <source>The <bpt id="2">&lt;code&gt;</bpt>clientSecret<ept id="2">&lt;/code&gt;</ept> is the secret you generated in the portal</source>
            <target state="new">The <bpt id="2">&lt;code&gt;</bpt>clientSecret<ept id="2">&lt;/code&gt;</ept> is the secret you generated in the portal</target>
          </trans-unit>
          <trans-unit id="154" xml:space="preserve">
            <source>Next open <bpt id="2">&lt;code&gt;</bpt>app.js<ept id="2">&lt;/code&gt;</ept> file in the root of the proejct and add the follwing call to invoke the <bpt id="4">&lt;code&gt;</bpt>OIDCStrategy<ept id="4">&lt;/code&gt;</ept> strategy that comes with <bpt id="6">&lt;code&gt;</bpt>passport-azure-ad<ept id="6">&lt;/code&gt;</ept></source>
            <target state="new">Next open <bpt id="2">&lt;code&gt;</bpt>app.js<ept id="2">&lt;/code&gt;</ept> file in the root of the proejct and add the follwing call to invoke the <bpt id="4">&lt;code&gt;</bpt>OIDCStrategy<ept id="4">&lt;/code&gt;</ept> strategy that comes with <bpt id="6">&lt;code&gt;</bpt>passport-azure-ad<ept id="6">&lt;/code&gt;</ept></target>
          </trans-unit>
          <trans-unit id="155" xml:space="preserve">
            <source>After that, use the strategy we just referenced to handle our login requests</source>
            <target state="new">After that, use the strategy we just referenced to handle our login requests</target>
          </trans-unit>
          <trans-unit id="156" xml:space="preserve">
            <source>Passport uses a similar pattern for all it’s Strategies (Twitter, Facebook, etc.)</source>
            <target state="new">Passport uses a similar pattern for all it’s Strategies (Twitter, Facebook, etc.)</target>
          </trans-unit>
          <trans-unit id="157" xml:space="preserve">
            <source>that all Strategy writers adhere to.</source>
            <target state="new">that all Strategy writers adhere to.</target>
          </trans-unit>
          <trans-unit id="158" xml:space="preserve">
            <source>Looking at the strategy you see we pass it a function() that has a token and a done as the parameters.</source>
            <target state="new">Looking at the strategy you see we pass it a function() that has a token and a done as the parameters.</target>
          </trans-unit>
          <trans-unit id="159" xml:space="preserve">
            <source>The strategy will dutifully come back to us once it does all it’s work.</source>
            <target state="new">The strategy will dutifully come back to us once it does all it’s work.</target>
          </trans-unit>
          <trans-unit id="160" xml:space="preserve">
            <source>Once it does we’ll want to store the user and stash the token so we won’t need to ask for it again.</source>
            <target state="new">Once it does we’ll want to store the user and stash the token so we won’t need to ask for it again.</target>
          </trans-unit>
          <trans-unit id="161" xml:space="preserve">
            <source>The code above takes any user that happens to authenticate to our server.</source>
            <target state="new">The code above takes any user that happens to authenticate to our server.</target>
          </trans-unit>
          <trans-unit id="162" xml:space="preserve">
            <source>This is known as auto registration.</source>
            <target state="new">This is known as auto registration.</target>
          </trans-unit>
          <trans-unit id="163" xml:space="preserve">
            <source>In production servers you wouldn’t want to let anyone in without first having them go through a registration process you decide.</source>
            <target state="new">In production servers you wouldn’t want to let anyone in without first having them go through a registration process you decide.</target>
          </trans-unit>
          <trans-unit id="164" xml:space="preserve">
            <source>This is usually the pattern you see in consumer apps who allow you to register with Facebook but then ask you to fill out additional information.</source>
            <target state="new">This is usually the pattern you see in consumer apps who allow you to register with Facebook but then ask you to fill out additional information.</target>
          </trans-unit>
          <trans-unit id="165" xml:space="preserve">
            <source>If this wasn’t a sample application, we could have just extracted the email from the token object that is returned and then asked them to fill out additional information.</source>
            <target state="new">If this wasn’t a sample application, we could have just extracted the email from the token object that is returned and then asked them to fill out additional information.</target>
          </trans-unit>
          <trans-unit id="166" xml:space="preserve">
            <source>Since this is a test server we simply add them to the in-memory database.</source>
            <target state="new">Since this is a test server we simply add them to the in-memory database.</target>
          </trans-unit>
          <trans-unit id="167" xml:space="preserve">
            <source>Next, let's add the methods that will allow us to keep track of the logged in users as required by Passport.</source>
            <target state="new">Next, let's add the methods that will allow us to keep track of the logged in users as required by Passport.</target>
          </trans-unit>
          <trans-unit id="168" xml:space="preserve">
            <source>This includes serializing and deserializing the user's information:</source>
            <target state="new">This includes serializing and deserializing the user's information:</target>
          </trans-unit>
          <trans-unit id="169" xml:space="preserve">
            <source>Next, let's add the code to load the express engine.</source>
            <target state="new">Next, let's add the code to load the express engine.</target>
          </trans-unit>
          <trans-unit id="170" xml:space="preserve">
            <source>Here you see we use the default /views and /routes pattern that Express provides.</source>
            <target state="new">Here you see we use the default /views and /routes pattern that Express provides.</target>
          </trans-unit>
          <trans-unit id="171" xml:space="preserve">
            <source>Finally, let's add the routes that will hand off the actual login requests to the <bpt id="2">&lt;code&gt;</bpt>passport-azure-ad<ept id="2">&lt;/code&gt;</ept> engine:</source>
            <target state="new">Finally, let's add the routes that will hand off the actual login requests to the <bpt id="2">&lt;code&gt;</bpt>passport-azure-ad<ept id="2">&lt;/code&gt;</ept> engine:</target>
          </trans-unit>
          <trans-unit id="172" xml:space="preserve">
            <source>4. Use Passport to issue sign-in and sign-out requests to Azure AD</source>
            <target state="new">4. Use Passport to issue sign-in and sign-out requests to Azure AD</target>
          </trans-unit>
          <trans-unit id="173" xml:space="preserve">
            <source>Your app is now properly configured to communicate with the v2.0 endpoint using the OpenID Connect authentication protocol.</source>
            <target state="new">Your app is now properly configured to communicate with the v2.0 endpoint using the OpenID Connect authentication protocol.</target>
          </trans-unit>
          <trans-unit id="174" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>passport-azure-ad<ept id="1">&lt;/code&gt;</ept> has taken care of all of the ugly details of crafting authentication messages, validating tokens from Azure AD, and maintaining user session.</source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>passport-azure-ad<ept id="1">&lt;/code&gt;</ept> has taken care of all of the ugly details of crafting authentication messages, validating tokens from Azure AD, and maintaining user session.</target>
          </trans-unit>
          <trans-unit id="175" xml:space="preserve">
            <source>All that remains is to give your users a way to sign in, sign out, and gather additional info on the logged in user.</source>
            <target state="new">All that remains is to give your users a way to sign in, sign out, and gather additional info on the logged in user.</target>
          </trans-unit>
          <trans-unit id="176" xml:space="preserve">
            <source>First, lets add the default, login, account, and logout methods to our <bpt id="2">&lt;code&gt;</bpt>app.js<ept id="2">&lt;/code&gt;</ept> file:</source>
            <target state="new">First, lets add the default, login, account, and logout methods to our <bpt id="2">&lt;code&gt;</bpt>app.js<ept id="2">&lt;/code&gt;</ept> file:</target>
          </trans-unit>
          <trans-unit id="177" xml:space="preserve">
            <source>Let's review these in detail:</source>
            <target state="new">Let's review these in detail:</target>
          </trans-unit>
          <trans-unit id="178" xml:space="preserve">
            <source>The <bpt id="2">&lt;code&gt;</bpt>/<ept id="2">&lt;/code&gt;</ept> route will redirect to the index.ejs view passing the user in the request (if it exists)</source>
            <target state="new">The <bpt id="2">&lt;code&gt;</bpt>/<ept id="2">&lt;/code&gt;</ept> route will redirect to the index.ejs view passing the user in the request (if it exists)</target>
          </trans-unit>
          <trans-unit id="179" xml:space="preserve">
            <source>The <bpt id="2">&lt;code&gt;</bpt>/account<ept id="2">&lt;/code&gt;</ept> route will first <bpt id="4">&lt;strong&gt;</bpt>*ensure we are authenticated*<ept id="4">&lt;/strong&gt;</ept> (we implement that below) and then pass the user in the request so that we can get additional information about the user.</source>
            <target state="new">The <bpt id="2">&lt;code&gt;</bpt>/account<ept id="2">&lt;/code&gt;</ept> route will first <bpt id="4">&lt;strong&gt;</bpt>*ensure we are authenticated*<ept id="4">&lt;/strong&gt;</ept> (we implement that below) and then pass the user in the request so that we can get additional information about the user.</target>
          </trans-unit>
          <trans-unit id="180" xml:space="preserve">
            <source>The <bpt id="2">&lt;code&gt;</bpt>/login<ept id="2">&lt;/code&gt;</ept> route will call our azuread-openidconnect authenticator from <bpt id="4">&lt;code&gt;</bpt>passport-azuread<ept id="4">&lt;/code&gt;</ept> and if that doesn't succeed will redirect the user back to /login</source>
            <target state="new">The <bpt id="2">&lt;code&gt;</bpt>/login<ept id="2">&lt;/code&gt;</ept> route will call our azuread-openidconnect authenticator from <bpt id="4">&lt;code&gt;</bpt>passport-azuread<ept id="4">&lt;/code&gt;</ept> and if that doesn't succeed will redirect the user back to /login</target>
          </trans-unit>
          <trans-unit id="181" xml:space="preserve">
            <source>The <bpt id="2">&lt;code&gt;</bpt>/logout<ept id="2">&lt;/code&gt;</ept> will simply call the logout.ejs (and route) which clears cookies and then return the user back to index.ejs</source>
            <target state="new">The <bpt id="2">&lt;code&gt;</bpt>/logout<ept id="2">&lt;/code&gt;</ept> will simply call the logout.ejs (and route) which clears cookies and then return the user back to index.ejs</target>
          </trans-unit>
          <trans-unit id="182" xml:space="preserve">
            <source>For the last part of <bpt id="2">&lt;code&gt;</bpt>app.js<ept id="2">&lt;/code&gt;</ept>, let's add the EnsureAuthenticated method that is used in <bpt id="4">&lt;code&gt;</bpt>/account<ept id="4">&lt;/code&gt;</ept> above.</source>
            <target state="new">For the last part of <bpt id="2">&lt;code&gt;</bpt>app.js<ept id="2">&lt;/code&gt;</ept>, let's add the EnsureAuthenticated method that is used in <bpt id="4">&lt;code&gt;</bpt>/account<ept id="4">&lt;/code&gt;</ept> above.</target>
          </trans-unit>
          <trans-unit id="183" xml:space="preserve">
            <source>Finally, let's actually create the server itself in <bpt id="2">&lt;code&gt;</bpt>app.js<ept id="2">&lt;/code&gt;</ept>:</source>
            <target state="new">Finally, let's actually create the server itself in <bpt id="2">&lt;code&gt;</bpt>app.js<ept id="2">&lt;/code&gt;</ept>:</target>
          </trans-unit>
          <trans-unit id="184" xml:space="preserve">
            <source>5. Create the views and routes in express to display our user in the website</source>
            <target state="new">5. Create the views and routes in express to display our user in the website</target>
          </trans-unit>
          <trans-unit id="185" xml:space="preserve">
            <source>We have our <bpt id="2">&lt;code&gt;</bpt>app.js<ept id="2">&lt;/code&gt;</ept> complete.</source>
            <target state="new">We have our <bpt id="2">&lt;code&gt;</bpt>app.js<ept id="2">&lt;/code&gt;</ept> complete.</target>
          </trans-unit>
          <trans-unit id="186" xml:space="preserve">
            <source>Now we simply need to add the routes and views that will show the information we get to the user as well as handle the <bpt id="2">&lt;code&gt;</bpt>/logout<ept id="2">&lt;/code&gt;</ept> and <bpt id="4">&lt;code&gt;</bpt>/login<ept id="4">&lt;/code&gt;</ept> routes we've created.</source>
            <target state="new">Now we simply need to add the routes and views that will show the information we get to the user as well as handle the <bpt id="2">&lt;code&gt;</bpt>/logout<ept id="2">&lt;/code&gt;</ept> and <bpt id="4">&lt;code&gt;</bpt>/login<ept id="4">&lt;/code&gt;</ept> routes we've created.</target>
          </trans-unit>
          <trans-unit id="187" xml:space="preserve">
            <source>Create the <bpt id="2">&lt;code&gt;</bpt>/routes/index.js<ept id="2">&lt;/code&gt;</ept> route under the root directory.</source>
            <target state="new">Create the <bpt id="2">&lt;code&gt;</bpt>/routes/index.js<ept id="2">&lt;/code&gt;</ept> route under the root directory.</target>
          </trans-unit>
          <trans-unit id="188" xml:space="preserve">
            <source>Create the <bpt id="2">&lt;code&gt;</bpt>/routes/user.js<ept id="2">&lt;/code&gt;</ept> route under the root directory</source>
            <target state="new">Create the <bpt id="2">&lt;code&gt;</bpt>/routes/user.js<ept id="2">&lt;/code&gt;</ept> route under the root directory</target>
          </trans-unit>
          <trans-unit id="189" xml:space="preserve">
            <source>These simple routes will just pass along the request to our views, including the user if present.</source>
            <target state="new">These simple routes will just pass along the request to our views, including the user if present.</target>
          </trans-unit>
          <trans-unit id="190" xml:space="preserve">
            <source>Create the <bpt id="2">&lt;code&gt;</bpt>/views/index.ejs<ept id="2">&lt;/code&gt;</ept> view under the root directory.</source>
            <target state="new">Create the <bpt id="2">&lt;code&gt;</bpt>/views/index.ejs<ept id="2">&lt;/code&gt;</ept> view under the root directory.</target>
          </trans-unit>
          <trans-unit id="191" xml:space="preserve">
            <source>this is a simple page that will call our login and logout methods and allow us to grab account information.</source>
            <target state="new">this is a simple page that will call our login and logout methods and allow us to grab account information.</target>
          </trans-unit>
          <trans-unit id="192" xml:space="preserve">
            <source>Notice that we can use the conditional <bpt id="2">&lt;code&gt;</bpt>if (!user)<ept id="2">&lt;/code&gt;</ept> as the user being passed through in the request is evidence we have a logged in user.</source>
            <target state="new">Notice that we can use the conditional <bpt id="2">&lt;code&gt;</bpt>if (!user)<ept id="2">&lt;/code&gt;</ept> as the user being passed through in the request is evidence we have a logged in user.</target>
          </trans-unit>
          <trans-unit id="193" xml:space="preserve">
            <source>Create the <bpt id="2">&lt;code&gt;</bpt>/views/account.ejs<ept id="2">&lt;/code&gt;</ept> view under the root directory so that we can view additional information that <bpt id="4">&lt;code&gt;</bpt>passport-azuread<ept id="4">&lt;/code&gt;</ept> has put in the user request.</source>
            <target state="new">Create the <bpt id="2">&lt;code&gt;</bpt>/views/account.ejs<ept id="2">&lt;/code&gt;</ept> view under the root directory so that we can view additional information that <bpt id="4">&lt;code&gt;</bpt>passport-azuread<ept id="4">&lt;/code&gt;</ept> has put in the user request.</target>
          </trans-unit>
          <trans-unit id="194" xml:space="preserve">
            <source>Finally, let's make this look pretty by adding a layout.</source>
            <target state="new">Finally, let's make this look pretty by adding a layout.</target>
          </trans-unit>
          <trans-unit id="195" xml:space="preserve">
            <source>Create the '/views/layout.ejs' view under the root directory</source>
            <target state="new">Create the '/views/layout.ejs' view under the root directory</target>
          </trans-unit>
          <trans-unit id="196" xml:space="preserve">
            <source>```HTML</source>
            <target state="new">```HTML</target>
          </trans-unit>
          <trans-unit id="197" xml:space="preserve">
            <source><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="198" xml:space="preserve">
            <source><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="199" xml:space="preserve">
            <source><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="200" xml:space="preserve">
            <source><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept>Passport-OpenID Example<bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept>Passport-OpenID Example<bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="201" xml:space="preserve">
            <source><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="202" xml:space="preserve">
            <source><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="203" xml:space="preserve">
            <source><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="204" xml:space="preserve">
            <source><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="205" xml:space="preserve">
            <source><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept>Home<bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept> |</source>
            <target state="new"><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept>Home<bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept> |</target>
          </trans-unit>
          <trans-unit id="206" xml:space="preserve">
            <source><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept>Log In<bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept>Log In<bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="207" xml:space="preserve">
            <source><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="208" xml:space="preserve">
            <source><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="209" xml:space="preserve">
            <source><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="210" xml:space="preserve">
            <source><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept>Home<bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept> |</source>
            <target state="new"><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept>Home<bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept> |</target>
          </trans-unit>
          <trans-unit id="211" xml:space="preserve">
            <source><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept>Account<bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept> |</source>
            <target state="new"><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept>Account<bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept> |</target>
          </trans-unit>
          <trans-unit id="212" xml:space="preserve">
            <source><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept>Log Out<bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept>Log Out<bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="213" xml:space="preserve">
            <source><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="214" xml:space="preserve">
            <source><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="215" xml:space="preserve">
            <source><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="216" xml:space="preserve">
            <source><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="217" xml:space="preserve">
            <source><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept>```</source>
            <target state="new"><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept>```</target>
          </trans-unit>
          <trans-unit id="218" xml:space="preserve">
            <source>Finally, build and run your app!</source>
            <target state="new">Finally, build and run your app!</target>
          </trans-unit>
          <trans-unit id="219" xml:space="preserve">
            <source>Run <bpt id="2">&lt;code&gt;</bpt>node app.js<ept id="2">&lt;/code&gt;</ept> and navigate to <bpt id="4">&lt;code&gt;</bpt>http://localhost:3000<ept id="4">&lt;/code&gt;</ept></source>
            <target state="new">Run <bpt id="2">&lt;code&gt;</bpt>node app.js<ept id="2">&lt;/code&gt;</ept> and navigate to <bpt id="4">&lt;code&gt;</bpt>http://localhost:3000<ept id="4">&lt;/code&gt;</ept></target>
          </trans-unit>
          <trans-unit id="220" xml:space="preserve">
            <source>Sign in with either a personal Microsoft Account or a work or school account, and notice how the user's identity is reflected in the /account list.</source>
            <target state="new">Sign in with either a personal Microsoft Account or a work or school account, and notice how the user's identity is reflected in the /account list.</target>
          </trans-unit>
          <trans-unit id="221" xml:space="preserve">
            <source>You now have a web app secured using industry standard protocols that can authenticate users with both their personal and work/school accounts.</source>
            <target state="new">You now have a web app secured using industry standard protocols that can authenticate users with both their personal and work/school accounts.</target>
          </trans-unit>
          <trans-unit id="222" xml:space="preserve">
            <source>For reference, the completed sample (without your configuration values) <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>is provided as a .zip here<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>, or you can clone it from GitHub:</source>
            <target state="new">For reference, the completed sample (without your configuration values) <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>is provided as a .zip here<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>, or you can clone it from GitHub:</target>
          </trans-unit>
          <trans-unit id="223" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>git clone --branch complete https://github.com/AzureADQuickStarts/WebApp-OpenIDConnect-NodeJS.git<ept id="1">&lt;/code&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>git clone --branch complete https://github.com/AzureADQuickStarts/WebApp-OpenIDConnect-NodeJS.git<ept id="1">&lt;/code&gt;</ept></target>
          </trans-unit>
          <trans-unit id="224" xml:space="preserve">
            <source>You can now move onto more advanced topics.</source>
            <target state="new">You can now move onto more advanced topics.</target>
          </trans-unit>
          <trans-unit id="225" xml:space="preserve">
            <source>You may want to try:</source>
            <target state="new">You may want to try:</target>
          </trans-unit>
          <trans-unit id="226" xml:space="preserve">
            <source><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Secure a Web API with Azure AD &gt;&gt;<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></source>
            <target state="new"><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Secure a Web API with Azure AD &gt;&gt;<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></target>
          </trans-unit>
          <trans-unit id="227" xml:space="preserve">
            <source><ph id="1">&lt;token href="../../includes/active-directory-devquickstarts-additional-resources.md"/&gt;</ph></source>
            <target state="new"><ph id="1">&lt;token href="../../includes/active-directory-devquickstarts-additional-resources.md"/&gt;</ph></target>
          </trans-unit>
        </group>
      </group>
    </body>
  </file>
</xliff>