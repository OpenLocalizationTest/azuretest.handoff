<?xml version="1.0" encoding="utf-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" source-language="en-us" target-language="ru-ru" original="2/22/2016 1:12:24 AM" tool-id="MarkdownTransformer" product-name="N/A" product-version="N/A" build-num="1">
    <header>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7e706392e86db6c3ffa996a2e1ba7a82badef034</xliffext:olfilehash>
      <tool tool-id="MarkdownTransformer" tool-name="MarkdownToXliff" tool-version="1.0" tool-company="Microsoft" />
    </header>
    <body>
      <group extype="content">
        <group id="101">
          <trans-unit id="101" xml:space="preserve">
            <source>Upload Files into a Media Services account using .NET</source>
            <target state="new">Upload Files into a Media Services account using .NET</target>
          </trans-unit>
          <trans-unit id="102" xml:space="preserve">
            <source>Learn how to get media content into Media Services by creating and uploading assets.</source>
            <target state="new">Learn how to get media content into Media Services by creating and uploading assets.</target>
          </trans-unit>
          <trans-unit id="103" xml:space="preserve">
            <source>Upload Files into a Media Services account using .NET</source>
            <target state="new">Upload Files into a Media Services account using .NET</target>
          </trans-unit>
          <trans-unit id="104" xml:space="preserve">
            <source><ph id="1">&lt;token href="../../includes/media-services-selector-upload-files.md"/&gt;</ph></source>
            <target state="new"><ph id="1">&lt;token href="../../includes/media-services-selector-upload-files.md"/&gt;</ph></target>
          </trans-unit>
          <trans-unit id="105" xml:space="preserve">
            <source>In Media Services, you upload (or ingest) your digital files into an asset.</source>
            <target state="new">In Media Services, you upload (or ingest) your digital files into an asset.</target>
          </trans-unit>
          <trans-unit id="106" xml:space="preserve">
            <source>The <bpt id="2">&lt;strong&gt;</bpt>Asset<ept id="2">&lt;/strong&gt;</ept> entity can contain video, audio, images, thumbnail collections, text tracks and closed caption files (and the metadata about these files.)</source>
            <target state="new">The <bpt id="2">&lt;strong&gt;</bpt>Asset<ept id="2">&lt;/strong&gt;</ept> entity can contain video, audio, images, thumbnail collections, text tracks and closed caption files (and the metadata about these files.)</target>
          </trans-unit>
          <trans-unit id="107" xml:space="preserve">
            <source>Once the files are uploaded, your content is stored securely in the cloud for further processing and streaming.</source>
            <target state="new">Once the files are uploaded, your content is stored securely in the cloud for further processing and streaming.</target>
          </trans-unit>
          <trans-unit id="108" xml:space="preserve">
            <source>The files in the asset are called <bpt id="2">&lt;strong&gt;</bpt>Asset Files<ept id="2">&lt;/strong&gt;</ept>.</source>
            <target state="new">The files in the asset are called <bpt id="2">&lt;strong&gt;</bpt>Asset Files<ept id="2">&lt;/strong&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="109" xml:space="preserve">
            <source>The <bpt id="2">&lt;strong&gt;</bpt>AssetFile<ept id="2">&lt;/strong&gt;</ept> instance and the actual media file are two distinct objects.</source>
            <target state="new">The <bpt id="2">&lt;strong&gt;</bpt>AssetFile<ept id="2">&lt;/strong&gt;</ept> instance and the actual media file are two distinct objects.</target>
          </trans-unit>
          <trans-unit id="110" xml:space="preserve">
            <source>The AssetFile instance contains metadata about the media file, while the media file contains the actual media content.</source>
            <target state="new">The AssetFile instance contains metadata about the media file, while the media file contains the actual media content.</target>
          </trans-unit>
          <trans-unit id="111" xml:space="preserve">
            <source>When you create assets, you can specify the following encryption options.</source>
            <target state="new">When you create assets, you can specify the following encryption options.</target>
          </trans-unit>
          <trans-unit id="112" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>None<ept id="1">&lt;/strong&gt;</ept> - No encryption is used.</source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>None<ept id="1">&lt;/strong&gt;</ept> - No encryption is used.</target>
          </trans-unit>
          <trans-unit id="113" xml:space="preserve">
            <source>This is the default value.</source>
            <target state="new">This is the default value.</target>
          </trans-unit>
          <trans-unit id="114" xml:space="preserve">
            <source>Note that when using this option your content is not protected in transit or at rest in storage.</source>
            <target state="new">Note that when using this option your content is not protected in transit or at rest in storage.</target>
          </trans-unit>
          <trans-unit id="115" xml:space="preserve">
            <source>If you plan to deliver an MP4 using progressive download, use this option.</source>
            <target state="new">If you plan to deliver an MP4 using progressive download, use this option.</target>
          </trans-unit>
          <trans-unit id="116" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>CommonEncryption<ept id="1">&lt;/strong&gt;</ept> - Use this option if you are uploading content that has already been encrypted and protected with Common Encryption or PlayReady DRM (for example, Smooth Streaming protected with PlayReady DRM).</source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>CommonEncryption<ept id="1">&lt;/strong&gt;</ept> - Use this option if you are uploading content that has already been encrypted and protected with Common Encryption or PlayReady DRM (for example, Smooth Streaming protected with PlayReady DRM).</target>
          </trans-unit>
          <trans-unit id="117" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>EnvelopeEncrypted<ept id="1">&lt;/strong&gt;</ept> – Use this option if you are uploading HLS encrypted with AES.</source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>EnvelopeEncrypted<ept id="1">&lt;/strong&gt;</ept> – Use this option if you are uploading HLS encrypted with AES.</target>
          </trans-unit>
          <trans-unit id="118" xml:space="preserve">
            <source>Note that the files must have been encoded and encrypted by Transform Manager.</source>
            <target state="new">Note that the files must have been encoded and encrypted by Transform Manager.</target>
          </trans-unit>
          <trans-unit id="119" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>StorageEncrypted<ept id="1">&lt;/strong&gt;</ept> - Encrypts your clear content locally using AES-256 bit encryption and then uploads it to Azure Storage where it is stored encrypted at rest.</source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>StorageEncrypted<ept id="1">&lt;/strong&gt;</ept> - Encrypts your clear content locally using AES-256 bit encryption and then uploads it to Azure Storage where it is stored encrypted at rest.</target>
          </trans-unit>
          <trans-unit id="120" xml:space="preserve">
            <source>Assets protected with Storage Encryption are automatically unencrypted and placed in an encrypted file system prior to encoding, and optionally re-encrypted prior to uploading back as a new output asset.</source>
            <target state="new">Assets protected with Storage Encryption are automatically unencrypted and placed in an encrypted file system prior to encoding, and optionally re-encrypted prior to uploading back as a new output asset.</target>
          </trans-unit>
          <trans-unit id="121" xml:space="preserve">
            <source>The primary use case for Storage Encryption is when you want to secure your high quality input media files with strong encryption at rest on disk.</source>
            <target state="new">The primary use case for Storage Encryption is when you want to secure your high quality input media files with strong encryption at rest on disk.</target>
          </trans-unit>
          <trans-unit id="122" xml:space="preserve">
            <source>Media Services provides on-disk storage encryption for your assets, not over-the-wire like Digital Rights Manager (DRM).</source>
            <target state="new">Media Services provides on-disk storage encryption for your assets, not over-the-wire like Digital Rights Manager (DRM).</target>
          </trans-unit>
          <trans-unit id="123" xml:space="preserve">
            <source>If your asset is storage encrypted, you must configure asset delivery policy.</source>
            <target state="new">If your asset is storage encrypted, you must configure asset delivery policy.</target>
          </trans-unit>
          <trans-unit id="124" xml:space="preserve">
            <source>For more information see <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Configuring asset delivery policy<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">For more information see <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Configuring asset delivery policy<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="125" xml:space="preserve">
            <source>If you specify for your asset to be encrypted with a <bpt id="2">&lt;strong&gt;</bpt>CommonEncrypted<ept id="2">&lt;/strong&gt;</ept> option, or an <bpt id="4">&lt;strong&gt;</bpt>EnvelopeEncypted<ept id="4">&lt;/strong&gt;</ept> option, you will need to associate your asset with a <bpt id="6">&lt;strong&gt;</bpt>ContentKey<ept id="6">&lt;/strong&gt;</ept>.</source>
            <target state="new">If you specify for your asset to be encrypted with a <bpt id="2">&lt;strong&gt;</bpt>CommonEncrypted<ept id="2">&lt;/strong&gt;</ept> option, or an <bpt id="4">&lt;strong&gt;</bpt>EnvelopeEncypted<ept id="4">&lt;/strong&gt;</ept> option, you will need to associate your asset with a <bpt id="6">&lt;strong&gt;</bpt>ContentKey<ept id="6">&lt;/strong&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="126" xml:space="preserve">
            <source>For more information, see <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>How to create a ContentKey<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">For more information, see <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>How to create a ContentKey<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="127" xml:space="preserve">
            <source>If you specify for your asset to be encrypted with a <bpt id="2">&lt;strong&gt;</bpt>StorageEncrypted<ept id="2">&lt;/strong&gt;</ept> option, the Media Services SDK for .NET will create a <bpt id="4">&lt;strong&gt;</bpt>StorateEncrypted<ept id="4">&lt;/strong&gt;</ept> <bpt id="6">&lt;strong&gt;</bpt>ContentKey<ept id="6">&lt;/strong&gt;</ept> for your asset.</source>
            <target state="new">If you specify for your asset to be encrypted with a <bpt id="2">&lt;strong&gt;</bpt>StorageEncrypted<ept id="2">&lt;/strong&gt;</ept> option, the Media Services SDK for .NET will create a <bpt id="4">&lt;strong&gt;</bpt>StorateEncrypted<ept id="4">&lt;/strong&gt;</ept> <bpt id="6">&lt;strong&gt;</bpt>ContentKey<ept id="6">&lt;/strong&gt;</ept> for your asset.</target>
          </trans-unit>
          <trans-unit id="128" xml:space="preserve">
            <source>Media Services uses the value of the IAssetFile.Name property when building URLs for the streaming content (for example, http://{AMSAccount}.origin.mediaservices.windows.net/{GUID}/{IAssetFile.Name}/streamingParameters.) For this reason, percent-encoding is not allowed. The value of the <bpt id="2">&lt;strong&gt;</bpt>Name<ept id="2">&lt;/strong&gt;</ept> property cannot have any of the following <bpt id="4CapsExtId1">&lt;link&gt;</bpt><bpt id="4CapsExtId2">&lt;linkText&gt;</bpt>percent-encoding-reserved characters<ept id="4CapsExtId2">&lt;/linkText&gt;</ept><bpt id="4CapsExtId3">&lt;title&gt;</bpt><ept id="4CapsExtId3">&lt;/title&gt;</ept><ept id="4CapsExtId1">&lt;/link&gt;</ept>: !*'();:@&amp;=+$,/?%#[]". Also, there can only be one ‘.’ for the file name extension.</source>
            <target state="new">Media Services uses the value of the IAssetFile.Name property when building URLs for the streaming content (for example, http://{AMSAccount}.origin.mediaservices.windows.net/{GUID}/{IAssetFile.Name}/streamingParameters.) For this reason, percent-encoding is not allowed. The value of the <bpt id="2">&lt;strong&gt;</bpt>Name<ept id="2">&lt;/strong&gt;</ept> property cannot have any of the following <bpt id="4CapsExtId1">&lt;link&gt;</bpt><bpt id="4CapsExtId2">&lt;linkText&gt;</bpt>percent-encoding-reserved characters<ept id="4CapsExtId2">&lt;/linkText&gt;</ept><bpt id="4CapsExtId3">&lt;title&gt;</bpt><ept id="4CapsExtId3">&lt;/title&gt;</ept><ept id="4CapsExtId1">&lt;/link&gt;</ept>: !*'();:@&amp;=+$,/?%#[]". Also, there can only be one ‘.’ for the file name extension.</target>
          </trans-unit>
          <trans-unit id="129" xml:space="preserve">
            <source>This topic shows how to use Media Services .NET SDK as well as Media Services .NET SDK extensions to upload files into a Media Services asset.</source>
            <target state="new">This topic shows how to use Media Services .NET SDK as well as Media Services .NET SDK extensions to upload files into a Media Services asset.</target>
          </trans-unit>
          <trans-unit id="130" xml:space="preserve">
            <source>Upload a single file with Media Services .NET SDK</source>
            <target state="new">Upload a single file with Media Services .NET SDK</target>
          </trans-unit>
          <trans-unit id="131" xml:space="preserve">
            <source>The sample code below uses .NET SDK to perform the following tasks:</source>
            <target state="new">The sample code below uses .NET SDK to perform the following tasks:</target>
          </trans-unit>
          <trans-unit id="132" xml:space="preserve">
            <source>Creates an empty Asset.</source>
            <target state="new">Creates an empty Asset.</target>
          </trans-unit>
          <trans-unit id="133" xml:space="preserve">
            <source>Creates an AssetFile instance that we want to associate with the asset.</source>
            <target state="new">Creates an AssetFile instance that we want to associate with the asset.</target>
          </trans-unit>
          <trans-unit id="134" xml:space="preserve">
            <source>Creates an AccessPolicy instance that defines the permissions and duration of access to the asset.</source>
            <target state="new">Creates an AccessPolicy instance that defines the permissions and duration of access to the asset.</target>
          </trans-unit>
          <trans-unit id="135" xml:space="preserve">
            <source>Creates a Locator instance that provides access to the asset.</source>
            <target state="new">Creates a Locator instance that provides access to the asset.</target>
          </trans-unit>
          <trans-unit id="136" xml:space="preserve">
            <source>Uploads a single media file into Media Services.</source>
            <target state="new">Uploads a single media file into Media Services.</target>
          </trans-unit>
          <trans-unit id="137" xml:space="preserve">
            <source>Upload multiple files with Media Services .NET SDK</source>
            <target state="new">Upload multiple files with Media Services .NET SDK</target>
          </trans-unit>
          <trans-unit id="138" xml:space="preserve">
            <source>The following code shows how to create an asset and upload multiple files.</source>
            <target state="new">The following code shows how to create an asset and upload multiple files.</target>
          </trans-unit>
          <trans-unit id="139" xml:space="preserve">
            <source>The code does the following:</source>
            <target state="new">The code does the following:</target>
          </trans-unit>
          <trans-unit id="140" xml:space="preserve">
            <source>Creates an empty asset using the CreateEmptyAsset method defined in the previous step.</source>
            <target state="new">Creates an empty asset using the CreateEmptyAsset method defined in the previous step.</target>
          </trans-unit>
          <trans-unit id="141" xml:space="preserve">
            <source>Creates an <bpt id="2">&lt;strong&gt;</bpt>AccessPolicy<ept id="2">&lt;/strong&gt;</ept> instance that defines the permissions and duration of access to the asset.</source>
            <target state="new">Creates an <bpt id="2">&lt;strong&gt;</bpt>AccessPolicy<ept id="2">&lt;/strong&gt;</ept> instance that defines the permissions and duration of access to the asset.</target>
          </trans-unit>
          <trans-unit id="142" xml:space="preserve">
            <source>Creates a <bpt id="2">&lt;strong&gt;</bpt>Locator<ept id="2">&lt;/strong&gt;</ept> instance that provides access to the asset.</source>
            <target state="new">Creates a <bpt id="2">&lt;strong&gt;</bpt>Locator<ept id="2">&lt;/strong&gt;</ept> instance that provides access to the asset.</target>
          </trans-unit>
          <trans-unit id="143" xml:space="preserve">
            <source>Creates a <bpt id="2">&lt;strong&gt;</bpt>BlobTransferClient<ept id="2">&lt;/strong&gt;</ept> instance.</source>
            <target state="new">Creates a <bpt id="2">&lt;strong&gt;</bpt>BlobTransferClient<ept id="2">&lt;/strong&gt;</ept> instance.</target>
          </trans-unit>
          <trans-unit id="144" xml:space="preserve">
            <source>This type represents a client that operates on the Azure blobs.</source>
            <target state="new">This type represents a client that operates on the Azure blobs.</target>
          </trans-unit>
          <trans-unit id="145" xml:space="preserve">
            <source>In this example we use the client to monitor the upload progress.</source>
            <target state="new">In this example we use the client to monitor the upload progress.</target>
          </trans-unit>
          <trans-unit id="146" xml:space="preserve">
            <source>Enumerates through files in the specified directory and creates an <bpt id="2">&lt;strong&gt;</bpt>AssetFile<ept id="2">&lt;/strong&gt;</ept> instance for each file.</source>
            <target state="new">Enumerates through files in the specified directory and creates an <bpt id="2">&lt;strong&gt;</bpt>AssetFile<ept id="2">&lt;/strong&gt;</ept> instance for each file.</target>
          </trans-unit>
          <trans-unit id="147" xml:space="preserve">
            <source>Uploads the files into Media Services using the <bpt id="2">&lt;strong&gt;</bpt>UploadAsync<ept id="2">&lt;/strong&gt;</ept> method.</source>
            <target state="new">Uploads the files into Media Services using the <bpt id="2">&lt;strong&gt;</bpt>UploadAsync<ept id="2">&lt;/strong&gt;</ept> method.</target>
          </trans-unit>
          <trans-unit id="148" xml:space="preserve">
            <source>Use the UploadAsync method to ensure that the calls are not blocking and the files are uploaded in parallel.</source>
            <target state="new">Use the UploadAsync method to ensure that the calls are not blocking and the files are uploaded in parallel.</target>
          </trans-unit>
          <trans-unit id="149" xml:space="preserve">
            <source>When uploading a large number of assets, consider the following.</source>
            <target state="new">When uploading a large number of assets, consider the following.</target>
          </trans-unit>
          <trans-unit id="150" xml:space="preserve">
            <source>Create a new <bpt id="2">&lt;strong&gt;</bpt>CloudMediaContext<ept id="2">&lt;/strong&gt;</ept> object per thread.</source>
            <target state="new">Create a new <bpt id="2">&lt;strong&gt;</bpt>CloudMediaContext<ept id="2">&lt;/strong&gt;</ept> object per thread.</target>
          </trans-unit>
          <trans-unit id="151" xml:space="preserve">
            <source>The <bpt id="2">&lt;strong&gt;</bpt>CloudMediaContext<ept id="2">&lt;/strong&gt;</ept> class is not thread safe.</source>
            <target state="new">The <bpt id="2">&lt;strong&gt;</bpt>CloudMediaContext<ept id="2">&lt;/strong&gt;</ept> class is not thread safe.</target>
          </trans-unit>
          <trans-unit id="152" xml:space="preserve">
            <source>Increase NumberOfConcurrentTransfers from the default value of 2 to a higher value like 5.</source>
            <target state="new">Increase NumberOfConcurrentTransfers from the default value of 2 to a higher value like 5.</target>
          </trans-unit>
          <trans-unit id="153" xml:space="preserve">
            <source>Setting this property affects all instances of <bpt id="2">&lt;strong&gt;</bpt>CloudMediaContext<ept id="2">&lt;/strong&gt;</ept>.</source>
            <target state="new">Setting this property affects all instances of <bpt id="2">&lt;strong&gt;</bpt>CloudMediaContext<ept id="2">&lt;/strong&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="154" xml:space="preserve">
            <source>Keep ParallelTransferThreadCount at the default value of 10.</source>
            <target state="new">Keep ParallelTransferThreadCount at the default value of 10.</target>
          </trans-unit>
          <trans-unit id="155" xml:space="preserve">
            <source><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>Ingesting Assets in Bulk using Media Services .NET SDK</source>
            <target state="new"><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>Ingesting Assets in Bulk using Media Services .NET SDK</target>
          </trans-unit>
          <trans-unit id="156" xml:space="preserve">
            <source>Uploading large asset files can be a bottleneck during asset creation.</source>
            <target state="new">Uploading large asset files can be a bottleneck during asset creation.</target>
          </trans-unit>
          <trans-unit id="157" xml:space="preserve">
            <source>Ingesting Assets in Bulk or “Bulk Ingesting”, involves decoupling asset creation from the upload process.</source>
            <target state="new">Ingesting Assets in Bulk or “Bulk Ingesting”, involves decoupling asset creation from the upload process.</target>
          </trans-unit>
          <trans-unit id="158" xml:space="preserve">
            <source>To use a bulk ingesting approach, create a manifest (IngestManifest) that describes the asset and its associated files.</source>
            <target state="new">To use a bulk ingesting approach, create a manifest (IngestManifest) that describes the asset and its associated files.</target>
          </trans-unit>
          <trans-unit id="159" xml:space="preserve">
            <source>Then use the upload method of your choice to upload the associated files to the manifest’s blob container.</source>
            <target state="new">Then use the upload method of your choice to upload the associated files to the manifest’s blob container.</target>
          </trans-unit>
          <trans-unit id="160" xml:space="preserve">
            <source>Microsoft Azure Media Services watches the blob container associated with the manifest.</source>
            <target state="new">Microsoft Azure Media Services watches the blob container associated with the manifest.</target>
          </trans-unit>
          <trans-unit id="161" xml:space="preserve">
            <source>Once a file is uploaded to the blob container, Microsoft Azure Media Services completes the asset creation based on the configuration of the asset in the manifest (IngestManifestAsset).</source>
            <target state="new">Once a file is uploaded to the blob container, Microsoft Azure Media Services completes the asset creation based on the configuration of the asset in the manifest (IngestManifestAsset).</target>
          </trans-unit>
          <trans-unit id="162" xml:space="preserve">
            <source>To create a new IngestManifest call the Create method exposed by the IngestManifests collection on the CloudMediaContext.</source>
            <target state="new">To create a new IngestManifest call the Create method exposed by the IngestManifests collection on the CloudMediaContext.</target>
          </trans-unit>
          <trans-unit id="163" xml:space="preserve">
            <source>This method will create a new IngestManifest with the manifest name you provide.</source>
            <target state="new">This method will create a new IngestManifest with the manifest name you provide.</target>
          </trans-unit>
          <trans-unit id="164" xml:space="preserve">
            <source>Create the assets that will be associated with the bulk IngestManifest.</source>
            <target state="new">Create the assets that will be associated with the bulk IngestManifest.</target>
          </trans-unit>
          <trans-unit id="165" xml:space="preserve">
            <source>Configure the desired encryption options on the asset for bulk ingesting.</source>
            <target state="new">Configure the desired encryption options on the asset for bulk ingesting.</target>
          </trans-unit>
          <trans-unit id="166" xml:space="preserve">
            <source>An IngestManifestAsset associates an Asset with a bulk IngestManifest for bulk ingesting.</source>
            <target state="new">An IngestManifestAsset associates an Asset with a bulk IngestManifest for bulk ingesting.</target>
          </trans-unit>
          <trans-unit id="167" xml:space="preserve">
            <source>It also associates the AssetFiles that will make up each Asset.</source>
            <target state="new">It also associates the AssetFiles that will make up each Asset.</target>
          </trans-unit>
          <trans-unit id="168" xml:space="preserve">
            <source>To create an IngestManifestAsset, use the Create method on the server context.</source>
            <target state="new">To create an IngestManifestAsset, use the Create method on the server context.</target>
          </trans-unit>
          <trans-unit id="169" xml:space="preserve">
            <source>The following example demonstrates adding two new IngestManifestAssets that associate the two assets previously created to the bulk ingest manifest.</source>
            <target state="new">The following example demonstrates adding two new IngestManifestAssets that associate the two assets previously created to the bulk ingest manifest.</target>
          </trans-unit>
          <trans-unit id="170" xml:space="preserve">
            <source>Each IngestManifestAsset also associates a set of files that will be uploaded for each asset during bulk ingesting.</source>
            <target state="new">Each IngestManifestAsset also associates a set of files that will be uploaded for each asset during bulk ingesting.</target>
          </trans-unit>
          <trans-unit id="171" xml:space="preserve">
            <source>You can use any high speed client application capable of uploading the asset files to the blob storage container URI provided by the <bpt id="2">&lt;strong&gt;</bpt>IIngestManifest.BlobStorageUriForUpload<ept id="2">&lt;/strong&gt;</ept> property of the IngestManifest.</source>
            <target state="new">You can use any high speed client application capable of uploading the asset files to the blob storage container URI provided by the <bpt id="2">&lt;strong&gt;</bpt>IIngestManifest.BlobStorageUriForUpload<ept id="2">&lt;/strong&gt;</ept> property of the IngestManifest.</target>
          </trans-unit>
          <trans-unit id="172" xml:space="preserve">
            <source>One notable high speed upload service is <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Aspera On Demand for Azure Application<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">One notable high speed upload service is <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Aspera On Demand for Azure Application<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="173" xml:space="preserve">
            <source>You can also write code to upload the assets files as shown in the following code example.</source>
            <target state="new">You can also write code to upload the assets files as shown in the following code example.</target>
          </trans-unit>
          <trans-unit id="174" xml:space="preserve">
            <source>The code for uploading the asset files for the sample used in this topic is shown in the following code example.</source>
            <target state="new">The code for uploading the asset files for the sample used in this topic is shown in the following code example.</target>
          </trans-unit>
          <trans-unit id="175" xml:space="preserve">
            <source>You can determine the progress of the bulk ingesting for all assets associated with an <bpt id="2">&lt;strong&gt;</bpt>IngestManifest<ept id="2">&lt;/strong&gt;</ept> by polling the Statistics property of the <bpt id="4">&lt;strong&gt;</bpt>IngestManifest<ept id="4">&lt;/strong&gt;</ept>.</source>
            <target state="new">You can determine the progress of the bulk ingesting for all assets associated with an <bpt id="2">&lt;strong&gt;</bpt>IngestManifest<ept id="2">&lt;/strong&gt;</ept> by polling the Statistics property of the <bpt id="4">&lt;strong&gt;</bpt>IngestManifest<ept id="4">&lt;/strong&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="176" xml:space="preserve">
            <source>In order to update progress information, you must use a new <bpt id="2">&lt;strong&gt;</bpt>CloudMediaContext<ept id="2">&lt;/strong&gt;</ept> each time you poll the Statistics property.</source>
            <target state="new">In order to update progress information, you must use a new <bpt id="2">&lt;strong&gt;</bpt>CloudMediaContext<ept id="2">&lt;/strong&gt;</ept> each time you poll the Statistics property.</target>
          </trans-unit>
          <trans-unit id="177" xml:space="preserve">
            <source>The following example demonstrates polling an IngestManifest by its <bpt id="2">&lt;strong&gt;</bpt>Id<ept id="2">&lt;/strong&gt;</ept>.</source>
            <target state="new">The following example demonstrates polling an IngestManifest by its <bpt id="2">&lt;strong&gt;</bpt>Id<ept id="2">&lt;/strong&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="178" xml:space="preserve">
            <source>Upload files using .NET SDK Extensions</source>
            <target state="new">Upload files using .NET SDK Extensions</target>
          </trans-unit>
          <trans-unit id="179" xml:space="preserve">
            <source>The example below shows how to upload a single file using .NET SDK Extensions.</source>
            <target state="new">The example below shows how to upload a single file using .NET SDK Extensions.</target>
          </trans-unit>
          <trans-unit id="180" xml:space="preserve">
            <source>In this case the <bpt id="2">&lt;strong&gt;</bpt>CreateFromFile<ept id="2">&lt;/strong&gt;</ept> method is used, but the asynchronous version is also available (<bpt id="4">&lt;strong&gt;</bpt>CreateFromFileAsync<ept id="4">&lt;/strong&gt;</ept>).</source>
            <target state="new">In this case the <bpt id="2">&lt;strong&gt;</bpt>CreateFromFile<ept id="2">&lt;/strong&gt;</ept> method is used, but the asynchronous version is also available (<bpt id="4">&lt;strong&gt;</bpt>CreateFromFileAsync<ept id="4">&lt;/strong&gt;</ept>).</target>
          </trans-unit>
          <trans-unit id="181" xml:space="preserve">
            <source>The <bpt id="2">&lt;strong&gt;</bpt>CreateFromFile<ept id="2">&lt;/strong&gt;</ept> method lets you specify the file name, encryption option, and a callback in order to report the upload progress of the file.</source>
            <target state="new">The <bpt id="2">&lt;strong&gt;</bpt>CreateFromFile<ept id="2">&lt;/strong&gt;</ept> method lets you specify the file name, encryption option, and a callback in order to report the upload progress of the file.</target>
          </trans-unit>
          <trans-unit id="182" xml:space="preserve">
            <source>The following example calls UploadFile function and specifies storage encryption as the asset creation option.</source>
            <target state="new">The following example calls UploadFile function and specifies storage encryption as the asset creation option.</target>
          </trans-unit>
          <trans-unit id="183" xml:space="preserve">
            <source>Next Steps</source>
            <target state="new">Next Steps</target>
          </trans-unit>
          <trans-unit id="184" xml:space="preserve">
            <source>Now that you have uploaded an asset to Media Services, go to the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>How to Get a Media Processor[]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> topic.</source>
            <target state="new">Now that you have uploaded an asset to Media Services, go to the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>How to Get a Media Processor[]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> topic.</target>
          </trans-unit>
          <trans-unit id="185" xml:space="preserve">
            <source>test</source>
            <target state="new">test</target>
          </trans-unit>
        </group>
      </group>
    </body>
  </file>
</xliff>