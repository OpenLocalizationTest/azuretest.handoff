<?xml version="1.0" encoding="utf-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" source-language="en-us" target-language="ru-ru" original="2/20/2016 2:49:00 PM" tool-id="MarkdownTransformer" product-name="N/A" product-version="N/A" build-num="1">
    <header>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9b6f3c917269454a41fe3ec7f59461166354b8a8</xliffext:olfilehash>
      <tool tool-id="MarkdownTransformer" tool-name="MarkdownToXliff" tool-version="1.0" tool-company="Microsoft" />
    </header>
    <body>
      <group extype="content">
        <group id="101">
          <trans-unit id="101" xml:space="preserve">
            <source>C# Api App</source>
            <target state="new">C# Api App</target>
          </trans-unit>
          <trans-unit id="102" xml:space="preserve">
            <source>C# Api App</source>
            <target state="new">C# Api App</target>
          </trans-unit>
          <trans-unit id="103" xml:space="preserve">
            <source>C\# API App</source>
            <target state="new">C\# API App</target>
          </trans-unit>
          <trans-unit id="104" xml:space="preserve">
            <source>The C# API App gives you an easy way to run simple C# expressions <bpt id="2">&lt;em&gt;</bpt>while your Logic App executes<ept id="2">&lt;/em&gt;</ept>.</source>
            <target state="new">The C# API App gives you an easy way to run simple C# expressions <bpt id="2">&lt;em&gt;</bpt>while your Logic App executes<ept id="2">&lt;/em&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="105" xml:space="preserve">
            <source>When should you use this API app?</source>
            <target state="new">When should you use this API app?</target>
          </trans-unit>
          <trans-unit id="106" xml:space="preserve">
            <source>The key scenario for this API app is when you want the lifecycle of the code that you write to be the same as the Logic App, and you do <bpt id="2">&lt;em&gt;</bpt>not<ept id="2">&lt;/em&gt;</ept> want the code to be called in any other scenarios.</source>
            <target state="new">The key scenario for this API app is when you want the lifecycle of the code that you write to be the same as the Logic App, and you do <bpt id="2">&lt;em&gt;</bpt>not<ept id="2">&lt;/em&gt;</ept> want the code to be called in any other scenarios.</target>
          </trans-unit>
          <trans-unit id="107" xml:space="preserve">
            <source>On the other hand, if you want a reusable snippet of code that has a lifecycle independent of the Logic app, then you should use the WebJobs API app to create simple code expressions and call them from your Logic app.</source>
            <target state="new">On the other hand, if you want a reusable snippet of code that has a lifecycle independent of the Logic app, then you should use the WebJobs API app to create simple code expressions and call them from your Logic app.</target>
          </trans-unit>
          <trans-unit id="108" xml:space="preserve">
            <source>Finally, if you want to include any additional packages, you would need to pass in the assembly (.dll) to the connector as a Base64 encoded binary string (like the output from blob storage).</source>
            <target state="new">Finally, if you want to include any additional packages, you would need to pass in the assembly (.dll) to the connector as a Base64 encoded binary string (like the output from blob storage).</target>
          </trans-unit>
          <trans-unit id="109" xml:space="preserve">
            <source>If you want more flexibility over packages and assemblies, a WebJob would likely be a better option.</source>
            <target state="new">If you want more flexibility over packages and assemblies, a WebJob would likely be a better option.</target>
          </trans-unit>
          <trans-unit id="110" xml:space="preserve">
            <source>Use the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>JavaScript API App<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> if you would prefer to write your expressions in JS.</source>
            <target state="new">Use the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>JavaScript API App<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> if you would prefer to write your expressions in JS.</target>
          </trans-unit>
          <trans-unit id="111" xml:space="preserve">
            <source>Creating a C\# API App</source>
            <target state="new">Creating a C\# API App</target>
          </trans-unit>
          <trans-unit id="112" xml:space="preserve">
            <source>To use the C# API App, you need to first create an instance of the C# API app.</source>
            <target state="new">To use the C# API App, you need to first create an instance of the C# API app.</target>
          </trans-unit>
          <trans-unit id="113" xml:space="preserve">
            <source>This can be done either inline while creating a logic app or by selecting the C# API app from the Azure Marketplace.</source>
            <target state="new">This can be done either inline while creating a logic app or by selecting the C# API app from the Azure Marketplace.</target>
          </trans-unit>
          <trans-unit id="114" xml:space="preserve">
            <source>Using C\# API App in Logic Apps designer surface</source>
            <target state="new">Using C\# API App in Logic Apps designer surface</target>
          </trans-unit>
          <trans-unit id="115" xml:space="preserve">
            <source>Trigger</source>
            <target state="new">Trigger</target>
          </trans-unit>
          <trans-unit id="116" xml:space="preserve">
            <source>You can create a trigger that the Logic App service will poll (on an interval you define), and, if it returns anything other than <bpt id="2">&lt;code&gt;</bpt>false<ept id="2">&lt;/code&gt;</ept>, the Logic App will run, otherwise, it will wait until the next polling interval to check again.</source>
            <target state="new">You can create a trigger that the Logic App service will poll (on an interval you define), and, if it returns anything other than <bpt id="2">&lt;code&gt;</bpt>false<ept id="2">&lt;/code&gt;</ept>, the Logic App will run, otherwise, it will wait until the next polling interval to check again.</target>
          </trans-unit>
          <trans-unit id="117" xml:space="preserve">
            <source>The inputs to the trigger are:</source>
            <target state="new">The inputs to the trigger are:</target>
          </trans-unit>
          <trans-unit id="118" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>C# Expression<ept id="1">&lt;/strong&gt;</ept>  - An expression that will be evaluated.</source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>C# Expression<ept id="1">&lt;/strong&gt;</ept>  - An expression that will be evaluated.</target>
          </trans-unit>
          <trans-unit id="119" xml:space="preserve">
            <source>It will be invoked inside a function and must return <bpt id="2">&lt;code&gt;</bpt>false<ept id="2">&lt;/code&gt;</ept> when you do not want the Logic app to run, and can return anything else when you want the Logic app to run.</source>
            <target state="new">It will be invoked inside a function and must return <bpt id="2">&lt;code&gt;</bpt>false<ept id="2">&lt;/code&gt;</ept> when you do not want the Logic app to run, and can return anything else when you want the Logic app to run.</target>
          </trans-unit>
          <trans-unit id="120" xml:space="preserve">
            <source>You will be able to use the content of the response in the actions of the Logic app.</source>
            <target state="new">You will be able to use the content of the response in the actions of the Logic app.</target>
          </trans-unit>
          <trans-unit id="121" xml:space="preserve">
            <source>For example, you could have a simple trigger that will only run your Logic app between the :15 and :30 of the hour:</source>
            <target state="new">For example, you could have a simple trigger that will only run your Logic app between the :15 and :30 of the hour:</target>
          </trans-unit>
          <trans-unit id="122" xml:space="preserve">
            <source>Action</source>
            <target state="new">Action</target>
          </trans-unit>
          <trans-unit id="123" xml:space="preserve">
            <source>Likewise, you can provide an action to run.</source>
            <target state="new">Likewise, you can provide an action to run.</target>
          </trans-unit>
          <trans-unit id="124" xml:space="preserve">
            <source>The inputs to the action are:</source>
            <target state="new">The inputs to the action are:</target>
          </trans-unit>
          <trans-unit id="125" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>C# expression<ept id="1">&lt;/strong&gt;</ept>  - An expression that will be evaluated.</source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>C# expression<ept id="1">&lt;/strong&gt;</ept>  - An expression that will be evaluated.</target>
          </trans-unit>
          <trans-unit id="126" xml:space="preserve">
            <source>You must include the <bpt id="2">&lt;code&gt;</bpt>return<ept id="2">&lt;/code&gt;</ept> statement to get any content.</source>
            <target state="new">You must include the <bpt id="2">&lt;code&gt;</bpt>return<ept id="2">&lt;/code&gt;</ept> statement to get any content.</target>
          </trans-unit>
          <trans-unit id="127" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Context object(s)<ept id="1">&lt;/strong&gt;</ept> - An optional context object that can be passed into the trigger.</source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Context object(s)<ept id="1">&lt;/strong&gt;</ept> - An optional context object that can be passed into the trigger.</target>
          </trans-unit>
          <trans-unit id="128" xml:space="preserve">
            <source>You can define as many properties as you want, but the base must be a JObject <bpt id="2">&lt;code&gt;</bpt>{ ... }<ept id="2">&lt;/code&gt;</ept>, and objects can be referenced in the script via the key name (the value is passed in as a JToken cooresponding to name).</source>
            <target state="new">You can define as many properties as you want, but the base must be a JObject <bpt id="2">&lt;code&gt;</bpt>{ ... }<ept id="2">&lt;/code&gt;</ept>, and objects can be referenced in the script via the key name (the value is passed in as a JToken cooresponding to name).</target>
          </trans-unit>
          <trans-unit id="129" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Libraries<ept id="1">&lt;/strong&gt;</ept> - An optional array of .dll files to include on compiling the script.</source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Libraries<ept id="1">&lt;/strong&gt;</ept> - An optional array of .dll files to include on compiling the script.</target>
          </trans-unit>
          <trans-unit id="130" xml:space="preserve">
            <source>The array uses the following structure, and works best next to a blob storage connector with the .dll as the output:</source>
            <target state="new">The array uses the following structure, and works best next to a blob storage connector with the .dll as the output:</target>
          </trans-unit>
          <trans-unit id="131" xml:space="preserve">
            <source>For example, imagine you are using the Office 365 trigger <bpt id="2">&lt;strong&gt;</bpt>New Email<ept id="2">&lt;/strong&gt;</ept>.</source>
            <target state="new">For example, imagine you are using the Office 365 trigger <bpt id="2">&lt;strong&gt;</bpt>New Email<ept id="2">&lt;/strong&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="132" xml:space="preserve">
            <source>That returns the following object:</source>
            <target state="new">That returns the following object:</target>
          </trans-unit>
          <trans-unit id="133" xml:space="preserve">
            <source>But, you want to upload these attachments to a Yammer post.</source>
            <target state="new">But, you want to upload these attachments to a Yammer post.</target>
          </trans-unit>
          <trans-unit id="134" xml:space="preserve">
            <source>Unfortunately, the schema for Yammer attachments is slightly different.</source>
            <target state="new">Unfortunately, the schema for Yammer attachments is slightly different.</target>
          </trans-unit>
          <trans-unit id="135" xml:space="preserve">
            <source>Now, you can now parse this inside your Logic app.</source>
            <target state="new">Now, you can now parse this inside your Logic app.</target>
          </trans-unit>
          <trans-unit id="136" xml:space="preserve">
            <source>For the context object just pass: <bpt id="2">&lt;code&gt;</bpt>@triggerBody()<ept id="2">&lt;/code&gt;</ept>, and for the expression, pass:</source>
            <target state="new">For the context object just pass: <bpt id="2">&lt;code&gt;</bpt>@triggerBody()<ept id="2">&lt;/code&gt;</ept>, and for the expression, pass:</target>
          </trans-unit>
          <trans-unit id="137" xml:space="preserve">
            <source>The action returns the object that you returned from your function in a results object.</source>
            <target state="new">The action returns the object that you returned from your function in a results object.</target>
          </trans-unit>
          <trans-unit id="138" xml:space="preserve">
            <source>Thus, in the Yammer API app you can reference <bpt id="2">&lt;code&gt;</bpt>@body('csapi').results<ept id="2">&lt;/code&gt;</ept> for the <bpt id="4">&lt;strong&gt;</bpt>Attachments<ept id="4">&lt;/strong&gt;</ept> property.</source>
            <target state="new">Thus, in the Yammer API app you can reference <bpt id="2">&lt;code&gt;</bpt>@body('csapi').results<ept id="2">&lt;/code&gt;</ept> for the <bpt id="4">&lt;strong&gt;</bpt>Attachments<ept id="4">&lt;/strong&gt;</ept> property.</target>
          </trans-unit>
          <trans-unit id="139" xml:space="preserve">
            <source>Do more with your Connector</source>
            <target state="new">Do more with your Connector</target>
          </trans-unit>
          <trans-unit id="140" xml:space="preserve">
            <source>Now that the connector is created, you can add it to a business flow using a Logic App.</source>
            <target state="new">Now that the connector is created, you can add it to a business flow using a Logic App.</target>
          </trans-unit>
          <trans-unit id="141" xml:space="preserve">
            <source>See <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>What are Logic Apps?<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">See <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>What are Logic Apps?<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="142" xml:space="preserve">
            <source>You can also review performance statistics and control security to the connector.</source>
            <target state="new">You can also review performance statistics and control security to the connector.</target>
          </trans-unit>
          <trans-unit id="143" xml:space="preserve">
            <source>See <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Manage  and Monitor API apps and connector<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">See <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Manage  and Monitor API apps and connector<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
        </group>
      </group>
    </body>
  </file>
</xliff>