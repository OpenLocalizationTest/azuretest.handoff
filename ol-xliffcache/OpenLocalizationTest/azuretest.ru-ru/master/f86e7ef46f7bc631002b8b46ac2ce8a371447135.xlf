<?xml version="1.0" encoding="utf-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" source-language="en-us" target-language="ru-ru" original="2/20/2016 2:09:52 PM" tool-id="MarkdownTransformer" product-name="N/A" product-version="N/A" build-num="1">
    <header>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f86e7ef46f7bc631002b8b46ac2ce8a371447135</xliffext:olfilehash>
      <tool tool-id="MarkdownTransformer" tool-name="MarkdownToXliff" tool-version="1.0" tool-company="Microsoft" />
    </header>
    <body>
      <group extype="content">
        <group id="101">
          <trans-unit id="101" xml:space="preserve">
            <source>Azure AD Connect Sync: Functions Reference</source>
            <target state="new">Azure AD Connect Sync: Functions Reference</target>
          </trans-unit>
          <trans-unit id="102" xml:space="preserve">
            <source>Reference of declarative provisioning expressions in Azure AD Connect Sync.</source>
            <target state="new">Reference of declarative provisioning expressions in Azure AD Connect Sync.</target>
          </trans-unit>
          <trans-unit id="103" xml:space="preserve">
            <source>Azure AD Connect Sync: Functions Reference</source>
            <target state="new">Azure AD Connect Sync: Functions Reference</target>
          </trans-unit>
          <trans-unit id="104" xml:space="preserve">
            <source>In Azure Active Directory Sync, functions are used to manipulate an attribute value during synchronization. <bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept></source>
            <target state="new">In Azure Active Directory Sync, functions are used to manipulate an attribute value during synchronization. <bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="105" xml:space="preserve">
            <source>The Syntax of the functions is expressed using the following format: <bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept></source>
            <target state="new">The Syntax of the functions is expressed using the following format: <bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="106" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>&lt;output type&gt; FunctionName(&lt;input type&gt; &lt;position name&gt;, ..)<ept id="1">&lt;/code&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>&lt;output type&gt; FunctionName(&lt;input type&gt; &lt;position name&gt;, ..)<ept id="1">&lt;/code&gt;</ept></target>
          </trans-unit>
          <trans-unit id="107" xml:space="preserve">
            <source>If a function is overloaded and accepts multiple syntaxes, all valid syntaxes are listed.<bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept></source>
            <target state="new">If a function is overloaded and accepts multiple syntaxes, all valid syntaxes are listed.<bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="108" xml:space="preserve">
            <source>The functions are strongly typed and they verify that the type passed in matches the documented type.<bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept></source>
            <target state="new">The functions are strongly typed and they verify that the type passed in matches the documented type.<bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="109" xml:space="preserve">
            <source>An error is thrown if the type does not match.</source>
            <target state="new">An error is thrown if the type does not match.</target>
          </trans-unit>
          <trans-unit id="110" xml:space="preserve">
            <source>The types are expressed with the following syntax:</source>
            <target state="new">The types are expressed with the following syntax:</target>
          </trans-unit>
          <trans-unit id="111" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>bin<ept id="1">&lt;/strong&gt;</ept> – Binary</source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>bin<ept id="1">&lt;/strong&gt;</ept> – Binary</target>
          </trans-unit>
          <trans-unit id="112" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>bool<ept id="1">&lt;/strong&gt;</ept> – Boolean</source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>bool<ept id="1">&lt;/strong&gt;</ept> – Boolean</target>
          </trans-unit>
          <trans-unit id="113" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>dt<ept id="1">&lt;/strong&gt;</ept> – UTC Date/Time</source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>dt<ept id="1">&lt;/strong&gt;</ept> – UTC Date/Time</target>
          </trans-unit>
          <trans-unit id="114" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>enum<ept id="1">&lt;/strong&gt;</ept> – Enumeration of known constants</source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>enum<ept id="1">&lt;/strong&gt;</ept> – Enumeration of known constants</target>
          </trans-unit>
          <trans-unit id="115" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>exp<ept id="1">&lt;/strong&gt;</ept> – Expression, which is expected to evaluate to a Boolean</source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>exp<ept id="1">&lt;/strong&gt;</ept> – Expression, which is expected to evaluate to a Boolean</target>
          </trans-unit>
          <trans-unit id="116" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>mvbin<ept id="1">&lt;/strong&gt;</ept> – Multi Valued Binary</source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>mvbin<ept id="1">&lt;/strong&gt;</ept> – Multi Valued Binary</target>
          </trans-unit>
          <trans-unit id="117" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>mvstr<ept id="1">&lt;/strong&gt;</ept> – Multi Valued Reference</source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>mvstr<ept id="1">&lt;/strong&gt;</ept> – Multi Valued Reference</target>
          </trans-unit>
          <trans-unit id="118" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>num<ept id="1">&lt;/strong&gt;</ept> – Numeric</source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>num<ept id="1">&lt;/strong&gt;</ept> – Numeric</target>
          </trans-unit>
          <trans-unit id="119" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>ref<ept id="1">&lt;/strong&gt;</ept> – Single Valued Reference</source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>ref<ept id="1">&lt;/strong&gt;</ept> – Single Valued Reference</target>
          </trans-unit>
          <trans-unit id="120" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>str<ept id="1">&lt;/strong&gt;</ept> – Single Valued String</source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>str<ept id="1">&lt;/strong&gt;</ept> – Single Valued String</target>
          </trans-unit>
          <trans-unit id="121" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>var<ept id="1">&lt;/strong&gt;</ept> – A variant of (almost) any other type</source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>var<ept id="1">&lt;/strong&gt;</ept> – A variant of (almost) any other type</target>
          </trans-unit>
          <trans-unit id="122" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>void<ept id="1">&lt;/strong&gt;</ept> – doesn’t return a value</source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>void<ept id="1">&lt;/strong&gt;</ept> – doesn’t return a value</target>
          </trans-unit>
          <trans-unit id="123" xml:space="preserve">
            <source>Functions Reference</source>
            <target state="new">Functions Reference</target>
          </trans-unit>
          <trans-unit id="124" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Conversion:<ept id="1">&lt;/strong&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Conversion:<ept id="1">&lt;/strong&gt;</ept></target>
          </trans-unit>
          <trans-unit id="125" xml:space="preserve">
            <source><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>CBool<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="3CapsExtId1">&lt;link&gt;</bpt><bpt id="3CapsExtId2">&lt;linkText&gt;</bpt>CDate<ept id="3CapsExtId2">&lt;/linkText&gt;</ept><bpt id="3CapsExtId3">&lt;title&gt;</bpt><ept id="3CapsExtId3">&lt;/title&gt;</ept><ept id="3CapsExtId1">&lt;/link&gt;</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="5CapsExtId1">&lt;link&gt;</bpt><bpt id="5CapsExtId2">&lt;linkText&gt;</bpt>CGuid<ept id="5CapsExtId2">&lt;/linkText&gt;</ept><bpt id="5CapsExtId3">&lt;title&gt;</bpt><ept id="5CapsExtId3">&lt;/title&gt;</ept><ept id="5CapsExtId1">&lt;/link&gt;</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="7CapsExtId1">&lt;link&gt;</bpt><bpt id="7CapsExtId2">&lt;linkText&gt;</bpt>ConvertFromBase64<ept id="7CapsExtId2">&lt;/linkText&gt;</ept><bpt id="7CapsExtId3">&lt;title&gt;</bpt><ept id="7CapsExtId3">&lt;/title&gt;</ept><ept id="7CapsExtId1">&lt;/link&gt;</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="9CapsExtId1">&lt;link&gt;</bpt><bpt id="9CapsExtId2">&lt;linkText&gt;</bpt>ConvertToBase64<ept id="9CapsExtId2">&lt;/linkText&gt;</ept><bpt id="9CapsExtId3">&lt;title&gt;</bpt><ept id="9CapsExtId3">&lt;/title&gt;</ept><ept id="9CapsExtId1">&lt;/link&gt;</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="11CapsExtId1">&lt;link&gt;</bpt><bpt id="11CapsExtId2">&lt;linkText&gt;</bpt>ConvertFromUTF8Hex<ept id="11CapsExtId2">&lt;/linkText&gt;</ept><bpt id="11CapsExtId3">&lt;title&gt;</bpt><ept id="11CapsExtId3">&lt;/title&gt;</ept><ept id="11CapsExtId1">&lt;/link&gt;</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="13CapsExtId1">&lt;link&gt;</bpt><bpt id="13CapsExtId2">&lt;linkText&gt;</bpt>ConvertToUTF8Hex<ept id="13CapsExtId2">&lt;/linkText&gt;</ept><bpt id="13CapsExtId3">&lt;title&gt;</bpt><ept id="13CapsExtId3">&lt;/title&gt;</ept><ept id="13CapsExtId1">&lt;/link&gt;</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="15CapsExtId1">&lt;link&gt;</bpt><bpt id="15CapsExtId2">&lt;linkText&gt;</bpt>CNum<ept id="15CapsExtId2">&lt;/linkText&gt;</ept><bpt id="15CapsExtId3">&lt;title&gt;</bpt><ept id="15CapsExtId3">&lt;/title&gt;</ept><ept id="15CapsExtId1">&lt;/link&gt;</ept>  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="17CapsExtId1">&lt;link&gt;</bpt><bpt id="17CapsExtId2">&lt;linkText&gt;</bpt>CRef<ept id="17CapsExtId2">&lt;/linkText&gt;</ept><bpt id="17CapsExtId3">&lt;title&gt;</bpt><ept id="17CapsExtId3">&lt;/title&gt;</ept><ept id="17CapsExtId1">&lt;/link&gt;</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="19CapsExtId1">&lt;link&gt;</bpt><bpt id="19CapsExtId2">&lt;linkText&gt;</bpt>CStr<ept id="19CapsExtId2">&lt;/linkText&gt;</ept><bpt id="19CapsExtId3">&lt;title&gt;</bpt><ept id="19CapsExtId3">&lt;/title&gt;</ept><ept id="19CapsExtId1">&lt;/link&gt;</ept>  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="21CapsExtId1">&lt;link&gt;</bpt><bpt id="21CapsExtId2">&lt;linkText&gt;</bpt>StringFromGuid<ept id="21CapsExtId2">&lt;/linkText&gt;</ept><bpt id="21CapsExtId3">&lt;title&gt;</bpt><ept id="21CapsExtId3">&lt;/title&gt;</ept><ept id="21CapsExtId1">&lt;/link&gt;</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="23CapsExtId1">&lt;link&gt;</bpt><bpt id="23CapsExtId2">&lt;linkText&gt;</bpt>StringFromSid<ept id="23CapsExtId2">&lt;/linkText&gt;</ept><bpt id="23CapsExtId3">&lt;title&gt;</bpt><ept id="23CapsExtId3">&lt;/title&gt;</ept><ept id="23CapsExtId1">&lt;/link&gt;</ept></source>
            <target state="new"><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>CBool<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="3CapsExtId1">&lt;link&gt;</bpt><bpt id="3CapsExtId2">&lt;linkText&gt;</bpt>CDate<ept id="3CapsExtId2">&lt;/linkText&gt;</ept><bpt id="3CapsExtId3">&lt;title&gt;</bpt><ept id="3CapsExtId3">&lt;/title&gt;</ept><ept id="3CapsExtId1">&lt;/link&gt;</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="5CapsExtId1">&lt;link&gt;</bpt><bpt id="5CapsExtId2">&lt;linkText&gt;</bpt>CGuid<ept id="5CapsExtId2">&lt;/linkText&gt;</ept><bpt id="5CapsExtId3">&lt;title&gt;</bpt><ept id="5CapsExtId3">&lt;/title&gt;</ept><ept id="5CapsExtId1">&lt;/link&gt;</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="7CapsExtId1">&lt;link&gt;</bpt><bpt id="7CapsExtId2">&lt;linkText&gt;</bpt>ConvertFromBase64<ept id="7CapsExtId2">&lt;/linkText&gt;</ept><bpt id="7CapsExtId3">&lt;title&gt;</bpt><ept id="7CapsExtId3">&lt;/title&gt;</ept><ept id="7CapsExtId1">&lt;/link&gt;</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="9CapsExtId1">&lt;link&gt;</bpt><bpt id="9CapsExtId2">&lt;linkText&gt;</bpt>ConvertToBase64<ept id="9CapsExtId2">&lt;/linkText&gt;</ept><bpt id="9CapsExtId3">&lt;title&gt;</bpt><ept id="9CapsExtId3">&lt;/title&gt;</ept><ept id="9CapsExtId1">&lt;/link&gt;</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="11CapsExtId1">&lt;link&gt;</bpt><bpt id="11CapsExtId2">&lt;linkText&gt;</bpt>ConvertFromUTF8Hex<ept id="11CapsExtId2">&lt;/linkText&gt;</ept><bpt id="11CapsExtId3">&lt;title&gt;</bpt><ept id="11CapsExtId3">&lt;/title&gt;</ept><ept id="11CapsExtId1">&lt;/link&gt;</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="13CapsExtId1">&lt;link&gt;</bpt><bpt id="13CapsExtId2">&lt;linkText&gt;</bpt>ConvertToUTF8Hex<ept id="13CapsExtId2">&lt;/linkText&gt;</ept><bpt id="13CapsExtId3">&lt;title&gt;</bpt><ept id="13CapsExtId3">&lt;/title&gt;</ept><ept id="13CapsExtId1">&lt;/link&gt;</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="15CapsExtId1">&lt;link&gt;</bpt><bpt id="15CapsExtId2">&lt;linkText&gt;</bpt>CNum<ept id="15CapsExtId2">&lt;/linkText&gt;</ept><bpt id="15CapsExtId3">&lt;title&gt;</bpt><ept id="15CapsExtId3">&lt;/title&gt;</ept><ept id="15CapsExtId1">&lt;/link&gt;</ept>  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="17CapsExtId1">&lt;link&gt;</bpt><bpt id="17CapsExtId2">&lt;linkText&gt;</bpt>CRef<ept id="17CapsExtId2">&lt;/linkText&gt;</ept><bpt id="17CapsExtId3">&lt;title&gt;</bpt><ept id="17CapsExtId3">&lt;/title&gt;</ept><ept id="17CapsExtId1">&lt;/link&gt;</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="19CapsExtId1">&lt;link&gt;</bpt><bpt id="19CapsExtId2">&lt;linkText&gt;</bpt>CStr<ept id="19CapsExtId2">&lt;/linkText&gt;</ept><bpt id="19CapsExtId3">&lt;title&gt;</bpt><ept id="19CapsExtId3">&lt;/title&gt;</ept><ept id="19CapsExtId1">&lt;/link&gt;</ept>  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="21CapsExtId1">&lt;link&gt;</bpt><bpt id="21CapsExtId2">&lt;linkText&gt;</bpt>StringFromGuid<ept id="21CapsExtId2">&lt;/linkText&gt;</ept><bpt id="21CapsExtId3">&lt;title&gt;</bpt><ept id="21CapsExtId3">&lt;/title&gt;</ept><ept id="21CapsExtId1">&lt;/link&gt;</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="23CapsExtId1">&lt;link&gt;</bpt><bpt id="23CapsExtId2">&lt;linkText&gt;</bpt>StringFromSid<ept id="23CapsExtId2">&lt;/linkText&gt;</ept><bpt id="23CapsExtId3">&lt;title&gt;</bpt><ept id="23CapsExtId3">&lt;/title&gt;</ept><ept id="23CapsExtId1">&lt;/link&gt;</ept></target>
          </trans-unit>
          <trans-unit id="126" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Date / Time:<ept id="1">&lt;/strong&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Date / Time:<ept id="1">&lt;/strong&gt;</ept></target>
          </trans-unit>
          <trans-unit id="127" xml:space="preserve">
            <source><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>DateAdd<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="3CapsExtId1">&lt;link&gt;</bpt><bpt id="3CapsExtId2">&lt;linkText&gt;</bpt>DateFromNum<ept id="3CapsExtId2">&lt;/linkText&gt;</ept><bpt id="3CapsExtId3">&lt;title&gt;</bpt><ept id="3CapsExtId3">&lt;/title&gt;</ept><ept id="3CapsExtId1">&lt;/link&gt;</ept>  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="5CapsExtId1">&lt;link&gt;</bpt><bpt id="5CapsExtId2">&lt;linkText&gt;</bpt>FormatDateTime<ept id="5CapsExtId2">&lt;/linkText&gt;</ept><bpt id="5CapsExtId3">&lt;title&gt;</bpt><ept id="5CapsExtId3">&lt;/title&gt;</ept><ept id="5CapsExtId1">&lt;/link&gt;</ept>  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="7CapsExtId1">&lt;link&gt;</bpt><bpt id="7CapsExtId2">&lt;linkText&gt;</bpt>Now<ept id="7CapsExtId2">&lt;/linkText&gt;</ept><bpt id="7CapsExtId3">&lt;title&gt;</bpt><ept id="7CapsExtId3">&lt;/title&gt;</ept><ept id="7CapsExtId1">&lt;/link&gt;</ept>  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="9CapsExtId1">&lt;link&gt;</bpt><bpt id="9CapsExtId2">&lt;linkText&gt;</bpt>NumFromDate<ept id="9CapsExtId2">&lt;/linkText&gt;</ept><bpt id="9CapsExtId3">&lt;title&gt;</bpt><ept id="9CapsExtId3">&lt;/title&gt;</ept><ept id="9CapsExtId1">&lt;/link&gt;</ept></source>
            <target state="new"><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>DateAdd<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="3CapsExtId1">&lt;link&gt;</bpt><bpt id="3CapsExtId2">&lt;linkText&gt;</bpt>DateFromNum<ept id="3CapsExtId2">&lt;/linkText&gt;</ept><bpt id="3CapsExtId3">&lt;title&gt;</bpt><ept id="3CapsExtId3">&lt;/title&gt;</ept><ept id="3CapsExtId1">&lt;/link&gt;</ept>  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="5CapsExtId1">&lt;link&gt;</bpt><bpt id="5CapsExtId2">&lt;linkText&gt;</bpt>FormatDateTime<ept id="5CapsExtId2">&lt;/linkText&gt;</ept><bpt id="5CapsExtId3">&lt;title&gt;</bpt><ept id="5CapsExtId3">&lt;/title&gt;</ept><ept id="5CapsExtId1">&lt;/link&gt;</ept>  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="7CapsExtId1">&lt;link&gt;</bpt><bpt id="7CapsExtId2">&lt;linkText&gt;</bpt>Now<ept id="7CapsExtId2">&lt;/linkText&gt;</ept><bpt id="7CapsExtId3">&lt;title&gt;</bpt><ept id="7CapsExtId3">&lt;/title&gt;</ept><ept id="7CapsExtId1">&lt;/link&gt;</ept>  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="9CapsExtId1">&lt;link&gt;</bpt><bpt id="9CapsExtId2">&lt;linkText&gt;</bpt>NumFromDate<ept id="9CapsExtId2">&lt;/linkText&gt;</ept><bpt id="9CapsExtId3">&lt;title&gt;</bpt><ept id="9CapsExtId3">&lt;/title&gt;</ept><ept id="9CapsExtId1">&lt;/link&gt;</ept></target>
          </trans-unit>
          <trans-unit id="128" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Directory<ept id="1">&lt;/strong&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Directory<ept id="1">&lt;/strong&gt;</ept></target>
          </trans-unit>
          <trans-unit id="129" xml:space="preserve">
            <source><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>DNComponent<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept>  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="3CapsExtId1">&lt;link&gt;</bpt><bpt id="3CapsExtId2">&lt;linkText&gt;</bpt>DNComponentRev<ept id="3CapsExtId2">&lt;/linkText&gt;</ept><bpt id="3CapsExtId3">&lt;title&gt;</bpt><ept id="3CapsExtId3">&lt;/title&gt;</ept><ept id="3CapsExtId1">&lt;/link&gt;</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="5CapsExtId1">&lt;link&gt;</bpt><bpt id="5CapsExtId2">&lt;linkText&gt;</bpt>EscapeDNComponent<ept id="5CapsExtId2">&lt;/linkText&gt;</ept><bpt id="5CapsExtId3">&lt;title&gt;</bpt><ept id="5CapsExtId3">&lt;/title&gt;</ept><ept id="5CapsExtId1">&lt;/link&gt;</ept></source>
            <target state="new"><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>DNComponent<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept>  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="3CapsExtId1">&lt;link&gt;</bpt><bpt id="3CapsExtId2">&lt;linkText&gt;</bpt>DNComponentRev<ept id="3CapsExtId2">&lt;/linkText&gt;</ept><bpt id="3CapsExtId3">&lt;title&gt;</bpt><ept id="3CapsExtId3">&lt;/title&gt;</ept><ept id="3CapsExtId1">&lt;/link&gt;</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="5CapsExtId1">&lt;link&gt;</bpt><bpt id="5CapsExtId2">&lt;linkText&gt;</bpt>EscapeDNComponent<ept id="5CapsExtId2">&lt;/linkText&gt;</ept><bpt id="5CapsExtId3">&lt;title&gt;</bpt><ept id="5CapsExtId3">&lt;/title&gt;</ept><ept id="5CapsExtId1">&lt;/link&gt;</ept></target>
          </trans-unit>
          <trans-unit id="130" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Insprection:<ept id="1">&lt;/strong&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Insprection:<ept id="1">&lt;/strong&gt;</ept></target>
          </trans-unit>
          <trans-unit id="131" xml:space="preserve">
            <source><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>IsBitSet<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept>  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="3CapsExtId1">&lt;link&gt;</bpt><bpt id="3CapsExtId2">&lt;linkText&gt;</bpt>IsDate<ept id="3CapsExtId2">&lt;/linkText&gt;</ept><bpt id="3CapsExtId3">&lt;title&gt;</bpt><ept id="3CapsExtId3">&lt;/title&gt;</ept><ept id="3CapsExtId1">&lt;/link&gt;</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="5CapsExtId1">&lt;link&gt;</bpt><bpt id="5CapsExtId2">&lt;linkText&gt;</bpt>IsEmpty<ept id="5CapsExtId2">&lt;/linkText&gt;</ept><bpt id="5CapsExtId3">&lt;title&gt;</bpt><ept id="5CapsExtId3">&lt;/title&gt;</ept><ept id="5CapsExtId1">&lt;/link&gt;</ept></source>
            <target state="new"><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>IsBitSet<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept>  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="3CapsExtId1">&lt;link&gt;</bpt><bpt id="3CapsExtId2">&lt;linkText&gt;</bpt>IsDate<ept id="3CapsExtId2">&lt;/linkText&gt;</ept><bpt id="3CapsExtId3">&lt;title&gt;</bpt><ept id="3CapsExtId3">&lt;/title&gt;</ept><ept id="3CapsExtId1">&lt;/link&gt;</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="5CapsExtId1">&lt;link&gt;</bpt><bpt id="5CapsExtId2">&lt;linkText&gt;</bpt>IsEmpty<ept id="5CapsExtId2">&lt;/linkText&gt;</ept><bpt id="5CapsExtId3">&lt;title&gt;</bpt><ept id="5CapsExtId3">&lt;/title&gt;</ept><ept id="5CapsExtId1">&lt;/link&gt;</ept></target>
          </trans-unit>
          <trans-unit id="132" xml:space="preserve">
            <source>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>IsGuid<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="4CapsExtId1">&lt;link&gt;</bpt><bpt id="4CapsExtId2">&lt;linkText&gt;</bpt>IsNull<ept id="4CapsExtId2">&lt;/linkText&gt;</ept><bpt id="4CapsExtId3">&lt;title&gt;</bpt><ept id="4CapsExtId3">&lt;/title&gt;</ept><ept id="4CapsExtId1">&lt;/link&gt;</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="6CapsExtId1">&lt;link&gt;</bpt><bpt id="6CapsExtId2">&lt;linkText&gt;</bpt>IsNullOrEmpty<ept id="6CapsExtId2">&lt;/linkText&gt;</ept><bpt id="6CapsExtId3">&lt;title&gt;</bpt><ept id="6CapsExtId3">&lt;/title&gt;</ept><ept id="6CapsExtId1">&lt;/link&gt;</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="8CapsExtId1">&lt;link&gt;</bpt><bpt id="8CapsExtId2">&lt;linkText&gt;</bpt>IsNumeric<ept id="8CapsExtId2">&lt;/linkText&gt;</ept><bpt id="8CapsExtId3">&lt;title&gt;</bpt><ept id="8CapsExtId3">&lt;/title&gt;</ept><ept id="8CapsExtId1">&lt;/link&gt;</ept>  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="10CapsExtId1">&lt;link&gt;</bpt><bpt id="10CapsExtId2">&lt;linkText&gt;</bpt>IsPresent<ept id="10CapsExtId2">&lt;/linkText&gt;</ept><bpt id="10CapsExtId3">&lt;title&gt;</bpt><ept id="10CapsExtId3">&lt;/title&gt;</ept><ept id="10CapsExtId1">&lt;/link&gt;</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="12CapsExtId1">&lt;link&gt;</bpt><bpt id="12CapsExtId2">&lt;linkText&gt;</bpt>IsString<ept id="12CapsExtId2">&lt;/linkText&gt;</ept><bpt id="12CapsExtId3">&lt;title&gt;</bpt><ept id="12CapsExtId3">&lt;/title&gt;</ept><ept id="12CapsExtId1">&lt;/link&gt;</ept></source>
            <target state="new">&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>IsGuid<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="4CapsExtId1">&lt;link&gt;</bpt><bpt id="4CapsExtId2">&lt;linkText&gt;</bpt>IsNull<ept id="4CapsExtId2">&lt;/linkText&gt;</ept><bpt id="4CapsExtId3">&lt;title&gt;</bpt><ept id="4CapsExtId3">&lt;/title&gt;</ept><ept id="4CapsExtId1">&lt;/link&gt;</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="6CapsExtId1">&lt;link&gt;</bpt><bpt id="6CapsExtId2">&lt;linkText&gt;</bpt>IsNullOrEmpty<ept id="6CapsExtId2">&lt;/linkText&gt;</ept><bpt id="6CapsExtId3">&lt;title&gt;</bpt><ept id="6CapsExtId3">&lt;/title&gt;</ept><ept id="6CapsExtId1">&lt;/link&gt;</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="8CapsExtId1">&lt;link&gt;</bpt><bpt id="8CapsExtId2">&lt;linkText&gt;</bpt>IsNumeric<ept id="8CapsExtId2">&lt;/linkText&gt;</ept><bpt id="8CapsExtId3">&lt;title&gt;</bpt><ept id="8CapsExtId3">&lt;/title&gt;</ept><ept id="8CapsExtId1">&lt;/link&gt;</ept>  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="10CapsExtId1">&lt;link&gt;</bpt><bpt id="10CapsExtId2">&lt;linkText&gt;</bpt>IsPresent<ept id="10CapsExtId2">&lt;/linkText&gt;</ept><bpt id="10CapsExtId3">&lt;title&gt;</bpt><ept id="10CapsExtId3">&lt;/title&gt;</ept><ept id="10CapsExtId1">&lt;/link&gt;</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="12CapsExtId1">&lt;link&gt;</bpt><bpt id="12CapsExtId2">&lt;linkText&gt;</bpt>IsString<ept id="12CapsExtId2">&lt;/linkText&gt;</ept><bpt id="12CapsExtId3">&lt;title&gt;</bpt><ept id="12CapsExtId3">&lt;/title&gt;</ept><ept id="12CapsExtId1">&lt;/link&gt;</ept></target>
          </trans-unit>
          <trans-unit id="133" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Math:<ept id="1">&lt;/strong&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Math:<ept id="1">&lt;/strong&gt;</ept></target>
          </trans-unit>
          <trans-unit id="134" xml:space="preserve">
            <source><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>BitAnd<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="3CapsExtId1">&lt;link&gt;</bpt><bpt id="3CapsExtId2">&lt;linkText&gt;</bpt>BitOr<ept id="3CapsExtId2">&lt;/linkText&gt;</ept><bpt id="3CapsExtId3">&lt;title&gt;</bpt><ept id="3CapsExtId3">&lt;/title&gt;</ept><ept id="3CapsExtId1">&lt;/link&gt;</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="5CapsExtId1">&lt;link&gt;</bpt><bpt id="5CapsExtId2">&lt;linkText&gt;</bpt>RandomNum<ept id="5CapsExtId2">&lt;/linkText&gt;</ept><bpt id="5CapsExtId3">&lt;title&gt;</bpt><ept id="5CapsExtId3">&lt;/title&gt;</ept><ept id="5CapsExtId1">&lt;/link&gt;</ept></source>
            <target state="new"><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>BitAnd<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="3CapsExtId1">&lt;link&gt;</bpt><bpt id="3CapsExtId2">&lt;linkText&gt;</bpt>BitOr<ept id="3CapsExtId2">&lt;/linkText&gt;</ept><bpt id="3CapsExtId3">&lt;title&gt;</bpt><ept id="3CapsExtId3">&lt;/title&gt;</ept><ept id="3CapsExtId1">&lt;/link&gt;</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="5CapsExtId1">&lt;link&gt;</bpt><bpt id="5CapsExtId2">&lt;linkText&gt;</bpt>RandomNum<ept id="5CapsExtId2">&lt;/linkText&gt;</ept><bpt id="5CapsExtId3">&lt;title&gt;</bpt><ept id="5CapsExtId3">&lt;/title&gt;</ept><ept id="5CapsExtId1">&lt;/link&gt;</ept></target>
          </trans-unit>
          <trans-unit id="135" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Multi-valued<ept id="1">&lt;/strong&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Multi-valued<ept id="1">&lt;/strong&gt;</ept></target>
          </trans-unit>
          <trans-unit id="136" xml:space="preserve">
            <source><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Contains<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="3CapsExtId1">&lt;link&gt;</bpt><bpt id="3CapsExtId2">&lt;linkText&gt;</bpt>Count<ept id="3CapsExtId2">&lt;/linkText&gt;</ept><bpt id="3CapsExtId3">&lt;title&gt;</bpt><ept id="3CapsExtId3">&lt;/title&gt;</ept><ept id="3CapsExtId1">&lt;/link&gt;</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="5CapsExtId1">&lt;link&gt;</bpt><bpt id="5CapsExtId2">&lt;linkText&gt;</bpt>Item<ept id="5CapsExtId2">&lt;/linkText&gt;</ept><bpt id="5CapsExtId3">&lt;title&gt;</bpt><ept id="5CapsExtId3">&lt;/title&gt;</ept><ept id="5CapsExtId1">&lt;/link&gt;</ept>   &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="7CapsExtId1">&lt;link&gt;</bpt><bpt id="7CapsExtId2">&lt;linkText&gt;</bpt>ItemOrNull<ept id="7CapsExtId2">&lt;/linkText&gt;</ept><bpt id="7CapsExtId3">&lt;title&gt;</bpt><ept id="7CapsExtId3">&lt;/title&gt;</ept><ept id="7CapsExtId1">&lt;/link&gt;</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="9CapsExtId1">&lt;link&gt;</bpt><bpt id="9CapsExtId2">&lt;linkText&gt;</bpt>Join<ept id="9CapsExtId2">&lt;/linkText&gt;</ept><bpt id="9CapsExtId3">&lt;title&gt;</bpt><ept id="9CapsExtId3">&lt;/title&gt;</ept><ept id="9CapsExtId1">&lt;/link&gt;</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="11CapsExtId1">&lt;link&gt;</bpt><bpt id="11CapsExtId2">&lt;linkText&gt;</bpt>RemoveDuplicates<ept id="11CapsExtId2">&lt;/linkText&gt;</ept><bpt id="11CapsExtId3">&lt;title&gt;</bpt><ept id="11CapsExtId3">&lt;/title&gt;</ept><ept id="11CapsExtId1">&lt;/link&gt;</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="13CapsExtId1">&lt;link&gt;</bpt><bpt id="13CapsExtId2">&lt;linkText&gt;</bpt>Split<ept id="13CapsExtId2">&lt;/linkText&gt;</ept><bpt id="13CapsExtId3">&lt;title&gt;</bpt><ept id="13CapsExtId3">&lt;/title&gt;</ept><ept id="13CapsExtId1">&lt;/link&gt;</ept></source>
            <target state="new"><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Contains<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="3CapsExtId1">&lt;link&gt;</bpt><bpt id="3CapsExtId2">&lt;linkText&gt;</bpt>Count<ept id="3CapsExtId2">&lt;/linkText&gt;</ept><bpt id="3CapsExtId3">&lt;title&gt;</bpt><ept id="3CapsExtId3">&lt;/title&gt;</ept><ept id="3CapsExtId1">&lt;/link&gt;</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="5CapsExtId1">&lt;link&gt;</bpt><bpt id="5CapsExtId2">&lt;linkText&gt;</bpt>Item<ept id="5CapsExtId2">&lt;/linkText&gt;</ept><bpt id="5CapsExtId3">&lt;title&gt;</bpt><ept id="5CapsExtId3">&lt;/title&gt;</ept><ept id="5CapsExtId1">&lt;/link&gt;</ept>   &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="7CapsExtId1">&lt;link&gt;</bpt><bpt id="7CapsExtId2">&lt;linkText&gt;</bpt>ItemOrNull<ept id="7CapsExtId2">&lt;/linkText&gt;</ept><bpt id="7CapsExtId3">&lt;title&gt;</bpt><ept id="7CapsExtId3">&lt;/title&gt;</ept><ept id="7CapsExtId1">&lt;/link&gt;</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="9CapsExtId1">&lt;link&gt;</bpt><bpt id="9CapsExtId2">&lt;linkText&gt;</bpt>Join<ept id="9CapsExtId2">&lt;/linkText&gt;</ept><bpt id="9CapsExtId3">&lt;title&gt;</bpt><ept id="9CapsExtId3">&lt;/title&gt;</ept><ept id="9CapsExtId1">&lt;/link&gt;</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="11CapsExtId1">&lt;link&gt;</bpt><bpt id="11CapsExtId2">&lt;linkText&gt;</bpt>RemoveDuplicates<ept id="11CapsExtId2">&lt;/linkText&gt;</ept><bpt id="11CapsExtId3">&lt;title&gt;</bpt><ept id="11CapsExtId3">&lt;/title&gt;</ept><ept id="11CapsExtId1">&lt;/link&gt;</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="13CapsExtId1">&lt;link&gt;</bpt><bpt id="13CapsExtId2">&lt;linkText&gt;</bpt>Split<ept id="13CapsExtId2">&lt;/linkText&gt;</ept><bpt id="13CapsExtId3">&lt;title&gt;</bpt><ept id="13CapsExtId3">&lt;/title&gt;</ept><ept id="13CapsExtId1">&lt;/link&gt;</ept></target>
          </trans-unit>
          <trans-unit id="137" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Program Flow:<ept id="1">&lt;/strong&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Program Flow:<ept id="1">&lt;/strong&gt;</ept></target>
          </trans-unit>
          <trans-unit id="138" xml:space="preserve">
            <source><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Error<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="3CapsExtId1">&lt;link&gt;</bpt><bpt id="3CapsExtId2">&lt;linkText&gt;</bpt>IIF<ept id="3CapsExtId2">&lt;/linkText&gt;</ept><bpt id="3CapsExtId3">&lt;title&gt;</bpt><ept id="3CapsExtId3">&lt;/title&gt;</ept><ept id="3CapsExtId1">&lt;/link&gt;</ept>  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="5CapsExtId1">&lt;link&gt;</bpt><bpt id="5CapsExtId2">&lt;linkText&gt;</bpt>Switch<ept id="5CapsExtId2">&lt;/linkText&gt;</ept><bpt id="5CapsExtId3">&lt;title&gt;</bpt><ept id="5CapsExtId3">&lt;/title&gt;</ept><ept id="5CapsExtId1">&lt;/link&gt;</ept></source>
            <target state="new"><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Error<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="3CapsExtId1">&lt;link&gt;</bpt><bpt id="3CapsExtId2">&lt;linkText&gt;</bpt>IIF<ept id="3CapsExtId2">&lt;/linkText&gt;</ept><bpt id="3CapsExtId3">&lt;title&gt;</bpt><ept id="3CapsExtId3">&lt;/title&gt;</ept><ept id="3CapsExtId1">&lt;/link&gt;</ept>  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="5CapsExtId1">&lt;link&gt;</bpt><bpt id="5CapsExtId2">&lt;linkText&gt;</bpt>Switch<ept id="5CapsExtId2">&lt;/linkText&gt;</ept><bpt id="5CapsExtId3">&lt;title&gt;</bpt><ept id="5CapsExtId3">&lt;/title&gt;</ept><ept id="5CapsExtId1">&lt;/link&gt;</ept></target>
          </trans-unit>
          <trans-unit id="139" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Text<ept id="1">&lt;/strong&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Text<ept id="1">&lt;/strong&gt;</ept></target>
          </trans-unit>
          <trans-unit id="140" xml:space="preserve">
            <source><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>GUID<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="3CapsExtId1">&lt;link&gt;</bpt><bpt id="3CapsExtId2">&lt;linkText&gt;</bpt>InStr<ept id="3CapsExtId2">&lt;/linkText&gt;</ept><bpt id="3CapsExtId3">&lt;title&gt;</bpt><ept id="3CapsExtId3">&lt;/title&gt;</ept><ept id="3CapsExtId1">&lt;/link&gt;</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="5CapsExtId1">&lt;link&gt;</bpt><bpt id="5CapsExtId2">&lt;linkText&gt;</bpt>InStrRev<ept id="5CapsExtId2">&lt;/linkText&gt;</ept><bpt id="5CapsExtId3">&lt;title&gt;</bpt><ept id="5CapsExtId3">&lt;/title&gt;</ept><ept id="5CapsExtId1">&lt;/link&gt;</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="7CapsExtId1">&lt;link&gt;</bpt><bpt id="7CapsExtId2">&lt;linkText&gt;</bpt>LCase<ept id="7CapsExtId2">&lt;/linkText&gt;</ept><bpt id="7CapsExtId3">&lt;title&gt;</bpt><ept id="7CapsExtId3">&lt;/title&gt;</ept><ept id="7CapsExtId1">&lt;/link&gt;</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="9CapsExtId1">&lt;link&gt;</bpt><bpt id="9CapsExtId2">&lt;linkText&gt;</bpt>Left<ept id="9CapsExtId2">&lt;/linkText&gt;</ept><bpt id="9CapsExtId3">&lt;title&gt;</bpt><ept id="9CapsExtId3">&lt;/title&gt;</ept><ept id="9CapsExtId1">&lt;/link&gt;</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="11CapsExtId1">&lt;link&gt;</bpt><bpt id="11CapsExtId2">&lt;linkText&gt;</bpt>Len<ept id="11CapsExtId2">&lt;/linkText&gt;</ept><bpt id="11CapsExtId3">&lt;title&gt;</bpt><ept id="11CapsExtId3">&lt;/title&gt;</ept><ept id="11CapsExtId1">&lt;/link&gt;</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="13CapsExtId1">&lt;link&gt;</bpt><bpt id="13CapsExtId2">&lt;linkText&gt;</bpt>LTrim<ept id="13CapsExtId2">&lt;/linkText&gt;</ept><bpt id="13CapsExtId3">&lt;title&gt;</bpt><ept id="13CapsExtId3">&lt;/title&gt;</ept><ept id="13CapsExtId1">&lt;/link&gt;</ept>  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="15CapsExtId1">&lt;link&gt;</bpt><bpt id="15CapsExtId2">&lt;linkText&gt;</bpt>Mid<ept id="15CapsExtId2">&lt;/linkText&gt;</ept><bpt id="15CapsExtId3">&lt;title&gt;</bpt><ept id="15CapsExtId3">&lt;/title&gt;</ept><ept id="15CapsExtId1">&lt;/link&gt;</ept>  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="17CapsExtId1">&lt;link&gt;</bpt><bpt id="17CapsExtId2">&lt;linkText&gt;</bpt>PadLeft<ept id="17CapsExtId2">&lt;/linkText&gt;</ept><bpt id="17CapsExtId3">&lt;title&gt;</bpt><ept id="17CapsExtId3">&lt;/title&gt;</ept><ept id="17CapsExtId1">&lt;/link&gt;</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="19CapsExtId1">&lt;link&gt;</bpt><bpt id="19CapsExtId2">&lt;linkText&gt;</bpt>PadRight<ept id="19CapsExtId2">&lt;/linkText&gt;</ept><bpt id="19CapsExtId3">&lt;title&gt;</bpt><ept id="19CapsExtId3">&lt;/title&gt;</ept><ept id="19CapsExtId1">&lt;/link&gt;</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="21CapsExtId1">&lt;link&gt;</bpt><bpt id="21CapsExtId2">&lt;linkText&gt;</bpt>PCase<ept id="21CapsExtId2">&lt;/linkText&gt;</ept><bpt id="21CapsExtId3">&lt;title&gt;</bpt><ept id="21CapsExtId3">&lt;/title&gt;</ept><ept id="21CapsExtId1">&lt;/link&gt;</ept>   &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="23CapsExtId1">&lt;link&gt;</bpt><bpt id="23CapsExtId2">&lt;linkText&gt;</bpt>Replace<ept id="23CapsExtId2">&lt;/linkText&gt;</ept><bpt id="23CapsExtId3">&lt;title&gt;</bpt><ept id="23CapsExtId3">&lt;/title&gt;</ept><ept id="23CapsExtId1">&lt;/link&gt;</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="25CapsExtId1">&lt;link&gt;</bpt><bpt id="25CapsExtId2">&lt;linkText&gt;</bpt>ReplaceChars<ept id="25CapsExtId2">&lt;/linkText&gt;</ept><bpt id="25CapsExtId3">&lt;title&gt;</bpt><ept id="25CapsExtId3">&lt;/title&gt;</ept><ept id="25CapsExtId1">&lt;/link&gt;</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="27CapsExtId1">&lt;link&gt;</bpt><bpt id="27CapsExtId2">&lt;linkText&gt;</bpt>Right<ept id="27CapsExtId2">&lt;/linkText&gt;</ept><bpt id="27CapsExtId3">&lt;title&gt;</bpt><ept id="27CapsExtId3">&lt;/title&gt;</ept><ept id="27CapsExtId1">&lt;/link&gt;</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="29CapsExtId1">&lt;link&gt;</bpt><bpt id="29CapsExtId2">&lt;linkText&gt;</bpt>RTrim<ept id="29CapsExtId2">&lt;/linkText&gt;</ept><bpt id="29CapsExtId3">&lt;title&gt;</bpt><ept id="29CapsExtId3">&lt;/title&gt;</ept><ept id="29CapsExtId1">&lt;/link&gt;</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="31CapsExtId1">&lt;link&gt;</bpt><bpt id="31CapsExtId2">&lt;linkText&gt;</bpt>Trim<ept id="31CapsExtId2">&lt;/linkText&gt;</ept><bpt id="31CapsExtId3">&lt;title&gt;</bpt><ept id="31CapsExtId3">&lt;/title&gt;</ept><ept id="31CapsExtId1">&lt;/link&gt;</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="33CapsExtId1">&lt;link&gt;</bpt><bpt id="33CapsExtId2">&lt;linkText&gt;</bpt>UCase<ept id="33CapsExtId2">&lt;/linkText&gt;</ept><bpt id="33CapsExtId3">&lt;title&gt;</bpt><ept id="33CapsExtId3">&lt;/title&gt;</ept><ept id="33CapsExtId1">&lt;/link&gt;</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="35CapsExtId1">&lt;link&gt;</bpt><bpt id="35CapsExtId2">&lt;linkText&gt;</bpt>Word<ept id="35CapsExtId2">&lt;/linkText&gt;</ept><bpt id="35CapsExtId3">&lt;title&gt;</bpt><ept id="35CapsExtId3">&lt;/title&gt;</ept><ept id="35CapsExtId1">&lt;/link&gt;</ept></source>
            <target state="new"><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>GUID<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="3CapsExtId1">&lt;link&gt;</bpt><bpt id="3CapsExtId2">&lt;linkText&gt;</bpt>InStr<ept id="3CapsExtId2">&lt;/linkText&gt;</ept><bpt id="3CapsExtId3">&lt;title&gt;</bpt><ept id="3CapsExtId3">&lt;/title&gt;</ept><ept id="3CapsExtId1">&lt;/link&gt;</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="5CapsExtId1">&lt;link&gt;</bpt><bpt id="5CapsExtId2">&lt;linkText&gt;</bpt>InStrRev<ept id="5CapsExtId2">&lt;/linkText&gt;</ept><bpt id="5CapsExtId3">&lt;title&gt;</bpt><ept id="5CapsExtId3">&lt;/title&gt;</ept><ept id="5CapsExtId1">&lt;/link&gt;</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="7CapsExtId1">&lt;link&gt;</bpt><bpt id="7CapsExtId2">&lt;linkText&gt;</bpt>LCase<ept id="7CapsExtId2">&lt;/linkText&gt;</ept><bpt id="7CapsExtId3">&lt;title&gt;</bpt><ept id="7CapsExtId3">&lt;/title&gt;</ept><ept id="7CapsExtId1">&lt;/link&gt;</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="9CapsExtId1">&lt;link&gt;</bpt><bpt id="9CapsExtId2">&lt;linkText&gt;</bpt>Left<ept id="9CapsExtId2">&lt;/linkText&gt;</ept><bpt id="9CapsExtId3">&lt;title&gt;</bpt><ept id="9CapsExtId3">&lt;/title&gt;</ept><ept id="9CapsExtId1">&lt;/link&gt;</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="11CapsExtId1">&lt;link&gt;</bpt><bpt id="11CapsExtId2">&lt;linkText&gt;</bpt>Len<ept id="11CapsExtId2">&lt;/linkText&gt;</ept><bpt id="11CapsExtId3">&lt;title&gt;</bpt><ept id="11CapsExtId3">&lt;/title&gt;</ept><ept id="11CapsExtId1">&lt;/link&gt;</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="13CapsExtId1">&lt;link&gt;</bpt><bpt id="13CapsExtId2">&lt;linkText&gt;</bpt>LTrim<ept id="13CapsExtId2">&lt;/linkText&gt;</ept><bpt id="13CapsExtId3">&lt;title&gt;</bpt><ept id="13CapsExtId3">&lt;/title&gt;</ept><ept id="13CapsExtId1">&lt;/link&gt;</ept>  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="15CapsExtId1">&lt;link&gt;</bpt><bpt id="15CapsExtId2">&lt;linkText&gt;</bpt>Mid<ept id="15CapsExtId2">&lt;/linkText&gt;</ept><bpt id="15CapsExtId3">&lt;title&gt;</bpt><ept id="15CapsExtId3">&lt;/title&gt;</ept><ept id="15CapsExtId1">&lt;/link&gt;</ept>  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="17CapsExtId1">&lt;link&gt;</bpt><bpt id="17CapsExtId2">&lt;linkText&gt;</bpt>PadLeft<ept id="17CapsExtId2">&lt;/linkText&gt;</ept><bpt id="17CapsExtId3">&lt;title&gt;</bpt><ept id="17CapsExtId3">&lt;/title&gt;</ept><ept id="17CapsExtId1">&lt;/link&gt;</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="19CapsExtId1">&lt;link&gt;</bpt><bpt id="19CapsExtId2">&lt;linkText&gt;</bpt>PadRight<ept id="19CapsExtId2">&lt;/linkText&gt;</ept><bpt id="19CapsExtId3">&lt;title&gt;</bpt><ept id="19CapsExtId3">&lt;/title&gt;</ept><ept id="19CapsExtId1">&lt;/link&gt;</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="21CapsExtId1">&lt;link&gt;</bpt><bpt id="21CapsExtId2">&lt;linkText&gt;</bpt>PCase<ept id="21CapsExtId2">&lt;/linkText&gt;</ept><bpt id="21CapsExtId3">&lt;title&gt;</bpt><ept id="21CapsExtId3">&lt;/title&gt;</ept><ept id="21CapsExtId1">&lt;/link&gt;</ept>   &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="23CapsExtId1">&lt;link&gt;</bpt><bpt id="23CapsExtId2">&lt;linkText&gt;</bpt>Replace<ept id="23CapsExtId2">&lt;/linkText&gt;</ept><bpt id="23CapsExtId3">&lt;title&gt;</bpt><ept id="23CapsExtId3">&lt;/title&gt;</ept><ept id="23CapsExtId1">&lt;/link&gt;</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="25CapsExtId1">&lt;link&gt;</bpt><bpt id="25CapsExtId2">&lt;linkText&gt;</bpt>ReplaceChars<ept id="25CapsExtId2">&lt;/linkText&gt;</ept><bpt id="25CapsExtId3">&lt;title&gt;</bpt><ept id="25CapsExtId3">&lt;/title&gt;</ept><ept id="25CapsExtId1">&lt;/link&gt;</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="27CapsExtId1">&lt;link&gt;</bpt><bpt id="27CapsExtId2">&lt;linkText&gt;</bpt>Right<ept id="27CapsExtId2">&lt;/linkText&gt;</ept><bpt id="27CapsExtId3">&lt;title&gt;</bpt><ept id="27CapsExtId3">&lt;/title&gt;</ept><ept id="27CapsExtId1">&lt;/link&gt;</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="29CapsExtId1">&lt;link&gt;</bpt><bpt id="29CapsExtId2">&lt;linkText&gt;</bpt>RTrim<ept id="29CapsExtId2">&lt;/linkText&gt;</ept><bpt id="29CapsExtId3">&lt;title&gt;</bpt><ept id="29CapsExtId3">&lt;/title&gt;</ept><ept id="29CapsExtId1">&lt;/link&gt;</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="31CapsExtId1">&lt;link&gt;</bpt><bpt id="31CapsExtId2">&lt;linkText&gt;</bpt>Trim<ept id="31CapsExtId2">&lt;/linkText&gt;</ept><bpt id="31CapsExtId3">&lt;title&gt;</bpt><ept id="31CapsExtId3">&lt;/title&gt;</ept><ept id="31CapsExtId1">&lt;/link&gt;</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="33CapsExtId1">&lt;link&gt;</bpt><bpt id="33CapsExtId2">&lt;linkText&gt;</bpt>UCase<ept id="33CapsExtId2">&lt;/linkText&gt;</ept><bpt id="33CapsExtId3">&lt;title&gt;</bpt><ept id="33CapsExtId3">&lt;/title&gt;</ept><ept id="33CapsExtId1">&lt;/link&gt;</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id="35CapsExtId1">&lt;link&gt;</bpt><bpt id="35CapsExtId2">&lt;linkText&gt;</bpt>Word<ept id="35CapsExtId2">&lt;/linkText&gt;</ept><bpt id="35CapsExtId3">&lt;title&gt;</bpt><ept id="35CapsExtId3">&lt;/title&gt;</ept><ept id="35CapsExtId1">&lt;/link&gt;</ept></target>
          </trans-unit>
          <trans-unit id="141" xml:space="preserve">
            <source>BitAnd</source>
            <target state="new">BitAnd</target>
          </trans-unit>
          <trans-unit id="142" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Description:<ept id="1">&lt;/strong&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Description:<ept id="1">&lt;/strong&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="143" xml:space="preserve">
            <source>The BitAnd function sets specified bits on a value.</source>
            <target state="new">The BitAnd function sets specified bits on a value.</target>
          </trans-unit>
          <trans-unit id="144" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Syntax:<ept id="1">&lt;/strong&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Syntax:<ept id="1">&lt;/strong&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="145" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>num BitAnd(num value1, num value2)<ept id="1">&lt;/code&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>num BitAnd(num value1, num value2)<ept id="1">&lt;/code&gt;</ept></target>
          </trans-unit>
          <trans-unit id="146" xml:space="preserve">
            <source>value1, value2: numeric values which should be AND’ed together</source>
            <target state="new">value1, value2: numeric values which should be AND’ed together</target>
          </trans-unit>
          <trans-unit id="147" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Remarks:<ept id="1">&lt;/strong&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Remarks:<ept id="1">&lt;/strong&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="148" xml:space="preserve">
            <source>This function converts both parameters to the binary representation and sets a bit to:</source>
            <target state="new">This function converts both parameters to the binary representation and sets a bit to:</target>
          </trans-unit>
          <trans-unit id="149" xml:space="preserve">
            <source>0 - if one or both of the corresponding bits in <bpt id="2">&lt;em&gt;</bpt>mask<ept id="2">&lt;/em&gt;</ept> and <bpt id="4">&lt;em&gt;</bpt>flag<ept id="4">&lt;/em&gt;</ept> are 0</source>
            <target state="new">0 - if one or both of the corresponding bits in <bpt id="2">&lt;em&gt;</bpt>mask<ept id="2">&lt;/em&gt;</ept> and <bpt id="4">&lt;em&gt;</bpt>flag<ept id="4">&lt;/em&gt;</ept> are 0</target>
          </trans-unit>
          <trans-unit id="150" xml:space="preserve">
            <source>1 - if both of the corresponding bits are 1.</source>
            <target state="new">1 - if both of the corresponding bits are 1.</target>
          </trans-unit>
          <trans-unit id="151" xml:space="preserve">
            <source>In other words, it returns 0 in all cases except when the corresponding bits of both parameters are 1.</source>
            <target state="new">In other words, it returns 0 in all cases except when the corresponding bits of both parameters are 1.</target>
          </trans-unit>
          <trans-unit id="152" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Example:<ept id="1">&lt;/strong&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Example:<ept id="1">&lt;/strong&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="153" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>BitAnd(&amp;HF, &amp;HF7)<ept id="1">&lt;/code&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>BitAnd(&amp;HF, &amp;HF7)<ept id="1">&lt;/code&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="154" xml:space="preserve">
            <source>Returns 7 because hexadecimal “F” AND “F7” evaluate to this value.</source>
            <target state="new">Returns 7 because hexadecimal “F” AND “F7” evaluate to this value.</target>
          </trans-unit>
          <trans-unit id="155" xml:space="preserve">
            <source>BitOr</source>
            <target state="new">BitOr</target>
          </trans-unit>
          <trans-unit id="156" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Description:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Description:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="157" xml:space="preserve">
            <source>The BitOr function sets specified bits on a value.</source>
            <target state="new">The BitOr function sets specified bits on a value.</target>
          </trans-unit>
          <trans-unit id="158" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Syntax:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Syntax:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="159" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>num BitOr(num value1, num value2)<ept id="1">&lt;/code&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>num BitOr(num value1, num value2)<ept id="1">&lt;/code&gt;</ept></target>
          </trans-unit>
          <trans-unit id="160" xml:space="preserve">
            <source>value1, value2: numeric values that should be OR’ed together</source>
            <target state="new">value1, value2: numeric values that should be OR’ed together</target>
          </trans-unit>
          <trans-unit id="161" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Remarks:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Remarks:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="162" xml:space="preserve">
            <source>This function converts both parameters to the binary representation and sets a bit to 1 if one or both of the corresponding bits in mask and flag are 1, and to 0 if both of the corresponding bits are 0. <bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept></source>
            <target state="new">This function converts both parameters to the binary representation and sets a bit to 1 if one or both of the corresponding bits in mask and flag are 1, and to 0 if both of the corresponding bits are 0. <bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="163" xml:space="preserve">
            <source>In other words, it returns 1 in all cases except where the corresponding bits of both parameters are 0.</source>
            <target state="new">In other words, it returns 1 in all cases except where the corresponding bits of both parameters are 0.</target>
          </trans-unit>
          <trans-unit id="164" xml:space="preserve">
            <source>CBool</source>
            <target state="new">CBool</target>
          </trans-unit>
          <trans-unit id="165" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Description:<ept id="1">&lt;/strong&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Description:<ept id="1">&lt;/strong&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="166" xml:space="preserve">
            <source>The CBool function returns a Boolean based on the evaluated expression</source>
            <target state="new">The CBool function returns a Boolean based on the evaluated expression</target>
          </trans-unit>
          <trans-unit id="167" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Syntax:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Syntax:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="168" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>bool CBool(exp Expression)<ept id="1">&lt;/code&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>bool CBool(exp Expression)<ept id="1">&lt;/code&gt;</ept></target>
          </trans-unit>
          <trans-unit id="169" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Remarks:<ept id="1">&lt;/strong&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Remarks:<ept id="1">&lt;/strong&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="170" xml:space="preserve">
            <source>If the expression evaluates to a nonzero value then CBool returns True else it returns False.</source>
            <target state="new">If the expression evaluates to a nonzero value then CBool returns True else it returns False.</target>
          </trans-unit>
          <trans-unit id="171" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Example:<ept id="1">&lt;/strong&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Example:<ept id="1">&lt;/strong&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="172" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>CBool([attrib1] = [attrib2])<ept id="1">&lt;/code&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>CBool([attrib1] = [attrib2])<ept id="1">&lt;/code&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="173" xml:space="preserve">
            <source>Returns True if both attributes have the same value.</source>
            <target state="new">Returns True if both attributes have the same value.</target>
          </trans-unit>
          <trans-unit id="174" xml:space="preserve">
            <source>CDate</source>
            <target state="new">CDate</target>
          </trans-unit>
          <trans-unit id="175" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Description:<ept id="1">&lt;/strong&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Description:<ept id="1">&lt;/strong&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="176" xml:space="preserve">
            <source>The CDate function returns a UTC DateTime from a string.</source>
            <target state="new">The CDate function returns a UTC DateTime from a string.</target>
          </trans-unit>
          <trans-unit id="177" xml:space="preserve">
            <source>DateTime is not a native attribute type in Sync but is used by some functions.</source>
            <target state="new">DateTime is not a native attribute type in Sync but is used by some functions.</target>
          </trans-unit>
          <trans-unit id="178" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Syntax:<ept id="1">&lt;/strong&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Syntax:<ept id="1">&lt;/strong&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="179" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>dt CDate(str value)<ept id="1">&lt;/code&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>dt CDate(str value)<ept id="1">&lt;/code&gt;</ept></target>
          </trans-unit>
          <trans-unit id="180" xml:space="preserve">
            <source>Value: A string with a date, time, and optionally time zone</source>
            <target state="new">Value: A string with a date, time, and optionally time zone</target>
          </trans-unit>
          <trans-unit id="181" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Remarks:<ept id="1">&lt;/strong&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Remarks:<ept id="1">&lt;/strong&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="182" xml:space="preserve">
            <source>The returned string is always in UTC.</source>
            <target state="new">The returned string is always in UTC.</target>
          </trans-unit>
          <trans-unit id="183" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Example:<ept id="1">&lt;/strong&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Example:<ept id="1">&lt;/strong&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="184" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>CDate([employeeStartTime])<ept id="1">&lt;/code&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>CDate([employeeStartTime])<ept id="1">&lt;/code&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="185" xml:space="preserve">
            <source>Returns a DateTime based on the employee’s start time</source>
            <target state="new">Returns a DateTime based on the employee’s start time</target>
          </trans-unit>
          <trans-unit id="186" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>CDate("2013-01-10 4:00 PM -8")<ept id="1">&lt;/code&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>CDate("2013-01-10 4:00 PM -8")<ept id="1">&lt;/code&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="187" xml:space="preserve">
            <source>Returns a DateTime representing "2013-01-11 12:00 AM"</source>
            <target state="new">Returns a DateTime representing "2013-01-11 12:00 AM"</target>
          </trans-unit>
          <trans-unit id="188" xml:space="preserve">
            <source>CGuid</source>
            <target state="new">CGuid</target>
          </trans-unit>
          <trans-unit id="189" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Description:<ept id="1">&lt;/strong&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Description:<ept id="1">&lt;/strong&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="190" xml:space="preserve">
            <source>The CGuid function converts the string representation of a GUID to its binary representation.</source>
            <target state="new">The CGuid function converts the string representation of a GUID to its binary representation.</target>
          </trans-unit>
          <trans-unit id="191" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Syntax:<ept id="1">&lt;/strong&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Syntax:<ept id="1">&lt;/strong&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="192" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>bin CGuid(str GUID)GUID<ept id="1">&lt;/code&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>bin CGuid(str GUID)GUID<ept id="1">&lt;/code&gt;</ept></target>
          </trans-unit>
          <trans-unit id="193" xml:space="preserve">
            <source>A String formatted in this pattern: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx or {xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx}</source>
            <target state="new">A String formatted in this pattern: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx or {xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx}</target>
          </trans-unit>
          <trans-unit id="194" xml:space="preserve">
            <source>Contains</source>
            <target state="new">Contains</target>
          </trans-unit>
          <trans-unit id="195" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Description:<ept id="1">&lt;/strong&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Description:<ept id="1">&lt;/strong&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="196" xml:space="preserve">
            <source>The Contains function finds a string inside a multi-valued attribute</source>
            <target state="new">The Contains function finds a string inside a multi-valued attribute</target>
          </trans-unit>
          <trans-unit id="197" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Syntax:<ept id="1">&lt;/strong&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Syntax:<ept id="1">&lt;/strong&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="198" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>num Contains (mvstring attribute, str search)<ept id="1">&lt;/code&gt;</ept> - case sensitive<bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>num Contains (mvstring attribute, str search)<ept id="1">&lt;/code&gt;</ept> - case sensitive<bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="199" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>num Contains (mvstring attribute, str search, enum Casetype)<ept id="1">&lt;/code&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>num Contains (mvstring attribute, str search, enum Casetype)<ept id="1">&lt;/code&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="200" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>num Contains (mvref attribute, str search)<ept id="1">&lt;/code&gt;</ept> - case sensitive</source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>num Contains (mvref attribute, str search)<ept id="1">&lt;/code&gt;</ept> - case sensitive</target>
          </trans-unit>
          <trans-unit id="201" xml:space="preserve">
            <source>attribute: the multi-valued attribute to search.<bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept></source>
            <target state="new">attribute: the multi-valued attribute to search.<bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="202" xml:space="preserve">
            <source>search: string to find in the attribute.<bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept></source>
            <target state="new">search: string to find in the attribute.<bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="203" xml:space="preserve">
            <source>Casetype: CaseInsensitive or CaseSensitive.<bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept></source>
            <target state="new">Casetype: CaseInsensitive or CaseSensitive.<bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="204" xml:space="preserve">
            <source>Returns index in the multi-valued attribute where the string was found.</source>
            <target state="new">Returns index in the multi-valued attribute where the string was found.</target>
          </trans-unit>
          <trans-unit id="205" xml:space="preserve">
            <source>0 is returned if the string is not found.</source>
            <target state="new">0 is returned if the string is not found.</target>
          </trans-unit>
          <trans-unit id="206" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Remarks:<ept id="1">&lt;/strong&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Remarks:<ept id="1">&lt;/strong&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="207" xml:space="preserve">
            <source>For multi-valued string attributes the search will find substrings in the values.<bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept></source>
            <target state="new">For multi-valued string attributes the search will find substrings in the values.<bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="208" xml:space="preserve">
            <source>For reference attributes, the searched string must exactly match the value to be considered a match.</source>
            <target state="new">For reference attributes, the searched string must exactly match the value to be considered a match.</target>
          </trans-unit>
          <trans-unit id="209" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Example:<ept id="1">&lt;/strong&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Example:<ept id="1">&lt;/strong&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="210" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>IIF(Contains([proxyAddresses],”SMTP:”)&gt;0,[proxyAddresses],Error(“No primary SMTP address found.”))<ept id="1">&lt;/code&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>IIF(Contains([proxyAddresses],”SMTP:”)&gt;0,[proxyAddresses],Error(“No primary SMTP address found.”))<ept id="1">&lt;/code&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="211" xml:space="preserve">
            <source>If the proxyAddresses attribute has a primary email address (indicated by uppercase “SMTP:”) then return the proxyAddress attribute, else return an error.</source>
            <target state="new">If the proxyAddresses attribute has a primary email address (indicated by uppercase “SMTP:”) then return the proxyAddress attribute, else return an error.</target>
          </trans-unit>
          <trans-unit id="212" xml:space="preserve">
            <source>ConvertFromBase64</source>
            <target state="new">ConvertFromBase64</target>
          </trans-unit>
          <trans-unit id="213" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Description:<ept id="1">&lt;/strong&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Description:<ept id="1">&lt;/strong&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="214" xml:space="preserve">
            <source>The ConvertFromBase64 function converts the specified base64 encoded value to a regular string.</source>
            <target state="new">The ConvertFromBase64 function converts the specified base64 encoded value to a regular string.</target>
          </trans-unit>
          <trans-unit id="215" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Syntax:<ept id="1">&lt;/strong&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Syntax:<ept id="1">&lt;/strong&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="216" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>str ConvertFromBase64(str source)<ept id="1">&lt;/code&gt;</ept> - assumes Unicode for encoding <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>str ConvertFromBase64(str source)<ept id="1">&lt;/code&gt;</ept> - assumes Unicode for encoding <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="217" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>str ConvertFromBase64(str source, enum Encoding)<ept id="1">&lt;/code&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>str ConvertFromBase64(str source, enum Encoding)<ept id="1">&lt;/code&gt;</ept></target>
          </trans-unit>
          <trans-unit id="218" xml:space="preserve">
            <source>source: Base64 encoded string<bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept></source>
            <target state="new">source: Base64 encoded string<bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="219" xml:space="preserve">
            <source>Encoding: Unicode, ASCII, UTF8</source>
            <target state="new">Encoding: Unicode, ASCII, UTF8</target>
          </trans-unit>
          <trans-unit id="220" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Example<ept id="1">&lt;/strong&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Example<ept id="1">&lt;/strong&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="221" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>ConvertFromBase64("SABlAGwAbABvACAAdwBvAHIAbABkACEA")<ept id="1">&lt;/code&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>ConvertFromBase64("SABlAGwAbABvACAAdwBvAHIAbABkACEA")<ept id="1">&lt;/code&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="222" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>ConvertFromBase64("SGVsbG8gd29ybGQh", UTF8)<ept id="1">&lt;/code&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>ConvertFromBase64("SGVsbG8gd29ybGQh", UTF8)<ept id="1">&lt;/code&gt;</ept></target>
          </trans-unit>
          <trans-unit id="223" xml:space="preserve">
            <source>Both examples return "<bpt id="2">&lt;em&gt;</bpt>Hello world!<ept id="2">&lt;/em&gt;</ept>"</source>
            <target state="new">Both examples return "<bpt id="2">&lt;em&gt;</bpt>Hello world!<ept id="2">&lt;/em&gt;</ept>"</target>
          </trans-unit>
          <trans-unit id="224" xml:space="preserve">
            <source>ConvertFromUTF8Hex</source>
            <target state="new">ConvertFromUTF8Hex</target>
          </trans-unit>
          <trans-unit id="225" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Description:<ept id="1">&lt;/strong&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Description:<ept id="1">&lt;/strong&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="226" xml:space="preserve">
            <source>The ConvertFromUTF8Hex function converts the specified UTF8 Hex encoded value to a string.</source>
            <target state="new">The ConvertFromUTF8Hex function converts the specified UTF8 Hex encoded value to a string.</target>
          </trans-unit>
          <trans-unit id="227" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Syntax:<ept id="1">&lt;/strong&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Syntax:<ept id="1">&lt;/strong&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="228" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>str ConvertFromUTF8Hex(str source)<ept id="1">&lt;/code&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>str ConvertFromUTF8Hex(str source)<ept id="1">&lt;/code&gt;</ept></target>
          </trans-unit>
          <trans-unit id="229" xml:space="preserve">
            <source>source: UTF8 2-byte encoded sting</source>
            <target state="new">source: UTF8 2-byte encoded sting</target>
          </trans-unit>
          <trans-unit id="230" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Remarks:<ept id="1">&lt;/strong&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Remarks:<ept id="1">&lt;/strong&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="231" xml:space="preserve">
            <source>The difference between this function and ConvertFromBase64([],UTF8) in that the result is friendly for the DN attribute.<bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept></source>
            <target state="new">The difference between this function and ConvertFromBase64([],UTF8) in that the result is friendly for the DN attribute.<bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="232" xml:space="preserve">
            <source>This format is used by Azure Active Directory as DN.</source>
            <target state="new">This format is used by Azure Active Directory as DN.</target>
          </trans-unit>
          <trans-unit id="233" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Example:<ept id="1">&lt;/strong&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Example:<ept id="1">&lt;/strong&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="234" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>ConvertFromUTF8Hex("48656C6C6F20776F726C6421")<ept id="1">&lt;/code&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>ConvertFromUTF8Hex("48656C6C6F20776F726C6421")<ept id="1">&lt;/code&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="235" xml:space="preserve">
            <source>Returns "<bpt id="2">&lt;em&gt;</bpt>Hello world!<ept id="2">&lt;/em&gt;</ept>"</source>
            <target state="new">Returns "<bpt id="2">&lt;em&gt;</bpt>Hello world!<ept id="2">&lt;/em&gt;</ept>"</target>
          </trans-unit>
          <trans-unit id="236" xml:space="preserve">
            <source>ConvertToBase64</source>
            <target state="new">ConvertToBase64</target>
          </trans-unit>
          <trans-unit id="237" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Description:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Description:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="238" xml:space="preserve">
            <source>The ConvertToBase64 function converts a string to a Unicode base64 string.<bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept></source>
            <target state="new">The ConvertToBase64 function converts a string to a Unicode base64 string.<bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="239" xml:space="preserve">
            <source>Converts the value of an array of integers to its equivalent string representation that is encoded with base-64 digits.</source>
            <target state="new">Converts the value of an array of integers to its equivalent string representation that is encoded with base-64 digits.</target>
          </trans-unit>
          <trans-unit id="240" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Syntax:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Syntax:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="241" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>str ConvertToBase64(str source)<ept id="1">&lt;/code&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>str ConvertToBase64(str source)<ept id="1">&lt;/code&gt;</ept></target>
          </trans-unit>
          <trans-unit id="242" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Example:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Example:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="243" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>ConvertToBase64("Hello world!")<ept id="1">&lt;/code&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>ConvertToBase64("Hello world!")<ept id="1">&lt;/code&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="244" xml:space="preserve">
            <source>Returns "SABlAGwAbABvACAAdwBvAHIAbABkACEA"</source>
            <target state="new">Returns "SABlAGwAbABvACAAdwBvAHIAbABkACEA"</target>
          </trans-unit>
          <trans-unit id="245" xml:space="preserve">
            <source>ConvertToUTF8Hex</source>
            <target state="new">ConvertToUTF8Hex</target>
          </trans-unit>
          <trans-unit id="246" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Description:<ept id="1">&lt;/strong&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Description:<ept id="1">&lt;/strong&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="247" xml:space="preserve">
            <source>The ConvertToUTF8Hex function converts a string to a UTF8 Hex encoded value.</source>
            <target state="new">The ConvertToUTF8Hex function converts a string to a UTF8 Hex encoded value.</target>
          </trans-unit>
          <trans-unit id="248" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Syntax:<ept id="1">&lt;/strong&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Syntax:<ept id="1">&lt;/strong&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="249" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>str ConvertToUTF8Hex(str source)<ept id="1">&lt;/code&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>str ConvertToUTF8Hex(str source)<ept id="1">&lt;/code&gt;</ept></target>
          </trans-unit>
          <trans-unit id="250" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Remarks:<ept id="1">&lt;/strong&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Remarks:<ept id="1">&lt;/strong&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="251" xml:space="preserve">
            <source>The output format of this function is used by Azure Active Directory as DN attribute format.</source>
            <target state="new">The output format of this function is used by Azure Active Directory as DN attribute format.</target>
          </trans-unit>
          <trans-unit id="252" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Example:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Example:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="253" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>ConvertToUTF8Hex("Hello world!")<ept id="1">&lt;/code&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>ConvertToUTF8Hex("Hello world!")<ept id="1">&lt;/code&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="254" xml:space="preserve">
            <source>Returns 48656C6C6F20776F726C6421</source>
            <target state="new">Returns 48656C6C6F20776F726C6421</target>
          </trans-unit>
          <trans-unit id="255" xml:space="preserve">
            <source>Count</source>
            <target state="new">Count</target>
          </trans-unit>
          <trans-unit id="256" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Description:<ept id="1">&lt;/strong&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Description:<ept id="1">&lt;/strong&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="257" xml:space="preserve">
            <source>The Count function returns the number of elements in a multi-valued attribute</source>
            <target state="new">The Count function returns the number of elements in a multi-valued attribute</target>
          </trans-unit>
          <trans-unit id="258" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Syntax:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Syntax:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="259" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>num Count(mvstr attribute)<ept id="1">&lt;/code&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>num Count(mvstr attribute)<ept id="1">&lt;/code&gt;</ept></target>
          </trans-unit>
          <trans-unit id="260" xml:space="preserve">
            <source>CNum</source>
            <target state="new">CNum</target>
          </trans-unit>
          <trans-unit id="261" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Description:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Description:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="262" xml:space="preserve">
            <source>The CNum function takes a string and returns a numeric data type.</source>
            <target state="new">The CNum function takes a string and returns a numeric data type.</target>
          </trans-unit>
          <trans-unit id="263" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Syntax:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Syntax:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="264" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>num CNum(str value)<ept id="1">&lt;/code&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>num CNum(str value)<ept id="1">&lt;/code&gt;</ept></target>
          </trans-unit>
          <trans-unit id="265" xml:space="preserve">
            <source>CRef</source>
            <target state="new">CRef</target>
          </trans-unit>
          <trans-unit id="266" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Description:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Description:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="267" xml:space="preserve">
            <source>Converts a string to a reference attribute</source>
            <target state="new">Converts a string to a reference attribute</target>
          </trans-unit>
          <trans-unit id="268" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Syntax:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Syntax:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="269" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>ref CRef(str value)<ept id="1">&lt;/code&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>ref CRef(str value)<ept id="1">&lt;/code&gt;</ept></target>
          </trans-unit>
          <trans-unit id="270" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Example:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Example:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="271" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>CRef(“CN=LC Services,CN=Microsoft,CN=lcspool01, CN=Pools,CN=RTC Service,” &amp; %Forest.LDAP%)<ept id="1">&lt;/code&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>CRef(“CN=LC Services,CN=Microsoft,CN=lcspool01, CN=Pools,CN=RTC Service,” &amp; %Forest.LDAP%)<ept id="1">&lt;/code&gt;</ept></target>
          </trans-unit>
          <trans-unit id="272" xml:space="preserve">
            <source>CStr</source>
            <target state="new">CStr</target>
          </trans-unit>
          <trans-unit id="273" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Description:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Description:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="274" xml:space="preserve">
            <source>The CStr function converts to a string data type.</source>
            <target state="new">The CStr function converts to a string data type.</target>
          </trans-unit>
          <trans-unit id="275" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Syntax:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Syntax:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="276" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>str CStr(num value)<ept id="1">&lt;/code&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>str CStr(num value)<ept id="1">&lt;/code&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="277" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>str CStr(ref value)<ept id="1">&lt;/code&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>str CStr(ref value)<ept id="1">&lt;/code&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="278" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>str CStr(bool value)<ept id="1">&lt;/code&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>str CStr(bool value)<ept id="1">&lt;/code&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="279" xml:space="preserve">
            <source>value: Can be a numeric value, reference attribute, or Boolean.</source>
            <target state="new">value: Can be a numeric value, reference attribute, or Boolean.</target>
          </trans-unit>
          <trans-unit id="280" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Example:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Example:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="281" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>CStr([dn]) &lt;br&gt;<ept id="1">&lt;/code&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>CStr([dn]) &lt;br&gt;<ept id="1">&lt;/code&gt;</ept></target>
          </trans-unit>
          <trans-unit id="282" xml:space="preserve">
            <source>Could return “cn=Joe,dc=contoso,dc=com”</source>
            <target state="new">Could return “cn=Joe,dc=contoso,dc=com”</target>
          </trans-unit>
          <trans-unit id="283" xml:space="preserve">
            <source>DateAdd</source>
            <target state="new">DateAdd</target>
          </trans-unit>
          <trans-unit id="284" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Description:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Description:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="285" xml:space="preserve">
            <source>Returns a Date containing a date to which a specified time interval has been added.</source>
            <target state="new">Returns a Date containing a date to which a specified time interval has been added.</target>
          </trans-unit>
          <trans-unit id="286" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Syntax:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Syntax:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="287" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>dt DateAdd(str interval, num value, dt date)<ept id="1">&lt;/code&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>dt DateAdd(str interval, num value, dt date)<ept id="1">&lt;/code&gt;</ept></target>
          </trans-unit>
          <trans-unit id="288" xml:space="preserve">
            <source>interval: String expression that is the interval of time you want to add.</source>
            <target state="new">interval: String expression that is the interval of time you want to add.</target>
          </trans-unit>
          <trans-unit id="289" xml:space="preserve">
            <source>The string must have one of the following values:</source>
            <target state="new">The string must have one of the following values:</target>
          </trans-unit>
          <trans-unit id="290" xml:space="preserve">
            <source>yyyy Year</source>
            <target state="new">yyyy Year</target>
          </trans-unit>
          <trans-unit id="291" xml:space="preserve">
            <source>q Quarter</source>
            <target state="new">q Quarter</target>
          </trans-unit>
          <trans-unit id="292" xml:space="preserve">
            <source>m Month</source>
            <target state="new">m Month</target>
          </trans-unit>
          <trans-unit id="293" xml:space="preserve">
            <source>y Day of year</source>
            <target state="new">y Day of year</target>
          </trans-unit>
          <trans-unit id="294" xml:space="preserve">
            <source>d Day</source>
            <target state="new">d Day</target>
          </trans-unit>
          <trans-unit id="295" xml:space="preserve">
            <source>w Weekday</source>
            <target state="new">w Weekday</target>
          </trans-unit>
          <trans-unit id="296" xml:space="preserve">
            <source>ww Week</source>
            <target state="new">ww Week</target>
          </trans-unit>
          <trans-unit id="297" xml:space="preserve">
            <source>h Hour</source>
            <target state="new">h Hour</target>
          </trans-unit>
          <trans-unit id="298" xml:space="preserve">
            <source>n Minute</source>
            <target state="new">n Minute</target>
          </trans-unit>
          <trans-unit id="299" xml:space="preserve">
            <source>s Second</source>
            <target state="new">s Second</target>
          </trans-unit>
          <trans-unit id="300" xml:space="preserve">
            <source>value: The number of units you want to add.</source>
            <target state="new">value: The number of units you want to add.</target>
          </trans-unit>
          <trans-unit id="301" xml:space="preserve">
            <source>It can be positive (to get dates in the future) or negative (to get dates in the past).</source>
            <target state="new">It can be positive (to get dates in the future) or negative (to get dates in the past).</target>
          </trans-unit>
          <trans-unit id="302" xml:space="preserve">
            <source>date: DateTime representing date to which the interval is added.</source>
            <target state="new">date: DateTime representing date to which the interval is added.</target>
          </trans-unit>
          <trans-unit id="303" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Example:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Example:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="304" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>DateAdd("m", 3, CDate("2001-01-01"))<ept id="1">&lt;/code&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>DateAdd("m", 3, CDate("2001-01-01"))<ept id="1">&lt;/code&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="305" xml:space="preserve">
            <source>Adds 3 months and returns a DateTime representing "2001-04-01”</source>
            <target state="new">Adds 3 months and returns a DateTime representing "2001-04-01”</target>
          </trans-unit>
          <trans-unit id="306" xml:space="preserve">
            <source>DateFromNum</source>
            <target state="new">DateFromNum</target>
          </trans-unit>
          <trans-unit id="307" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Description:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Description:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="308" xml:space="preserve">
            <source>The DateFromNum function converts a value in AD’s date format to a DateTime type.</source>
            <target state="new">The DateFromNum function converts a value in AD’s date format to a DateTime type.</target>
          </trans-unit>
          <trans-unit id="309" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Syntax:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Syntax:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="310" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>dt DateFromNum(num value)<ept id="1">&lt;/code&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>dt DateFromNum(num value)<ept id="1">&lt;/code&gt;</ept></target>
          </trans-unit>
          <trans-unit id="311" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Example:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Example:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="312" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>DateFromNum([lastLogonTimestamp])<ept id="1">&lt;/code&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>DateFromNum([lastLogonTimestamp])<ept id="1">&lt;/code&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="313" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>DateFromNum(129699324000000000)<ept id="1">&lt;/code&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>DateFromNum(129699324000000000)<ept id="1">&lt;/code&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="314" xml:space="preserve">
            <source>Returns a DateTime representing 2012-01-01 23:00:00</source>
            <target state="new">Returns a DateTime representing 2012-01-01 23:00:00</target>
          </trans-unit>
          <trans-unit id="315" xml:space="preserve">
            <source>DNComponent</source>
            <target state="new">DNComponent</target>
          </trans-unit>
          <trans-unit id="316" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Description:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Description:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="317" xml:space="preserve">
            <source>The DNComponent function returns the value of a specified DN component going from left.</source>
            <target state="new">The DNComponent function returns the value of a specified DN component going from left.</target>
          </trans-unit>
          <trans-unit id="318" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Syntax:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Syntax:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="319" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>str DNComponent(ref dn, num ComponentNumber)<ept id="1">&lt;/code&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>str DNComponent(ref dn, num ComponentNumber)<ept id="1">&lt;/code&gt;</ept></target>
          </trans-unit>
          <trans-unit id="320" xml:space="preserve">
            <source>dn: the reference attribute to interpret</source>
            <target state="new">dn: the reference attribute to interpret</target>
          </trans-unit>
          <trans-unit id="321" xml:space="preserve">
            <source>ComponentNumber: The component in the DN to return</source>
            <target state="new">ComponentNumber: The component in the DN to return</target>
          </trans-unit>
          <trans-unit id="322" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Example:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Example:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="323" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>DNComponent([dn],1)<ept id="1">&lt;/code&gt;</ept>  <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>DNComponent([dn],1)<ept id="1">&lt;/code&gt;</ept>  <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="324" xml:space="preserve">
            <source>If dn is “cn=Joe,ou=…, it returns Joe</source>
            <target state="new">If dn is “cn=Joe,ou=…, it returns Joe</target>
          </trans-unit>
          <trans-unit id="325" xml:space="preserve">
            <source>DNComponentRev</source>
            <target state="new">DNComponentRev</target>
          </trans-unit>
          <trans-unit id="326" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Description:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Description:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="327" xml:space="preserve">
            <source>The DNComponentRev function returns the value of a specified DN component going from right (the end).</source>
            <target state="new">The DNComponentRev function returns the value of a specified DN component going from right (the end).</target>
          </trans-unit>
          <trans-unit id="328" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Syntax:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Syntax:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="329" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>str DNComponentRev(ref dn, num ComponentNumber)<ept id="1">&lt;/code&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>str DNComponentRev(ref dn, num ComponentNumber)<ept id="1">&lt;/code&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="330" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>str DNComponentRev(ref dn, num ComponentNumber, enum Options)<ept id="1">&lt;/code&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>str DNComponentRev(ref dn, num ComponentNumber, enum Options)<ept id="1">&lt;/code&gt;</ept></target>
          </trans-unit>
          <trans-unit id="331" xml:space="preserve">
            <source>dn: the reference attribute to interpret</source>
            <target state="new">dn: the reference attribute to interpret</target>
          </trans-unit>
          <trans-unit id="332" xml:space="preserve">
            <source>ComponentNumber - The component in the DN to return</source>
            <target state="new">ComponentNumber - The component in the DN to return</target>
          </trans-unit>
          <trans-unit id="333" xml:space="preserve">
            <source>Options: DC – Ignore all components with “dc=”</source>
            <target state="new">Options: DC – Ignore all components with “dc=”</target>
          </trans-unit>
          <trans-unit id="334" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Example:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Example:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="335" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>If dn is “cn=Joe,ou=Atlanta,ou=GA,ou=US, dc=contoso,dc=com” then DNComponentRev([dn],3)<ept id="1">&lt;/code&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept>  <bpt id="5">&lt;code&gt;</bpt>DNComponentRev([dn],1,”DC”)<ept id="5">&lt;/code&gt;</ept> <bpt id="7">&lt;html&gt;</bpt><ept id="7">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>If dn is “cn=Joe,ou=Atlanta,ou=GA,ou=US, dc=contoso,dc=com” then DNComponentRev([dn],3)<ept id="1">&lt;/code&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept>  <bpt id="5">&lt;code&gt;</bpt>DNComponentRev([dn],1,”DC”)<ept id="5">&lt;/code&gt;</ept> <bpt id="7">&lt;html&gt;</bpt><ept id="7">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="336" xml:space="preserve">
            <source>Both return US.</source>
            <target state="new">Both return US.</target>
          </trans-unit>
          <trans-unit id="337" xml:space="preserve">
            <source>Error</source>
            <target state="new">Error</target>
          </trans-unit>
          <trans-unit id="338" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Description:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Description:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="339" xml:space="preserve">
            <source>The Error function is used to return a custom error.</source>
            <target state="new">The Error function is used to return a custom error.</target>
          </trans-unit>
          <trans-unit id="340" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Syntax:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Syntax:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="341" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>void Error(str ErrorMessage)<ept id="1">&lt;/code&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>void Error(str ErrorMessage)<ept id="1">&lt;/code&gt;</ept></target>
          </trans-unit>
          <trans-unit id="342" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Example:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Example:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="343" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>IIF(IsPresent([accountName]),[accountName],Error(“AccountName is required”))<ept id="1">&lt;/code&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>IIF(IsPresent([accountName]),[accountName],Error(“AccountName is required”))<ept id="1">&lt;/code&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="344" xml:space="preserve">
            <source>If the attribute accountName is not present, throw an error on the object.</source>
            <target state="new">If the attribute accountName is not present, throw an error on the object.</target>
          </trans-unit>
          <trans-unit id="345" xml:space="preserve">
            <source>EscapeDNComponent</source>
            <target state="new">EscapeDNComponent</target>
          </trans-unit>
          <trans-unit id="346" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Description:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Description:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="347" xml:space="preserve">
            <source>The EscapeDNComponent function takes one component of a DN and escapes it so it can be represented in LDAP.</source>
            <target state="new">The EscapeDNComponent function takes one component of a DN and escapes it so it can be represented in LDAP.</target>
          </trans-unit>
          <trans-unit id="348" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Syntax:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Syntax:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="349" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>str EscapeDNComponent(str value)<ept id="1">&lt;/code&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>str EscapeDNComponent(str value)<ept id="1">&lt;/code&gt;</ept></target>
          </trans-unit>
          <trans-unit id="350" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Example:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Example:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="351" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>EscapeDNComponent(“cn=” &amp; [displayName]) &amp; “,” &amp; %ForestLDAP%<ept id="1">&lt;/code&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>EscapeDNComponent(“cn=” &amp; [displayName]) &amp; “,” &amp; %ForestLDAP%<ept id="1">&lt;/code&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="352" xml:space="preserve">
            <source>Makes sure the object can be created in an LDAP directory even if the displayName attribute has characters which must be escaped in LDAP.</source>
            <target state="new">Makes sure the object can be created in an LDAP directory even if the displayName attribute has characters which must be escaped in LDAP.</target>
          </trans-unit>
          <trans-unit id="353" xml:space="preserve">
            <source>FormatDateTime</source>
            <target state="new">FormatDateTime</target>
          </trans-unit>
          <trans-unit id="354" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Description:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Description:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="355" xml:space="preserve">
            <source>The FormatDateTime function is used to format a DateTime to a string with a specified format</source>
            <target state="new">The FormatDateTime function is used to format a DateTime to a string with a specified format</target>
          </trans-unit>
          <trans-unit id="356" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Syntax:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Syntax:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="357" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>str FormatDateTime(dt value, str format)<ept id="1">&lt;/code&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>str FormatDateTime(dt value, str format)<ept id="1">&lt;/code&gt;</ept></target>
          </trans-unit>
          <trans-unit id="358" xml:space="preserve">
            <source>value: a value in the DateTime format <bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept></source>
            <target state="new">value: a value in the DateTime format <bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="359" xml:space="preserve">
            <source>format: a string representing the format to convert to.</source>
            <target state="new">format: a string representing the format to convert to.</target>
          </trans-unit>
          <trans-unit id="360" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Remarks:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Remarks:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="361" xml:space="preserve">
            <source>The possible values for the format can be found here: <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>User-Defined Date/Time Formats (Format Function)<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept></source>
            <target state="new">The possible values for the format can be found here: <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>User-Defined Date/Time Formats (Format Function)<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept></target>
          </trans-unit>
          <trans-unit id="362" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Example:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Example:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="363" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>FormatDateTime(CDate(“12/25/2007”),”yyyy-mm-dd”)<ept id="1">&lt;/code&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>FormatDateTime(CDate(“12/25/2007”),”yyyy-mm-dd”)<ept id="1">&lt;/code&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="364" xml:space="preserve">
            <source>Results in “2007-12-25”.</source>
            <target state="new">Results in “2007-12-25”.</target>
          </trans-unit>
          <trans-unit id="365" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>FormatDateTime(DateFromNum([pwdLastSet]),”yyyyMMddHHmmss.0Z”)<ept id="1">&lt;/code&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>FormatDateTime(DateFromNum([pwdLastSet]),”yyyyMMddHHmmss.0Z”)<ept id="1">&lt;/code&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="366" xml:space="preserve">
            <source>Can result in “20140905081453.0Z”</source>
            <target state="new">Can result in “20140905081453.0Z”</target>
          </trans-unit>
          <trans-unit id="367" xml:space="preserve">
            <source>GUID</source>
            <target state="new">GUID</target>
          </trans-unit>
          <trans-unit id="368" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Description:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Description:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="369" xml:space="preserve">
            <source>The function GUID generates a new random GUID</source>
            <target state="new">The function GUID generates a new random GUID</target>
          </trans-unit>
          <trans-unit id="370" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Syntax:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Syntax:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="371" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>str GUID()<ept id="1">&lt;/code&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>str GUID()<ept id="1">&lt;/code&gt;</ept></target>
          </trans-unit>
          <trans-unit id="372" xml:space="preserve">
            <source>IIF</source>
            <target state="new">IIF</target>
          </trans-unit>
          <trans-unit id="373" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Description:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Description:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="374" xml:space="preserve">
            <source>The IIF function returns one of a set of possible values based on a specified condition.</source>
            <target state="new">The IIF function returns one of a set of possible values based on a specified condition.</target>
          </trans-unit>
          <trans-unit id="375" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Syntax:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Syntax:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="376" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>var IIF(exp condition, var valueIfTrue, var valueIfFalse)<ept id="1">&lt;/code&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>var IIF(exp condition, var valueIfTrue, var valueIfFalse)<ept id="1">&lt;/code&gt;</ept></target>
          </trans-unit>
          <trans-unit id="377" xml:space="preserve">
            <source>condition: any value or expression that can be evaluated to true or false.</source>
            <target state="new">condition: any value or expression that can be evaluated to true or false.</target>
          </trans-unit>
          <trans-unit id="378" xml:space="preserve">
            <source>valueIfTrue: a value that will be returned if condition evaluates to true.</source>
            <target state="new">valueIfTrue: a value that will be returned if condition evaluates to true.</target>
          </trans-unit>
          <trans-unit id="379" xml:space="preserve">
            <source>valueIfFalse: a value that will be returned if condition evaluates to false.</source>
            <target state="new">valueIfFalse: a value that will be returned if condition evaluates to false.</target>
          </trans-unit>
          <trans-unit id="380" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Example:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Example:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="381" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>IIF([employeeType]=“Intern”,”t-“&amp;[alias],[alias])<ept id="1">&lt;/code&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>IIF([employeeType]=“Intern”,”t-“&amp;[alias],[alias])<ept id="1">&lt;/code&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="382" xml:space="preserve">
            <source>Returns the alias of a user with “t-“ added to the beginning of it if the user is an intern, else returns the user’s alias as is.</source>
            <target state="new">Returns the alias of a user with “t-“ added to the beginning of it if the user is an intern, else returns the user’s alias as is.</target>
          </trans-unit>
          <trans-unit id="383" xml:space="preserve">
            <source>InStr</source>
            <target state="new">InStr</target>
          </trans-unit>
          <trans-unit id="384" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Description:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Description:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="385" xml:space="preserve">
            <source>The InStr function finds the first occurrence of a substring in a string</source>
            <target state="new">The InStr function finds the first occurrence of a substring in a string</target>
          </trans-unit>
          <trans-unit id="386" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Syntax:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Syntax:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="387" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>num InStr(str stringcheck, str stringmatch)<ept id="1">&lt;/code&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>num InStr(str stringcheck, str stringmatch)<ept id="1">&lt;/code&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="388" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>num InStr(str stringcheck, str stringmatch, num start)<ept id="1">&lt;/code&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>num InStr(str stringcheck, str stringmatch, num start)<ept id="1">&lt;/code&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="389" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>num InStr(str stringcheck, str stringmatch, num start , enum compare)<ept id="1">&lt;/code&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>num InStr(str stringcheck, str stringmatch, num start , enum compare)<ept id="1">&lt;/code&gt;</ept></target>
          </trans-unit>
          <trans-unit id="390" xml:space="preserve">
            <source>stringcheck: string to be searched <bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept></source>
            <target state="new">stringcheck: string to be searched <bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="391" xml:space="preserve">
            <source>stringmatch: string to be found <bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept></source>
            <target state="new">stringmatch: string to be found <bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="392" xml:space="preserve">
            <source>start: starting position to find the substring <bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept></source>
            <target state="new">start: starting position to find the substring <bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="393" xml:space="preserve">
            <source>compare: vbTextCompare or vbBinaryCompare</source>
            <target state="new">compare: vbTextCompare or vbBinaryCompare</target>
          </trans-unit>
          <trans-unit id="394" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Remarks:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Remarks:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="395" xml:space="preserve">
            <source>Returns the position where the substring was found or 0 if not found.</source>
            <target state="new">Returns the position where the substring was found or 0 if not found.</target>
          </trans-unit>
          <trans-unit id="396" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Example:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Example:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="397" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>InStr("The quick brown fox","quick")<ept id="1">&lt;/code&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>InStr("The quick brown fox","quick")<ept id="1">&lt;/code&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="398" xml:space="preserve">
            <source>Evalues to 5</source>
            <target state="new">Evalues to 5</target>
          </trans-unit>
          <trans-unit id="399" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>InStr("repEated","e",3,vbBinaryCompare)<ept id="1">&lt;/code&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>InStr("repEated","e",3,vbBinaryCompare)<ept id="1">&lt;/code&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="400" xml:space="preserve">
            <source>Evaluates to 7</source>
            <target state="new">Evaluates to 7</target>
          </trans-unit>
          <trans-unit id="401" xml:space="preserve">
            <source>InStrRev</source>
            <target state="new">InStrRev</target>
          </trans-unit>
          <trans-unit id="402" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Description:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Description:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="403" xml:space="preserve">
            <source>The InStrRev function finds the last occurrence of a substring in a string</source>
            <target state="new">The InStrRev function finds the last occurrence of a substring in a string</target>
          </trans-unit>
          <trans-unit id="404" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Syntax:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Syntax:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="405" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>num InstrRev(str stringcheck, str stringmatch)<ept id="1">&lt;/code&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>num InstrRev(str stringcheck, str stringmatch)<ept id="1">&lt;/code&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="406" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>num InstrRev(str stringcheck, str stringmatch, num start)<ept id="1">&lt;/code&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>num InstrRev(str stringcheck, str stringmatch, num start)<ept id="1">&lt;/code&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="407" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>num InstrRev(str stringcheck, str stringmatch, num start, enum compare)<ept id="1">&lt;/code&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>num InstrRev(str stringcheck, str stringmatch, num start, enum compare)<ept id="1">&lt;/code&gt;</ept></target>
          </trans-unit>
          <trans-unit id="408" xml:space="preserve">
            <source>stringcheck: string to be searched <bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept></source>
            <target state="new">stringcheck: string to be searched <bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="409" xml:space="preserve">
            <source>stringmatch: string to be found <bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept></source>
            <target state="new">stringmatch: string to be found <bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="410" xml:space="preserve">
            <source>start: starting position to find the substring <bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept></source>
            <target state="new">start: starting position to find the substring <bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="411" xml:space="preserve">
            <source>compare: vbTextCompare or vbBinaryCompare</source>
            <target state="new">compare: vbTextCompare or vbBinaryCompare</target>
          </trans-unit>
          <trans-unit id="412" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Remarks:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Remarks:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="413" xml:space="preserve">
            <source>Returns the position where the substring was found or 0 if not found.</source>
            <target state="new">Returns the position where the substring was found or 0 if not found.</target>
          </trans-unit>
          <trans-unit id="414" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Example:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Example:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="415" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>InStrRev("abbcdbbbef","bb")<ept id="1">&lt;/code&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>InStrRev("abbcdbbbef","bb")<ept id="1">&lt;/code&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="416" xml:space="preserve">
            <source>Returns 7</source>
            <target state="new">Returns 7</target>
          </trans-unit>
          <trans-unit id="417" xml:space="preserve">
            <source>IsBitSet</source>
            <target state="new">IsBitSet</target>
          </trans-unit>
          <trans-unit id="418" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Description:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Description:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="419" xml:space="preserve">
            <source>The function IsBitSet Tests if a bit is set or not</source>
            <target state="new">The function IsBitSet Tests if a bit is set or not</target>
          </trans-unit>
          <trans-unit id="420" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Syntax:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Syntax:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="421" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>bool IsBitSet(num value, num flag)<ept id="1">&lt;/code&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>bool IsBitSet(num value, num flag)<ept id="1">&lt;/code&gt;</ept></target>
          </trans-unit>
          <trans-unit id="422" xml:space="preserve">
            <source>value: a numeric value that is evaluated.flag: a numeric value that has the bit to be evaluated</source>
            <target state="new">value: a numeric value that is evaluated.flag: a numeric value that has the bit to be evaluated</target>
          </trans-unit>
          <trans-unit id="423" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Example:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Example:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="424" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>IsBitSet(&amp;HF,4)<ept id="1">&lt;/code&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>IsBitSet(&amp;HF,4)<ept id="1">&lt;/code&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="425" xml:space="preserve">
            <source>Returns True because bit “4” is set in the hexadecimal value “F”</source>
            <target state="new">Returns True because bit “4” is set in the hexadecimal value “F”</target>
          </trans-unit>
          <trans-unit id="426" xml:space="preserve">
            <source>IsDate</source>
            <target state="new">IsDate</target>
          </trans-unit>
          <trans-unit id="427" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Description:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Description:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="428" xml:space="preserve">
            <source>The IsDate function evaluates to True if the expression can be evaluates as a DateTime type.</source>
            <target state="new">The IsDate function evaluates to True if the expression can be evaluates as a DateTime type.</target>
          </trans-unit>
          <trans-unit id="429" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Syntax:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Syntax:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="430" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>bool IsDate(var Expression)<ept id="1">&lt;/code&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>bool IsDate(var Expression)<ept id="1">&lt;/code&gt;</ept></target>
          </trans-unit>
          <trans-unit id="431" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Remarks:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Remarks:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="432" xml:space="preserve">
            <source>Used to determine if CDate() will be successful.</source>
            <target state="new">Used to determine if CDate() will be successful.</target>
          </trans-unit>
          <trans-unit id="433" xml:space="preserve">
            <source>IsEmpty</source>
            <target state="new">IsEmpty</target>
          </trans-unit>
          <trans-unit id="434" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Description:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Description:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="435" xml:space="preserve">
            <source>The IsEmpty function evaluates to True if the attribute is present in the CS or MV but evaluates to an empty string.</source>
            <target state="new">The IsEmpty function evaluates to True if the attribute is present in the CS or MV but evaluates to an empty string.</target>
          </trans-unit>
          <trans-unit id="436" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Syntax:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Syntax:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="437" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>bool IsEmpty(var Expression)<ept id="1">&lt;/code&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>bool IsEmpty(var Expression)<ept id="1">&lt;/code&gt;</ept></target>
          </trans-unit>
          <trans-unit id="438" xml:space="preserve">
            <source>IsGuid</source>
            <target state="new">IsGuid</target>
          </trans-unit>
          <trans-unit id="439" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Description:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Description:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="440" xml:space="preserve">
            <source>The IsGuid function evaluated to true if the string could be converted to a GUID.</source>
            <target state="new">The IsGuid function evaluated to true if the string could be converted to a GUID.</target>
          </trans-unit>
          <trans-unit id="441" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Syntax:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Syntax:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="442" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>bool IsGuid(str GUID)<ept id="1">&lt;/code&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>bool IsGuid(str GUID)<ept id="1">&lt;/code&gt;</ept></target>
          </trans-unit>
          <trans-unit id="443" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Remarks:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Remarks:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="444" xml:space="preserve">
            <source>A GUID is defined as a string following one of these patterns: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx or {xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx}</source>
            <target state="new">A GUID is defined as a string following one of these patterns: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx or {xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx}</target>
          </trans-unit>
          <trans-unit id="445" xml:space="preserve">
            <source>Used to determine if CGuid() will be successful.</source>
            <target state="new">Used to determine if CGuid() will be successful.</target>
          </trans-unit>
          <trans-unit id="446" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Example:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Example:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="447" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>IIF(IsGuid([strAttribute]),CGuid([strAttribute]),NULL)<ept id="1">&lt;/code&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>IIF(IsGuid([strAttribute]),CGuid([strAttribute]),NULL)<ept id="1">&lt;/code&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="448" xml:space="preserve">
            <source>If the StrAttribute has a GUID format, return a binary representation, otherwise return a Null.</source>
            <target state="new">If the StrAttribute has a GUID format, return a binary representation, otherwise return a Null.</target>
          </trans-unit>
          <trans-unit id="449" xml:space="preserve">
            <source>IsNull</source>
            <target state="new">IsNull</target>
          </trans-unit>
          <trans-unit id="450" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Description:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Description:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="451" xml:space="preserve">
            <source>The IsNull function returns true if the expression evaluates to Null.</source>
            <target state="new">The IsNull function returns true if the expression evaluates to Null.</target>
          </trans-unit>
          <trans-unit id="452" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Syntax:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Syntax:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="453" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>bool IsNull(var Expression)<ept id="1">&lt;/code&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>bool IsNull(var Expression)<ept id="1">&lt;/code&gt;</ept></target>
          </trans-unit>
          <trans-unit id="454" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Remarks:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Remarks:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="455" xml:space="preserve">
            <source>For an attribute, a Null is expressed by the absence of the attribute.</source>
            <target state="new">For an attribute, a Null is expressed by the absence of the attribute.</target>
          </trans-unit>
          <trans-unit id="456" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Example:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Example:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="457" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>IsNull([displayName])<ept id="1">&lt;/code&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>IsNull([displayName])<ept id="1">&lt;/code&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="458" xml:space="preserve">
            <source>Returns True if the attribute is not present in the CS or MV.</source>
            <target state="new">Returns True if the attribute is not present in the CS or MV.</target>
          </trans-unit>
          <trans-unit id="459" xml:space="preserve">
            <source>IsNullOrEmpty</source>
            <target state="new">IsNullOrEmpty</target>
          </trans-unit>
          <trans-unit id="460" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Description:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Description:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="461" xml:space="preserve">
            <source>The IsNullOrEmpty function returns true if the expression is null or an empty string.</source>
            <target state="new">The IsNullOrEmpty function returns true if the expression is null or an empty string.</target>
          </trans-unit>
          <trans-unit id="462" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Syntax:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Syntax:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="463" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>bool IsNullOrEmpty(var Expression)<ept id="1">&lt;/code&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>bool IsNullOrEmpty(var Expression)<ept id="1">&lt;/code&gt;</ept></target>
          </trans-unit>
          <trans-unit id="464" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Remarks:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Remarks:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="465" xml:space="preserve">
            <source>For an attribute, this would evaluate to True if the attribute is absent or is present but is an empty string.<bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept></source>
            <target state="new">For an attribute, this would evaluate to True if the attribute is absent or is present but is an empty string.<bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="466" xml:space="preserve">
            <source>The inverse of this function is named IsPresent.</source>
            <target state="new">The inverse of this function is named IsPresent.</target>
          </trans-unit>
          <trans-unit id="467" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Example:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Example:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="468" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>IsNull([displayName])<ept id="1">&lt;/code&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>IsNull([displayName])<ept id="1">&lt;/code&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="469" xml:space="preserve">
            <source>Returns True if the attribute is not present or is an empty string in the CS or MV.</source>
            <target state="new">Returns True if the attribute is not present or is an empty string in the CS or MV.</target>
          </trans-unit>
          <trans-unit id="470" xml:space="preserve">
            <source>IsNumeric</source>
            <target state="new">IsNumeric</target>
          </trans-unit>
          <trans-unit id="471" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Description:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Description:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="472" xml:space="preserve">
            <source>The IsNumeric function returns a Boolean value indicating whether an expression can be evaluated as a number type.</source>
            <target state="new">The IsNumeric function returns a Boolean value indicating whether an expression can be evaluated as a number type.</target>
          </trans-unit>
          <trans-unit id="473" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Syntax:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Syntax:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="474" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>bool IsNumeric(var Expression)<ept id="1">&lt;/code&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>bool IsNumeric(var Expression)<ept id="1">&lt;/code&gt;</ept></target>
          </trans-unit>
          <trans-unit id="475" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Remarks:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Remarks:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="476" xml:space="preserve">
            <source>Used to determine if CNum() will be successful to parse the expression.</source>
            <target state="new">Used to determine if CNum() will be successful to parse the expression.</target>
          </trans-unit>
          <trans-unit id="477" xml:space="preserve">
            <source>IsString</source>
            <target state="new">IsString</target>
          </trans-unit>
          <trans-unit id="478" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Description:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Description:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="479" xml:space="preserve">
            <source>The IsString function evaluates to True if the expression can be evaluated to a string type.</source>
            <target state="new">The IsString function evaluates to True if the expression can be evaluated to a string type.</target>
          </trans-unit>
          <trans-unit id="480" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Syntax:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Syntax:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="481" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>bool IsString(var expression)<ept id="1">&lt;/code&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>bool IsString(var expression)<ept id="1">&lt;/code&gt;</ept></target>
          </trans-unit>
          <trans-unit id="482" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Remarks:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Remarks:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="483" xml:space="preserve">
            <source>Used to determine if CStr() will be successful to parse the expression.</source>
            <target state="new">Used to determine if CStr() will be successful to parse the expression.</target>
          </trans-unit>
          <trans-unit id="484" xml:space="preserve">
            <source>IsPresent</source>
            <target state="new">IsPresent</target>
          </trans-unit>
          <trans-unit id="485" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Description:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Description:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="486" xml:space="preserve">
            <source>The IsPresent function returns true if the expression evaluates to a string which is not Null and is not empty.</source>
            <target state="new">The IsPresent function returns true if the expression evaluates to a string which is not Null and is not empty.</target>
          </trans-unit>
          <trans-unit id="487" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Syntax:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Syntax:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="488" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>bool IsPresent(var expression)<ept id="1">&lt;/code&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>bool IsPresent(var expression)<ept id="1">&lt;/code&gt;</ept></target>
          </trans-unit>
          <trans-unit id="489" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Remarks:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Remarks:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="490" xml:space="preserve">
            <source>The inverse of this function is named IsNullOrEmpty.</source>
            <target state="new">The inverse of this function is named IsNullOrEmpty.</target>
          </trans-unit>
          <trans-unit id="491" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Example:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Example:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="492" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>Switch(IsPresent([directManager]),[directManager], IsPresent([skiplevelManager]),[skiplevelManager], IsPresent([director]),[director])<ept id="1">&lt;/code&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>Switch(IsPresent([directManager]),[directManager], IsPresent([skiplevelManager]),[skiplevelManager], IsPresent([director]),[director])<ept id="1">&lt;/code&gt;</ept></target>
          </trans-unit>
          <trans-unit id="493" xml:space="preserve">
            <source>Item</source>
            <target state="new">Item</target>
          </trans-unit>
          <trans-unit id="494" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Description:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Description:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="495" xml:space="preserve">
            <source>The Item function returns one item from a multi-valued string/attribute.</source>
            <target state="new">The Item function returns one item from a multi-valued string/attribute.</target>
          </trans-unit>
          <trans-unit id="496" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Syntax:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Syntax:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="497" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>var Item(mvstr attribute, num index)<ept id="1">&lt;/code&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>var Item(mvstr attribute, num index)<ept id="1">&lt;/code&gt;</ept></target>
          </trans-unit>
          <trans-unit id="498" xml:space="preserve">
            <source>attribute: multi-valued attribute <bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept></source>
            <target state="new">attribute: multi-valued attribute <bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="499" xml:space="preserve">
            <source>index: index to an item in the multi-valued string.</source>
            <target state="new">index: index to an item in the multi-valued string.</target>
          </trans-unit>
          <trans-unit id="500" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Remarks:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Remarks:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="501" xml:space="preserve">
            <source>The Item function is useful together with the Contains function since the latter function will return the index to an item in the multi-valued attribute.</source>
            <target state="new">The Item function is useful together with the Contains function since the latter function will return the index to an item in the multi-valued attribute.</target>
          </trans-unit>
          <trans-unit id="502" xml:space="preserve">
            <source>Throws an error if index is out of bounds.</source>
            <target state="new">Throws an error if index is out of bounds.</target>
          </trans-unit>
          <trans-unit id="503" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Example:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Example:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="504" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>Mid(Item([proxyAddress],Contains([proxyAddress], ”SMTP:”)),6)<ept id="1">&lt;/code&gt;</ept>  <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>Mid(Item([proxyAddress],Contains([proxyAddress], ”SMTP:”)),6)<ept id="1">&lt;/code&gt;</ept>  <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="505" xml:space="preserve">
            <source>Returns the primary email address.</source>
            <target state="new">Returns the primary email address.</target>
          </trans-unit>
          <trans-unit id="506" xml:space="preserve">
            <source>ItemOrNull</source>
            <target state="new">ItemOrNull</target>
          </trans-unit>
          <trans-unit id="507" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Description:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Description:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="508" xml:space="preserve">
            <source>The ItemOrNull function returns one item from a multi-valued string/attribute.</source>
            <target state="new">The ItemOrNull function returns one item from a multi-valued string/attribute.</target>
          </trans-unit>
          <trans-unit id="509" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Syntax:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Syntax:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="510" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>var ItemOrNull(mvstr attribute, num index)<ept id="1">&lt;/code&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>var ItemOrNull(mvstr attribute, num index)<ept id="1">&lt;/code&gt;</ept></target>
          </trans-unit>
          <trans-unit id="511" xml:space="preserve">
            <source>attribute: multi-valued attribute <bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept></source>
            <target state="new">attribute: multi-valued attribute <bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="512" xml:space="preserve">
            <source>index: index to an item in the multi-valued string.</source>
            <target state="new">index: index to an item in the multi-valued string.</target>
          </trans-unit>
          <trans-unit id="513" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Remarks:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Remarks:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="514" xml:space="preserve">
            <source>The ItemOrNull function is useful together with the Contains function since the latter function will return the index to an item in the multi-valued attribute.</source>
            <target state="new">The ItemOrNull function is useful together with the Contains function since the latter function will return the index to an item in the multi-valued attribute.</target>
          </trans-unit>
          <trans-unit id="515" xml:space="preserve">
            <source>Returns a Null value if index is out of bounds.</source>
            <target state="new">Returns a Null value if index is out of bounds.</target>
          </trans-unit>
          <trans-unit id="516" xml:space="preserve">
            <source>Join</source>
            <target state="new">Join</target>
          </trans-unit>
          <trans-unit id="517" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Description:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Description:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="518" xml:space="preserve">
            <source>The Join function takes a multi-valued string and returns a single-valued string with specified separator inserted between each item.</source>
            <target state="new">The Join function takes a multi-valued string and returns a single-valued string with specified separator inserted between each item.</target>
          </trans-unit>
          <trans-unit id="519" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Syntax:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Syntax:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="520" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>str Join(mvstr attribute)<ept id="1">&lt;/code&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>str Join(mvstr attribute)<ept id="1">&lt;/code&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="521" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>str Join(mvstr attribute, str Delimiter)<ept id="1">&lt;/code&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>str Join(mvstr attribute, str Delimiter)<ept id="1">&lt;/code&gt;</ept></target>
          </trans-unit>
          <trans-unit id="522" xml:space="preserve">
            <source>attribute: Multi-valued attribute containing strings to be joined. <bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept></source>
            <target state="new">attribute: Multi-valued attribute containing strings to be joined. <bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="523" xml:space="preserve">
            <source>delimiter: Any string, used to separate the substrings in the returned string.</source>
            <target state="new">delimiter: Any string, used to separate the substrings in the returned string.</target>
          </trans-unit>
          <trans-unit id="524" xml:space="preserve">
            <source>If omitted, the space character (" ") is used.</source>
            <target state="new">If omitted, the space character (" ") is used.</target>
          </trans-unit>
          <trans-unit id="525" xml:space="preserve">
            <source>If Delimiter is a zero-length string ("") or Nothing, all items in the list are concatenated with no delimiters.</source>
            <target state="new">If Delimiter is a zero-length string ("") or Nothing, all items in the list are concatenated with no delimiters.</target>
          </trans-unit>
          <trans-unit id="526" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Remarks<ept id="1">&lt;/strong&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Remarks<ept id="1">&lt;/strong&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="527" xml:space="preserve">
            <source>There is parity between the Join and Split functions.</source>
            <target state="new">There is parity between the Join and Split functions.</target>
          </trans-unit>
          <trans-unit id="528" xml:space="preserve">
            <source>The Join function takes an array of strings and joins them using a delimiter string, to return a single string.</source>
            <target state="new">The Join function takes an array of strings and joins them using a delimiter string, to return a single string.</target>
          </trans-unit>
          <trans-unit id="529" xml:space="preserve">
            <source>The Split function takes a string and separates it at the delimiter, to return an array of strings.</source>
            <target state="new">The Split function takes a string and separates it at the delimiter, to return an array of strings.</target>
          </trans-unit>
          <trans-unit id="530" xml:space="preserve">
            <source>However, a key difference is that Join can concatenate strings with any delimiter string, Split can only separate strings using a single character delimiter.</source>
            <target state="new">However, a key difference is that Join can concatenate strings with any delimiter string, Split can only separate strings using a single character delimiter.</target>
          </trans-unit>
          <trans-unit id="531" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Example:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Example:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="532" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>Join([proxyAddresses],”,”)<ept id="1">&lt;/code&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>Join([proxyAddresses],”,”)<ept id="1">&lt;/code&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="533" xml:space="preserve">
            <source>Could return: “SMTP:john.doe@contoso.com,smtp:jd@contoso.com”</source>
            <target state="new">Could return: “SMTP:john.doe@contoso.com,smtp:jd@contoso.com”</target>
          </trans-unit>
          <trans-unit id="534" xml:space="preserve">
            <source>LCase</source>
            <target state="new">LCase</target>
          </trans-unit>
          <trans-unit id="535" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Description:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Description:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="536" xml:space="preserve">
            <source>The LCase function converts all characters in a string to lower case.</source>
            <target state="new">The LCase function converts all characters in a string to lower case.</target>
          </trans-unit>
          <trans-unit id="537" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Syntax:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Syntax:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="538" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>str LCase(str value)<ept id="1">&lt;/code&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>str LCase(str value)<ept id="1">&lt;/code&gt;</ept></target>
          </trans-unit>
          <trans-unit id="539" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Example:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Example:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="540" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>LCase(“TeSt”)<ept id="1">&lt;/code&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>LCase(“TeSt”)<ept id="1">&lt;/code&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="541" xml:space="preserve">
            <source>Returns “test”.</source>
            <target state="new">Returns “test”.</target>
          </trans-unit>
          <trans-unit id="542" xml:space="preserve">
            <source>Left</source>
            <target state="new">Left</target>
          </trans-unit>
          <trans-unit id="543" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Description:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Description:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="544" xml:space="preserve">
            <source>The Left function returns a specified number of characters from the left of a string.</source>
            <target state="new">The Left function returns a specified number of characters from the left of a string.</target>
          </trans-unit>
          <trans-unit id="545" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Syntax:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Syntax:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="546" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>str Left(str string, num NumChars)<ept id="1">&lt;/code&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>str Left(str string, num NumChars)<ept id="1">&lt;/code&gt;</ept></target>
          </trans-unit>
          <trans-unit id="547" xml:space="preserve">
            <source>string: the string to return characters from <bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept></source>
            <target state="new">string: the string to return characters from <bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="548" xml:space="preserve">
            <source>NumChars: a number identifying the number of characters to return from the beginning (left) of string</source>
            <target state="new">NumChars: a number identifying the number of characters to return from the beginning (left) of string</target>
          </trans-unit>
          <trans-unit id="549" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Remarks:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Remarks:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="550" xml:space="preserve">
            <source>A string containing the first numChars characters in string:</source>
            <target state="new">A string containing the first numChars characters in string:</target>
          </trans-unit>
          <trans-unit id="551" xml:space="preserve">
            <source>If numChars = 0, return empty string.</source>
            <target state="new">If numChars = 0, return empty string.</target>
          </trans-unit>
          <trans-unit id="552" xml:space="preserve">
            <source>If numChars &lt; 0, return input string.</source>
            <target state="new">If numChars &lt; 0, return input string.</target>
          </trans-unit>
          <trans-unit id="553" xml:space="preserve">
            <source>If string is null, return empty string.</source>
            <target state="new">If string is null, return empty string.</target>
          </trans-unit>
          <trans-unit id="554" xml:space="preserve">
            <source>If string contains fewer characters than the number specified in numChars, a string identical to string (ie. containing all characters in parameter 1) is returned.</source>
            <target state="new">If string contains fewer characters than the number specified in numChars, a string identical to string (ie. containing all characters in parameter 1) is returned.</target>
          </trans-unit>
          <trans-unit id="555" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Example:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Example:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="556" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>Left(“John Doe”, 3)<ept id="1">&lt;/code&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>Left(“John Doe”, 3)<ept id="1">&lt;/code&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="557" xml:space="preserve">
            <source>Returns “Joh”.</source>
            <target state="new">Returns “Joh”.</target>
          </trans-unit>
          <trans-unit id="558" xml:space="preserve">
            <source>Len</source>
            <target state="new">Len</target>
          </trans-unit>
          <trans-unit id="559" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Description:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Description:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="560" xml:space="preserve">
            <source>The Len function returns number of characters in a string.</source>
            <target state="new">The Len function returns number of characters in a string.</target>
          </trans-unit>
          <trans-unit id="561" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Syntax:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Syntax:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="562" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>num Len(str value)<ept id="1">&lt;/code&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>num Len(str value)<ept id="1">&lt;/code&gt;</ept></target>
          </trans-unit>
          <trans-unit id="563" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Example:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Example:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="564" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>Len(“John Doe”)<ept id="1">&lt;/code&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>Len(“John Doe”)<ept id="1">&lt;/code&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="565" xml:space="preserve">
            <source>Returns 8</source>
            <target state="new">Returns 8</target>
          </trans-unit>
          <trans-unit id="566" xml:space="preserve">
            <source>LTrim</source>
            <target state="new">LTrim</target>
          </trans-unit>
          <trans-unit id="567" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Description:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Description:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="568" xml:space="preserve">
            <source>The LTrim function removes leading white spaces from a string.</source>
            <target state="new">The LTrim function removes leading white spaces from a string.</target>
          </trans-unit>
          <trans-unit id="569" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Syntax:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Syntax:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="570" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>str LTrim(str value)<ept id="1">&lt;/code&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>str LTrim(str value)<ept id="1">&lt;/code&gt;</ept></target>
          </trans-unit>
          <trans-unit id="571" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Example:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Example:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="572" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>LTrim(“ Test ”)<ept id="1">&lt;/code&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>LTrim(“ Test ”)<ept id="1">&lt;/code&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="573" xml:space="preserve">
            <source>Returns “Test ”</source>
            <target state="new">Returns “Test ”</target>
          </trans-unit>
          <trans-unit id="574" xml:space="preserve">
            <source>Mid</source>
            <target state="new">Mid</target>
          </trans-unit>
          <trans-unit id="575" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Description:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Description:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="576" xml:space="preserve">
            <source>The Mid function returns a specified number of characters from a specified position in a string.</source>
            <target state="new">The Mid function returns a specified number of characters from a specified position in a string.</target>
          </trans-unit>
          <trans-unit id="577" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Syntax:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Syntax:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="578" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>str Mid(str string, num start, num NumChars)<ept id="1">&lt;/code&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>str Mid(str string, num start, num NumChars)<ept id="1">&lt;/code&gt;</ept></target>
          </trans-unit>
          <trans-unit id="579" xml:space="preserve">
            <source>string: the string to return characters from <bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept></source>
            <target state="new">string: the string to return characters from <bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="580" xml:space="preserve">
            <source>start: a number identifying the starting position in string to return characters from</source>
            <target state="new">start: a number identifying the starting position in string to return characters from</target>
          </trans-unit>
          <trans-unit id="581" xml:space="preserve">
            <source>NumChars: a number identifying the number of characters to return from position in string</source>
            <target state="new">NumChars: a number identifying the number of characters to return from position in string</target>
          </trans-unit>
          <trans-unit id="582" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Remarks:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Remarks:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="583" xml:space="preserve">
            <source>Return numChars characters starting from position start in string.<bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept></source>
            <target state="new">Return numChars characters starting from position start in string.<bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="584" xml:space="preserve">
            <source>A string containing numChars characters from position start in string:</source>
            <target state="new">A string containing numChars characters from position start in string:</target>
          </trans-unit>
          <trans-unit id="585" xml:space="preserve">
            <source>If numChars = 0, return empty string.</source>
            <target state="new">If numChars = 0, return empty string.</target>
          </trans-unit>
          <trans-unit id="586" xml:space="preserve">
            <source>If numChars &lt; 0, return input string.</source>
            <target state="new">If numChars &lt; 0, return input string.</target>
          </trans-unit>
          <trans-unit id="587" xml:space="preserve">
            <source>If start &gt; the length of string, return input string.</source>
            <target state="new">If start &gt; the length of string, return input string.</target>
          </trans-unit>
          <trans-unit id="588" xml:space="preserve">
            <source>If start &lt;= 0, return input string.</source>
            <target state="new">If start &lt;= 0, return input string.</target>
          </trans-unit>
          <trans-unit id="589" xml:space="preserve">
            <source>If string is null, return empty string.</source>
            <target state="new">If string is null, return empty string.</target>
          </trans-unit>
          <trans-unit id="590" xml:space="preserve">
            <source>If there are not numChar characters remaining in string from position start, as many characters as can be returned are returned.</source>
            <target state="new">If there are not numChar characters remaining in string from position start, as many characters as can be returned are returned.</target>
          </trans-unit>
          <trans-unit id="591" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Example:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Example:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="592" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>Mid(“John Doe”, 3, 5)<ept id="1">&lt;/code&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>Mid(“John Doe”, 3, 5)<ept id="1">&lt;/code&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="593" xml:space="preserve">
            <source>Returns “hn Do”.</source>
            <target state="new">Returns “hn Do”.</target>
          </trans-unit>
          <trans-unit id="594" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>Mid(“John Doe”, 6, 999)<ept id="1">&lt;/code&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>Mid(“John Doe”, 6, 999)<ept id="1">&lt;/code&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="595" xml:space="preserve">
            <source>Returns “Doe”</source>
            <target state="new">Returns “Doe”</target>
          </trans-unit>
          <trans-unit id="596" xml:space="preserve">
            <source>Now</source>
            <target state="new">Now</target>
          </trans-unit>
          <trans-unit id="597" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Description:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Description:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="598" xml:space="preserve">
            <source>The Now function returns a DateTime specifying the current date and time, according your computer's system date and time.</source>
            <target state="new">The Now function returns a DateTime specifying the current date and time, according your computer's system date and time.</target>
          </trans-unit>
          <trans-unit id="599" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Syntax:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Syntax:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="600" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>dt Now()<ept id="1">&lt;/code&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>dt Now()<ept id="1">&lt;/code&gt;</ept></target>
          </trans-unit>
          <trans-unit id="601" xml:space="preserve">
            <source>NumFromDate</source>
            <target state="new">NumFromDate</target>
          </trans-unit>
          <trans-unit id="602" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Description:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Description:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="603" xml:space="preserve">
            <source>The NumFromDate function returns a date in AD’s date format.</source>
            <target state="new">The NumFromDate function returns a date in AD’s date format.</target>
          </trans-unit>
          <trans-unit id="604" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Syntax:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Syntax:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="605" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>num NumFromDate(dt value)<ept id="1">&lt;/code&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>num NumFromDate(dt value)<ept id="1">&lt;/code&gt;</ept></target>
          </trans-unit>
          <trans-unit id="606" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Example:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Example:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="607" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>NumFromDate(CDate("2012-01-01 23:00:00"))<ept id="1">&lt;/code&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>NumFromDate(CDate("2012-01-01 23:00:00"))<ept id="1">&lt;/code&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="608" xml:space="preserve">
            <source>Returns 129699324000000000</source>
            <target state="new">Returns 129699324000000000</target>
          </trans-unit>
          <trans-unit id="609" xml:space="preserve">
            <source>PadLeft</source>
            <target state="new">PadLeft</target>
          </trans-unit>
          <trans-unit id="610" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Description:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Description:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="611" xml:space="preserve">
            <source>The PadLeft function left-pads a string to a specified length using a provided padding character.</source>
            <target state="new">The PadLeft function left-pads a string to a specified length using a provided padding character.</target>
          </trans-unit>
          <trans-unit id="612" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Syntax:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Syntax:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="613" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>str PadLeft(str string, num length, str padCharacter)<ept id="1">&lt;/code&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>str PadLeft(str string, num length, str padCharacter)<ept id="1">&lt;/code&gt;</ept></target>
          </trans-unit>
          <trans-unit id="614" xml:space="preserve">
            <source>string: the string to pad. <bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept></source>
            <target state="new">string: the string to pad. <bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="615" xml:space="preserve">
            <source>length: An integer representing the desired length of string. <bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept></source>
            <target state="new">length: An integer representing the desired length of string. <bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="616" xml:space="preserve">
            <source>padCharacter: A string consisting of a single character to use as the pad character</source>
            <target state="new">padCharacter: A string consisting of a single character to use as the pad character</target>
          </trans-unit>
          <trans-unit id="617" xml:space="preserve">
            <source>Remarks</source>
            <target state="new">Remarks</target>
          </trans-unit>
          <trans-unit id="618" xml:space="preserve">
            <source>If the length of string is less than length, then padCharacter is repeatedly appended to the beginning (left) of string until it has a length equal to length.</source>
            <target state="new">If the length of string is less than length, then padCharacter is repeatedly appended to the beginning (left) of string until it has a length equal to length.</target>
          </trans-unit>
          <trans-unit id="619" xml:space="preserve">
            <source>PadCharacter can be a space character, but it cannot be a null value.</source>
            <target state="new">PadCharacter can be a space character, but it cannot be a null value.</target>
          </trans-unit>
          <trans-unit id="620" xml:space="preserve">
            <source>If the length of string is equal to or greater than length, string is returned unchanged.</source>
            <target state="new">If the length of string is equal to or greater than length, string is returned unchanged.</target>
          </trans-unit>
          <trans-unit id="621" xml:space="preserve">
            <source>If string has a length greater than or equal to length, a string identical to string is returned.</source>
            <target state="new">If string has a length greater than or equal to length, a string identical to string is returned.</target>
          </trans-unit>
          <trans-unit id="622" xml:space="preserve">
            <source>If the length of string is less than length, then a new string of the desired length is returned containing string padded with a padCharacter.</source>
            <target state="new">If the length of string is less than length, then a new string of the desired length is returned containing string padded with a padCharacter.</target>
          </trans-unit>
          <trans-unit id="623" xml:space="preserve">
            <source>If string is null, the function returns an empty string.</source>
            <target state="new">If string is null, the function returns an empty string.</target>
          </trans-unit>
          <trans-unit id="624" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Example:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Example:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="625" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>PadLeft(“User”, 10, “0”)<ept id="1">&lt;/code&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>PadLeft(“User”, 10, “0”)<ept id="1">&lt;/code&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="626" xml:space="preserve">
            <source>Returns “000000User”.</source>
            <target state="new">Returns “000000User”.</target>
          </trans-unit>
          <trans-unit id="627" xml:space="preserve">
            <source>PadRight</source>
            <target state="new">PadRight</target>
          </trans-unit>
          <trans-unit id="628" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Description:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Description:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="629" xml:space="preserve">
            <source>The PadRight function right-pads a string to a specified length using a provided padding character.</source>
            <target state="new">The PadRight function right-pads a string to a specified length using a provided padding character.</target>
          </trans-unit>
          <trans-unit id="630" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Syntax:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Syntax:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="631" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>str PadRight(str string, num length, str padCharacter)<ept id="1">&lt;/code&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>str PadRight(str string, num length, str padCharacter)<ept id="1">&lt;/code&gt;</ept></target>
          </trans-unit>
          <trans-unit id="632" xml:space="preserve">
            <source>string: the string to pad.</source>
            <target state="new">string: the string to pad.</target>
          </trans-unit>
          <trans-unit id="633" xml:space="preserve">
            <source>length: An integer representing the desired length of string.</source>
            <target state="new">length: An integer representing the desired length of string.</target>
          </trans-unit>
          <trans-unit id="634" xml:space="preserve">
            <source>padCharacter: A string consisting of a single character to use as the pad character</source>
            <target state="new">padCharacter: A string consisting of a single character to use as the pad character</target>
          </trans-unit>
          <trans-unit id="635" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Remarks:<ept id="1">&lt;/strong&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Remarks:<ept id="1">&lt;/strong&gt;</ept></target>
          </trans-unit>
          <trans-unit id="636" xml:space="preserve">
            <source>If the length of string is less than length, then padCharacter is repeatedly appended to the end (right) of string until it has a length equal to length.</source>
            <target state="new">If the length of string is less than length, then padCharacter is repeatedly appended to the end (right) of string until it has a length equal to length.</target>
          </trans-unit>
          <trans-unit id="637" xml:space="preserve">
            <source>padCharacter can be a space character, but it cannot be a null value.</source>
            <target state="new">padCharacter can be a space character, but it cannot be a null value.</target>
          </trans-unit>
          <trans-unit id="638" xml:space="preserve">
            <source>If the length of string is equal to or greater than length, string is returned unchanged.</source>
            <target state="new">If the length of string is equal to or greater than length, string is returned unchanged.</target>
          </trans-unit>
          <trans-unit id="639" xml:space="preserve">
            <source>If string has a length greater than or equal to length, a string identical to string is returned.</source>
            <target state="new">If string has a length greater than or equal to length, a string identical to string is returned.</target>
          </trans-unit>
          <trans-unit id="640" xml:space="preserve">
            <source>If the length of string is less than length, then a new string of the desired length is returned containing string padded with a padCharacter.</source>
            <target state="new">If the length of string is less than length, then a new string of the desired length is returned containing string padded with a padCharacter.</target>
          </trans-unit>
          <trans-unit id="641" xml:space="preserve">
            <source>If string is null, the function returns an empty string.</source>
            <target state="new">If string is null, the function returns an empty string.</target>
          </trans-unit>
          <trans-unit id="642" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Example:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Example:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="643" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>PadRight(“User”, 10, “0”)<ept id="1">&lt;/code&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>PadRight(“User”, 10, “0”)<ept id="1">&lt;/code&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="644" xml:space="preserve">
            <source>Returns “User000000”.</source>
            <target state="new">Returns “User000000”.</target>
          </trans-unit>
          <trans-unit id="645" xml:space="preserve">
            <source>PCase</source>
            <target state="new">PCase</target>
          </trans-unit>
          <trans-unit id="646" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Description:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Description:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="647" xml:space="preserve">
            <source>The PCase function converts the first character of each space delimited word in a string to upper case, and all other characters are converted to lower case.</source>
            <target state="new">The PCase function converts the first character of each space delimited word in a string to upper case, and all other characters are converted to lower case.</target>
          </trans-unit>
          <trans-unit id="648" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Syntax:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Syntax:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="649" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>String PCase(string)<ept id="1">&lt;/code&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>String PCase(string)<ept id="1">&lt;/code&gt;</ept></target>
          </trans-unit>
          <trans-unit id="650" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Example:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Example:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="651" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>PCase(“TEsT”)<ept id="1">&lt;/code&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>PCase(“TEsT”)<ept id="1">&lt;/code&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="652" xml:space="preserve">
            <source>Returns “Test”.</source>
            <target state="new">Returns “Test”.</target>
          </trans-unit>
          <trans-unit id="653" xml:space="preserve">
            <source>RandomNum</source>
            <target state="new">RandomNum</target>
          </trans-unit>
          <trans-unit id="654" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Description:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Description:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="655" xml:space="preserve">
            <source>The RandomNum function returns a random number between a specified interval.</source>
            <target state="new">The RandomNum function returns a random number between a specified interval.</target>
          </trans-unit>
          <trans-unit id="656" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Syntax:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Syntax:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="657" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>num RandomNum(num start, num end)<ept id="1">&lt;/code&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>num RandomNum(num start, num end)<ept id="1">&lt;/code&gt;</ept></target>
          </trans-unit>
          <trans-unit id="658" xml:space="preserve">
            <source>start: a number identifying the lower limit of the random value to generate <bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept></source>
            <target state="new">start: a number identifying the lower limit of the random value to generate <bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="659" xml:space="preserve">
            <source>end: a number identifying the upper limit of the random value to generate</source>
            <target state="new">end: a number identifying the upper limit of the random value to generate</target>
          </trans-unit>
          <trans-unit id="660" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Example:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Example:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="661" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>Random(100,999)<ept id="1">&lt;/code&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>Random(100,999)<ept id="1">&lt;/code&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="662" xml:space="preserve">
            <source>Returns 734.</source>
            <target state="new">Returns 734.</target>
          </trans-unit>
          <trans-unit id="663" xml:space="preserve">
            <source>RemoveDuplicates</source>
            <target state="new">RemoveDuplicates</target>
          </trans-unit>
          <trans-unit id="664" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Description:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Description:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="665" xml:space="preserve">
            <source>The RemoveDuplicates function takes a multi-valued string and make sure each value is unique.</source>
            <target state="new">The RemoveDuplicates function takes a multi-valued string and make sure each value is unique.</target>
          </trans-unit>
          <trans-unit id="666" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Syntax:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Syntax:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="667" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>mvstr RemoveDuplicates(mvstr attribute)<ept id="1">&lt;/code&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>mvstr RemoveDuplicates(mvstr attribute)<ept id="1">&lt;/code&gt;</ept></target>
          </trans-unit>
          <trans-unit id="668" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Example:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Example:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="669" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>RemoveDuplicates([proxyAddresses])<ept id="1">&lt;/code&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>RemoveDuplicates([proxyAddresses])<ept id="1">&lt;/code&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="670" xml:space="preserve">
            <source>Returns a sanitized proxyAddress attribute where all duplicate values have been removed.</source>
            <target state="new">Returns a sanitized proxyAddress attribute where all duplicate values have been removed.</target>
          </trans-unit>
          <trans-unit id="671" xml:space="preserve">
            <source>Replace</source>
            <target state="new">Replace</target>
          </trans-unit>
          <trans-unit id="672" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Description:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Description:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="673" xml:space="preserve">
            <source>The Replace function replaces all occurrences of a string to another string.</source>
            <target state="new">The Replace function replaces all occurrences of a string to another string.</target>
          </trans-unit>
          <trans-unit id="674" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Syntax:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Syntax:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="675" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>str Replace(str string, str OldValue, str NewValue)<ept id="1">&lt;/code&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>str Replace(str string, str OldValue, str NewValue)<ept id="1">&lt;/code&gt;</ept></target>
          </trans-unit>
          <trans-unit id="676" xml:space="preserve">
            <source>string: A string to replace values in. <bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept></source>
            <target state="new">string: A string to replace values in. <bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="677" xml:space="preserve">
            <source>OldValue: The string to search for and to replace. <bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept></source>
            <target state="new">OldValue: The string to search for and to replace. <bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="678" xml:space="preserve">
            <source>NewValue: The string to replace to.</source>
            <target state="new">NewValue: The string to replace to.</target>
          </trans-unit>
          <trans-unit id="679" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Remarks:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Remarks:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="680" xml:space="preserve">
            <source>The function recognizes the following special monikers:</source>
            <target state="new">The function recognizes the following special monikers:</target>
          </trans-unit>
          <trans-unit id="681" xml:space="preserve">
            <source>\n – New Line</source>
            <target state="new">\n – New Line</target>
          </trans-unit>
          <trans-unit id="682" xml:space="preserve">
            <source>\r – Carriage Return</source>
            <target state="new">\r – Carriage Return</target>
          </trans-unit>
          <trans-unit id="683" xml:space="preserve">
            <source>\t – Tab</source>
            <target state="new">\t – Tab</target>
          </trans-unit>
          <trans-unit id="684" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Example:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Example:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="685" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>Replace([address],”\r\n”,”, “)<ept id="1">&lt;/code&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>Replace([address],”\r\n”,”, “)<ept id="1">&lt;/code&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="686" xml:space="preserve">
            <source>Replaces CRLF with a comma and space, and could lead to “One Microsoft Way, Redmond, WA, USA”</source>
            <target state="new">Replaces CRLF with a comma and space, and could lead to “One Microsoft Way, Redmond, WA, USA”</target>
          </trans-unit>
          <trans-unit id="687" xml:space="preserve">
            <source>ReplaceChars</source>
            <target state="new">ReplaceChars</target>
          </trans-unit>
          <trans-unit id="688" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Description:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Description:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="689" xml:space="preserve">
            <source>The ReplaceChars function replaces all occurrences of characters found in the ReplacePattern string.</source>
            <target state="new">The ReplaceChars function replaces all occurrences of characters found in the ReplacePattern string.</target>
          </trans-unit>
          <trans-unit id="690" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Syntax:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Syntax:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="691" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>str ReplaceChars(str string, str ReplacePattern)<ept id="1">&lt;/code&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>str ReplaceChars(str string, str ReplacePattern)<ept id="1">&lt;/code&gt;</ept></target>
          </trans-unit>
          <trans-unit id="692" xml:space="preserve">
            <source>string: A string to replace characters in.</source>
            <target state="new">string: A string to replace characters in.</target>
          </trans-unit>
          <trans-unit id="693" xml:space="preserve">
            <source>ReplacePattern: a string containing a dictionary with characters to replace.</source>
            <target state="new">ReplacePattern: a string containing a dictionary with characters to replace.</target>
          </trans-unit>
          <trans-unit id="694" xml:space="preserve">
            <source>The format is {source1}:{target1},{source2}:{target2},{sourceN},{targetN} where source is the character to find and target the string to replace with.</source>
            <target state="new">The format is {source1}:{target1},{source2}:{target2},{sourceN},{targetN} where source is the character to find and target the string to replace with.</target>
          </trans-unit>
          <trans-unit id="695" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Remarks:<ept id="1">&lt;/strong&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Remarks:<ept id="1">&lt;/strong&gt;</ept></target>
          </trans-unit>
          <trans-unit id="696" xml:space="preserve">
            <source>The function takes each occurrence of defined sources and replaces them with the targets.</source>
            <target state="new">The function takes each occurrence of defined sources and replaces them with the targets.</target>
          </trans-unit>
          <trans-unit id="697" xml:space="preserve">
            <source>The source must be exactly one (unicode) character.</source>
            <target state="new">The source must be exactly one (unicode) character.</target>
          </trans-unit>
          <trans-unit id="698" xml:space="preserve">
            <source>The source cannot be empty or longer than one character (parsing error).</source>
            <target state="new">The source cannot be empty or longer than one character (parsing error).</target>
          </trans-unit>
          <trans-unit id="699" xml:space="preserve">
            <source>The target can have multiple characters, e.g. ö:oe, β:ss.</source>
            <target state="new">The target can have multiple characters, e.g. ö:oe, β:ss.</target>
          </trans-unit>
          <trans-unit id="700" xml:space="preserve">
            <source>The target can be empty indicating that the character should be removed.</source>
            <target state="new">The target can be empty indicating that the character should be removed.</target>
          </trans-unit>
          <trans-unit id="701" xml:space="preserve">
            <source>The source is case sensitive and must be an exact match.</source>
            <target state="new">The source is case sensitive and must be an exact match.</target>
          </trans-unit>
          <trans-unit id="702" xml:space="preserve">
            <source>The , (comma) and : (colon) are reserved characters and cannot be replaced using this function.</source>
            <target state="new">The , (comma) and : (colon) are reserved characters and cannot be replaced using this function.</target>
          </trans-unit>
          <trans-unit id="703" xml:space="preserve">
            <source>Spaces and other white characters in the ReplacePattern string are ignored.</source>
            <target state="new">Spaces and other white characters in the ReplacePattern string are ignored.</target>
          </trans-unit>
          <trans-unit id="704" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Example:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Example:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="705" xml:space="preserve">
            <source>'%ReplaceString% = ’:,Å:A,Ä:A,Ö:O,å:a,ä:a,ö,o'</source>
            <target state="new">'%ReplaceString% = ’:,Å:A,Ä:A,Ö:O,å:a,ä:a,ö,o'</target>
          </trans-unit>
          <trans-unit id="706" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>ReplaceChars(”Räksmörgås”,%ReplaceString%)<ept id="1">&lt;/code&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>ReplaceChars(”Räksmörgås”,%ReplaceString%)<ept id="1">&lt;/code&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="707" xml:space="preserve">
            <source>Returns Raksmorgas</source>
            <target state="new">Returns Raksmorgas</target>
          </trans-unit>
          <trans-unit id="708" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>ReplaceChars(“O’Neil”,%ReplaceString%)<ept id="1">&lt;/code&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>ReplaceChars(“O’Neil”,%ReplaceString%)<ept id="1">&lt;/code&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="709" xml:space="preserve">
            <source>Returns “ONeil”, the single tick is defined to be removed.</source>
            <target state="new">Returns “ONeil”, the single tick is defined to be removed.</target>
          </trans-unit>
          <trans-unit id="710" xml:space="preserve">
            <source>Right</source>
            <target state="new">Right</target>
          </trans-unit>
          <trans-unit id="711" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Description:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Description:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="712" xml:space="preserve">
            <source>The Right function returns a specified number of characters from the right (end) of a string.</source>
            <target state="new">The Right function returns a specified number of characters from the right (end) of a string.</target>
          </trans-unit>
          <trans-unit id="713" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Syntax:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Syntax:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="714" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>str Right(str string, num NumChars)<ept id="1">&lt;/code&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>str Right(str string, num NumChars)<ept id="1">&lt;/code&gt;</ept></target>
          </trans-unit>
          <trans-unit id="715" xml:space="preserve">
            <source>string: the string to return characters from</source>
            <target state="new">string: the string to return characters from</target>
          </trans-unit>
          <trans-unit id="716" xml:space="preserve">
            <source>NumChars: a number identifying the number of characters to return from the end (right) of string</source>
            <target state="new">NumChars: a number identifying the number of characters to return from the end (right) of string</target>
          </trans-unit>
          <trans-unit id="717" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Remarks:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Remarks:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="718" xml:space="preserve">
            <source>NumChars characters are returned from the last position of string.</source>
            <target state="new">NumChars characters are returned from the last position of string.</target>
          </trans-unit>
          <trans-unit id="719" xml:space="preserve">
            <source>A string containing the last numChars characters in string:</source>
            <target state="new">A string containing the last numChars characters in string:</target>
          </trans-unit>
          <trans-unit id="720" xml:space="preserve">
            <source>If numChars = 0, return empty string.</source>
            <target state="new">If numChars = 0, return empty string.</target>
          </trans-unit>
          <trans-unit id="721" xml:space="preserve">
            <source>If numChars &lt; 0, return input string.</source>
            <target state="new">If numChars &lt; 0, return input string.</target>
          </trans-unit>
          <trans-unit id="722" xml:space="preserve">
            <source>If string is null, return empty string.</source>
            <target state="new">If string is null, return empty string.</target>
          </trans-unit>
          <trans-unit id="723" xml:space="preserve">
            <source>If string contains fewer characters than the number specified in NumChars, a string identical to string is returned.</source>
            <target state="new">If string contains fewer characters than the number specified in NumChars, a string identical to string is returned.</target>
          </trans-unit>
          <trans-unit id="724" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Example:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Example:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="725" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>Right(“John Doe”, 3)<ept id="1">&lt;/code&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>Right(“John Doe”, 3)<ept id="1">&lt;/code&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="726" xml:space="preserve">
            <source>Returns “Doe”.</source>
            <target state="new">Returns “Doe”.</target>
          </trans-unit>
          <trans-unit id="727" xml:space="preserve">
            <source>RTrim</source>
            <target state="new">RTrim</target>
          </trans-unit>
          <trans-unit id="728" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Description:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Description:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="729" xml:space="preserve">
            <source>The RTrim function removes trailing white spaces from a string.</source>
            <target state="new">The RTrim function removes trailing white spaces from a string.</target>
          </trans-unit>
          <trans-unit id="730" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Syntax:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Syntax:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="731" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>str RTrim(str value)<ept id="1">&lt;/code&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>str RTrim(str value)<ept id="1">&lt;/code&gt;</ept></target>
          </trans-unit>
          <trans-unit id="732" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Example:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Example:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="733" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>RTrim(“ Test ”)<ept id="1">&lt;/code&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>RTrim(“ Test ”)<ept id="1">&lt;/code&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="734" xml:space="preserve">
            <source>Returns “ Test”.</source>
            <target state="new">Returns “ Test”.</target>
          </trans-unit>
          <trans-unit id="735" xml:space="preserve">
            <source>Split</source>
            <target state="new">Split</target>
          </trans-unit>
          <trans-unit id="736" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Description:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Description:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="737" xml:space="preserve">
            <source>The Split function takes a string separated with a delimiter and makes it a multi-valued string.</source>
            <target state="new">The Split function takes a string separated with a delimiter and makes it a multi-valued string.</target>
          </trans-unit>
          <trans-unit id="738" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Syntax:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Syntax:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="739" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>mvstr Split(str value, str delimiter)<ept id="1">&lt;/code&gt;</ept> &lt;br?</source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>mvstr Split(str value, str delimiter)<ept id="1">&lt;/code&gt;</ept> &lt;br?</target>
          </trans-unit>
          <trans-unit id="740" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>mvstr Split(str value, str delimiter, num limit)<ept id="1">&lt;/code&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>mvstr Split(str value, str delimiter, num limit)<ept id="1">&lt;/code&gt;</ept></target>
          </trans-unit>
          <trans-unit id="741" xml:space="preserve">
            <source>value: the string with a delimiter character to separate.</source>
            <target state="new">value: the string with a delimiter character to separate.</target>
          </trans-unit>
          <trans-unit id="742" xml:space="preserve">
            <source>delimiter: single character to be used as the delimiter.</source>
            <target state="new">delimiter: single character to be used as the delimiter.</target>
          </trans-unit>
          <trans-unit id="743" xml:space="preserve">
            <source>limit: maximum number of values which will be returned.</source>
            <target state="new">limit: maximum number of values which will be returned.</target>
          </trans-unit>
          <trans-unit id="744" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Example:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Example:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="745" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>Split(“SMTP:john.doe@contoso.com,smtp:jd@contoso.com”,”,”)<ept id="1">&lt;/code&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>Split(“SMTP:john.doe@contoso.com,smtp:jd@contoso.com”,”,”)<ept id="1">&lt;/code&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="746" xml:space="preserve">
            <source>Returns a multi-valued string with 2 elements useful for the proxyAddress attribute</source>
            <target state="new">Returns a multi-valued string with 2 elements useful for the proxyAddress attribute</target>
          </trans-unit>
          <trans-unit id="747" xml:space="preserve">
            <source>StringFromGuid</source>
            <target state="new">StringFromGuid</target>
          </trans-unit>
          <trans-unit id="748" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Description:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Description:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="749" xml:space="preserve">
            <source>The StringFromGuid function takes a binary GUID and converts it to a string</source>
            <target state="new">The StringFromGuid function takes a binary GUID and converts it to a string</target>
          </trans-unit>
          <trans-unit id="750" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Syntax:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Syntax:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="751" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>str StringFromGuid(bin GUID)<ept id="1">&lt;/code&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>str StringFromGuid(bin GUID)<ept id="1">&lt;/code&gt;</ept></target>
          </trans-unit>
          <trans-unit id="752" xml:space="preserve">
            <source>StringFromSid</source>
            <target state="new">StringFromSid</target>
          </trans-unit>
          <trans-unit id="753" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Description:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Description:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="754" xml:space="preserve">
            <source>The StringFromSid function converts a byte array or a multi-valued byte array containing a security identifier to a string or multi-valued string.</source>
            <target state="new">The StringFromSid function converts a byte array or a multi-valued byte array containing a security identifier to a string or multi-valued string.</target>
          </trans-unit>
          <trans-unit id="755" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Syntax:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Syntax:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="756" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>str StringFromSid(bin ObjectSID)<ept id="1">&lt;/code&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>str StringFromSid(bin ObjectSID)<ept id="1">&lt;/code&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="757" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>mvstr StringFromSid(mvbin ObjectSID)<ept id="1">&lt;/code&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>mvstr StringFromSid(mvbin ObjectSID)<ept id="1">&lt;/code&gt;</ept></target>
          </trans-unit>
          <trans-unit id="758" xml:space="preserve">
            <source>Switch</source>
            <target state="new">Switch</target>
          </trans-unit>
          <trans-unit id="759" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Description:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Description:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="760" xml:space="preserve">
            <source>The Switch function is used to return a single value based on evaluated conditions.</source>
            <target state="new">The Switch function is used to return a single value based on evaluated conditions.</target>
          </trans-unit>
          <trans-unit id="761" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Syntax:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Syntax:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="762" xml:space="preserve">
            <source>`var Switch(exp expr1, var value1[, exp expr2, var value …</source>
            <target state="new">`var Switch(exp expr1, var value1[, exp expr2, var value …</target>
          </trans-unit>
          <trans-unit id="763" xml:space="preserve">
            <source>[, exp expr, var valueN]])`</source>
            <target state="new">[, exp expr, var valueN]])`</target>
          </trans-unit>
          <trans-unit id="764" xml:space="preserve">
            <source>expr: Variant expression you want to evaluate.</source>
            <target state="new">expr: Variant expression you want to evaluate.</target>
          </trans-unit>
          <trans-unit id="765" xml:space="preserve">
            <source>value: Value to be returned if the corresponding expression is True.</source>
            <target state="new">value: Value to be returned if the corresponding expression is True.</target>
          </trans-unit>
          <trans-unit id="766" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Remarks:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Remarks:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="767" xml:space="preserve">
            <source>The Switch function argument list consists of pairs of expressions and values.</source>
            <target state="new">The Switch function argument list consists of pairs of expressions and values.</target>
          </trans-unit>
          <trans-unit id="768" xml:space="preserve">
            <source>The expressions are evaluated from left to right, and the value associated with the first expression to evaluate to True is returned.</source>
            <target state="new">The expressions are evaluated from left to right, and the value associated with the first expression to evaluate to True is returned.</target>
          </trans-unit>
          <trans-unit id="769" xml:space="preserve">
            <source>If the parts aren't properly paired, a run-time error occurs.</source>
            <target state="new">If the parts aren't properly paired, a run-time error occurs.</target>
          </trans-unit>
          <trans-unit id="770" xml:space="preserve">
            <source>For example, if expr1 is True, Switch returns value1.</source>
            <target state="new">For example, if expr1 is True, Switch returns value1.</target>
          </trans-unit>
          <trans-unit id="771" xml:space="preserve">
            <source>If expr-1 is False, but expr-2 is True, Switch returns value-2, and so on.</source>
            <target state="new">If expr-1 is False, but expr-2 is True, Switch returns value-2, and so on.</target>
          </trans-unit>
          <trans-unit id="772" xml:space="preserve">
            <source>Switch returns a Nothing if:</source>
            <target state="new">Switch returns a Nothing if:</target>
          </trans-unit>
          <trans-unit id="773" xml:space="preserve">
            <source>None of the expressions are True.</source>
            <target state="new">None of the expressions are True.</target>
          </trans-unit>
          <trans-unit id="774" xml:space="preserve">
            <source>The first True expression has a corresponding value that is Null.</source>
            <target state="new">The first True expression has a corresponding value that is Null.</target>
          </trans-unit>
          <trans-unit id="775" xml:space="preserve">
            <source>Switch evaluates all of the expressions, even though it returns only one of them.</source>
            <target state="new">Switch evaluates all of the expressions, even though it returns only one of them.</target>
          </trans-unit>
          <trans-unit id="776" xml:space="preserve">
            <source>For this reason, you should watch for undesirable side effects.</source>
            <target state="new">For this reason, you should watch for undesirable side effects.</target>
          </trans-unit>
          <trans-unit id="777" xml:space="preserve">
            <source>For example, if the evaluation of any expression results in a division by zero error, an error occurs.</source>
            <target state="new">For example, if the evaluation of any expression results in a division by zero error, an error occurs.</target>
          </trans-unit>
          <trans-unit id="778" xml:space="preserve">
            <source>Value can also be the Error function which would return a custom string.</source>
            <target state="new">Value can also be the Error function which would return a custom string.</target>
          </trans-unit>
          <trans-unit id="779" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Example:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Example:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="780" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>Switch([city] = "London", "English", [city] = "Rome", "Italian", [city] = "Paris", "French", True, Error(“Unknown city”))<ept id="1">&lt;/code&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>Switch([city] = "London", "English", [city] = "Rome", "Italian", [city] = "Paris", "French", True, Error(“Unknown city”))<ept id="1">&lt;/code&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="781" xml:space="preserve">
            <source>Returns the language spoken in some major cities, otherwise returns an Error.</source>
            <target state="new">Returns the language spoken in some major cities, otherwise returns an Error.</target>
          </trans-unit>
          <trans-unit id="782" xml:space="preserve">
            <source>Trim</source>
            <target state="new">Trim</target>
          </trans-unit>
          <trans-unit id="783" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Description:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Description:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="784" xml:space="preserve">
            <source>The Trim function removes leading and trailing white spaces from a string.</source>
            <target state="new">The Trim function removes leading and trailing white spaces from a string.</target>
          </trans-unit>
          <trans-unit id="785" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Syntax:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Syntax:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="786" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>str Trim(str value)<ept id="1">&lt;/code&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>str Trim(str value)<ept id="1">&lt;/code&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="787" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>mvstr Trim(mvstr value)<ept id="1">&lt;/code&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>mvstr Trim(mvstr value)<ept id="1">&lt;/code&gt;</ept></target>
          </trans-unit>
          <trans-unit id="788" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Example:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Example:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="789" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>Trim(“ Test ”)<ept id="1">&lt;/code&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>Trim(“ Test ”)<ept id="1">&lt;/code&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="790" xml:space="preserve">
            <source>Returns “Test”.</source>
            <target state="new">Returns “Test”.</target>
          </trans-unit>
          <trans-unit id="791" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>Trim([proxyAddresses])<ept id="1">&lt;/code&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>Trim([proxyAddresses])<ept id="1">&lt;/code&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="792" xml:space="preserve">
            <source>Removes leading and trailing spaces for each value in the proxyAddress attribute.</source>
            <target state="new">Removes leading and trailing spaces for each value in the proxyAddress attribute.</target>
          </trans-unit>
          <trans-unit id="793" xml:space="preserve">
            <source>UCase</source>
            <target state="new">UCase</target>
          </trans-unit>
          <trans-unit id="794" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Description:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Description:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="795" xml:space="preserve">
            <source>The UCase function converts all characters in a string to upper case.</source>
            <target state="new">The UCase function converts all characters in a string to upper case.</target>
          </trans-unit>
          <trans-unit id="796" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Syntax:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Syntax:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="797" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>str UCase(str string)<ept id="1">&lt;/code&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>str UCase(str string)<ept id="1">&lt;/code&gt;</ept></target>
          </trans-unit>
          <trans-unit id="798" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Example:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Example:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="799" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>UCase(“TeSt”)<ept id="1">&lt;/code&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>UCase(“TeSt”)<ept id="1">&lt;/code&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="800" xml:space="preserve">
            <source>Returns “TEST”.</source>
            <target state="new">Returns “TEST”.</target>
          </trans-unit>
          <trans-unit id="801" xml:space="preserve">
            <source>Word</source>
            <target state="new">Word</target>
          </trans-unit>
          <trans-unit id="802" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Description:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Description:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="803" xml:space="preserve">
            <source>The Word function returns a word contained within a string, based on parameters describing the delimiters to use and the word number to return.</source>
            <target state="new">The Word function returns a word contained within a string, based on parameters describing the delimiters to use and the word number to return.</target>
          </trans-unit>
          <trans-unit id="804" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Syntax:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Syntax:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="805" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>str Word(str string, num WordNumber, str delimiters)<ept id="1">&lt;/code&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>str Word(str string, num WordNumber, str delimiters)<ept id="1">&lt;/code&gt;</ept></target>
          </trans-unit>
          <trans-unit id="806" xml:space="preserve">
            <source>string: the string to return a word from.</source>
            <target state="new">string: the string to return a word from.</target>
          </trans-unit>
          <trans-unit id="807" xml:space="preserve">
            <source>WordNumber: a number identifying which word number should be returned.</source>
            <target state="new">WordNumber: a number identifying which word number should be returned.</target>
          </trans-unit>
          <trans-unit id="808" xml:space="preserve">
            <source>delimiters: a string representing the delimiter(s) that should be used to identify words</source>
            <target state="new">delimiters: a string representing the delimiter(s) that should be used to identify words</target>
          </trans-unit>
          <trans-unit id="809" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Remarks:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Remarks:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="810" xml:space="preserve">
            <source>Each string of characters in string separated by the one of the characters in delimiters are identified as words:</source>
            <target state="new">Each string of characters in string separated by the one of the characters in delimiters are identified as words:</target>
          </trans-unit>
          <trans-unit id="811" xml:space="preserve">
            <source>If number &lt; 1, returns empty string.</source>
            <target state="new">If number &lt; 1, returns empty string.</target>
          </trans-unit>
          <trans-unit id="812" xml:space="preserve">
            <source>If string is null, returns empty string.</source>
            <target state="new">If string is null, returns empty string.</target>
          </trans-unit>
          <trans-unit id="813" xml:space="preserve">
            <source>If string contains less than number words, or string does not contain any words identified by delimeters, an empty string is returned.</source>
            <target state="new">If string contains less than number words, or string does not contain any words identified by delimeters, an empty string is returned.</target>
          </trans-unit>
          <trans-unit id="814" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Example:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Example:<ept id="1">&lt;/strong&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="815" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>Word(“The quick brown fox”,3,” “)<ept id="1">&lt;/code&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>Word(“The quick brown fox”,3,” “)<ept id="1">&lt;/code&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="816" xml:space="preserve">
            <source>Returns “brown”</source>
            <target state="new">Returns “brown”</target>
          </trans-unit>
          <trans-unit id="817" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>Word(“This,string!has&amp;many seperators”,3,”,!&amp;#”)<ept id="1">&lt;/code&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>Word(“This,string!has&amp;many seperators”,3,”,!&amp;#”)<ept id="1">&lt;/code&gt;</ept> <bpt id="3">&lt;html&gt;</bpt><ept id="3">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="818" xml:space="preserve">
            <source>Would return “has”</source>
            <target state="new">Would return “has”</target>
          </trans-unit>
          <trans-unit id="819" xml:space="preserve">
            <source>Additional Resources</source>
            <target state="new">Additional Resources</target>
          </trans-unit>
          <trans-unit id="820" xml:space="preserve">
            <source><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Understanding Declarative Provisioning Expressions<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></source>
            <target state="new"><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Understanding Declarative Provisioning Expressions<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></target>
          </trans-unit>
          <trans-unit id="821" xml:space="preserve">
            <source><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Azure AD Connect Sync: Customizing Synchronization options<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></source>
            <target state="new"><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Azure AD Connect Sync: Customizing Synchronization options<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></target>
          </trans-unit>
          <trans-unit id="822" xml:space="preserve">
            <source><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Integrating your on-premises identities with Azure Active Directory<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></source>
            <target state="new"><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Integrating your on-premises identities with Azure Active Directory<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></target>
          </trans-unit>
        </group>
      </group>
    </body>
  </file>
</xliff>