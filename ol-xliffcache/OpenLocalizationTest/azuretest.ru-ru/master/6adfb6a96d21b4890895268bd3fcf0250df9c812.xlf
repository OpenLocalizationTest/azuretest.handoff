<?xml version="1.0" encoding="utf-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" source-language="en-us" target-language="ru-ru" original="2/20/2016 4:42:20 PM" tool-id="MarkdownTransformer" product-name="N/A" product-version="N/A" build-num="1">
    <header>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6adfb6a96d21b4890895268bd3fcf0250df9c812</xliffext:olfilehash>
      <tool tool-id="MarkdownTransformer" tool-name="MarkdownToXliff" tool-version="1.0" tool-company="Microsoft" />
    </header>
    <body>
      <group extype="content">
        <group id="101">
          <trans-unit id="101" xml:space="preserve">
            <source>Code sample: Retry logic from Enterprise Library, in C# for connecting to SQL Database | Microsoft Azure</source>
            <target state="new">Code sample: Retry logic from Enterprise Library, in C# for connecting to SQL Database | Microsoft Azure</target>
          </trans-unit>
          <trans-unit id="102" xml:space="preserve">
            <source>Enterprise Library is designed to ease the task of including retry logic to your client programs that access cloud services.</source>
            <target state="new">Enterprise Library is designed to ease the task of including retry logic to your client programs that access cloud services.</target>
          </trans-unit>
          <trans-unit id="103" xml:space="preserve">
            <source>Code sample: Retry logic from Enterprise Library, in C&amp;#x23; for connecting to SQL Database</source>
            <target state="new">Code sample: Retry logic from Enterprise Library, in C&amp;#x23; for connecting to SQL Database</target>
          </trans-unit>
          <trans-unit id="104" xml:space="preserve">
            <source>This topic presents a complete code sample that demonstrates the Enterprise Library (EntLib).</source>
            <target state="new">This topic presents a complete code sample that demonstrates the Enterprise Library (EntLib).</target>
          </trans-unit>
          <trans-unit id="105" xml:space="preserve">
            <source>EntLib eases the programmer's task of including retry logic in their client that interact with the SQL Database cloud service of Microsoft Azure.</source>
            <target state="new">EntLib eases the programmer's task of including retry logic in their client that interact with the SQL Database cloud service of Microsoft Azure.</target>
          </trans-unit>
          <trans-unit id="106" xml:space="preserve">
            <source>Enterprise Library 6 (EntLib60) is the latest version.</source>
            <target state="new">Enterprise Library 6 (EntLib60) is the latest version.</target>
          </trans-unit>
          <trans-unit id="107" xml:space="preserve">
            <source>The following links are recommended for in-depth information about EntLib:</source>
            <target state="new">The following links are recommended for in-depth information about EntLib:</target>
          </trans-unit>
          <trans-unit id="108" xml:space="preserve">
            <source><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Enterprise Library 6 – April 2013<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>Provides numerous links to further information.</source>
            <target state="new"><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Enterprise Library 6 – April 2013<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>Provides numerous links to further information.</target>
          </trans-unit>
          <trans-unit id="109" xml:space="preserve">
            <source>Free ebook in .PDF format from Microsoft:<bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept><bpt id="3CapsExtId1">&lt;link&gt;</bpt><bpt id="3CapsExtId2">&lt;linkText&gt;</bpt>Developer's Guide to Microsoft Enterprise Library, 2nd Edition<ept id="3CapsExtId2">&lt;/linkText&gt;</ept><bpt id="3CapsExtId3">&lt;title&gt;</bpt><ept id="3CapsExtId3">&lt;/title&gt;</ept><ept id="3CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">Free ebook in .PDF format from Microsoft:<bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept><bpt id="3CapsExtId1">&lt;link&gt;</bpt><bpt id="3CapsExtId2">&lt;linkText&gt;</bpt>Developer's Guide to Microsoft Enterprise Library, 2nd Edition<ept id="3CapsExtId2">&lt;/linkText&gt;</ept><bpt id="3CapsExtId3">&lt;title&gt;</bpt><ept id="3CapsExtId3">&lt;/title&gt;</ept><ept id="3CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="110" xml:space="preserve">
            <source>Prerequisites</source>
            <target state="new">Prerequisites</target>
          </trans-unit>
          <trans-unit id="111" xml:space="preserve">
            <source>EntLib is not included when you install Visual Studio and Microsoft .NET Framework.</source>
            <target state="new">EntLib is not included when you install Visual Studio and Microsoft .NET Framework.</target>
          </trans-unit>
          <trans-unit id="112" xml:space="preserve">
            <source>You must perform a separate download action.</source>
            <target state="new">You must perform a separate download action.</target>
          </trans-unit>
          <trans-unit id="113" xml:space="preserve">
            <source>The <bpt id="2">&lt;strong&gt;</bpt>NuGet<ept id="2">&lt;/strong&gt;</ept> system through Visual Studio makes the download easy.</source>
            <target state="new">The <bpt id="2">&lt;strong&gt;</bpt>NuGet<ept id="2">&lt;/strong&gt;</ept> system through Visual Studio makes the download easy.</target>
          </trans-unit>
          <trans-unit id="114" xml:space="preserve">
            <source>The download results in a directory named packages\ under the same directory where your Visual Studio solution .sln file is stored.</source>
            <target state="new">The download results in a directory named packages\ under the same directory where your Visual Studio solution .sln file is stored.</target>
          </trans-unit>
          <trans-unit id="115" xml:space="preserve">
            <source>The EntLib assembly .dll files are installed in a subdirectory.</source>
            <target state="new">The EntLib assembly .dll files are installed in a subdirectory.</target>
          </trans-unit>
          <trans-unit id="116" xml:space="preserve">
            <source>The two assembly files are named as follows:</source>
            <target state="new">The two assembly files are named as follows:</target>
          </trans-unit>
          <trans-unit id="117" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.dll<ept id="1">&lt;/code&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.dll<ept id="1">&lt;/code&gt;</ept></target>
          </trans-unit>
          <trans-unit id="118" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.Data.dll<ept id="1">&lt;/code&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.Data.dll<ept id="1">&lt;/code&gt;</ept></target>
          </trans-unit>
          <trans-unit id="119" xml:space="preserve">
            <source>C&amp;#x23; code files explained</source>
            <target state="new">C&amp;#x23; code files explained</target>
          </trans-unit>
          <trans-unit id="120" xml:space="preserve">
            <source>The C# code sample consists of three .cs files whose content is pasted into the sections that follow.</source>
            <target state="new">The C# code sample consists of three .cs files whose content is pasted into the sections that follow.</target>
          </trans-unit>
          <trans-unit id="121" xml:space="preserve">
            <source>Their file names are:</source>
            <target state="new">Their file names are:</target>
          </trans-unit>
          <trans-unit id="122" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>Program.cs<ept id="1">&lt;/code&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>Program.cs<ept id="1">&lt;/code&gt;</ept></target>
          </trans-unit>
          <trans-unit id="123" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>Custom_SqlDatabaseTransientErrorDetectionStrategy.cs<ept id="1">&lt;/code&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>Custom_SqlDatabaseTransientErrorDetectionStrategy.cs<ept id="1">&lt;/code&gt;</ept></target>
          </trans-unit>
          <trans-unit id="124" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>ForcePersistent_SqlCommandTransientErrorDetectionStrategy.cs<ept id="1">&lt;/code&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>ForcePersistent_SqlCommandTransientErrorDetectionStrategy.cs<ept id="1">&lt;/code&gt;</ept></target>
          </trans-unit>
          <trans-unit id="125" xml:space="preserve">
            <source>Shorter <bpt id="2">&lt;code&gt;</bpt>Program.cs<ept id="2">&lt;/code&gt;</ept> without <bpt id="4">&lt;code&gt;</bpt>try/catch<ept id="4">&lt;/code&gt;</ept></source>
            <target state="new">Shorter <bpt id="2">&lt;code&gt;</bpt>Program.cs<ept id="2">&lt;/code&gt;</ept> without <bpt id="4">&lt;code&gt;</bpt>try/catch<ept id="4">&lt;/code&gt;</ept></target>
          </trans-unit>
          <trans-unit id="126" xml:space="preserve">
            <source>Another .cs file provided is a much shorter version of <bpt id="2">&lt;code&gt;</bpt>Program.cs<ept id="2">&lt;/code&gt;</ept>.</source>
            <target state="new">Another .cs file provided is a much shorter version of <bpt id="2">&lt;code&gt;</bpt>Program.cs<ept id="2">&lt;/code&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="127" xml:space="preserve">
            <source>All the <bpt id="2">&lt;code&gt;</bpt>try/catch<ept id="2">&lt;/code&gt;</ept> code has been removed.</source>
            <target state="new">All the <bpt id="2">&lt;code&gt;</bpt>try/catch<ept id="2">&lt;/code&gt;</ept> code has been removed.</target>
          </trans-unit>
          <trans-unit id="128" xml:space="preserve">
            <source>This makes it easier for the eye to see the EntLib calls.</source>
            <target state="new">This makes it easier for the eye to see the EntLib calls.</target>
          </trans-unit>
          <trans-unit id="129" xml:space="preserve">
            <source>Test .cs file</source>
            <target state="new">Test .cs file</target>
          </trans-unit>
          <trans-unit id="130" xml:space="preserve">
            <source>Testing your retry logic is tricky because there is no obvious way to cause a genuine transient fault error.</source>
            <target state="new">Testing your retry logic is tricky because there is no obvious way to cause a genuine transient fault error.</target>
          </trans-unit>
          <trans-unit id="131" xml:space="preserve">
            <source>One test solution is to use temporary code to:</source>
            <target state="new">One test solution is to use temporary code to:</target>
          </trans-unit>
          <trans-unit id="132" xml:space="preserve">
            <source>Cause a pretend transient fault.</source>
            <target state="new">Cause a pretend transient fault.</target>
          </trans-unit>
          <trans-unit id="133" xml:space="preserve">
            <source>Fix the cause of the transient fault.</source>
            <target state="new">Fix the cause of the transient fault.</target>
          </trans-unit>
          <trans-unit id="134" xml:space="preserve">
            <source>Retry the connection or query, expecting success.</source>
            <target state="new">Retry the connection or query, expecting success.</target>
          </trans-unit>
          <trans-unit id="135" xml:space="preserve">
            <source>To help you test, another .cs file is provided that you can use as a temporary substitute:</source>
            <target state="new">To help you test, another .cs file is provided that you can use as a temporary substitute:</target>
          </trans-unit>
          <trans-unit id="136" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>Test2_TransientErrorDetectionStrategy<ept id="1">&lt;/code&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>Test2_TransientErrorDetectionStrategy<ept id="1">&lt;/code&gt;</ept></target>
          </trans-unit>
          <trans-unit id="137" xml:space="preserve">
            <source>Temporary replacement for <bpt id="2">&lt;code&gt;</bpt>Custom_SqlDatabaseTransientErrorDetectionStrategy.cs<ept id="2">&lt;/code&gt;</ept>.</source>
            <target state="new">Temporary replacement for <bpt id="2">&lt;code&gt;</bpt>Custom_SqlDatabaseTransientErrorDetectionStrategy.cs<ept id="2">&lt;/code&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="138" xml:space="preserve">
            <source>The code locations at which to make changes for this testing are tagged with a comment that contains the string <bpt id="2">&lt;code&gt;</bpt>TEST.PASSWORD_FIX<ept id="2">&lt;/code&gt;</ept>.</source>
            <target state="new">The code locations at which to make changes for this testing are tagged with a comment that contains the string <bpt id="2">&lt;code&gt;</bpt>TEST.PASSWORD_FIX<ept id="2">&lt;/code&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="139" xml:space="preserve">
            <source>Compile and run the code sample</source>
            <target state="new">Compile and run the code sample</target>
          </trans-unit>
          <trans-unit id="140" xml:space="preserve">
            <source>You can compile the sample with the following steps:</source>
            <target state="new">You can compile the sample with the following steps:</target>
          </trans-unit>
          <trans-unit id="141" xml:space="preserve">
            <source>In Visual Studio, create a new project from the C# Console Application template.</source>
            <target state="new">In Visual Studio, create a new project from the C# Console Application template.</target>
          </trans-unit>
          <trans-unit id="142" xml:space="preserve">
            <source>Right-click your project, and then add the .cs files for which source code is provided in this topic.</source>
            <target state="new">Right-click your project, and then add the .cs files for which source code is provided in this topic.</target>
          </trans-unit>
          <trans-unit id="143" xml:space="preserve">
            <source>In a <bpt id="2">&lt;code&gt;</bpt>cmd.exe<ept id="2">&lt;/code&gt;</ept> command window, run the program as shown next.</source>
            <target state="new">In a <bpt id="2">&lt;code&gt;</bpt>cmd.exe<ept id="2">&lt;/code&gt;</ept> command window, run the program as shown next.</target>
          </trans-unit>
          <trans-unit id="144" xml:space="preserve">
            <source>Actual output from a run is also shown:</source>
            <target state="new">Actual output from a run is also shown:</target>
          </trans-unit>
          <trans-unit id="145" xml:space="preserve">
            <source>The C# source code for the .cs files are in the following sections.</source>
            <target state="new">The C# source code for the .cs files are in the following sections.</target>
          </trans-unit>
          <trans-unit id="146" xml:space="preserve">
            <source>Program.cs file</source>
            <target state="new">Program.cs file</target>
          </trans-unit>
          <trans-unit id="147" xml:space="preserve">
            <source>The following code file, Program.cs, is long because it contains <bpt id="2">&lt;code&gt;</bpt>try/catch<ept id="2">&lt;/code&gt;</ept> blocks that execute only if an error occurs.</source>
            <target state="new">The following code file, Program.cs, is long because it contains <bpt id="2">&lt;code&gt;</bpt>try/catch<ept id="2">&lt;/code&gt;</ept> blocks that execute only if an error occurs.</target>
          </trans-unit>
          <trans-unit id="148" xml:space="preserve">
            <source>Near the end of the present topic is a much shorter version of <bpt id="2">&lt;code&gt;</bpt>Program.cs<ept id="2">&lt;/code&gt;</ept> with all the <bpt id="4">&lt;code&gt;</bpt>try/catch<ept id="4">&lt;/code&gt;</ept> lines removed.</source>
            <target state="new">Near the end of the present topic is a much shorter version of <bpt id="2">&lt;code&gt;</bpt>Program.cs<ept id="2">&lt;/code&gt;</ept> with all the <bpt id="4">&lt;code&gt;</bpt>try/catch<ept id="4">&lt;/code&gt;</ept> lines removed.</target>
          </trans-unit>
          <trans-unit id="149" xml:space="preserve">
            <source>The <bpt id="2">&lt;code&gt;</bpt>Main<ept id="2">&lt;/code&gt;</ept> method is in <bpt id="4">&lt;code&gt;</bpt>Program.cs<ept id="4">&lt;/code&gt;</ept>.</source>
            <target state="new">The <bpt id="2">&lt;code&gt;</bpt>Main<ept id="2">&lt;/code&gt;</ept> method is in <bpt id="4">&lt;code&gt;</bpt>Program.cs<ept id="4">&lt;/code&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="150" xml:space="preserve">
            <source>The call stack runs as follows:</source>
            <target state="new">The call stack runs as follows:</target>
          </trans-unit>
          <trans-unit id="151" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>Main<ept id="1">&lt;/code&gt;</ept> calls <bpt id="3">&lt;code&gt;</bpt>ConnectAndQuery<ept id="3">&lt;/code&gt;</ept>.</source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>Main<ept id="1">&lt;/code&gt;</ept> calls <bpt id="3">&lt;code&gt;</bpt>ConnectAndQuery<ept id="3">&lt;/code&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="152" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>ConnectAndQuery<ept id="1">&lt;/code&gt;</ept> calls <bpt id="3">&lt;code&gt;</bpt>InitializeFields<ept id="3">&lt;/code&gt;</ept>.</source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>ConnectAndQuery<ept id="1">&lt;/code&gt;</ept> calls <bpt id="3">&lt;code&gt;</bpt>InitializeFields<ept id="3">&lt;/code&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="153" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>ConnectAndQuery<ept id="1">&lt;/code&gt;</ept> calls <bpt id="3">&lt;code&gt;</bpt>EstablishConnection<ept id="3">&lt;/code&gt;</ept>.</source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>ConnectAndQuery<ept id="1">&lt;/code&gt;</ept> calls <bpt id="3">&lt;code&gt;</bpt>EstablishConnection<ept id="3">&lt;/code&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="154" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>EstablishConnection<ept id="1">&lt;/code&gt;</ept> calls <bpt id="3">&lt;code&gt;</bpt>IssueQueryCommand<ept id="3">&lt;/code&gt;</ept>.</source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>EstablishConnection<ept id="1">&lt;/code&gt;</ept> calls <bpt id="3">&lt;code&gt;</bpt>IssueQueryCommand<ept id="3">&lt;/code&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="155" xml:space="preserve">
            <source>&amp;nbsp;</source>
            <target state="new">&amp;nbsp;</target>
          </trans-unit>
          <trans-unit id="156" xml:space="preserve">
            <source>&amp;nbsp;</source>
            <target state="new">&amp;nbsp;</target>
          </trans-unit>
          <trans-unit id="157" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>Custom_SqlDatabaseTransientErrorDetectionStrategy.cs<ept id="1">&lt;/code&gt;</ept> file</source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>Custom_SqlDatabaseTransientErrorDetectionStrategy.cs<ept id="1">&lt;/code&gt;</ept> file</target>
          </trans-unit>
          <trans-unit id="158" xml:space="preserve">
            <source>EntLib60 has a class named <bpt id="2">&lt;code&gt;</bpt>ReliableSqlConnection<ept id="2">&lt;/code&gt;</ept>.</source>
            <target state="new">EntLib60 has a class named <bpt id="2">&lt;code&gt;</bpt>ReliableSqlConnection<ept id="2">&lt;/code&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="159" xml:space="preserve">
            <source>You can control how the connection instance decides whether an exception is a transient error by assigning to it a class that implements <bpt id="2">&lt;code&gt;</bpt>ITransientErrorDetectionStrategy<ept id="2">&lt;/code&gt;</ept>.</source>
            <target state="new">You can control how the connection instance decides whether an exception is a transient error by assigning to it a class that implements <bpt id="2">&lt;code&gt;</bpt>ITransientErrorDetectionStrategy<ept id="2">&lt;/code&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="160" xml:space="preserve">
            <source>EntLib60 offers the class <bpt id="2">&lt;code&gt;</bpt>SqlDatabaseTransientErrorDetectionStrategy<ept id="2">&lt;/code&gt;</ept>.</source>
            <target state="new">EntLib60 offers the class <bpt id="2">&lt;code&gt;</bpt>SqlDatabaseTransientErrorDetectionStrategy<ept id="2">&lt;/code&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="161" xml:space="preserve">
            <source>But in this topic we chose to implement and use our own custom class <bpt id="2">&lt;code&gt;</bpt>Custom_SqlDatabaseTransientErrorDetectionStrategy<ept id="2">&lt;/code&gt;</ept>.</source>
            <target state="new">But in this topic we chose to implement and use our own custom class <bpt id="2">&lt;code&gt;</bpt>Custom_SqlDatabaseTransientErrorDetectionStrategy<ept id="2">&lt;/code&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="162" xml:space="preserve">
            <source>Our custom class has a whitelist of values to compare against <bpt id="2">&lt;code&gt;</bpt>SqlException.Number<ept id="2">&lt;/code&gt;</ept>.</source>
            <target state="new">Our custom class has a whitelist of values to compare against <bpt id="2">&lt;code&gt;</bpt>SqlException.Number<ept id="2">&lt;/code&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="163" xml:space="preserve">
            <source>&amp;nbsp;</source>
            <target state="new">&amp;nbsp;</target>
          </trans-unit>
          <trans-unit id="164" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>ForcePersistent_SqlCommandTransientErrorDetectionStrategy.cs<ept id="1">&lt;/code&gt;</ept> file</source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>ForcePersistent_SqlCommandTransientErrorDetectionStrategy.cs<ept id="1">&lt;/code&gt;</ept> file</target>
          </trans-unit>
          <trans-unit id="165" xml:space="preserve">
            <source>This custom class that implements <bpt id="2">&lt;code&gt;</bpt>ITransientErrorDetectionStrategy<ept id="2">&lt;/code&gt;</ept> enforces our choice to never consider let EntLib60 consider any query command error to be merely transient.</source>
            <target state="new">This custom class that implements <bpt id="2">&lt;code&gt;</bpt>ITransientErrorDetectionStrategy<ept id="2">&lt;/code&gt;</ept> enforces our choice to never consider let EntLib60 consider any query command error to be merely transient.</target>
          </trans-unit>
          <trans-unit id="166" xml:space="preserve">
            <source>Instead, the overall program is designed to assess the <bpt id="2">&lt;code&gt;</bpt>SqlException.Number<ept id="2">&lt;/code&gt;</ept> in its own custom logic.</source>
            <target state="new">Instead, the overall program is designed to assess the <bpt id="2">&lt;code&gt;</bpt>SqlException.Number<ept id="2">&lt;/code&gt;</ept> in its own custom logic.</target>
          </trans-unit>
          <trans-unit id="167" xml:space="preserve">
            <source>With the class in this section, we made the design choice to have our program discard and recreate a new connection before retrying any failed query command, transient or not.</source>
            <target state="new">With the class in this section, we made the design choice to have our program discard and recreate a new connection before retrying any failed query command, transient or not.</target>
          </trans-unit>
          <trans-unit id="168" xml:space="preserve">
            <source>&amp;nbsp;</source>
            <target state="new">&amp;nbsp;</target>
          </trans-unit>
          <trans-unit id="169" xml:space="preserve">
            <source>Test your retry logic</source>
            <target state="new">Test your retry logic</target>
          </trans-unit>
          <trans-unit id="170" xml:space="preserve">
            <source>It is tricky to test your EntLib60 program.</source>
            <target state="new">It is tricky to test your EntLib60 program.</target>
          </trans-unit>
          <trans-unit id="171" xml:space="preserve">
            <source>It is difficult to cause a genuinely transient error, and to controls its timings.</source>
            <target state="new">It is difficult to cause a genuinely transient error, and to controls its timings.</target>
          </trans-unit>
          <trans-unit id="172" xml:space="preserve">
            <source>This demo code includes a simple technique you can use to mimic a transient error.</source>
            <target state="new">This demo code includes a simple technique you can use to mimic a transient error.</target>
          </trans-unit>
          <trans-unit id="173" xml:space="preserve">
            <source>The technique is to use our custom detector <bpt id="2">&lt;code&gt;</bpt>Test2_TransientErrorDetectionStrategy<ept id="2">&lt;/code&gt;</ept> class in place of the <bpt id="4">&lt;code&gt;</bpt>Custom_SqlTransientErrorDetectionStrategy<ept id="4">&lt;/code&gt;</ept> class.</source>
            <target state="new">The technique is to use our custom detector <bpt id="2">&lt;code&gt;</bpt>Test2_TransientErrorDetectionStrategy<ept id="2">&lt;/code&gt;</ept> class in place of the <bpt id="4">&lt;code&gt;</bpt>Custom_SqlTransientErrorDetectionStrategy<ept id="4">&lt;/code&gt;</ept> class.</target>
          </trans-unit>
          <trans-unit id="174" xml:space="preserve">
            <source>This way you can force the <bpt id="2">&lt;code&gt;</bpt>ReliableSqlConnection<ept id="2">&lt;/code&gt;</ept> of EntLib60 to assess <bpt id="4">&lt;em&gt;</bpt>all<ept id="4">&lt;/em&gt;</ept> <bpt id="6">&lt;code&gt;</bpt>SqlException<ept id="6">&lt;/code&gt;</ept> occurrences as being transient.</source>
            <target state="new">This way you can force the <bpt id="2">&lt;code&gt;</bpt>ReliableSqlConnection<ept id="2">&lt;/code&gt;</ept> of EntLib60 to assess <bpt id="4">&lt;em&gt;</bpt>all<ept id="4">&lt;/em&gt;</ept> <bpt id="6">&lt;code&gt;</bpt>SqlException<ept id="6">&lt;/code&gt;</ept> occurrences as being transient.</target>
          </trans-unit>
          <trans-unit id="175" xml:space="preserve">
            <source>The trick is to have the program self-fix the problem before the first retry.</source>
            <target state="new">The trick is to have the program self-fix the problem before the first retry.</target>
          </trans-unit>
          <trans-unit id="176" xml:space="preserve">
            <source>Misspelled password trick</source>
            <target state="new">Misspelled password trick</target>
          </trans-unit>
          <trans-unit id="177" xml:space="preserve">
            <source>An easy approach is to start with a misspelled value for the connection password.</source>
            <target state="new">An easy approach is to start with a misspelled value for the connection password.</target>
          </trans-unit>
          <trans-unit id="178" xml:space="preserve">
            <source>When this causes an <bpt id="2">&lt;code&gt;</bpt>SqlException<ept id="2">&lt;/code&gt;</ept>, with <bpt id="4">&lt;code&gt;</bpt>sqlExc.Number==18456<ept id="4">&lt;/code&gt;</ept>, the program must fix the password.</source>
            <target state="new">When this causes an <bpt id="2">&lt;code&gt;</bpt>SqlException<ept id="2">&lt;/code&gt;</ept>, with <bpt id="4">&lt;code&gt;</bpt>sqlExc.Number==18456<ept id="4">&lt;/code&gt;</ept>, the program must fix the password.</target>
          </trans-unit>
          <trans-unit id="179" xml:space="preserve">
            <source>On the retry the program succeeds.</source>
            <target state="new">On the retry the program succeeds.</target>
          </trans-unit>
          <trans-unit id="180" xml:space="preserve">
            <source>To implement this test in our demo program, search the source code for all occurrences of <bpt id="2">&lt;code&gt;</bpt>TEST.PASSWORD_FIX<ept id="2">&lt;/code&gt;</ept>.</source>
            <target state="new">To implement this test in our demo program, search the source code for all occurrences of <bpt id="2">&lt;code&gt;</bpt>TEST.PASSWORD_FIX<ept id="2">&lt;/code&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="181" xml:space="preserve">
            <source>After you find all occurrences of <bpt id="2">&lt;code&gt;</bpt>TEST.PASSWORD_FIX<ept id="2">&lt;/code&gt;</ept> and make the changes that are explained in comments at each location, you will have made the following changes:</source>
            <target state="new">After you find all occurrences of <bpt id="2">&lt;code&gt;</bpt>TEST.PASSWORD_FIX<ept id="2">&lt;/code&gt;</ept> and make the changes that are explained in comments at each location, you will have made the following changes:</target>
          </trans-unit>
          <trans-unit id="182" xml:space="preserve">
            <source>In the live code in the <bpt id="2">&lt;code&gt;</bpt>InitializeFields<ept id="2">&lt;/code&gt;</ept> method, change the password value to an incorrect value.</source>
            <target state="new">In the live code in the <bpt id="2">&lt;code&gt;</bpt>InitializeFields<ept id="2">&lt;/code&gt;</ept> method, change the password value to an incorrect value.</target>
          </trans-unit>
          <trans-unit id="183" xml:space="preserve">
            <source>In <bpt id="2">&lt;code&gt;</bpt>//<ept id="2">&lt;/code&gt;</ept> commented code, in the <bpt id="4">&lt;code&gt;</bpt>EstablishConnection<ept id="4">&lt;/code&gt;</ept> method, there is an entire <bpt id="6">&lt;code&gt;</bpt>catch<ept id="6">&lt;/code&gt;</ept> block...<bpt id="8">&lt;html&gt;</bpt><ept id="8">&lt;/html&gt;</ept><bpt id="9">&lt;code&gt;</bpt>//catch (SDSqlC.SqlException sqlExc)<ept id="9">&lt;/code&gt;</ept><bpt id="10">&lt;html&gt;</bpt><ept id="10">&lt;/html&gt;</ept>that is commented out.</source>
            <target state="new">In <bpt id="2">&lt;code&gt;</bpt>//<ept id="2">&lt;/code&gt;</ept> commented code, in the <bpt id="4">&lt;code&gt;</bpt>EstablishConnection<ept id="4">&lt;/code&gt;</ept> method, there is an entire <bpt id="6">&lt;code&gt;</bpt>catch<ept id="6">&lt;/code&gt;</ept> block...<bpt id="8">&lt;html&gt;</bpt><ept id="8">&lt;/html&gt;</ept><bpt id="9">&lt;code&gt;</bpt>//catch (SDSqlC.SqlException sqlExc)<ept id="9">&lt;/code&gt;</ept><bpt id="10">&lt;html&gt;</bpt><ept id="10">&lt;/html&gt;</ept>that is commented out.</target>
          </trans-unit>
          <trans-unit id="184" xml:space="preserve">
            <source>Uncomment the whole block.</source>
            <target state="new">Uncomment the whole block.</target>
          </trans-unit>
          <trans-unit id="185" xml:space="preserve">
            <source>In the newly uncommented <bpt id="2">&lt;code&gt;</bpt>catch<ept id="2">&lt;/code&gt;</ept> block, assign the correct password value.</source>
            <target state="new">In the newly uncommented <bpt id="2">&lt;code&gt;</bpt>catch<ept id="2">&lt;/code&gt;</ept> block, assign the correct password value.</target>
          </trans-unit>
          <trans-unit id="186" xml:space="preserve">
            <source>Where the class <bpt id="2">&lt;code&gt;</bpt>Custom_TransientErrorDetectionStrategy<ept id="2">&lt;/code&gt;</ept> is referenced in the code, replace the reference with <bpt id="4">&lt;code&gt;</bpt>Test2_TransientErrorDetectionStrategy<ept id="4">&lt;/code&gt;</ept>.</source>
            <target state="new">Where the class <bpt id="2">&lt;code&gt;</bpt>Custom_TransientErrorDetectionStrategy<ept id="2">&lt;/code&gt;</ept> is referenced in the code, replace the reference with <bpt id="4">&lt;code&gt;</bpt>Test2_TransientErrorDetectionStrategy<ept id="4">&lt;/code&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="187" xml:space="preserve">
            <source>You can keep the variable name the same.</source>
            <target state="new">You can keep the variable name the same.</target>
          </trans-unit>
          <trans-unit id="188" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>Test2_TransientErrorDetectionStrategy.cs<ept id="1">&lt;/code&gt;</ept> file</source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>Test2_TransientErrorDetectionStrategy.cs<ept id="1">&lt;/code&gt;</ept> file</target>
          </trans-unit>
          <trans-unit id="189" xml:space="preserve">
            <source>&amp;nbsp;</source>
            <target state="new">&amp;nbsp;</target>
          </trans-unit>
          <trans-unit id="190" xml:space="preserve">
            <source>Shorter <bpt id="2">&lt;code&gt;</bpt>Program.cs<ept id="2">&lt;/code&gt;</ept>, without <bpt id="4">&lt;code&gt;</bpt>try/catch<ept id="4">&lt;/code&gt;</ept></source>
            <target state="new">Shorter <bpt id="2">&lt;code&gt;</bpt>Program.cs<ept id="2">&lt;/code&gt;</ept>, without <bpt id="4">&lt;code&gt;</bpt>try/catch<ept id="4">&lt;/code&gt;</ept></target>
          </trans-unit>
          <trans-unit id="191" xml:space="preserve">
            <source>The shorter code in this section does compile, and if run it would usually work.</source>
            <target state="new">The shorter code in this section does compile, and if run it would usually work.</target>
          </trans-unit>
          <trans-unit id="192" xml:space="preserve">
            <source>But the shorter code is not meant to be run in production.</source>
            <target state="new">But the shorter code is not meant to be run in production.</target>
          </trans-unit>
          <trans-unit id="193" xml:space="preserve">
            <source>The only purpose of this shorter <bpt id="2">&lt;code&gt;</bpt>Program.cs<ept id="2">&lt;/code&gt;</ept> sample is to make it easier to see the same EntLib calls that are in the real <bpt id="4">&lt;code&gt;</bpt>Program.cs<ept id="4">&lt;/code&gt;</ept>.</source>
            <target state="new">The only purpose of this shorter <bpt id="2">&lt;code&gt;</bpt>Program.cs<ept id="2">&lt;/code&gt;</ept> sample is to make it easier to see the same EntLib calls that are in the real <bpt id="4">&lt;code&gt;</bpt>Program.cs<ept id="4">&lt;/code&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="194" xml:space="preserve">
            <source>The removal of all the <bpt id="2">&lt;code&gt;</bpt>try/catch<ept id="2">&lt;/code&gt;</ept> blocks makes the EntLib calls easier to see.</source>
            <target state="new">The removal of all the <bpt id="2">&lt;code&gt;</bpt>try/catch<ept id="2">&lt;/code&gt;</ept> blocks makes the EntLib calls easier to see.</target>
          </trans-unit>
          <trans-unit id="195" xml:space="preserve">
            <source>Related links</source>
            <target state="new">Related links</target>
          </trans-unit>
          <trans-unit id="196" xml:space="preserve">
            <source><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling Namespace<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></source>
            <target state="new"><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling Namespace<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></target>
          </trans-unit>
          <trans-unit id="197" xml:space="preserve">
            <source><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Enterprise Library 6 Class Library<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></source>
            <target state="new"><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Enterprise Library 6 Class Library<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></target>
          </trans-unit>
          <trans-unit id="198" xml:space="preserve">
            <source><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Code sample: Retry logic in C# for connecting to SQL Database with ADO.NET<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></source>
            <target state="new"><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Code sample: Retry logic in C# for connecting to SQL Database with ADO.NET<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></target>
          </trans-unit>
          <trans-unit id="199" xml:space="preserve">
            <source><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Client quick-start code samples to SQL Database<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></source>
            <target state="new"><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Client quick-start code samples to SQL Database<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></target>
          </trans-unit>
        </group>
      </group>
    </body>
  </file>
</xliff>