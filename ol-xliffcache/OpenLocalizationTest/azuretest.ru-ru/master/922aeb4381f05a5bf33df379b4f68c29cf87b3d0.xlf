<?xml version="1.0" encoding="utf-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" source-language="en-us" target-language="ru-ru" original="2/20/2016 3:42:57 PM" tool-id="MarkdownTransformer" product-name="N/A" product-version="N/A" build-num="1">
    <header>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">922aeb4381f05a5bf33df379b4f68c29cf87b3d0</xliffext:olfilehash>
      <tool tool-id="MarkdownTransformer" tool-name="MarkdownToXliff" tool-version="1.0" tool-company="Microsoft" />
    </header>
    <body>
      <group extype="content">
        <group id="101">
          <trans-unit id="101" xml:space="preserve">
            <source>Use Python with Hive and Pig in HDInsight | Microsoft Azure</source>
            <target state="new">Use Python with Hive and Pig in HDInsight | Microsoft Azure</target>
          </trans-unit>
          <trans-unit id="102" xml:space="preserve">
            <source>Learn how to use Python User Defined Functions (UDF) from Hive and Pig in HDInsight, the Hadoop technology stack on Azure.</source>
            <target state="new">Learn how to use Python User Defined Functions (UDF) from Hive and Pig in HDInsight, the Hadoop technology stack on Azure.</target>
          </trans-unit>
          <trans-unit id="103" xml:space="preserve">
            <source>Use Python with Hive and Pig in HDInsight</source>
            <target state="new">Use Python with Hive and Pig in HDInsight</target>
          </trans-unit>
          <trans-unit id="104" xml:space="preserve">
            <source>Hive and Pig are great for working with data in HDInsight, but sometimes you need a more general purpose language.</source>
            <target state="new">Hive and Pig are great for working with data in HDInsight, but sometimes you need a more general purpose language.</target>
          </trans-unit>
          <trans-unit id="105" xml:space="preserve">
            <source>Both Hive and Pig allow you to create User Defined Functions (UDF) using a variety of programming languages.</source>
            <target state="new">Both Hive and Pig allow you to create User Defined Functions (UDF) using a variety of programming languages.</target>
          </trans-unit>
          <trans-unit id="106" xml:space="preserve">
            <source>In this article, you will learn how to use a Python UDF from Hive and Pig.</source>
            <target state="new">In this article, you will learn how to use a Python UDF from Hive and Pig.</target>
          </trans-unit>
          <trans-unit id="107" xml:space="preserve">
            <source>The steps in this article apply to HDInsight cluster versions 2.1, 3.0, 3.1, and 3.2.</source>
            <target state="new">The steps in this article apply to HDInsight cluster versions 2.1, 3.0, 3.1, and 3.2.</target>
          </trans-unit>
          <trans-unit id="108" xml:space="preserve">
            <source><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>Python on HDInsight</source>
            <target state="new"><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>Python on HDInsight</target>
          </trans-unit>
          <trans-unit id="109" xml:space="preserve">
            <source>Python2.7 is installed by default on HDInsight 3.0 and later clusters.</source>
            <target state="new">Python2.7 is installed by default on HDInsight 3.0 and later clusters.</target>
          </trans-unit>
          <trans-unit id="110" xml:space="preserve">
            <source>Hive can be used with this version of Python for stream processing (data is passed between Hive and Python using STDOUT/STDIN).</source>
            <target state="new">Hive can be used with this version of Python for stream processing (data is passed between Hive and Python using STDOUT/STDIN).</target>
          </trans-unit>
          <trans-unit id="111" xml:space="preserve">
            <source>HDInsight also includes Jython, which is a Python implementation written in Java.</source>
            <target state="new">HDInsight also includes Jython, which is a Python implementation written in Java.</target>
          </trans-unit>
          <trans-unit id="112" xml:space="preserve">
            <source>Pig understands how to talk to Jython without having to resort to streaming, so it's preferable when using Pig.</source>
            <target state="new">Pig understands how to talk to Jython without having to resort to streaming, so it's preferable when using Pig.</target>
          </trans-unit>
          <trans-unit id="113" xml:space="preserve">
            <source><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>Hive and Python</source>
            <target state="new"><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>Hive and Python</target>
          </trans-unit>
          <trans-unit id="114" xml:space="preserve">
            <source>Python can be used as a UDF from Hive through the HiveQL <bpt id="2">&lt;strong&gt;</bpt>TRANSFORM<ept id="2">&lt;/strong&gt;</ept> statement.</source>
            <target state="new">Python can be used as a UDF from Hive through the HiveQL <bpt id="2">&lt;strong&gt;</bpt>TRANSFORM<ept id="2">&lt;/strong&gt;</ept> statement.</target>
          </trans-unit>
          <trans-unit id="115" xml:space="preserve">
            <source>For example, the following HiveQL invokes a Python script stored in the <bpt id="2">&lt;strong&gt;</bpt>streaming.py<ept id="2">&lt;/strong&gt;</ept> file.</source>
            <target state="new">For example, the following HiveQL invokes a Python script stored in the <bpt id="2">&lt;strong&gt;</bpt>streaming.py<ept id="2">&lt;/strong&gt;</ept> file.</target>
          </trans-unit>
          <trans-unit id="116" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Linux-based HDInsight<ept id="1">&lt;/strong&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Linux-based HDInsight<ept id="1">&lt;/strong&gt;</ept></target>
          </trans-unit>
          <trans-unit id="117" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Windows-based HDInsight<ept id="1">&lt;/strong&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Windows-based HDInsight<ept id="1">&lt;/strong&gt;</ept></target>
          </trans-unit>
          <trans-unit id="118" xml:space="preserve">
            <source>On Windows-based HDInsight clusters, the <bpt id="2">&lt;strong&gt;</bpt>USING<ept id="2">&lt;/strong&gt;</ept> clause must specify the full path to python.exe.</source>
            <target state="new">On Windows-based HDInsight clusters, the <bpt id="2">&lt;strong&gt;</bpt>USING<ept id="2">&lt;/strong&gt;</ept> clause must specify the full path to python.exe.</target>
          </trans-unit>
          <trans-unit id="119" xml:space="preserve">
            <source>This is always <bpt id="2">&lt;code&gt;</bpt>D:\Python27\python.exe<ept id="2">&lt;/code&gt;</ept>.</source>
            <target state="new">This is always <bpt id="2">&lt;code&gt;</bpt>D:\Python27\python.exe<ept id="2">&lt;/code&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="120" xml:space="preserve">
            <source>Here's what this example does:</source>
            <target state="new">Here's what this example does:</target>
          </trans-unit>
          <trans-unit id="121" xml:space="preserve">
            <source>The <bpt id="2">&lt;strong&gt;</bpt>add file<ept id="2">&lt;/strong&gt;</ept> statement at the beginning of the file adds the <bpt id="4">&lt;strong&gt;</bpt>streaming.py<ept id="4">&lt;/strong&gt;</ept> file to the distributed cache, so it's accessible by all nodes in the cluster.</source>
            <target state="new">The <bpt id="2">&lt;strong&gt;</bpt>add file<ept id="2">&lt;/strong&gt;</ept> statement at the beginning of the file adds the <bpt id="4">&lt;strong&gt;</bpt>streaming.py<ept id="4">&lt;/strong&gt;</ept> file to the distributed cache, so it's accessible by all nodes in the cluster.</target>
          </trans-unit>
          <trans-unit id="122" xml:space="preserve">
            <source>The  <bpt id="2">&lt;strong&gt;</bpt>SELECT TRANSFORM ... USING<ept id="2">&lt;/strong&gt;</ept> statement selects data from the <bpt id="4">&lt;strong&gt;</bpt>hivesampletable<ept id="4">&lt;/strong&gt;</ept>, and passes clientid, devicemake, and devicemodel to the <bpt id="6">&lt;strong&gt;</bpt>streaming.py<ept id="6">&lt;/strong&gt;</ept> script.</source>
            <target state="new">The  <bpt id="2">&lt;strong&gt;</bpt>SELECT TRANSFORM ... USING<ept id="2">&lt;/strong&gt;</ept> statement selects data from the <bpt id="4">&lt;strong&gt;</bpt>hivesampletable<ept id="4">&lt;/strong&gt;</ept>, and passes clientid, devicemake, and devicemodel to the <bpt id="6">&lt;strong&gt;</bpt>streaming.py<ept id="6">&lt;/strong&gt;</ept> script.</target>
          </trans-unit>
          <trans-unit id="123" xml:space="preserve">
            <source>The <bpt id="2">&lt;strong&gt;</bpt>AS<ept id="2">&lt;/strong&gt;</ept> clause describes the fields returned from <bpt id="4">&lt;strong&gt;</bpt>streaming.py<ept id="4">&lt;/strong&gt;</ept></source>
            <target state="new">The <bpt id="2">&lt;strong&gt;</bpt>AS<ept id="2">&lt;/strong&gt;</ept> clause describes the fields returned from <bpt id="4">&lt;strong&gt;</bpt>streaming.py<ept id="4">&lt;/strong&gt;</ept></target>
          </trans-unit>
          <trans-unit id="124" xml:space="preserve">
            <source><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="125" xml:space="preserve">
            <source>Here's the <bpt id="2">&lt;strong&gt;</bpt>streaming.py<ept id="2">&lt;/strong&gt;</ept> file used by the HiveQL example.</source>
            <target state="new">Here's the <bpt id="2">&lt;strong&gt;</bpt>streaming.py<ept id="2">&lt;/strong&gt;</ept> file used by the HiveQL example.</target>
          </trans-unit>
          <trans-unit id="126" xml:space="preserve">
            <source>Since we are using streaming, this script has to do the following:</source>
            <target state="new">Since we are using streaming, this script has to do the following:</target>
          </trans-unit>
          <trans-unit id="127" xml:space="preserve">
            <source>Read data from STDIN.</source>
            <target state="new">Read data from STDIN.</target>
          </trans-unit>
          <trans-unit id="128" xml:space="preserve">
            <source>This is accomplished by using <bpt id="2">&lt;code&gt;</bpt>sys.stdin.readline()<ept id="2">&lt;/code&gt;</ept> in this example.</source>
            <target state="new">This is accomplished by using <bpt id="2">&lt;code&gt;</bpt>sys.stdin.readline()<ept id="2">&lt;/code&gt;</ept> in this example.</target>
          </trans-unit>
          <trans-unit id="129" xml:space="preserve">
            <source>The trailing newline character is removed using <bpt id="2">&lt;code&gt;</bpt>string.strip(line, "\n ")<ept id="2">&lt;/code&gt;</ept>, since we just want the text data and not the end of line indicator.</source>
            <target state="new">The trailing newline character is removed using <bpt id="2">&lt;code&gt;</bpt>string.strip(line, "\n ")<ept id="2">&lt;/code&gt;</ept>, since we just want the text data and not the end of line indicator.</target>
          </trans-unit>
          <trans-unit id="130" xml:space="preserve">
            <source>When doing stream processing, a single line contains all the values with a tab character between each value.</source>
            <target state="new">When doing stream processing, a single line contains all the values with a tab character between each value.</target>
          </trans-unit>
          <trans-unit id="131" xml:space="preserve">
            <source>So <bpt id="2">&lt;code&gt;</bpt>string.split(line, "\t")<ept id="2">&lt;/code&gt;</ept> can be used to split the input at each tab, returning just the fields.</source>
            <target state="new">So <bpt id="2">&lt;code&gt;</bpt>string.split(line, "\t")<ept id="2">&lt;/code&gt;</ept> can be used to split the input at each tab, returning just the fields.</target>
          </trans-unit>
          <trans-unit id="132" xml:space="preserve">
            <source>When processing is complete, the output must be written to STDOUT as a single line, with a tab between each field.</source>
            <target state="new">When processing is complete, the output must be written to STDOUT as a single line, with a tab between each field.</target>
          </trans-unit>
          <trans-unit id="133" xml:space="preserve">
            <source>This is accomplished by using <bpt id="2">&lt;code&gt;</bpt>print "\t".join([clientid, phone_label, hashlib.md5(phone_label).hexdigest()])<ept id="2">&lt;/code&gt;</ept>.</source>
            <target state="new">This is accomplished by using <bpt id="2">&lt;code&gt;</bpt>print "\t".join([clientid, phone_label, hashlib.md5(phone_label).hexdigest()])<ept id="2">&lt;/code&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="134" xml:space="preserve">
            <source>This all occurs within a <bpt id="2">&lt;code&gt;</bpt>while<ept id="2">&lt;/code&gt;</ept> loop, that will repeat until no <bpt id="4">&lt;code&gt;</bpt>line<ept id="4">&lt;/code&gt;</ept> is read, at which point <bpt id="6">&lt;code&gt;</bpt>break<ept id="6">&lt;/code&gt;</ept> exits the loop and the script terminates.</source>
            <target state="new">This all occurs within a <bpt id="2">&lt;code&gt;</bpt>while<ept id="2">&lt;/code&gt;</ept> loop, that will repeat until no <bpt id="4">&lt;code&gt;</bpt>line<ept id="4">&lt;/code&gt;</ept> is read, at which point <bpt id="6">&lt;code&gt;</bpt>break<ept id="6">&lt;/code&gt;</ept> exits the loop and the script terminates.</target>
          </trans-unit>
          <trans-unit id="135" xml:space="preserve">
            <source>Beyond that, the script just concatenates the input values for <bpt id="2">&lt;code&gt;</bpt>devicemake<ept id="2">&lt;/code&gt;</ept> and <bpt id="4">&lt;code&gt;</bpt>devicemodel<ept id="4">&lt;/code&gt;</ept>, and calculates a hash of the concatenated value.</source>
            <target state="new">Beyond that, the script just concatenates the input values for <bpt id="2">&lt;code&gt;</bpt>devicemake<ept id="2">&lt;/code&gt;</ept> and <bpt id="4">&lt;code&gt;</bpt>devicemodel<ept id="4">&lt;/code&gt;</ept>, and calculates a hash of the concatenated value.</target>
          </trans-unit>
          <trans-unit id="136" xml:space="preserve">
            <source>Pretty simple, but it describes the basics of how any Python script invoked from Hive should function: Loop, read input until there is no more, break each line of input apart at the tabs, process, write a single line of tab delimited output.</source>
            <target state="new">Pretty simple, but it describes the basics of how any Python script invoked from Hive should function: Loop, read input until there is no more, break each line of input apart at the tabs, process, write a single line of tab delimited output.</target>
          </trans-unit>
          <trans-unit id="137" xml:space="preserve">
            <source>See <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Running the examples<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> for how to run this example on your HDInsight cluster.</source>
            <target state="new">See <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Running the examples<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> for how to run this example on your HDInsight cluster.</target>
          </trans-unit>
          <trans-unit id="138" xml:space="preserve">
            <source><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>Pig and Python</source>
            <target state="new"><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>Pig and Python</target>
          </trans-unit>
          <trans-unit id="139" xml:space="preserve">
            <source>A Python script can be used as a UDF from Pig through the <bpt id="2">&lt;strong&gt;</bpt>GENERATE<ept id="2">&lt;/strong&gt;</ept> statement.</source>
            <target state="new">A Python script can be used as a UDF from Pig through the <bpt id="2">&lt;strong&gt;</bpt>GENERATE<ept id="2">&lt;/strong&gt;</ept> statement.</target>
          </trans-unit>
          <trans-unit id="140" xml:space="preserve">
            <source>For example, the following example uses a Python script stored in the <bpt id="2">&lt;strong&gt;</bpt>jython.py<ept id="2">&lt;/strong&gt;</ept> file.</source>
            <target state="new">For example, the following example uses a Python script stored in the <bpt id="2">&lt;strong&gt;</bpt>jython.py<ept id="2">&lt;/strong&gt;</ept> file.</target>
          </trans-unit>
          <trans-unit id="141" xml:space="preserve">
            <source>Here's how this example works:</source>
            <target state="new">Here's how this example works:</target>
          </trans-unit>
          <trans-unit id="142" xml:space="preserve">
            <source>It registers the file containing the Python script (<bpt id="2">&lt;strong&gt;</bpt>jython.py<ept id="2">&lt;/strong&gt;</ept>,) using <bpt id="4">&lt;strong&gt;</bpt>Jython<ept id="4">&lt;/strong&gt;</ept>, and exposes it to Pig as <bpt id="6">&lt;strong&gt;</bpt>myfuncs<ept id="6">&lt;/strong&gt;</ept>.</source>
            <target state="new">It registers the file containing the Python script (<bpt id="2">&lt;strong&gt;</bpt>jython.py<ept id="2">&lt;/strong&gt;</ept>,) using <bpt id="4">&lt;strong&gt;</bpt>Jython<ept id="4">&lt;/strong&gt;</ept>, and exposes it to Pig as <bpt id="6">&lt;strong&gt;</bpt>myfuncs<ept id="6">&lt;/strong&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="143" xml:space="preserve">
            <source>Jython is a Python implementation in Java, and runs in the same Java Virtual machine as Pig.</source>
            <target state="new">Jython is a Python implementation in Java, and runs in the same Java Virtual machine as Pig.</target>
          </trans-unit>
          <trans-unit id="144" xml:space="preserve">
            <source>This allows us to treat the Python script like a traditional function call vs. the streaming approach used with Hive.</source>
            <target state="new">This allows us to treat the Python script like a traditional function call vs. the streaming approach used with Hive.</target>
          </trans-unit>
          <trans-unit id="145" xml:space="preserve">
            <source>The next line loads the sample data file, <bpt id="2">&lt;strong&gt;</bpt>sample.log<ept id="2">&lt;/strong&gt;</ept> into <bpt id="4">&lt;strong&gt;</bpt>LOGS<ept id="4">&lt;/strong&gt;</ept>.</source>
            <target state="new">The next line loads the sample data file, <bpt id="2">&lt;strong&gt;</bpt>sample.log<ept id="2">&lt;/strong&gt;</ept> into <bpt id="4">&lt;strong&gt;</bpt>LOGS<ept id="4">&lt;/strong&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="146" xml:space="preserve">
            <source>Since this log file doesn't have a consistent schema, it also defines each record (<bpt id="2">&lt;strong&gt;</bpt>LINE<ept id="2">&lt;/strong&gt;</ept> in this case,) as a <bpt id="4">&lt;strong&gt;</bpt>chararray<ept id="4">&lt;/strong&gt;</ept>.</source>
            <target state="new">Since this log file doesn't have a consistent schema, it also defines each record (<bpt id="2">&lt;strong&gt;</bpt>LINE<ept id="2">&lt;/strong&gt;</ept> in this case,) as a <bpt id="4">&lt;strong&gt;</bpt>chararray<ept id="4">&lt;/strong&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="147" xml:space="preserve">
            <source>Chararray is, essentially, a string.</source>
            <target state="new">Chararray is, essentially, a string.</target>
          </trans-unit>
          <trans-unit id="148" xml:space="preserve">
            <source>The third line filters out any null values, storing the result of the operation into <bpt id="2">&lt;strong&gt;</bpt>LOG<ept id="2">&lt;/strong&gt;</ept>.</source>
            <target state="new">The third line filters out any null values, storing the result of the operation into <bpt id="2">&lt;strong&gt;</bpt>LOG<ept id="2">&lt;/strong&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="149" xml:space="preserve">
            <source>Next, it iterates over the records in <bpt id="2">&lt;strong&gt;</bpt>LOG<ept id="2">&lt;/strong&gt;</ept> and uses <bpt id="4">&lt;strong&gt;</bpt>GENERATE<ept id="4">&lt;/strong&gt;</ept> to invoke the <bpt id="6">&lt;strong&gt;</bpt>create_structure<ept id="6">&lt;/strong&gt;</ept> method contained in the <bpt id="8">&lt;strong&gt;</bpt>jython.py<ept id="8">&lt;/strong&gt;</ept> script loaded as <bpt id="10">&lt;strong&gt;</bpt>myfuncs<ept id="10">&lt;/strong&gt;</ept>.</source>
            <target state="new">Next, it iterates over the records in <bpt id="2">&lt;strong&gt;</bpt>LOG<ept id="2">&lt;/strong&gt;</ept> and uses <bpt id="4">&lt;strong&gt;</bpt>GENERATE<ept id="4">&lt;/strong&gt;</ept> to invoke the <bpt id="6">&lt;strong&gt;</bpt>create_structure<ept id="6">&lt;/strong&gt;</ept> method contained in the <bpt id="8">&lt;strong&gt;</bpt>jython.py<ept id="8">&lt;/strong&gt;</ept> script loaded as <bpt id="10">&lt;strong&gt;</bpt>myfuncs<ept id="10">&lt;/strong&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="150" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>LINE<ept id="1">&lt;/strong&gt;</ept> is used to pass the current record to the function.</source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>LINE<ept id="1">&lt;/strong&gt;</ept> is used to pass the current record to the function.</target>
          </trans-unit>
          <trans-unit id="151" xml:space="preserve">
            <source>Finally, the outputs are dumped to STDOUT using the <bpt id="2">&lt;strong&gt;</bpt>DUMP<ept id="2">&lt;/strong&gt;</ept> command.</source>
            <target state="new">Finally, the outputs are dumped to STDOUT using the <bpt id="2">&lt;strong&gt;</bpt>DUMP<ept id="2">&lt;/strong&gt;</ept> command.</target>
          </trans-unit>
          <trans-unit id="152" xml:space="preserve">
            <source>This is just to immediately show the results after the operation completes; in a real script you would normally <bpt id="2">&lt;strong&gt;</bpt>STORE<ept id="2">&lt;/strong&gt;</ept> the data into a new file.</source>
            <target state="new">This is just to immediately show the results after the operation completes; in a real script you would normally <bpt id="2">&lt;strong&gt;</bpt>STORE<ept id="2">&lt;/strong&gt;</ept> the data into a new file.</target>
          </trans-unit>
          <trans-unit id="153" xml:space="preserve">
            <source><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="154" xml:space="preserve">
            <source>Here's the <bpt id="2">&lt;strong&gt;</bpt>jython.py<ept id="2">&lt;/strong&gt;</ept> file used by the Pig example:</source>
            <target state="new">Here's the <bpt id="2">&lt;strong&gt;</bpt>jython.py<ept id="2">&lt;/strong&gt;</ept> file used by the Pig example:</target>
          </trans-unit>
          <trans-unit id="155" xml:space="preserve">
            <source>Remember that we previously just defined the <bpt id="2">&lt;strong&gt;</bpt>LINE<ept id="2">&lt;/strong&gt;</ept> input as a chararray because there was no consistent schema for the input?</source>
            <target state="new">Remember that we previously just defined the <bpt id="2">&lt;strong&gt;</bpt>LINE<ept id="2">&lt;/strong&gt;</ept> input as a chararray because there was no consistent schema for the input?</target>
          </trans-unit>
          <trans-unit id="156" xml:space="preserve">
            <source>What the <bpt id="2">&lt;strong&gt;</bpt>jython.py<ept id="2">&lt;/strong&gt;</ept> does is to transform the data into a consistent schema for output.</source>
            <target state="new">What the <bpt id="2">&lt;strong&gt;</bpt>jython.py<ept id="2">&lt;/strong&gt;</ept> does is to transform the data into a consistent schema for output.</target>
          </trans-unit>
          <trans-unit id="157" xml:space="preserve">
            <source>It works like this:</source>
            <target state="new">It works like this:</target>
          </trans-unit>
          <trans-unit id="158" xml:space="preserve">
            <source>The <bpt id="2">&lt;strong&gt;</bpt>@outputSchema<ept id="2">&lt;/strong&gt;</ept> statement defines the format of the data that will be returned to Pig.</source>
            <target state="new">The <bpt id="2">&lt;strong&gt;</bpt>@outputSchema<ept id="2">&lt;/strong&gt;</ept> statement defines the format of the data that will be returned to Pig.</target>
          </trans-unit>
          <trans-unit id="159" xml:space="preserve">
            <source>In this case, it's a <bpt id="2">&lt;strong&gt;</bpt>data bag<ept id="2">&lt;/strong&gt;</ept>, which is a Pig data type.</source>
            <target state="new">In this case, it's a <bpt id="2">&lt;strong&gt;</bpt>data bag<ept id="2">&lt;/strong&gt;</ept>, which is a Pig data type.</target>
          </trans-unit>
          <trans-unit id="160" xml:space="preserve">
            <source>The bag contains the following fields, all of which are chararray (strings):</source>
            <target state="new">The bag contains the following fields, all of which are chararray (strings):</target>
          </trans-unit>
          <trans-unit id="161" xml:space="preserve">
            <source>date - the date the log entry was created</source>
            <target state="new">date - the date the log entry was created</target>
          </trans-unit>
          <trans-unit id="162" xml:space="preserve">
            <source>time - the time the log entry was created</source>
            <target state="new">time - the time the log entry was created</target>
          </trans-unit>
          <trans-unit id="163" xml:space="preserve">
            <source>classname - the class name the entry was created for</source>
            <target state="new">classname - the class name the entry was created for</target>
          </trans-unit>
          <trans-unit id="164" xml:space="preserve">
            <source>level - the log level</source>
            <target state="new">level - the log level</target>
          </trans-unit>
          <trans-unit id="165" xml:space="preserve">
            <source>detail - verbose details for the log entry</source>
            <target state="new">detail - verbose details for the log entry</target>
          </trans-unit>
          <trans-unit id="166" xml:space="preserve">
            <source>Next, the <bpt id="2">&lt;strong&gt;</bpt>def create_structure(input)<ept id="2">&lt;/strong&gt;</ept> defines the function that Pig will pass line items to.</source>
            <target state="new">Next, the <bpt id="2">&lt;strong&gt;</bpt>def create_structure(input)<ept id="2">&lt;/strong&gt;</ept> defines the function that Pig will pass line items to.</target>
          </trans-unit>
          <trans-unit id="167" xml:space="preserve">
            <source>The example data, <bpt id="2">&lt;strong&gt;</bpt>sample.log<ept id="2">&lt;/strong&gt;</ept>, mostly conforms to the date, time, classname, level, and detail schema we want to return.</source>
            <target state="new">The example data, <bpt id="2">&lt;strong&gt;</bpt>sample.log<ept id="2">&lt;/strong&gt;</ept>, mostly conforms to the date, time, classname, level, and detail schema we want to return.</target>
          </trans-unit>
          <trans-unit id="168" xml:space="preserve">
            <source>But it also contains a few lines that begin with the string '<bpt id="2">&lt;em&gt;</bpt>java.lang.Exception<ept id="2">&lt;/em&gt;</ept>' that need to be modified to match the schema.</source>
            <target state="new">But it also contains a few lines that begin with the string '<bpt id="2">&lt;em&gt;</bpt>java.lang.Exception<ept id="2">&lt;/em&gt;</ept>' that need to be modified to match the schema.</target>
          </trans-unit>
          <trans-unit id="169" xml:space="preserve">
            <source>The <bpt id="2">&lt;strong&gt;</bpt>if<ept id="2">&lt;/strong&gt;</ept> statement checks for those, then massages the input data to move the '<bpt id="4">&lt;em&gt;</bpt>java.lang.Exception<ept id="4">&lt;/em&gt;</ept>' string to the end, bringing the data in-line with our expected output schema.</source>
            <target state="new">The <bpt id="2">&lt;strong&gt;</bpt>if<ept id="2">&lt;/strong&gt;</ept> statement checks for those, then massages the input data to move the '<bpt id="4">&lt;em&gt;</bpt>java.lang.Exception<ept id="4">&lt;/em&gt;</ept>' string to the end, bringing the data in-line with our expected output schema.</target>
          </trans-unit>
          <trans-unit id="170" xml:space="preserve">
            <source>Next, the <bpt id="2">&lt;strong&gt;</bpt>split<ept id="2">&lt;/strong&gt;</ept> command is used to split the data at the first four space characters.</source>
            <target state="new">Next, the <bpt id="2">&lt;strong&gt;</bpt>split<ept id="2">&lt;/strong&gt;</ept> command is used to split the data at the first four space characters.</target>
          </trans-unit>
          <trans-unit id="171" xml:space="preserve">
            <source>This results in five values, which are assigned into <bpt id="2">&lt;strong&gt;</bpt>date<ept id="2">&lt;/strong&gt;</ept>, <bpt id="4">&lt;strong&gt;</bpt>time<ept id="4">&lt;/strong&gt;</ept>, <bpt id="6">&lt;strong&gt;</bpt>classname<ept id="6">&lt;/strong&gt;</ept>, <bpt id="8">&lt;strong&gt;</bpt>level<ept id="8">&lt;/strong&gt;</ept>, and <bpt id="10">&lt;strong&gt;</bpt>detail<ept id="10">&lt;/strong&gt;</ept>.</source>
            <target state="new">This results in five values, which are assigned into <bpt id="2">&lt;strong&gt;</bpt>date<ept id="2">&lt;/strong&gt;</ept>, <bpt id="4">&lt;strong&gt;</bpt>time<ept id="4">&lt;/strong&gt;</ept>, <bpt id="6">&lt;strong&gt;</bpt>classname<ept id="6">&lt;/strong&gt;</ept>, <bpt id="8">&lt;strong&gt;</bpt>level<ept id="8">&lt;/strong&gt;</ept>, and <bpt id="10">&lt;strong&gt;</bpt>detail<ept id="10">&lt;/strong&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="172" xml:space="preserve">
            <source>Finally, the values are returned to Pig.</source>
            <target state="new">Finally, the values are returned to Pig.</target>
          </trans-unit>
          <trans-unit id="173" xml:space="preserve">
            <source>When the data is returned to Pig, it will have a consistent schema as defined in the <bpt id="2">&lt;strong&gt;</bpt>@outputSchema<ept id="2">&lt;/strong&gt;</ept> statement.</source>
            <target state="new">When the data is returned to Pig, it will have a consistent schema as defined in the <bpt id="2">&lt;strong&gt;</bpt>@outputSchema<ept id="2">&lt;/strong&gt;</ept> statement.</target>
          </trans-unit>
          <trans-unit id="174" xml:space="preserve">
            <source><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>Running the examples</source>
            <target state="new"><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>Running the examples</target>
          </trans-unit>
          <trans-unit id="175" xml:space="preserve">
            <source>If you are using a Linux-based HDInsight cluster, use the <bpt id="2">&lt;strong&gt;</bpt>SSH<ept id="2">&lt;/strong&gt;</ept> steps below.</source>
            <target state="new">If you are using a Linux-based HDInsight cluster, use the <bpt id="2">&lt;strong&gt;</bpt>SSH<ept id="2">&lt;/strong&gt;</ept> steps below.</target>
          </trans-unit>
          <trans-unit id="176" xml:space="preserve">
            <source>If you are using a Windows-based HDInsight cluster and a Windows client, use the <bpt id="2">&lt;strong&gt;</bpt>PowerShell<ept id="2">&lt;/strong&gt;</ept> steps.</source>
            <target state="new">If you are using a Windows-based HDInsight cluster and a Windows client, use the <bpt id="2">&lt;strong&gt;</bpt>PowerShell<ept id="2">&lt;/strong&gt;</ept> steps.</target>
          </trans-unit>
          <trans-unit id="177" xml:space="preserve">
            <source>SSH</source>
            <target state="new">SSH</target>
          </trans-unit>
          <trans-unit id="178" xml:space="preserve">
            <source>For more information on using SSH, see <bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>Use SSH with Linux-based Hadoop on HDInsight from Linux, Unix, or OS X<bpt id="4">&lt;html&gt;</bpt><ept id="4">&lt;/html&gt;</ept> or <bpt id="6">&lt;html&gt;</bpt><ept id="6">&lt;/html&gt;</ept>Use SSH with Linux-based Hadoop on HDInsight from Windows<bpt id="8">&lt;html&gt;</bpt><ept id="8">&lt;/html&gt;</ept>.</source>
            <target state="new">For more information on using SSH, see <bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>Use SSH with Linux-based Hadoop on HDInsight from Linux, Unix, or OS X<bpt id="4">&lt;html&gt;</bpt><ept id="4">&lt;/html&gt;</ept> or <bpt id="6">&lt;html&gt;</bpt><ept id="6">&lt;/html&gt;</ept>Use SSH with Linux-based Hadoop on HDInsight from Windows<bpt id="8">&lt;html&gt;</bpt><ept id="8">&lt;/html&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="179" xml:space="preserve">
            <source>Using the Python examples <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>streaming.py<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> and <bpt id="4CapsExtId1">&lt;link&gt;</bpt><bpt id="4CapsExtId2">&lt;linkText&gt;</bpt>jython.py<ept id="4CapsExtId2">&lt;/linkText&gt;</ept><bpt id="4CapsExtId3">&lt;title&gt;</bpt><ept id="4CapsExtId3">&lt;/title&gt;</ept><ept id="4CapsExtId1">&lt;/link&gt;</ept>, create local copies of the files on your development machine.</source>
            <target state="new">Using the Python examples <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>streaming.py<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> and <bpt id="4CapsExtId1">&lt;link&gt;</bpt><bpt id="4CapsExtId2">&lt;linkText&gt;</bpt>jython.py<ept id="4CapsExtId2">&lt;/linkText&gt;</ept><bpt id="4CapsExtId3">&lt;title&gt;</bpt><ept id="4CapsExtId3">&lt;/title&gt;</ept><ept id="4CapsExtId1">&lt;/link&gt;</ept>, create local copies of the files on your development machine.</target>
          </trans-unit>
          <trans-unit id="180" xml:space="preserve">
            <source>Use <bpt id="2">&lt;code&gt;</bpt>scp<ept id="2">&lt;/code&gt;</ept> to copy the files to your HDInsight cluster.</source>
            <target state="new">Use <bpt id="2">&lt;code&gt;</bpt>scp<ept id="2">&lt;/code&gt;</ept> to copy the files to your HDInsight cluster.</target>
          </trans-unit>
          <trans-unit id="181" xml:space="preserve">
            <source>For example, the following would copy the files to a cluster named <bpt id="2">&lt;strong&gt;</bpt>mycluster<ept id="2">&lt;/strong&gt;</ept>.</source>
            <target state="new">For example, the following would copy the files to a cluster named <bpt id="2">&lt;strong&gt;</bpt>mycluster<ept id="2">&lt;/strong&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="182" xml:space="preserve">
            <source>Use SSH to connect to the cluster.</source>
            <target state="new">Use SSH to connect to the cluster.</target>
          </trans-unit>
          <trans-unit id="183" xml:space="preserve">
            <source>For example, the following would connect to a cluster named <bpt id="2">&lt;strong&gt;</bpt>mycluster<ept id="2">&lt;/strong&gt;</ept> as user <bpt id="4">&lt;strong&gt;</bpt>myuser<ept id="4">&lt;/strong&gt;</ept>.</source>
            <target state="new">For example, the following would connect to a cluster named <bpt id="2">&lt;strong&gt;</bpt>mycluster<ept id="2">&lt;/strong&gt;</ept> as user <bpt id="4">&lt;strong&gt;</bpt>myuser<ept id="4">&lt;/strong&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="184" xml:space="preserve">
            <source>From the SSH session, add the python files uploaded previously to the WASB storage for the cluster.</source>
            <target state="new">From the SSH session, add the python files uploaded previously to the WASB storage for the cluster.</target>
          </trans-unit>
          <trans-unit id="185" xml:space="preserve">
            <source>After uploading the files, use the following steps to run the Hive and Pig jobs.</source>
            <target state="new">After uploading the files, use the following steps to run the Hive and Pig jobs.</target>
          </trans-unit>
          <trans-unit id="186" xml:space="preserve">
            <source>Hive</source>
            <target state="new">Hive</target>
          </trans-unit>
          <trans-unit id="187" xml:space="preserve">
            <source>Use the <bpt id="2">&lt;code&gt;</bpt>hive<ept id="2">&lt;/code&gt;</ept> command to start the hive shell.</source>
            <target state="new">Use the <bpt id="2">&lt;code&gt;</bpt>hive<ept id="2">&lt;/code&gt;</ept> command to start the hive shell.</target>
          </trans-unit>
          <trans-unit id="188" xml:space="preserve">
            <source>You should see a <bpt id="2">&lt;code&gt;</bpt>hive&gt;<ept id="2">&lt;/code&gt;</ept> prompt once the shell has loaded.</source>
            <target state="new">You should see a <bpt id="2">&lt;code&gt;</bpt>hive&gt;<ept id="2">&lt;/code&gt;</ept> prompt once the shell has loaded.</target>
          </trans-unit>
          <trans-unit id="189" xml:space="preserve">
            <source>Enter the following at the <bpt id="2">&lt;code&gt;</bpt>hive&gt;<ept id="2">&lt;/code&gt;</ept> prompt.</source>
            <target state="new">Enter the following at the <bpt id="2">&lt;code&gt;</bpt>hive&gt;<ept id="2">&lt;/code&gt;</ept> prompt.</target>
          </trans-unit>
          <trans-unit id="190" xml:space="preserve">
            <source>After entering the last line, the job should start.</source>
            <target state="new">After entering the last line, the job should start.</target>
          </trans-unit>
          <trans-unit id="191" xml:space="preserve">
            <source>Eventually it will return output similar to the following.</source>
            <target state="new">Eventually it will return output similar to the following.</target>
          </trans-unit>
          <trans-unit id="192" xml:space="preserve">
            <source>Pig</source>
            <target state="new">Pig</target>
          </trans-unit>
          <trans-unit id="193" xml:space="preserve">
            <source>Use the <bpt id="2">&lt;code&gt;</bpt>pig<ept id="2">&lt;/code&gt;</ept> command to start the shell.</source>
            <target state="new">Use the <bpt id="2">&lt;code&gt;</bpt>pig<ept id="2">&lt;/code&gt;</ept> command to start the shell.</target>
          </trans-unit>
          <trans-unit id="194" xml:space="preserve">
            <source>You should see a <bpt id="2">&lt;code&gt;</bpt>grunt&gt;<ept id="2">&lt;/code&gt;</ept> prompt once the shell has loaded.</source>
            <target state="new">You should see a <bpt id="2">&lt;code&gt;</bpt>grunt&gt;<ept id="2">&lt;/code&gt;</ept> prompt once the shell has loaded.</target>
          </trans-unit>
          <trans-unit id="195" xml:space="preserve">
            <source>Enter the following statements at the <bpt id="2">&lt;code&gt;</bpt>grunt&gt;<ept id="2">&lt;/code&gt;</ept> prompt.</source>
            <target state="new">Enter the following statements at the <bpt id="2">&lt;code&gt;</bpt>grunt&gt;<ept id="2">&lt;/code&gt;</ept> prompt.</target>
          </trans-unit>
          <trans-unit id="196" xml:space="preserve">
            <source>After entering the following line,the job should start.</source>
            <target state="new">After entering the following line,the job should start.</target>
          </trans-unit>
          <trans-unit id="197" xml:space="preserve">
            <source>Eventually it will return output similar to the following.</source>
            <target state="new">Eventually it will return output similar to the following.</target>
          </trans-unit>
          <trans-unit id="198" xml:space="preserve">
            <source>PowerShell</source>
            <target state="new">PowerShell</target>
          </trans-unit>
          <trans-unit id="199" xml:space="preserve">
            <source>These steps use Azure PowerShell.</source>
            <target state="new">These steps use Azure PowerShell.</target>
          </trans-unit>
          <trans-unit id="200" xml:space="preserve">
            <source>If this is not already installed and configured on your development machine, see <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>How to install and configure Azure PowerShell<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> before using the following steps.</source>
            <target state="new">If this is not already installed and configured on your development machine, see <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>How to install and configure Azure PowerShell<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> before using the following steps.</target>
          </trans-unit>
          <trans-unit id="201" xml:space="preserve">
            <source>Using the Python examples <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>streaming.py<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> and <bpt id="4CapsExtId1">&lt;link&gt;</bpt><bpt id="4CapsExtId2">&lt;linkText&gt;</bpt>jython.py<ept id="4CapsExtId2">&lt;/linkText&gt;</ept><bpt id="4CapsExtId3">&lt;title&gt;</bpt><ept id="4CapsExtId3">&lt;/title&gt;</ept><ept id="4CapsExtId1">&lt;/link&gt;</ept>, create local copies of the files on your development machine.</source>
            <target state="new">Using the Python examples <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>streaming.py<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> and <bpt id="4CapsExtId1">&lt;link&gt;</bpt><bpt id="4CapsExtId2">&lt;linkText&gt;</bpt>jython.py<ept id="4CapsExtId2">&lt;/linkText&gt;</ept><bpt id="4CapsExtId3">&lt;title&gt;</bpt><ept id="4CapsExtId3">&lt;/title&gt;</ept><ept id="4CapsExtId1">&lt;/link&gt;</ept>, create local copies of the files on your development machine.</target>
          </trans-unit>
          <trans-unit id="202" xml:space="preserve">
            <source>Use  the following PowerShell script to upload the <bpt id="2">&lt;strong&gt;</bpt>streaming.py<ept id="2">&lt;/strong&gt;</ept> and <bpt id="4">&lt;strong&gt;</bpt>jython.py<ept id="4">&lt;/strong&gt;</ept> files to the server.</source>
            <target state="new">Use  the following PowerShell script to upload the <bpt id="2">&lt;strong&gt;</bpt>streaming.py<ept id="2">&lt;/strong&gt;</ept> and <bpt id="4">&lt;strong&gt;</bpt>jython.py<ept id="4">&lt;/strong&gt;</ept> files to the server.</target>
          </trans-unit>
          <trans-unit id="203" xml:space="preserve">
            <source>Substitute the name of your Azure HDInsight cluster, and the path to the <bpt id="2">&lt;strong&gt;</bpt>streaming.py<ept id="2">&lt;/strong&gt;</ept> and <bpt id="4">&lt;strong&gt;</bpt>jython.py<ept id="4">&lt;/strong&gt;</ept> files on the first three lines of the script.</source>
            <target state="new">Substitute the name of your Azure HDInsight cluster, and the path to the <bpt id="2">&lt;strong&gt;</bpt>streaming.py<ept id="2">&lt;/strong&gt;</ept> and <bpt id="4">&lt;strong&gt;</bpt>jython.py<ept id="4">&lt;/strong&gt;</ept> files on the first three lines of the script.</target>
          </trans-unit>
          <trans-unit id="204" xml:space="preserve">
            <source>This script retrieves information for your HDInsight cluster, then extracts the account and key for the default storage account, and uploads the files to the root of the container.</source>
            <target state="new">This script retrieves information for your HDInsight cluster, then extracts the account and key for the default storage account, and uploads the files to the root of the container.</target>
          </trans-unit>
          <trans-unit id="205" xml:space="preserve">
            <source>Other methods of uploading the scripts can be found in the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Upload data for Hadoop jobs in HDInsight<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> document.</source>
            <target state="new">Other methods of uploading the scripts can be found in the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Upload data for Hadoop jobs in HDInsight<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> document.</target>
          </trans-unit>
          <trans-unit id="206" xml:space="preserve">
            <source>After uploading the files, use the following PowerShell scripts to start the jobs.</source>
            <target state="new">After uploading the files, use the following PowerShell scripts to start the jobs.</target>
          </trans-unit>
          <trans-unit id="207" xml:space="preserve">
            <source>When the job completes, the output should be written to the PowerShell console.</source>
            <target state="new">When the job completes, the output should be written to the PowerShell console.</target>
          </trans-unit>
          <trans-unit id="208" xml:space="preserve">
            <source>Hive</source>
            <target state="new">Hive</target>
          </trans-unit>
          <trans-unit id="209" xml:space="preserve">
            <source>The output for the <bpt id="2">&lt;strong&gt;</bpt>Hive<ept id="2">&lt;/strong&gt;</ept> job should appear similar to the following:</source>
            <target state="new">The output for the <bpt id="2">&lt;strong&gt;</bpt>Hive<ept id="2">&lt;/strong&gt;</ept> job should appear similar to the following:</target>
          </trans-unit>
          <trans-unit id="210" xml:space="preserve">
            <source>Pig</source>
            <target state="new">Pig</target>
          </trans-unit>
          <trans-unit id="211" xml:space="preserve">
            <source>The output for the <bpt id="2">&lt;strong&gt;</bpt>Pig<ept id="2">&lt;/strong&gt;</ept> job should appear similar to the following:</source>
            <target state="new">The output for the <bpt id="2">&lt;strong&gt;</bpt>Pig<ept id="2">&lt;/strong&gt;</ept> job should appear similar to the following:</target>
          </trans-unit>
          <trans-unit id="212" xml:space="preserve">
            <source><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>Troubleshooting</source>
            <target state="new"><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>Troubleshooting</target>
          </trans-unit>
          <trans-unit id="213" xml:space="preserve">
            <source>Both of the example PowerShell scripts used to run the examples contain a commented line that will display error output for the job.</source>
            <target state="new">Both of the example PowerShell scripts used to run the examples contain a commented line that will display error output for the job.</target>
          </trans-unit>
          <trans-unit id="214" xml:space="preserve">
            <source>If you are not seeing the expected output for the job, uncomment the following line and see if the error information indicates a problem.</source>
            <target state="new">If you are not seeing the expected output for the job, uncomment the following line and see if the error information indicates a problem.</target>
          </trans-unit>
          <trans-unit id="215" xml:space="preserve">
            <source>The error information (STDERR,) and the result of the job (STDOUT,) are also logged to the default blob container for your clusters at the following locations.</source>
            <target state="new">The error information (STDERR,) and the result of the job (STDOUT,) are also logged to the default blob container for your clusters at the following locations.</target>
          </trans-unit>
          <trans-unit id="216" xml:space="preserve">
            <source>For this job..</source>
            <target state="new">For this job..</target>
          </trans-unit>
          <trans-unit id="217" xml:space="preserve">
            <source>Look at these files in the blob container</source>
            <target state="new">Look at these files in the blob container</target>
          </trans-unit>
          <trans-unit id="218" xml:space="preserve">
            <source>Hive</source>
            <target state="new">Hive</target>
          </trans-unit>
          <trans-unit id="219" xml:space="preserve">
            <source>/HivePython/stderr<bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>/HivePython/stdout</source>
            <target state="new">/HivePython/stderr<bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>/HivePython/stdout</target>
          </trans-unit>
          <trans-unit id="220" xml:space="preserve">
            <source>Pig</source>
            <target state="new">Pig</target>
          </trans-unit>
          <trans-unit id="221" xml:space="preserve">
            <source>/PigPython/stderr<bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>/PigPython/stdout</source>
            <target state="new">/PigPython/stderr<bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>/PigPython/stdout</target>
          </trans-unit>
          <trans-unit id="222" xml:space="preserve">
            <source><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>Next steps</source>
            <target state="new"><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>Next steps</target>
          </trans-unit>
          <trans-unit id="223" xml:space="preserve">
            <source>If you need to load Python modules that aren't provided by default, see <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>How to deploy a module to Azure HDInsight<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> for an example of how to do this.</source>
            <target state="new">If you need to load Python modules that aren't provided by default, see <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>How to deploy a module to Azure HDInsight<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> for an example of how to do this.</target>
          </trans-unit>
          <trans-unit id="224" xml:space="preserve">
            <source>For other ways to use Pig, Hive, and to learn about using MapReduce, see the following.</source>
            <target state="new">For other ways to use Pig, Hive, and to learn about using MapReduce, see the following.</target>
          </trans-unit>
          <trans-unit id="225" xml:space="preserve">
            <source><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Use Hive with HDInsight<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></source>
            <target state="new"><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Use Hive with HDInsight<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></target>
          </trans-unit>
          <trans-unit id="226" xml:space="preserve">
            <source><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Use Pig with HDInsight<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></source>
            <target state="new"><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Use Pig with HDInsight<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></target>
          </trans-unit>
          <trans-unit id="227" xml:space="preserve">
            <source><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Use MapReduce with HDInsight<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></source>
            <target state="new"><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Use MapReduce with HDInsight<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></target>
          </trans-unit>
        </group>
      </group>
    </body>
  </file>
</xliff>