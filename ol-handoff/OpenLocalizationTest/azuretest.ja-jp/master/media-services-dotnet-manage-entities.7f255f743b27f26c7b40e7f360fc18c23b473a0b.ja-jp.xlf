<?xml version="1.0" encoding="utf-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" source-language="en-us" target-language="ja-jp" original="2/20/2016 9:08:16 AM" tool-id="MarkdownTransformer" product-name="N/A" product-version="N/A" build-num="1">
    <header>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0727f778ddff6e05680e4daf6f995f5db890d5bc</xliffext:olfilehash>
      <tool tool-id="MarkdownTransformer" tool-name="MarkdownToXliff" tool-version="1.0" tool-company="Microsoft" />
    </header>
    <body>
      <group extype="content">
        <group id="101">
          <trans-unit id="101" xml:space="preserve">
            <source>&lt;properties</source>
            <target state="new">&lt;properties</target>
          </trans-unit>
          <trans-unit id="102" xml:space="preserve">
            <source>pageTitle="Managing Assets and Related Entities with Media Services .NET SDK"</source>
            <target state="new">pageTitle="Managing Assets and Related Entities with Media Services .NET SDK"</target>
          </trans-unit>
          <trans-unit id="103" xml:space="preserve">
            <source>description="Learn how to manage assets and related entities with the Media Services SDK for .NET."</source>
            <target state="new">description="Learn how to manage assets and related entities with the Media Services SDK for .NET."</target>
          </trans-unit>
          <trans-unit id="104" xml:space="preserve">
            <source>authors="juliako"</source>
            <target state="new">authors="juliako"</target>
          </trans-unit>
          <trans-unit id="105" xml:space="preserve">
            <source>manager="dwrede"</source>
            <target state="new">manager="dwrede"</target>
          </trans-unit>
          <trans-unit id="106" xml:space="preserve">
            <source>editor=""</source>
            <target state="new">editor=""</target>
          </trans-unit>
          <trans-unit id="107" xml:space="preserve">
            <source>services="media-services"</source>
            <target state="new">services="media-services"</target>
          </trans-unit>
          <trans-unit id="108" xml:space="preserve">
            <source>documentationCenter=""/&gt;</source>
            <target state="new">documentationCenter=""/&gt;</target>
          </trans-unit>
          <trans-unit id="109" xml:space="preserve">
            <source>&lt;tags</source>
            <target state="new">&lt;tags</target>
          </trans-unit>
          <trans-unit id="110" xml:space="preserve">
            <source>ms.service="media-services"</source>
            <target state="new">ms.service="media-services"</target>
          </trans-unit>
          <trans-unit id="111" xml:space="preserve">
            <source>ms.workload="media"</source>
            <target state="new">ms.workload="media"</target>
          </trans-unit>
          <trans-unit id="112" xml:space="preserve">
            <source>ms.tgt_pltfrm="na"</source>
            <target state="new">ms.tgt_pltfrm="na"</target>
          </trans-unit>
          <trans-unit id="113" xml:space="preserve">
            <source>ms.devlang="na"</source>
            <target state="new">ms.devlang="na"</target>
          </trans-unit>
          <trans-unit id="114" xml:space="preserve">
            <source>ms.topic="article"</source>
            <target state="new">ms.topic="article"</target>
          </trans-unit>
          <trans-unit id="115" xml:space="preserve">
            <source>ms.date="08/11/2015"</source>
            <target state="new">ms.date="08/11/2015"</target>
          </trans-unit>
          <trans-unit id="116" xml:space="preserve">
            <source>ms.author="juliako"/&gt;</source>
            <target state="new">ms.author="juliako"/&gt;</target>
          </trans-unit>
          <trans-unit id="117" xml:space="preserve">
            <source>Managing Assets and Related Entities with Media Services .NET SDK</source>
            <target state="new">Managing Assets and Related Entities with Media Services .NET SDK</target>
          </trans-unit>
          <trans-unit id="118" xml:space="preserve">
            <source>This topic shows how to accomplish the following Media Services management tasks:</source>
            <target state="new">This topic shows how to accomplish the following Media Services management tasks:</target>
          </trans-unit>
          <trans-unit id="119" xml:space="preserve">
            <source>Get an asset reference</source>
            <target state="new">Get an asset reference</target>
          </trans-unit>
          <trans-unit id="120" xml:space="preserve">
            <source>Get a job reference</source>
            <target state="new">Get a job reference</target>
          </trans-unit>
          <trans-unit id="121" xml:space="preserve">
            <source>List all assets</source>
            <target state="new">List all assets</target>
          </trans-unit>
          <trans-unit id="122" xml:space="preserve">
            <source>List jobs and assets</source>
            <target state="new">List jobs and assets</target>
          </trans-unit>
          <trans-unit id="123" xml:space="preserve">
            <source>List all access policies</source>
            <target state="new">List all access policies</target>
          </trans-unit>
          <trans-unit id="124" xml:space="preserve">
            <source>List All Locators</source>
            <target state="new">List All Locators</target>
          </trans-unit>
          <trans-unit id="125" xml:space="preserve">
            <source>Delete an asset</source>
            <target state="new">Delete an asset</target>
          </trans-unit>
          <trans-unit id="126" xml:space="preserve">
            <source>Delete a job</source>
            <target state="new">Delete a job</target>
          </trans-unit>
          <trans-unit id="127" xml:space="preserve">
            <source>Delete an access policy</source>
            <target state="new">Delete an access policy</target>
          </trans-unit>
          <trans-unit id="128" xml:space="preserve">
            <source>Prerequisites</source>
            <target state="new">Prerequisites</target>
          </trans-unit>
          <trans-unit id="129" xml:space="preserve">
            <source>See <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Set up your environment<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept></source>
            <target state="new">See <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Set up your environment<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept></target>
          </trans-unit>
          <trans-unit id="130" xml:space="preserve">
            <source>Get an Asset Reference</source>
            <target state="new">Get an Asset Reference</target>
          </trans-unit>
          <trans-unit id="131" xml:space="preserve">
            <source>A frequent task is to get a reference to an existing asset in Media Services.</source>
            <target state="new">A frequent task is to get a reference to an existing asset in Media Services.</target>
          </trans-unit>
          <trans-unit id="132" xml:space="preserve">
            <source>The following code example shows how you can get an asset reference from the Assets collection on the server context object, based on an asset Id.</source>
            <target state="new">The following code example shows how you can get an asset reference from the Assets collection on the server context object, based on an asset Id.</target>
          </trans-unit>
          <trans-unit id="133" xml:space="preserve">
            <source>The following code example uses a Linq query to get a reference to an existing IAsset object.</source>
            <target state="new">The following code example uses a Linq query to get a reference to an existing IAsset object.</target>
          </trans-unit>
          <trans-unit id="134" xml:space="preserve">
            <source>Get a Job Reference</source>
            <target state="new">Get a Job Reference</target>
          </trans-unit>
          <trans-unit id="135" xml:space="preserve">
            <source>When you work with processing tasks in Media Services code, you often need to get a reference to an existing job based on an Id.</source>
            <target state="new">When you work with processing tasks in Media Services code, you often need to get a reference to an existing job based on an Id.</target>
          </trans-unit>
          <trans-unit id="136" xml:space="preserve">
            <source>The following code example shows how to get a reference to an IJob object from the Jobs collection.</source>
            <target state="new">The following code example shows how to get a reference to an IJob object from the Jobs collection.</target>
          </trans-unit>
          <trans-unit id="137" xml:space="preserve">
            <source>WarningWarning</source>
            <target state="new">WarningWarning</target>
          </trans-unit>
          <trans-unit id="138" xml:space="preserve">
            <source>You may need to get a job reference when starting a long-running encoding job, and need to check the job status on a thread.</source>
            <target state="new">You may need to get a job reference when starting a long-running encoding job, and need to check the job status on a thread.</target>
          </trans-unit>
          <trans-unit id="139" xml:space="preserve">
            <source>In cases like this, when the method returns from a thread, you need to retrieve a refreshed reference to a job.</source>
            <target state="new">In cases like this, when the method returns from a thread, you need to retrieve a refreshed reference to a job.</target>
          </trans-unit>
          <trans-unit id="140" xml:space="preserve">
            <source>List All Assets</source>
            <target state="new">List All Assets</target>
          </trans-unit>
          <trans-unit id="141" xml:space="preserve">
            <source>As the number of assets you have in storage grows, it is helpful to list your assets.</source>
            <target state="new">As the number of assets you have in storage grows, it is helpful to list your assets.</target>
          </trans-unit>
          <trans-unit id="142" xml:space="preserve">
            <source>The following code example shows how to iterate through the Assets collection on the server context object.</source>
            <target state="new">The following code example shows how to iterate through the Assets collection on the server context object.</target>
          </trans-unit>
          <trans-unit id="143" xml:space="preserve">
            <source>With each asset, the code example also writes some of its property values to the console.</source>
            <target state="new">With each asset, the code example also writes some of its property values to the console.</target>
          </trans-unit>
          <trans-unit id="144" xml:space="preserve">
            <source>For example, each asset can contain many media files.</source>
            <target state="new">For example, each asset can contain many media files.</target>
          </trans-unit>
          <trans-unit id="145" xml:space="preserve">
            <source>The code example writes out all files associated with each asset.</source>
            <target state="new">The code example writes out all files associated with each asset.</target>
          </trans-unit>
          <trans-unit id="146" xml:space="preserve">
            <source>List Jobs and Assets</source>
            <target state="new">List Jobs and Assets</target>
          </trans-unit>
          <trans-unit id="147" xml:space="preserve">
            <source>An important related task is to list assets with their associated job in Media Services.</source>
            <target state="new">An important related task is to list assets with their associated job in Media Services.</target>
          </trans-unit>
          <trans-unit id="148" xml:space="preserve">
            <source>The following code example shows you how to list each IJob object, and then for each job, it displays properties about the job, all related tasks, all input assets, and all output assets.</source>
            <target state="new">The following code example shows you how to list each IJob object, and then for each job, it displays properties about the job, all related tasks, all input assets, and all output assets.</target>
          </trans-unit>
          <trans-unit id="149" xml:space="preserve">
            <source>The code in this example can be useful for numerous other tasks.</source>
            <target state="new">The code in this example can be useful for numerous other tasks.</target>
          </trans-unit>
          <trans-unit id="150" xml:space="preserve">
            <source>For example, if you want to list the output assets from one or more encoding jobs that you ran previously, this code shows how to access the output assets.</source>
            <target state="new">For example, if you want to list the output assets from one or more encoding jobs that you ran previously, this code shows how to access the output assets.</target>
          </trans-unit>
          <trans-unit id="151" xml:space="preserve">
            <source>When you have a reference to an output asset, you can then deliver the content to other users or applications by downloading it, or providing URLs.</source>
            <target state="new">When you have a reference to an output asset, you can then deliver the content to other users or applications by downloading it, or providing URLs.</target>
          </trans-unit>
          <trans-unit id="152" xml:space="preserve">
            <source>For more information on options for delivering assets, see <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Deliver Assets with the Media Services SDK for .NET<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">For more information on options for delivering assets, see <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Deliver Assets with the Media Services SDK for .NET<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="153" xml:space="preserve">
            <source>List All Access Policies</source>
            <target state="new">List All Access Policies</target>
          </trans-unit>
          <trans-unit id="154" xml:space="preserve">
            <source>In Media Services, you can define an access policy on an asset or its files.</source>
            <target state="new">In Media Services, you can define an access policy on an asset or its files.</target>
          </trans-unit>
          <trans-unit id="155" xml:space="preserve">
            <source>An access policy defines the permissions for a file or an asset (what type of access, and the duration).</source>
            <target state="new">An access policy defines the permissions for a file or an asset (what type of access, and the duration).</target>
          </trans-unit>
          <trans-unit id="156" xml:space="preserve">
            <source>In your Media Services code, you typically define an access policy by creating an IAccessPolicy object and then associating it with an existing asset.</source>
            <target state="new">In your Media Services code, you typically define an access policy by creating an IAccessPolicy object and then associating it with an existing asset.</target>
          </trans-unit>
          <trans-unit id="157" xml:space="preserve">
            <source>Then you create a ILocator object, which lets you provide direct access to assets in Media Services.</source>
            <target state="new">Then you create a ILocator object, which lets you provide direct access to assets in Media Services.</target>
          </trans-unit>
          <trans-unit id="158" xml:space="preserve">
            <source>The Visual Studio project that accompanies this documentation series contains several code examples that show how to create and assign access policies and locators to assets.</source>
            <target state="new">The Visual Studio project that accompanies this documentation series contains several code examples that show how to create and assign access policies and locators to assets.</target>
          </trans-unit>
          <trans-unit id="159" xml:space="preserve">
            <source>The following code example shows how to list all access policies on the server, and shows the type of permissions associated with each.</source>
            <target state="new">The following code example shows how to list all access policies on the server, and shows the type of permissions associated with each.</target>
          </trans-unit>
          <trans-unit id="160" xml:space="preserve">
            <source>Another useful way to view access policies is to list all ILocator objects on the server, and then for each locator, you can list its associated access policy by using its AccessPolicy property.</source>
            <target state="new">Another useful way to view access policies is to list all ILocator objects on the server, and then for each locator, you can list its associated access policy by using its AccessPolicy property.</target>
          </trans-unit>
          <trans-unit id="161" xml:space="preserve">
            <source>List All Locators</source>
            <target state="new">List All Locators</target>
          </trans-unit>
          <trans-unit id="162" xml:space="preserve">
            <source>A locator is a URL that provides a direct path to access an asset, along with permissions to the asset as defined by the locator's associated access policy.</source>
            <target state="new">A locator is a URL that provides a direct path to access an asset, along with permissions to the asset as defined by the locator's associated access policy.</target>
          </trans-unit>
          <trans-unit id="163" xml:space="preserve">
            <source>Each asset can have a collection of ILocator objects associated with it on its Locators property.</source>
            <target state="new">Each asset can have a collection of ILocator objects associated with it on its Locators property.</target>
          </trans-unit>
          <trans-unit id="164" xml:space="preserve">
            <source>The server context also has a Locators collection that contains all locators.</source>
            <target state="new">The server context also has a Locators collection that contains all locators.</target>
          </trans-unit>
          <trans-unit id="165" xml:space="preserve">
            <source>The following code example lists all locators on the server.</source>
            <target state="new">The following code example lists all locators on the server.</target>
          </trans-unit>
          <trans-unit id="166" xml:space="preserve">
            <source>For each locator, it shows the Id for the related asset and access policy.</source>
            <target state="new">For each locator, it shows the Id for the related asset and access policy.</target>
          </trans-unit>
          <trans-unit id="167" xml:space="preserve">
            <source>It also displays the type of permissions, the expiration date, and the full path to the asset.</source>
            <target state="new">It also displays the type of permissions, the expiration date, and the full path to the asset.</target>
          </trans-unit>
          <trans-unit id="168" xml:space="preserve">
            <source>Note that a locator path to an asset is only a base URL to the asset.</source>
            <target state="new">Note that a locator path to an asset is only a base URL to the asset.</target>
          </trans-unit>
          <trans-unit id="169" xml:space="preserve">
            <source>To create a direct path to individual files that a user or application could browse to, your code must add the specific file path to the locator path.</source>
            <target state="new">To create a direct path to individual files that a user or application could browse to, your code must add the specific file path to the locator path.</target>
          </trans-unit>
          <trans-unit id="170" xml:space="preserve">
            <source>For more information on how to do this, see the topic <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Deliver Assets with the Media Services SDK for .NET<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">For more information on how to do this, see the topic <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Deliver Assets with the Media Services SDK for .NET<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="171" xml:space="preserve">
            <source>Delete an Asset</source>
            <target state="new">Delete an Asset</target>
          </trans-unit>
          <trans-unit id="172" xml:space="preserve">
            <source>The following example deletes an asset.</source>
            <target state="new">The following example deletes an asset.</target>
          </trans-unit>
          <trans-unit id="173" xml:space="preserve">
            <source>Delete a Job</source>
            <target state="new">Delete a Job</target>
          </trans-unit>
          <trans-unit id="174" xml:space="preserve">
            <source>To delete a job, you must check the state of the job as indicated in the State property.</source>
            <target state="new">To delete a job, you must check the state of the job as indicated in the State property.</target>
          </trans-unit>
          <trans-unit id="175" xml:space="preserve">
            <source>Jobs that are finished or canceled can be deleted, while jobs that are in certain other states, such as queued, scheduled, or processing, must be canceled first, and then they can be deleted.</source>
            <target state="new">Jobs that are finished or canceled can be deleted, while jobs that are in certain other states, such as queued, scheduled, or processing, must be canceled first, and then they can be deleted.</target>
          </trans-unit>
          <trans-unit id="176" xml:space="preserve">
            <source>The following code example shows a method for deleting a job by checking job states and then deleting when the state is finished or canceled.</source>
            <target state="new">The following code example shows a method for deleting a job by checking job states and then deleting when the state is finished or canceled.</target>
          </trans-unit>
          <trans-unit id="177" xml:space="preserve">
            <source>This code depends on the previous section in this topic for getting a reference to a job: Get a job reference.</source>
            <target state="new">This code depends on the previous section in this topic for getting a reference to a job: Get a job reference.</target>
          </trans-unit>
          <trans-unit id="178" xml:space="preserve">
            <source>Delete an Access Policy</source>
            <target state="new">Delete an Access Policy</target>
          </trans-unit>
          <trans-unit id="179" xml:space="preserve">
            <source>The following code example shows how to get a reference to an access policy based on a policy Id, and then to delete the policy.</source>
            <target state="new">The following code example shows how to get a reference to an access policy based on a policy Id, and then to delete the policy.</target>
          </trans-unit>
        </group>
      </group>
    </body>
  </file>
</xliff>