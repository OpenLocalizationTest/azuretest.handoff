<?xml version="1.0" encoding="utf-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" source-language="en-us" target-language="ja-jp" original="2/20/2016 9:30:12 AM" tool-id="MarkdownTransformer" product-name="N/A" product-version="N/A" build-num="1">
    <header>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bebae0da0bd795101e0109f1dc2887020761cbad</xliffext:olfilehash>
      <tool tool-id="MarkdownTransformer" tool-name="MarkdownToXliff" tool-version="1.0" tool-company="Microsoft" />
    </header>
    <body>
      <group extype="content">
        <group id="101">
          <trans-unit id="101" xml:space="preserve">
            <source>Table partitions in SQL Data Warehouse | Microsoft Azure</source>
            <target state="new">Table partitions in SQL Data Warehouse | Microsoft Azure</target>
          </trans-unit>
          <trans-unit id="102" xml:space="preserve">
            <source>Tips for using table partitions in Azure SQL Data Warehouse for developing solutions.</source>
            <target state="new">Tips for using table partitions in Azure SQL Data Warehouse for developing solutions.</target>
          </trans-unit>
          <trans-unit id="103" xml:space="preserve">
            <source>Table partitions in SQL Data Warehouse</source>
            <target state="new">Table partitions in SQL Data Warehouse</target>
          </trans-unit>
          <trans-unit id="104" xml:space="preserve">
            <source>To migrate SQL Server partition definitions to SQL Data Warehouse:</source>
            <target state="new">To migrate SQL Server partition definitions to SQL Data Warehouse:</target>
          </trans-unit>
          <trans-unit id="105" xml:space="preserve">
            <source>Remove SQL Server partition functions and schemes since this is managed for you when you create the table.</source>
            <target state="new">Remove SQL Server partition functions and schemes since this is managed for you when you create the table.</target>
          </trans-unit>
          <trans-unit id="106" xml:space="preserve">
            <source>Define the partitions when you create the table.</source>
            <target state="new">Define the partitions when you create the table.</target>
          </trans-unit>
          <trans-unit id="107" xml:space="preserve">
            <source>Simply specify partition boundary points and whether you want the boundary point to be effective <bpt id="2">&lt;code&gt;</bpt>RANGE RIGHT<ept id="2">&lt;/code&gt;</ept> or <bpt id="4">&lt;code&gt;</bpt>RANGE LEFT<ept id="4">&lt;/code&gt;</ept>.</source>
            <target state="new">Simply specify partition boundary points and whether you want the boundary point to be effective <bpt id="2">&lt;code&gt;</bpt>RANGE RIGHT<ept id="2">&lt;/code&gt;</ept> or <bpt id="4">&lt;code&gt;</bpt>RANGE LEFT<ept id="4">&lt;/code&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="108" xml:space="preserve">
            <source>Partition sizing</source>
            <target state="new">Partition sizing</target>
          </trans-unit>
          <trans-unit id="109" xml:space="preserve">
            <source>SQL DW offers a DBA several choices for table types: heap, clustered index (CI), and clustered column-store index (CCI).</source>
            <target state="new">SQL DW offers a DBA several choices for table types: heap, clustered index (CI), and clustered column-store index (CCI).</target>
          </trans-unit>
          <trans-unit id="110" xml:space="preserve">
            <source>For each of these table types, the DBA can also partition the table, which means dividing it into multiple sections to improve performance.</source>
            <target state="new">For each of these table types, the DBA can also partition the table, which means dividing it into multiple sections to improve performance.</target>
          </trans-unit>
          <trans-unit id="111" xml:space="preserve">
            <source>However, creating a table with too many partitions can actually cause performance degradations or query failures under some circumstances.</source>
            <target state="new">However, creating a table with too many partitions can actually cause performance degradations or query failures under some circumstances.</target>
          </trans-unit>
          <trans-unit id="112" xml:space="preserve">
            <source>These concerns are especially true for CCI tables.</source>
            <target state="new">These concerns are especially true for CCI tables.</target>
          </trans-unit>
          <trans-unit id="113" xml:space="preserve">
            <source>For partitioning to be helpful, it is important for a DBA to understand when to use partitioning and the number of partitions to create.</source>
            <target state="new">For partitioning to be helpful, it is important for a DBA to understand when to use partitioning and the number of partitions to create.</target>
          </trans-unit>
          <trans-unit id="114" xml:space="preserve">
            <source>These guidelines are intended to help DBAs make the best choices for their scenarios.</source>
            <target state="new">These guidelines are intended to help DBAs make the best choices for their scenarios.</target>
          </trans-unit>
          <trans-unit id="115" xml:space="preserve">
            <source>Normally table partitions are useful in two primary ways:</source>
            <target state="new">Normally table partitions are useful in two primary ways:</target>
          </trans-unit>
          <trans-unit id="116" xml:space="preserve">
            <source>Using partition switching to quickly truncate a section of a table.</source>
            <target state="new">Using partition switching to quickly truncate a section of a table.</target>
          </trans-unit>
          <trans-unit id="117" xml:space="preserve">
            <source>A commonly used design is for a fact table to contain rows only for some predetermined finite period.</source>
            <target state="new">A commonly used design is for a fact table to contain rows only for some predetermined finite period.</target>
          </trans-unit>
          <trans-unit id="118" xml:space="preserve">
            <source>For example, a sales fact table might contain data only for the past 36 months.</source>
            <target state="new">For example, a sales fact table might contain data only for the past 36 months.</target>
          </trans-unit>
          <trans-unit id="119" xml:space="preserve">
            <source>At the end of every month, the oldest month of sales data is deleted from the table.</source>
            <target state="new">At the end of every month, the oldest month of sales data is deleted from the table.</target>
          </trans-unit>
          <trans-unit id="120" xml:space="preserve">
            <source>This could be accomplished by simply deleting all of the rows for the oldest month, but deleting a large amount of data row-by-row can take a very long time.</source>
            <target state="new">This could be accomplished by simply deleting all of the rows for the oldest month, but deleting a large amount of data row-by-row can take a very long time.</target>
          </trans-unit>
          <trans-unit id="121" xml:space="preserve">
            <source>To optimize for this scenario, SQL DW supports partition swapping, which enables the entire set of rows in a partition to be dropped in a single fast operation.</source>
            <target state="new">To optimize for this scenario, SQL DW supports partition swapping, which enables the entire set of rows in a partition to be dropped in a single fast operation.</target>
          </trans-unit>
          <trans-unit id="122" xml:space="preserve">
            <source>Partitioning enables queries to easily exclude processing a large set of rows (i.e. a partition) if queries place a predicate on the partitioning column.</source>
            <target state="new">Partitioning enables queries to easily exclude processing a large set of rows (i.e. a partition) if queries place a predicate on the partitioning column.</target>
          </trans-unit>
          <trans-unit id="123" xml:space="preserve">
            <source>For example, if the sales fact table is partitioned into 36 months using the sales date field, then queries that filter on the sale date can skip processing partitions that don’t match the filter.</source>
            <target state="new">For example, if the sales fact table is partitioned into 36 months using the sales date field, then queries that filter on the sale date can skip processing partitions that don’t match the filter.</target>
          </trans-unit>
          <trans-unit id="124" xml:space="preserve">
            <source>In effect, partitioning used in this way is a coarse grained index.</source>
            <target state="new">In effect, partitioning used in this way is a coarse grained index.</target>
          </trans-unit>
          <trans-unit id="125" xml:space="preserve">
            <source>When creating clustered column-store indexes in SQL DW, a DBA needs to consider an additional factor: number of row.   CCI tables can achieve a high degree of compression and helps SQL DW accelerate query performance.  Due to how compression works internally in SQL DW, each partition in a CCI table needs to have a fairly large number of rows before data is compressed. In addition, SQL DW spreads data across a large number of distributions, and each distribution is further divided by partitions.  For optimal compression and performance, a minimum of 100,000 rows per distribution &amp; partition is needed.  Using the example above, if the sales fact table contained 36 monthly partitions, and given that SQL DW has 60 distributions, then the sales fact table should contain 6 million rows per month, or 216 million rows when all months are populated.  If a table contains significantly less rows than the recommended minimum, then the DBA should consider creating the table with fewer partitions in order to make the number of rows per distribution larger.</source>
            <target state="new">When creating clustered column-store indexes in SQL DW, a DBA needs to consider an additional factor: number of row.   CCI tables can achieve a high degree of compression and helps SQL DW accelerate query performance.  Due to how compression works internally in SQL DW, each partition in a CCI table needs to have a fairly large number of rows before data is compressed. In addition, SQL DW spreads data across a large number of distributions, and each distribution is further divided by partitions.  For optimal compression and performance, a minimum of 100,000 rows per distribution &amp; partition is needed.  Using the example above, if the sales fact table contained 36 monthly partitions, and given that SQL DW has 60 distributions, then the sales fact table should contain 6 million rows per month, or 216 million rows when all months are populated.  If a table contains significantly less rows than the recommended minimum, then the DBA should consider creating the table with fewer partitions in order to make the number of rows per distribution larger.</target>
          </trans-unit>
          <trans-unit id="126" xml:space="preserve">
            <source>To size your current database at the partition level use a query like the one below:</source>
            <target state="new">To size your current database at the partition level use a query like the one below:</target>
          </trans-unit>
          <trans-unit id="127" xml:space="preserve">
            <source>The total number of distributions equals the number of storage locations used when we create a table.</source>
            <target state="new">The total number of distributions equals the number of storage locations used when we create a table.</target>
          </trans-unit>
          <trans-unit id="128" xml:space="preserve">
            <source>That's a complex way of saying that each table is created once per distribution.</source>
            <target state="new">That's a complex way of saying that each table is created once per distribution.</target>
          </trans-unit>
          <trans-unit id="129" xml:space="preserve">
            <source>You can also anticipate roughly how many rows, and therefore how big, each partition will be.</source>
            <target state="new">You can also anticipate roughly how many rows, and therefore how big, each partition will be.</target>
          </trans-unit>
          <trans-unit id="130" xml:space="preserve">
            <source>The partition in the source data warehouse will be subdivided into each distribution.</source>
            <target state="new">The partition in the source data warehouse will be subdivided into each distribution.</target>
          </trans-unit>
          <trans-unit id="131" xml:space="preserve">
            <source>Use the following calculation to guide you when determining your partition size:</source>
            <target state="new">Use the following calculation to guide you when determining your partition size:</target>
          </trans-unit>
          <trans-unit id="132" xml:space="preserve">
            <source>MPP Partition Size = SMP Partition Size / Number of Distributions</source>
            <target state="new">MPP Partition Size = SMP Partition Size / Number of Distributions</target>
          </trans-unit>
          <trans-unit id="133" xml:space="preserve">
            <source>You can find out how many distributions your SQL Data Warehouse database has using the following query:</source>
            <target state="new">You can find out how many distributions your SQL Data Warehouse database has using the following query:</target>
          </trans-unit>
          <trans-unit id="134" xml:space="preserve">
            <source>Now you know how big each partition is in the source system and what size you are anticipating for SQLDW you can decide on your partition boundary.</source>
            <target state="new">Now you know how big each partition is in the source system and what size you are anticipating for SQLDW you can decide on your partition boundary.</target>
          </trans-unit>
          <trans-unit id="135" xml:space="preserve">
            <source>Workload manangement</source>
            <target state="new">Workload manangement</target>
          </trans-unit>
          <trans-unit id="136" xml:space="preserve">
            <source>One final piece of information you need to factor in to the table partition decision is workload management.</source>
            <target state="new">One final piece of information you need to factor in to the table partition decision is workload management.</target>
          </trans-unit>
          <trans-unit id="137" xml:space="preserve">
            <source>In SQL Data Warehouse the maximum memory allocated to each distribution during query execution is governed by this feature.</source>
            <target state="new">In SQL Data Warehouse the maximum memory allocated to each distribution during query execution is governed by this feature.</target>
          </trans-unit>
          <trans-unit id="138" xml:space="preserve">
            <source>Please refer to the following article for more details on [workload management].</source>
            <target state="new">Please refer to the following article for more details on [workload management].</target>
          </trans-unit>
          <trans-unit id="139" xml:space="preserve">
            <source>Ideally your partition will be sized with inmemory operations such as columnstore index rebuilds in mind.</source>
            <target state="new">Ideally your partition will be sized with inmemory operations such as columnstore index rebuilds in mind.</target>
          </trans-unit>
          <trans-unit id="140" xml:space="preserve">
            <source>An index rebuild is a memory intensive operation.</source>
            <target state="new">An index rebuild is a memory intensive operation.</target>
          </trans-unit>
          <trans-unit id="141" xml:space="preserve">
            <source>Therefore you will want to ensure that the partition index rebuild is not starved of memory.</source>
            <target state="new">Therefore you will want to ensure that the partition index rebuild is not starved of memory.</target>
          </trans-unit>
          <trans-unit id="142" xml:space="preserve">
            <source>Increasing the amount of memory available to your query can be achieved by switching from the default role to one of the other roles available.</source>
            <target state="new">Increasing the amount of memory available to your query can be achieved by switching from the default role to one of the other roles available.</target>
          </trans-unit>
          <trans-unit id="143" xml:space="preserve">
            <source>Information on the allocation of memory per distribution is available by querying the resource governor dynamic management views.</source>
            <target state="new">Information on the allocation of memory per distribution is available by querying the resource governor dynamic management views.</target>
          </trans-unit>
          <trans-unit id="144" xml:space="preserve">
            <source>In reality your memory grant will be less than the figures below.</source>
            <target state="new">In reality your memory grant will be less than the figures below.</target>
          </trans-unit>
          <trans-unit id="145" xml:space="preserve">
            <source>However, this provides a level of guidance that you can use when sizing your partitions for data management operations.</source>
            <target state="new">However, this provides a level of guidance that you can use when sizing your partitions for data management operations.</target>
          </trans-unit>
          <trans-unit id="146" xml:space="preserve">
            <source>Try to avoid sizing your partitions beyond the memory grant provided by the extra large resource class.</source>
            <target state="new">Try to avoid sizing your partitions beyond the memory grant provided by the extra large resource class.</target>
          </trans-unit>
          <trans-unit id="147" xml:space="preserve">
            <source>If your partitions grow beyond this figure you run the risk of memory pressure which in turn leads to less optimal compression.</source>
            <target state="new">If your partitions grow beyond this figure you run the risk of memory pressure which in turn leads to less optimal compression.</target>
          </trans-unit>
          <trans-unit id="148" xml:space="preserve">
            <source>Partition switching</source>
            <target state="new">Partition switching</target>
          </trans-unit>
          <trans-unit id="149" xml:space="preserve">
            <source>To switch partitions between two tables you must ensure that the partitions align on their respective boundaries and that the table definitions match.</source>
            <target state="new">To switch partitions between two tables you must ensure that the partitions align on their respective boundaries and that the table definitions match.</target>
          </trans-unit>
          <trans-unit id="150" xml:space="preserve">
            <source>As check constraints are not available to enforce the range of values in a table the source table must contain the same partition boundaries as the target table.</source>
            <target state="new">As check constraints are not available to enforce the range of values in a table the source table must contain the same partition boundaries as the target table.</target>
          </trans-unit>
          <trans-unit id="151" xml:space="preserve">
            <source>If this is not the case then the parition switch will fail as the partition metadata will not be synchronised.</source>
            <target state="new">If this is not the case then the parition switch will fail as the partition metadata will not be synchronised.</target>
          </trans-unit>
          <trans-unit id="152" xml:space="preserve">
            <source>How to split a partition that contains data</source>
            <target state="new">How to split a partition that contains data</target>
          </trans-unit>
          <trans-unit id="153" xml:space="preserve">
            <source>The most efficient method to split a partition that already contains data is to use a <bpt id="2">&lt;code&gt;</bpt>CTAS<ept id="2">&lt;/code&gt;</ept> statement.</source>
            <target state="new">The most efficient method to split a partition that already contains data is to use a <bpt id="2">&lt;code&gt;</bpt>CTAS<ept id="2">&lt;/code&gt;</ept> statement.</target>
          </trans-unit>
          <trans-unit id="154" xml:space="preserve">
            <source>If the partitioned table is a clustered columnstore then the table partition must be empty before it can be split.</source>
            <target state="new">If the partitioned table is a clustered columnstore then the table partition must be empty before it can be split.</target>
          </trans-unit>
          <trans-unit id="155" xml:space="preserve">
            <source>Below is a sample partitioned columnstore table containing one row in the final partition:</source>
            <target state="new">Below is a sample partitioned columnstore table containing one row in the final partition:</target>
          </trans-unit>
          <trans-unit id="156" xml:space="preserve">
            <source>By Creating the statistic object we ensure that table metadata is more accurate.</source>
            <target state="new">By Creating the statistic object we ensure that table metadata is more accurate.</target>
          </trans-unit>
          <trans-unit id="157" xml:space="preserve">
            <source>If we omit creating statistics then SQL Data Warehouse will use default values.</source>
            <target state="new">If we omit creating statistics then SQL Data Warehouse will use default values.</target>
          </trans-unit>
          <trans-unit id="158" xml:space="preserve">
            <source>For details on statistics please review <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>statistics[]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">For details on statistics please review <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>statistics[]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="159" xml:space="preserve">
            <source>We can then query for the row count leveraging the <bpt id="2">&lt;code&gt;</bpt>sys.partitions<ept id="2">&lt;/code&gt;</ept> catalog view:</source>
            <target state="new">We can then query for the row count leveraging the <bpt id="2">&lt;code&gt;</bpt>sys.partitions<ept id="2">&lt;/code&gt;</ept> catalog view:</target>
          </trans-unit>
          <trans-unit id="160" xml:space="preserve">
            <source>If we try to split this table we will get an error:</source>
            <target state="new">If we try to split this table we will get an error:</target>
          </trans-unit>
          <trans-unit id="161" xml:space="preserve">
            <source>Msg 35346, Level 15, State 1, Line 44</source>
            <target state="new">Msg 35346, Level 15, State 1, Line 44</target>
          </trans-unit>
          <trans-unit id="162" xml:space="preserve">
            <source>SPLIT clause of ALTER PARTITION statement failed because the partition is not empty.</source>
            <target state="new">SPLIT clause of ALTER PARTITION statement failed because the partition is not empty.</target>
          </trans-unit>
          <trans-unit id="163" xml:space="preserve">
            <source>Only empty partitions can be split in when a columnstore index exists on the table.</source>
            <target state="new">Only empty partitions can be split in when a columnstore index exists on the table.</target>
          </trans-unit>
          <trans-unit id="164" xml:space="preserve">
            <source>Consider disabling the columnstore index before issuing the ALTER PARTITION statement, then rebuilding the columnstore index after ALTER PARTITION is complete.</source>
            <target state="new">Consider disabling the columnstore index before issuing the ALTER PARTITION statement, then rebuilding the columnstore index after ALTER PARTITION is complete.</target>
          </trans-unit>
          <trans-unit id="165" xml:space="preserve">
            <source>However we can use <bpt id="2">&lt;code&gt;</bpt>CTAS<ept id="2">&lt;/code&gt;</ept> to create a new table to hold our data.</source>
            <target state="new">However we can use <bpt id="2">&lt;code&gt;</bpt>CTAS<ept id="2">&lt;/code&gt;</ept> to create a new table to hold our data.</target>
          </trans-unit>
          <trans-unit id="166" xml:space="preserve">
            <source>As the partition boundaries are aligned a switch is permitted.</source>
            <target state="new">As the partition boundaries are aligned a switch is permitted.</target>
          </trans-unit>
          <trans-unit id="167" xml:space="preserve">
            <source>This will leave the source table with an empty partition that we can subsequently split.</source>
            <target state="new">This will leave the source table with an empty partition that we can subsequently split.</target>
          </trans-unit>
          <trans-unit id="168" xml:space="preserve">
            <source>All that is left to do is to align our data to the new partition boundaries using <bpt id="2">&lt;code&gt;</bpt>CTAS<ept id="2">&lt;/code&gt;</ept> and switch our data back in to the main table</source>
            <target state="new">All that is left to do is to align our data to the new partition boundaries using <bpt id="2">&lt;code&gt;</bpt>CTAS<ept id="2">&lt;/code&gt;</ept> and switch our data back in to the main table</target>
          </trans-unit>
          <trans-unit id="169" xml:space="preserve">
            <source>Once you have completed the movement of the data it is a good idea to refresh the statistics on the target table to ensure they accurately reflect the new distribution of the data in their respective partitions:</source>
            <target state="new">Once you have completed the movement of the data it is a good idea to refresh the statistics on the target table to ensure they accurately reflect the new distribution of the data in their respective partitions:</target>
          </trans-unit>
          <trans-unit id="170" xml:space="preserve">
            <source>Table partitioning source control</source>
            <target state="new">Table partitioning source control</target>
          </trans-unit>
          <trans-unit id="171" xml:space="preserve">
            <source>To avoid your table definition from <bpt id="2">&lt;strong&gt;</bpt>rusting<ept id="2">&lt;/strong&gt;</ept> in your source control system you may want to consider the following approach:</source>
            <target state="new">To avoid your table definition from <bpt id="2">&lt;strong&gt;</bpt>rusting<ept id="2">&lt;/strong&gt;</ept> in your source control system you may want to consider the following approach:</target>
          </trans-unit>
          <trans-unit id="172" xml:space="preserve">
            <source>Create the table as a partitioned table but with no partition values</source>
            <target state="new">Create the table as a partitioned table but with no partition values</target>
          </trans-unit>
          <trans-unit id="173" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>SPLIT<ept id="1">&lt;/code&gt;</ept> the table as part of the deployment process:</source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>SPLIT<ept id="1">&lt;/code&gt;</ept> the table as part of the deployment process:</target>
          </trans-unit>
          <trans-unit id="174" xml:space="preserve">
            <source>With this approach the code in source control remains static and the partitioning boundary values are allowed to be dynamic; evolving with the warehouse over time.</source>
            <target state="new">With this approach the code in source control remains static and the partitioning boundary values are allowed to be dynamic; evolving with the warehouse over time.</target>
          </trans-unit>
          <trans-unit id="175" xml:space="preserve">
            <source>Partition switching has a few differences in comparison to SQL Server.</source>
            <target state="new">Partition switching has a few differences in comparison to SQL Server.</target>
          </trans-unit>
          <trans-unit id="176" xml:space="preserve">
            <source>Be sure to read <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Migrate your code[]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> to learn more about this subject.</source>
            <target state="new">Be sure to read <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Migrate your code[]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> to learn more about this subject.</target>
          </trans-unit>
          <trans-unit id="177" xml:space="preserve">
            <source>Next steps</source>
            <target state="new">Next steps</target>
          </trans-unit>
          <trans-unit id="178" xml:space="preserve">
            <source>Once you have successfully migrated your database schema to SQL Data Warehouse you can proceed to one of the following articles:</source>
            <target state="new">Once you have successfully migrated your database schema to SQL Data Warehouse you can proceed to one of the following articles:</target>
          </trans-unit>
          <trans-unit id="179" xml:space="preserve">
            <source><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Migrate your data[]<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></source>
            <target state="new"><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Migrate your data[]<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></target>
          </trans-unit>
          <trans-unit id="180" xml:space="preserve">
            <source><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Migrate your code[]<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></source>
            <target state="new"><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Migrate your code[]<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></target>
          </trans-unit>
        </group>
      </group>
    </body>
  </file>
</xliff>