<?xml version="1.0" encoding="utf-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" source-language="en-us" target-language="ja-jp" original="2/20/2016 9:26:46 AM" tool-id="MarkdownTransformer" product-name="N/A" product-version="N/A" build-num="1">
    <header>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e3ebd0754ce2f7a43d248df925c71cc69cfc2e48</xliffext:olfilehash>
      <tool tool-id="MarkdownTransformer" tool-name="MarkdownToXliff" tool-version="1.0" tool-company="Microsoft" />
    </header>
    <body>
      <group extype="content">
        <group id="101">
          <trans-unit id="101" xml:space="preserve">
            <source>How Reliable Actors use the Service Fabric platform</source>
            <target state="new">How Reliable Actors use the Service Fabric platform</target>
          </trans-unit>
          <trans-unit id="102" xml:space="preserve">
            <source>This articles describes how Reliable Actors use the features of the Service Fabric platform. It covers Service Fabric platform concepts from the point of view of actor developers.</source>
            <target state="new">This articles describes how Reliable Actors use the features of the Service Fabric platform. It covers Service Fabric platform concepts from the point of view of actor developers.</target>
          </trans-unit>
          <trans-unit id="103" xml:space="preserve">
            <source>How Reliable Actors use the Service Fabric platform</source>
            <target state="new">How Reliable Actors use the Service Fabric platform</target>
          </trans-unit>
          <trans-unit id="104" xml:space="preserve">
            <source>Service Fabric application model concepts for actors</source>
            <target state="new">Service Fabric application model concepts for actors</target>
          </trans-unit>
          <trans-unit id="105" xml:space="preserve">
            <source>Actors use the Service Fabric application model to manage the application lifecycle.</source>
            <target state="new">Actors use the Service Fabric application model to manage the application lifecycle.</target>
          </trans-unit>
          <trans-unit id="106" xml:space="preserve">
            <source>Every Actor type is mapped to a Service Fabric <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Service type<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">Every Actor type is mapped to a Service Fabric <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Service type<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="107" xml:space="preserve">
            <source>The actor code is <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>packaged<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> as a Service Fabric application and <bpt id="4CapsExtId1">&lt;link&gt;</bpt><bpt id="4CapsExtId2">&lt;linkText&gt;</bpt>deployed<ept id="4CapsExtId2">&lt;/linkText&gt;</ept><bpt id="4CapsExtId3">&lt;title&gt;</bpt><ept id="4CapsExtId3">&lt;/title&gt;</ept><ept id="4CapsExtId1">&lt;/link&gt;</ept> to the cluster.</source>
            <target state="new">The actor code is <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>packaged<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> as a Service Fabric application and <bpt id="4CapsExtId1">&lt;link&gt;</bpt><bpt id="4CapsExtId2">&lt;linkText&gt;</bpt>deployed<ept id="4CapsExtId2">&lt;/linkText&gt;</ept><bpt id="4CapsExtId3">&lt;title&gt;</bpt><ept id="4CapsExtId3">&lt;/title&gt;</ept><ept id="4CapsExtId1">&lt;/link&gt;</ept> to the cluster.</target>
          </trans-unit>
          <trans-unit id="108" xml:space="preserve">
            <source>Let's take the example of an actor project <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>created using Visual Studio<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>, to illustrate some of the above concepts.</source>
            <target state="new">Let's take the example of an actor project <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>created using Visual Studio<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>, to illustrate some of the above concepts.</target>
          </trans-unit>
          <trans-unit id="109" xml:space="preserve">
            <source>The application manifest, service manifest and Settings.xml configuration file are included in the project for the actor service when the solution is created in Visual Studio.</source>
            <target state="new">The application manifest, service manifest and Settings.xml configuration file are included in the project for the actor service when the solution is created in Visual Studio.</target>
          </trans-unit>
          <trans-unit id="110" xml:space="preserve">
            <source>This is shown in the screenshot below.</source>
            <target state="new">This is shown in the screenshot below.</target>
          </trans-unit>
          <trans-unit id="111" xml:space="preserve">
            <source><bpt id="1">&lt;linkText&gt;</bpt><ept id="1">&lt;/linkText&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;linkText&gt;</bpt><ept id="1">&lt;/linkText&gt;</ept></target>
          </trans-unit>
          <trans-unit id="112" xml:space="preserve">
            <source>The application type and version of the application that the actor is packaged into can be found by looking at the application manifest that is included in the project for the actor service.</source>
            <target state="new">The application type and version of the application that the actor is packaged into can be found by looking at the application manifest that is included in the project for the actor service.</target>
          </trans-unit>
          <trans-unit id="113" xml:space="preserve">
            <source>The following snippet from an application manifest is an example of this.</source>
            <target state="new">The following snippet from an application manifest is an example of this.</target>
          </trans-unit>
          <trans-unit id="114" xml:space="preserve">
            <source>~~~</source>
            <target state="new">~~~</target>
          </trans-unit>
          <trans-unit id="115" xml:space="preserve">
            <source>&lt;ApplicationManifest xmlns:xsd="http://www.w3.org/2001/XMLSchema"</source>
            <target state="new">&lt;ApplicationManifest xmlns:xsd="http://www.w3.org/2001/XMLSchema"</target>
          </trans-unit>
          <trans-unit id="116" xml:space="preserve">
            <source>xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"</source>
            <target state="new">xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"</target>
          </trans-unit>
          <trans-unit id="117" xml:space="preserve">
            <source>ApplicationTypeName="VoiceMailBoxApplication"</source>
            <target state="new">ApplicationTypeName="VoiceMailBoxApplication"</target>
          </trans-unit>
          <trans-unit id="118" xml:space="preserve">
            <source>ApplicationTypeVersion="1.0.0.0"</source>
            <target state="new">ApplicationTypeVersion="1.0.0.0"</target>
          </trans-unit>
          <trans-unit id="119" xml:space="preserve">
            <source>xmlns="http://schemas.microsoft.com/2011/01/fabric"&gt;</source>
            <target state="new">xmlns="http://schemas.microsoft.com/2011/01/fabric"&gt;</target>
          </trans-unit>
          <trans-unit id="120" xml:space="preserve">
            <source>~~~</source>
            <target state="new">~~~</target>
          </trans-unit>
          <trans-unit id="121" xml:space="preserve">
            <source>The service type that the actor type maps to can be found by looking at the service manifest that is included in the project for the actor service.</source>
            <target state="new">The service type that the actor type maps to can be found by looking at the service manifest that is included in the project for the actor service.</target>
          </trans-unit>
          <trans-unit id="122" xml:space="preserve">
            <source>The following snippet from a service manifest is an example of this.</source>
            <target state="new">The following snippet from a service manifest is an example of this.</target>
          </trans-unit>
          <trans-unit id="123" xml:space="preserve">
            <source>~~~</source>
            <target state="new">~~~</target>
          </trans-unit>
          <trans-unit id="124" xml:space="preserve">
            <source><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="125" xml:space="preserve">
            <source>~~~</source>
            <target state="new">~~~</target>
          </trans-unit>
          <trans-unit id="126" xml:space="preserve">
            <source>When the application package is created using Visual Studio, the logs in the Build Output window indicate the location of the application package.</source>
            <target state="new">When the application package is created using Visual Studio, the logs in the Build Output window indicate the location of the application package.</target>
          </trans-unit>
          <trans-unit id="127" xml:space="preserve">
            <source>For example:</source>
            <target state="new">For example:</target>
          </trans-unit>
          <trans-unit id="128" xml:space="preserve">
            <source>The following is a partial listing of the above location (full listing omitted for brevity):</source>
            <target state="new">The following is a partial listing of the above location (full listing omitted for brevity):</target>
          </trans-unit>
          <trans-unit id="129" xml:space="preserve">
            <source>The listing above shows the assemblies that implement the VoicemailBox actor getting included in the code package within the service package within the application package.</source>
            <target state="new">The listing above shows the assemblies that implement the VoicemailBox actor getting included in the code package within the service package within the application package.</target>
          </trans-unit>
          <trans-unit id="130" xml:space="preserve">
            <source>The Visual Studio solution includes the PowerShell scripts that are used to deploy the application to and remove the application from the cluster.</source>
            <target state="new">The Visual Studio solution includes the PowerShell scripts that are used to deploy the application to and remove the application from the cluster.</target>
          </trans-unit>
          <trans-unit id="131" xml:space="preserve">
            <source>The scripts are circled in the screenshot below.</source>
            <target state="new">The scripts are circled in the screenshot below.</target>
          </trans-unit>
          <trans-unit id="132" xml:space="preserve">
            <source><bpt id="1">&lt;linkText&gt;</bpt><ept id="1">&lt;/linkText&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;linkText&gt;</bpt><ept id="1">&lt;/linkText&gt;</ept></target>
          </trans-unit>
          <trans-unit id="133" xml:space="preserve">
            <source>Subsequent management (i.e. upgrades and eventual deletion) of the application is also performed using Service Fabric application management mechanisms.</source>
            <target state="new">Subsequent management (i.e. upgrades and eventual deletion) of the application is also performed using Service Fabric application management mechanisms.</target>
          </trans-unit>
          <trans-unit id="134" xml:space="preserve">
            <source>For more information, please see the topics on the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>application model<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>, <bpt id="4CapsExtId1">&lt;link&gt;</bpt><bpt id="4CapsExtId2">&lt;linkText&gt;</bpt>application deployment and removal<ept id="4CapsExtId2">&lt;/linkText&gt;</ept><bpt id="4CapsExtId3">&lt;title&gt;</bpt><ept id="4CapsExtId3">&lt;/title&gt;</ept><ept id="4CapsExtId1">&lt;/link&gt;</ept>, and <bpt id="6CapsExtId1">&lt;link&gt;</bpt><bpt id="6CapsExtId2">&lt;linkText&gt;</bpt>application upgrade<ept id="6CapsExtId2">&lt;/linkText&gt;</ept><bpt id="6CapsExtId3">&lt;title&gt;</bpt><ept id="6CapsExtId3">&lt;/title&gt;</ept><ept id="6CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">For more information, please see the topics on the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>application model<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>, <bpt id="4CapsExtId1">&lt;link&gt;</bpt><bpt id="4CapsExtId2">&lt;linkText&gt;</bpt>application deployment and removal<ept id="4CapsExtId2">&lt;/linkText&gt;</ept><bpt id="4CapsExtId3">&lt;title&gt;</bpt><ept id="4CapsExtId3">&lt;/title&gt;</ept><ept id="4CapsExtId1">&lt;/link&gt;</ept>, and <bpt id="6CapsExtId1">&lt;link&gt;</bpt><bpt id="6CapsExtId2">&lt;linkText&gt;</bpt>application upgrade<ept id="6CapsExtId2">&lt;/linkText&gt;</ept><bpt id="6CapsExtId3">&lt;title&gt;</bpt><ept id="6CapsExtId3">&lt;/title&gt;</ept><ept id="6CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="135" xml:space="preserve">
            <source>Scalability for actor services</source>
            <target state="new">Scalability for actor services</target>
          </trans-unit>
          <trans-unit id="136" xml:space="preserve">
            <source>Cluster administrators can create one or more actor services of each service type in the cluster.</source>
            <target state="new">Cluster administrators can create one or more actor services of each service type in the cluster.</target>
          </trans-unit>
          <trans-unit id="137" xml:space="preserve">
            <source>Each of those actor services can have one or more partitions (similar to any other Service Fabric service).</source>
            <target state="new">Each of those actor services can have one or more partitions (similar to any other Service Fabric service).</target>
          </trans-unit>
          <trans-unit id="138" xml:space="preserve">
            <source>The ability to create multiple services of a service type (which maps to an actor type) and the ability to create multiple partitions for a service allow the actor application to scale.</source>
            <target state="new">The ability to create multiple services of a service type (which maps to an actor type) and the ability to create multiple partitions for a service allow the actor application to scale.</target>
          </trans-unit>
          <trans-unit id="139" xml:space="preserve">
            <source>Please see the article on <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>scalability<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> for more information.</source>
            <target state="new">Please see the article on <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>scalability<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> for more information.</target>
          </trans-unit>
          <trans-unit id="140" xml:space="preserve">
            <source>Stateless actor services are required to have an <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>instance<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> count of 1.</source>
            <target state="new">Stateless actor services are required to have an <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>instance<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> count of 1.</target>
          </trans-unit>
          <trans-unit id="141" xml:space="preserve">
            <source>Having more than one instance of a stateless actor service in a partition is not supported.</source>
            <target state="new">Having more than one instance of a stateless actor service in a partition is not supported.</target>
          </trans-unit>
          <trans-unit id="142" xml:space="preserve">
            <source>Therefore, stateless actor services do not have the option of increasing instance count to achieve scalability.</source>
            <target state="new">Therefore, stateless actor services do not have the option of increasing instance count to achieve scalability.</target>
          </trans-unit>
          <trans-unit id="143" xml:space="preserve">
            <source>They must use the scalability options that are described in the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>scalability article<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">They must use the scalability options that are described in the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>scalability article<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="144" xml:space="preserve">
            <source>Service Fabric partition concepts for actors</source>
            <target state="new">Service Fabric partition concepts for actors</target>
          </trans-unit>
          <trans-unit id="145" xml:space="preserve">
            <source>The actor ID of an actor is mapped to a partition of an actor service.</source>
            <target state="new">The actor ID of an actor is mapped to a partition of an actor service.</target>
          </trans-unit>
          <trans-unit id="146" xml:space="preserve">
            <source>The actor is created within the partition that its actor ID maps to.</source>
            <target state="new">The actor is created within the partition that its actor ID maps to.</target>
          </trans-unit>
          <trans-unit id="147" xml:space="preserve">
            <source>When an actor is created, the Actors runtime writes an <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>EventSource event<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> that indicates which partition the actor is created in.</source>
            <target state="new">When an actor is created, the Actors runtime writes an <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>EventSource event<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> that indicates which partition the actor is created in.</target>
          </trans-unit>
          <trans-unit id="148" xml:space="preserve">
            <source>Below is an example of this event that indicates that an actor with ID <bpt id="2">&lt;code&gt;</bpt>-5349766044453424161<ept id="2">&lt;/code&gt;</ept> was created within partition <bpt id="4">&lt;code&gt;</bpt>0583c745-1bed-43b2-9545-29d7e3448156<ept id="4">&lt;/code&gt;</ept> of service <bpt id="6">&lt;code&gt;</bpt>fabric:/VoicemailBoxAdvancedApplication/VoicemailBoxActorService<ept id="6">&lt;/code&gt;</ept>, application <bpt id="8">&lt;code&gt;</bpt>fabric:/VoicemailBoxAdvancedApplication<ept id="8">&lt;/code&gt;</ept>.</source>
            <target state="new">Below is an example of this event that indicates that an actor with ID <bpt id="2">&lt;code&gt;</bpt>-5349766044453424161<ept id="2">&lt;/code&gt;</ept> was created within partition <bpt id="4">&lt;code&gt;</bpt>0583c745-1bed-43b2-9545-29d7e3448156<ept id="4">&lt;/code&gt;</ept> of service <bpt id="6">&lt;code&gt;</bpt>fabric:/VoicemailBoxAdvancedApplication/VoicemailBoxActorService<ept id="6">&lt;/code&gt;</ept>, application <bpt id="8">&lt;code&gt;</bpt>fabric:/VoicemailBoxAdvancedApplication<ept id="8">&lt;/code&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="149" xml:space="preserve">
            <source>Another actor with ID <bpt id="2">&lt;code&gt;</bpt>-4952641569324299627<ept id="2">&lt;/code&gt;</ept> was created within a different partition <bpt id="4">&lt;code&gt;</bpt>c146fe53-16d7-4d96-bac6-ef54613808ff<ept id="4">&lt;/code&gt;</ept> of the same service, as indicated by the event below.</source>
            <target state="new">Another actor with ID <bpt id="2">&lt;code&gt;</bpt>-4952641569324299627<ept id="2">&lt;/code&gt;</ept> was created within a different partition <bpt id="4">&lt;code&gt;</bpt>c146fe53-16d7-4d96-bac6-ef54613808ff<ept id="4">&lt;/code&gt;</ept> of the same service, as indicated by the event below.</target>
          </trans-unit>
          <trans-unit id="150" xml:space="preserve">
            <source><bpt id="1">&lt;em&gt;</bpt>Note:<ept id="1">&lt;/em&gt;</ept> some fields of the above events are omitted for brevity.</source>
            <target state="new"><bpt id="1">&lt;em&gt;</bpt>Note:<ept id="1">&lt;/em&gt;</ept> some fields of the above events are omitted for brevity.</target>
          </trans-unit>
          <trans-unit id="151" xml:space="preserve">
            <source>The partition ID can be used to get other information about the partition.</source>
            <target state="new">The partition ID can be used to get other information about the partition.</target>
          </trans-unit>
          <trans-unit id="152" xml:space="preserve">
            <source>For example, the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Service Fabric Explorer<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> tool can be used to view information about the partition and the service and application to which it belongs.</source>
            <target state="new">For example, the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Service Fabric Explorer<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> tool can be used to view information about the partition and the service and application to which it belongs.</target>
          </trans-unit>
          <trans-unit id="153" xml:space="preserve">
            <source>The screenshot below shows information about partition <bpt id="2">&lt;code&gt;</bpt>c146fe53-16d7-4d96-bac6-ef54613808ff<ept id="2">&lt;/code&gt;</ept>, which contained the actor with ID <bpt id="4">&lt;code&gt;</bpt>-4952641569324299627<ept id="4">&lt;/code&gt;</ept> in the above example.</source>
            <target state="new">The screenshot below shows information about partition <bpt id="2">&lt;code&gt;</bpt>c146fe53-16d7-4d96-bac6-ef54613808ff<ept id="2">&lt;/code&gt;</ept>, which contained the actor with ID <bpt id="4">&lt;code&gt;</bpt>-4952641569324299627<ept id="4">&lt;/code&gt;</ept> in the above example.</target>
          </trans-unit>
          <trans-unit id="154" xml:space="preserve">
            <source><bpt id="1">&lt;linkText&gt;</bpt><ept id="1">&lt;/linkText&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;linkText&gt;</bpt><ept id="1">&lt;/linkText&gt;</ept></target>
          </trans-unit>
          <trans-unit id="155" xml:space="preserve">
            <source>Actors can programmatically obtain the partition ID, service name, application name and other Service Fabric platform-specific information via the <bpt id="2">&lt;code&gt;</bpt>Host.ActivationContext<ept id="2">&lt;/code&gt;</ept> and the <bpt id="4">&lt;code&gt;</bpt>Host.StatelessServiceInitialization<ept id="4">&lt;/code&gt;</ept> or <bpt id="6">&lt;code&gt;</bpt>Host.StatefulServiceInitializationParameters<ept id="6">&lt;/code&gt;</ept> members of the base class that the actor type derives from.</source>
            <target state="new">Actors can programmatically obtain the partition ID, service name, application name and other Service Fabric platform-specific information via the <bpt id="2">&lt;code&gt;</bpt>Host.ActivationContext<ept id="2">&lt;/code&gt;</ept> and the <bpt id="4">&lt;code&gt;</bpt>Host.StatelessServiceInitialization<ept id="4">&lt;/code&gt;</ept> or <bpt id="6">&lt;code&gt;</bpt>Host.StatefulServiceInitializationParameters<ept id="6">&lt;/code&gt;</ept> members of the base class that the actor type derives from.</target>
          </trans-unit>
          <trans-unit id="156" xml:space="preserve">
            <source>The following code snippet shows an example:</source>
            <target state="new">The following code snippet shows an example:</target>
          </trans-unit>
          <trans-unit id="157" xml:space="preserve">
            <source>Service Fabric partition concepts for stateless actors</source>
            <target state="new">Service Fabric partition concepts for stateless actors</target>
          </trans-unit>
          <trans-unit id="158" xml:space="preserve">
            <source>Stateless actors are created within a partition of a Service Fabric stateless service.</source>
            <target state="new">Stateless actors are created within a partition of a Service Fabric stateless service.</target>
          </trans-unit>
          <trans-unit id="159" xml:space="preserve">
            <source>The actor ID determines which partition the actor is created under.</source>
            <target state="new">The actor ID determines which partition the actor is created under.</target>
          </trans-unit>
          <trans-unit id="160" xml:space="preserve">
            <source>The <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>instance<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> count for a stateless actor service must be 1.</source>
            <target state="new">The <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>instance<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> count for a stateless actor service must be 1.</target>
          </trans-unit>
          <trans-unit id="161" xml:space="preserve">
            <source>Changing the instance count to any other value is not supported.</source>
            <target state="new">Changing the instance count to any other value is not supported.</target>
          </trans-unit>
          <trans-unit id="162" xml:space="preserve">
            <source>Thus, the actor is created inside the single service instance within the partition.</source>
            <target state="new">Thus, the actor is created inside the single service instance within the partition.</target>
          </trans-unit>
          <trans-unit id="163" xml:space="preserve">
            <source>The Fabric Actors runtime emits some <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>events related to stateless actor instances<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">The Fabric Actors runtime emits some <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>events related to stateless actor instances<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="164" xml:space="preserve">
            <source>They are useful in diagnostics and performance monitoring.</source>
            <target state="new">They are useful in diagnostics and performance monitoring.</target>
          </trans-unit>
          <trans-unit id="165" xml:space="preserve">
            <source>When a stateless actor is created, the Actors runtime writes an <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>EventSource event<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> that indicates which partition and instance the actor is created in.</source>
            <target state="new">When a stateless actor is created, the Actors runtime writes an <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>EventSource event<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> that indicates which partition and instance the actor is created in.</target>
          </trans-unit>
          <trans-unit id="166" xml:space="preserve">
            <source>Below is an example of this event that indicates that an actor with ID <bpt id="2">&lt;code&gt;</bpt>abc<ept id="2">&lt;/code&gt;</ept> was created within instance <bpt id="4">&lt;code&gt;</bpt>130745709600495974<ept id="4">&lt;/code&gt;</ept> of partition <bpt id="6">&lt;code&gt;</bpt>8c828833-ccf1-4e21-b99d-03b14d4face3<ept id="6">&lt;/code&gt;</ept>, of service <bpt id="8">&lt;code&gt;</bpt>fabric:/HelloWorldApplication/HelloWorldActorService<ept id="8">&lt;/code&gt;</ept>, application <bpt id="10">&lt;code&gt;</bpt>fabric:/HelloWorldApplication<ept id="10">&lt;/code&gt;</ept>.</source>
            <target state="new">Below is an example of this event that indicates that an actor with ID <bpt id="2">&lt;code&gt;</bpt>abc<ept id="2">&lt;/code&gt;</ept> was created within instance <bpt id="4">&lt;code&gt;</bpt>130745709600495974<ept id="4">&lt;/code&gt;</ept> of partition <bpt id="6">&lt;code&gt;</bpt>8c828833-ccf1-4e21-b99d-03b14d4face3<ept id="6">&lt;/code&gt;</ept>, of service <bpt id="8">&lt;code&gt;</bpt>fabric:/HelloWorldApplication/HelloWorldActorService<ept id="8">&lt;/code&gt;</ept>, application <bpt id="10">&lt;code&gt;</bpt>fabric:/HelloWorldApplication<ept id="10">&lt;/code&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="167" xml:space="preserve">
            <source><bpt id="1">&lt;em&gt;</bpt>Note:<ept id="1">&lt;/em&gt;</ept> some fields of the above event are omitted for brevity.</source>
            <target state="new"><bpt id="1">&lt;em&gt;</bpt>Note:<ept id="1">&lt;/em&gt;</ept> some fields of the above event are omitted for brevity.</target>
          </trans-unit>
          <trans-unit id="168" xml:space="preserve">
            <source>Service Fabric partition concepts for stateful actors</source>
            <target state="new">Service Fabric partition concepts for stateful actors</target>
          </trans-unit>
          <trans-unit id="169" xml:space="preserve">
            <source>Stateful actors are created within a partition of the Service Fabric stateful service.</source>
            <target state="new">Stateful actors are created within a partition of the Service Fabric stateful service.</target>
          </trans-unit>
          <trans-unit id="170" xml:space="preserve">
            <source>The actor ID determines which partition the actor is created under.</source>
            <target state="new">The actor ID determines which partition the actor is created under.</target>
          </trans-unit>
          <trans-unit id="171" xml:space="preserve">
            <source>Each partition of the service can have one or more <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>replicas<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> that are placed on different nodes in the cluster.</source>
            <target state="new">Each partition of the service can have one or more <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>replicas<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> that are placed on different nodes in the cluster.</target>
          </trans-unit>
          <trans-unit id="172" xml:space="preserve">
            <source>Having multiple replicas provides reliability for the actor state.</source>
            <target state="new">Having multiple replicas provides reliability for the actor state.</target>
          </trans-unit>
          <trans-unit id="173" xml:space="preserve">
            <source>The resource manager optimizes the placement based on the available fault and upgrade domains in the cluster.</source>
            <target state="new">The resource manager optimizes the placement based on the available fault and upgrade domains in the cluster.</target>
          </trans-unit>
          <trans-unit id="174" xml:space="preserve">
            <source>Two replicas of the same partition are never placed on the same node.</source>
            <target state="new">Two replicas of the same partition are never placed on the same node.</target>
          </trans-unit>
          <trans-unit id="175" xml:space="preserve">
            <source>The actors are always created in the primary replica of the partition to which their actor ID maps to.</source>
            <target state="new">The actors are always created in the primary replica of the partition to which their actor ID maps to.</target>
          </trans-unit>
          <trans-unit id="176" xml:space="preserve">
            <source>The Fabric Actors runtime emits some <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>events related to stateful actor replicas<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">The Fabric Actors runtime emits some <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>events related to stateful actor replicas<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="177" xml:space="preserve">
            <source>They are useful in diagnostics and performance monitoring.</source>
            <target state="new">They are useful in diagnostics and performance monitoring.</target>
          </trans-unit>
          <trans-unit id="178" xml:space="preserve">
            <source>Recall that in the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>VoiceMailBoxActor example presented earlier<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>, the actor with ID <bpt id="4">&lt;code&gt;</bpt>-4952641569324299627<ept id="4">&lt;/code&gt;</ept> was created within partition <bpt id="6">&lt;code&gt;</bpt>c146fe53-16d7-4d96-bac6-ef54613808ff<ept id="6">&lt;/code&gt;</ept>.</source>
            <target state="new">Recall that in the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>VoiceMailBoxActor example presented earlier<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>, the actor with ID <bpt id="4">&lt;code&gt;</bpt>-4952641569324299627<ept id="4">&lt;/code&gt;</ept> was created within partition <bpt id="6">&lt;code&gt;</bpt>c146fe53-16d7-4d96-bac6-ef54613808ff<ept id="6">&lt;/code&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="179" xml:space="preserve">
            <source>The EventSource event from that example also indicated that the actor was created in replica <bpt id="2">&lt;code&gt;</bpt>130745418574851853<ept id="2">&lt;/code&gt;</ept> of that partition.</source>
            <target state="new">The EventSource event from that example also indicated that the actor was created in replica <bpt id="2">&lt;code&gt;</bpt>130745418574851853<ept id="2">&lt;/code&gt;</ept> of that partition.</target>
          </trans-unit>
          <trans-unit id="180" xml:space="preserve">
            <source>This was the primary replica of that partition at the time the actor was created.</source>
            <target state="new">This was the primary replica of that partition at the time the actor was created.</target>
          </trans-unit>
          <trans-unit id="181" xml:space="preserve">
            <source>The Service Fabric Explorer screenshot below confirms this.</source>
            <target state="new">The Service Fabric Explorer screenshot below confirms this.</target>
          </trans-unit>
          <trans-unit id="182" xml:space="preserve">
            <source><bpt id="1">&lt;linkText&gt;</bpt><ept id="1">&lt;/linkText&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;linkText&gt;</bpt><ept id="1">&lt;/linkText&gt;</ept></target>
          </trans-unit>
          <trans-unit id="183" xml:space="preserve">
            <source>Actor state provider choices</source>
            <target state="new">Actor state provider choices</target>
          </trans-unit>
          <trans-unit id="184" xml:space="preserve">
            <source>There are some default actor state providers that are included in the Actors runtime.</source>
            <target state="new">There are some default actor state providers that are included in the Actors runtime.</target>
          </trans-unit>
          <trans-unit id="185" xml:space="preserve">
            <source>In order to choose an appropriate state provider for an actor service, it is necessary to understand how the state providers use the underlying Service Fabric platform features to make the actor state highly available.</source>
            <target state="new">In order to choose an appropriate state provider for an actor service, it is necessary to understand how the state providers use the underlying Service Fabric platform features to make the actor state highly available.</target>
          </trans-unit>
          <trans-unit id="186" xml:space="preserve">
            <source>By default a stateful actor uses key value store actor state provider.</source>
            <target state="new">By default a stateful actor uses key value store actor state provider.</target>
          </trans-unit>
          <trans-unit id="187" xml:space="preserve">
            <source>This state provider is built on the distributed Key-Value store provided by Service Fabric platform.</source>
            <target state="new">This state provider is built on the distributed Key-Value store provided by Service Fabric platform.</target>
          </trans-unit>
          <trans-unit id="188" xml:space="preserve">
            <source>The state is durably saved on the local disk of the node hosting the primary <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>replica<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>, as well as replicated and durably saved on the local disks of nodes hosting the secondary replicas.</source>
            <target state="new">The state is durably saved on the local disk of the node hosting the primary <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>replica<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>, as well as replicated and durably saved on the local disks of nodes hosting the secondary replicas.</target>
          </trans-unit>
          <trans-unit id="189" xml:space="preserve">
            <source>The state save is complete only when a quorum of replicas has committed the state to their local disks.</source>
            <target state="new">The state save is complete only when a quorum of replicas has committed the state to their local disks.</target>
          </trans-unit>
          <trans-unit id="190" xml:space="preserve">
            <source>The Key-Value store has advanced capabilities to detect inconsistencies such as false progress and correct them automatically.</source>
            <target state="new">The Key-Value store has advanced capabilities to detect inconsistencies such as false progress and correct them automatically.</target>
          </trans-unit>
          <trans-unit id="191" xml:space="preserve">
            <source>The Actors runtime also includes a <bpt id="2">&lt;code&gt;</bpt>VolatileActorStateProvider<ept id="2">&lt;/code&gt;</ept>.</source>
            <target state="new">The Actors runtime also includes a <bpt id="2">&lt;code&gt;</bpt>VolatileActorStateProvider<ept id="2">&lt;/code&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="192" xml:space="preserve">
            <source>This state provider replicates the state to replicas but the state remains in-memory on the replica.</source>
            <target state="new">This state provider replicates the state to replicas but the state remains in-memory on the replica.</target>
          </trans-unit>
          <trans-unit id="193" xml:space="preserve">
            <source>If one replica goes down and comes back up, its state is rebuilt from the other replica.</source>
            <target state="new">If one replica goes down and comes back up, its state is rebuilt from the other replica.</target>
          </trans-unit>
          <trans-unit id="194" xml:space="preserve">
            <source>However if all of the replicas (copies of the state) go down simultaneously the state data will be lost.</source>
            <target state="new">However if all of the replicas (copies of the state) go down simultaneously the state data will be lost.</target>
          </trans-unit>
          <trans-unit id="195" xml:space="preserve">
            <source>Therefore, this state provider is suitable for applications where the data can survive failures of few replicas and can survive the planned failovers such as upgrades.</source>
            <target state="new">Therefore, this state provider is suitable for applications where the data can survive failures of few replicas and can survive the planned failovers such as upgrades.</target>
          </trans-unit>
          <trans-unit id="196" xml:space="preserve">
            <source>If all replicas (copies) are lost, then the data needs to be recreated using mechanisms external to Service Fabric.</source>
            <target state="new">If all replicas (copies) are lost, then the data needs to be recreated using mechanisms external to Service Fabric.</target>
          </trans-unit>
          <trans-unit id="197" xml:space="preserve">
            <source>You can configure your stateful actor to use volatile actor state provider by adding the <bpt id="2">&lt;code&gt;</bpt>VolatileActorStateProvider<ept id="2">&lt;/code&gt;</ept> attribute to the actor class or an assembly level attribute.</source>
            <target state="new">You can configure your stateful actor to use volatile actor state provider by adding the <bpt id="2">&lt;code&gt;</bpt>VolatileActorStateProvider<ept id="2">&lt;/code&gt;</ept> attribute to the actor class or an assembly level attribute.</target>
          </trans-unit>
          <trans-unit id="198" xml:space="preserve">
            <source>The following code snippet shows how to changes all actors in the assembly that does not have an explicit state provider attribute to use <bpt id="2">&lt;code&gt;</bpt>VolatileActorStateProvider<ept id="2">&lt;/code&gt;</ept>.</source>
            <target state="new">The following code snippet shows how to changes all actors in the assembly that does not have an explicit state provider attribute to use <bpt id="2">&lt;code&gt;</bpt>VolatileActorStateProvider<ept id="2">&lt;/code&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="199" xml:space="preserve">
            <source>The following code snippet shows how to change the state provider for a particular actor type, <bpt id="2">&lt;code&gt;</bpt>VoicemailBox<ept id="2">&lt;/code&gt;</ept> in this case, to be <bpt id="4">&lt;code&gt;</bpt>VolatileActorStateProvider<ept id="4">&lt;/code&gt;</ept>.</source>
            <target state="new">The following code snippet shows how to change the state provider for a particular actor type, <bpt id="2">&lt;code&gt;</bpt>VoicemailBox<ept id="2">&lt;/code&gt;</ept> in this case, to be <bpt id="4">&lt;code&gt;</bpt>VolatileActorStateProvider<ept id="4">&lt;/code&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="200" xml:space="preserve">
            <source>Please note that changing the state provider requires the actor service to be recreated.</source>
            <target state="new">Please note that changing the state provider requires the actor service to be recreated.</target>
          </trans-unit>
          <trans-unit id="201" xml:space="preserve">
            <source>State providers cannot be changed as part of the application upgrade.</source>
            <target state="new">State providers cannot be changed as part of the application upgrade.</target>
          </trans-unit>
        </group>
      </group>
    </body>
  </file>
</xliff>