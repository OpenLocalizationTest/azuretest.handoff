<?xml version="1.0" encoding="utf-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" source-language="en-us" target-language="ko-kr" original="2/21/2016 5:19:41 AM" tool-id="MarkdownTransformer" product-name="N/A" product-version="N/A" build-num="1">
    <header>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b732a28305a40068245a084915393d36f97a0ca6</xliffext:olfilehash>
      <tool tool-id="MarkdownTransformer" tool-name="MarkdownToXliff" tool-version="1.0" tool-company="Microsoft" />
    </header>
    <body>
      <group extype="content">
        <group id="101">
          <trans-unit id="101" xml:space="preserve">
            <source>Getting started with Azure Blob storage and Visual Studio connected services</source>
            <target state="new">Getting started with Azure Blob storage and Visual Studio connected services</target>
          </trans-unit>
          <trans-unit id="102" xml:space="preserve">
            <source>How to get started using Azure Blob storage in a Visual Studio ASP.NET 5 project</source>
            <target state="new">How to get started using Azure Blob storage in a Visual Studio ASP.NET 5 project</target>
          </trans-unit>
          <trans-unit id="103" xml:space="preserve">
            <source>Getting started with Azure Blob storage and Visual Studio connected services</source>
            <target state="new">Getting started with Azure Blob storage and Visual Studio connected services</target>
          </trans-unit>
          <trans-unit id="104" xml:space="preserve">
            <source>[AZURE.SELECTOR]</source>
            <target state="new">[AZURE.SELECTOR]</target>
          </trans-unit>
          <trans-unit id="105" xml:space="preserve">
            <source><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Getting started<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></source>
            <target state="new"><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Getting started<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></target>
          </trans-unit>
          <trans-unit id="106" xml:space="preserve">
            <source><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>What happened<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></source>
            <target state="new"><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>What happened<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></target>
          </trans-unit>
          <trans-unit id="107" xml:space="preserve">
            <source>[AZURE.SELECTOR]</source>
            <target state="new">[AZURE.SELECTOR]</target>
          </trans-unit>
          <trans-unit id="108" xml:space="preserve">
            <source><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Blobs<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></source>
            <target state="new"><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Blobs<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></target>
          </trans-unit>
          <trans-unit id="109" xml:space="preserve">
            <source><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Queues<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></source>
            <target state="new"><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Queues<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></target>
          </trans-unit>
          <trans-unit id="110" xml:space="preserve">
            <source><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Tables<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></source>
            <target state="new"><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Tables<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></target>
          </trans-unit>
          <trans-unit id="111" xml:space="preserve">
            <source>Overview</source>
            <target state="new">Overview</target>
          </trans-unit>
          <trans-unit id="112" xml:space="preserve">
            <source>This article describes how get started using Azure Blob storage in Visual Studio after you have created or referenced an Azure storage account in an ASP.NET 5 project by using the Visual Studio Add Connected Services dialog.</source>
            <target state="new">This article describes how get started using Azure Blob storage in Visual Studio after you have created or referenced an Azure storage account in an ASP.NET 5 project by using the Visual Studio Add Connected Services dialog.</target>
          </trans-unit>
          <trans-unit id="113" xml:space="preserve">
            <source>Azure Blob storage is a service for storing large amounts of unstructured data that can be accessed from anywhere in the world via HTTP or HTTPS.</source>
            <target state="new">Azure Blob storage is a service for storing large amounts of unstructured data that can be accessed from anywhere in the world via HTTP or HTTPS.</target>
          </trans-unit>
          <trans-unit id="114" xml:space="preserve">
            <source>A single blob can be any size.</source>
            <target state="new">A single blob can be any size.</target>
          </trans-unit>
          <trans-unit id="115" xml:space="preserve">
            <source>Blobs can be things like images, audio and video files, raw data, and document files.</source>
            <target state="new">Blobs can be things like images, audio and video files, raw data, and document files.</target>
          </trans-unit>
          <trans-unit id="116" xml:space="preserve">
            <source>This article describes how to get started with blob storage after you create an Azure storage account by using the Visual Studio <bpt id="2">&lt;strong&gt;</bpt>Add Connected Services<ept id="2">&lt;/strong&gt;</ept> dialog in an ASP.NET 5 project.</source>
            <target state="new">This article describes how to get started with blob storage after you create an Azure storage account by using the Visual Studio <bpt id="2">&lt;strong&gt;</bpt>Add Connected Services<ept id="2">&lt;/strong&gt;</ept> dialog in an ASP.NET 5 project.</target>
          </trans-unit>
          <trans-unit id="117" xml:space="preserve">
            <source>Just as files live in folders, storage blobs live in containers.</source>
            <target state="new">Just as files live in folders, storage blobs live in containers.</target>
          </trans-unit>
          <trans-unit id="118" xml:space="preserve">
            <source>After you have created a storage, you create one or more containers in the storage.</source>
            <target state="new">After you have created a storage, you create one or more containers in the storage.</target>
          </trans-unit>
          <trans-unit id="119" xml:space="preserve">
            <source>For example, in a storage called “Scrapbook,” you can create containers in the storage called “images” to store pictures and another called “audio” to store audio files.</source>
            <target state="new">For example, in a storage called “Scrapbook,” you can create containers in the storage called “images” to store pictures and another called “audio” to store audio files.</target>
          </trans-unit>
          <trans-unit id="120" xml:space="preserve">
            <source>After you create the containers, you can upload individual blob files to them.</source>
            <target state="new">After you create the containers, you can upload individual blob files to them.</target>
          </trans-unit>
          <trans-unit id="121" xml:space="preserve">
            <source>See <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>How to use blob storage from .NET<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt>How to use blob storage from .NET<ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> for more information on programmatically manipulating blobs.</source>
            <target state="new">See <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>How to use blob storage from .NET<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt>How to use blob storage from .NET<ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> for more information on programmatically manipulating blobs.</target>
          </trans-unit>
          <trans-unit id="122" xml:space="preserve">
            <source>Access blob containers in code</source>
            <target state="new">Access blob containers in code</target>
          </trans-unit>
          <trans-unit id="123" xml:space="preserve">
            <source>To programmatically access blobs in ASP.NET 5 projects, you need to add the following items, if they're not already present.</source>
            <target state="new">To programmatically access blobs in ASP.NET 5 projects, you need to add the following items, if they're not already present.</target>
          </trans-unit>
          <trans-unit id="124" xml:space="preserve">
            <source>Add the following code namespace declarations to the top of any C# file in which you want to programmatically access Azure storage.</source>
            <target state="new">Add the following code namespace declarations to the top of any C# file in which you want to programmatically access Azure storage.</target>
          </trans-unit>
          <trans-unit id="125" xml:space="preserve">
            <source>Get a <bpt id="2">&lt;code&gt;</bpt>CloudStorageAccount<ept id="2">&lt;/code&gt;</ept>object that represents your storage account information.</source>
            <target state="new">Get a <bpt id="2">&lt;code&gt;</bpt>CloudStorageAccount<ept id="2">&lt;/code&gt;</ept>object that represents your storage account information.</target>
          </trans-unit>
          <trans-unit id="126" xml:space="preserve">
            <source>Use the following code to get the your storage connection string and storage account information from the Azure service configuration.</source>
            <target state="new">Use the following code to get the your storage connection string and storage account information from the Azure service configuration.</target>
          </trans-unit>
          <trans-unit id="127" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>NOTE:<ept id="1">&lt;/strong&gt;</ept> Use all of the above code in front of the code in the following sections.</source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>NOTE:<ept id="1">&lt;/strong&gt;</ept> Use all of the above code in front of the code in the following sections.</target>
          </trans-unit>
          <trans-unit id="128" xml:space="preserve">
            <source>Use a <bpt id="2">&lt;code&gt;</bpt>CloudBlobClient<ept id="2">&lt;/code&gt;</ept> object to get a <bpt id="4">&lt;code&gt;</bpt>CloudBlobContainer<ept id="4">&lt;/code&gt;</ept> reference to an existing container in your storage account.</source>
            <target state="new">Use a <bpt id="2">&lt;code&gt;</bpt>CloudBlobClient<ept id="2">&lt;/code&gt;</ept> object to get a <bpt id="4">&lt;code&gt;</bpt>CloudBlobContainer<ept id="4">&lt;/code&gt;</ept> reference to an existing container in your storage account.</target>
          </trans-unit>
          <trans-unit id="129" xml:space="preserve">
            <source>Create a container in code</source>
            <target state="new">Create a container in code</target>
          </trans-unit>
          <trans-unit id="130" xml:space="preserve">
            <source>You can also use the <bpt id="2">&lt;code&gt;</bpt>CloudBlobClient<ept id="2">&lt;/code&gt;</ept> to create a container in your storage account.</source>
            <target state="new">You can also use the <bpt id="2">&lt;code&gt;</bpt>CloudBlobClient<ept id="2">&lt;/code&gt;</ept> to create a container in your storage account.</target>
          </trans-unit>
          <trans-unit id="131" xml:space="preserve">
            <source>All you need to do is to add a call to <bpt id="2">&lt;code&gt;</bpt>CreateIfNotExistsAsync<ept id="2">&lt;/code&gt;</ept> as in the following code:</source>
            <target state="new">All you need to do is to add a call to <bpt id="2">&lt;code&gt;</bpt>CreateIfNotExistsAsync<ept id="2">&lt;/code&gt;</ept> as in the following code:</target>
          </trans-unit>
          <trans-unit id="132" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>NOTE:<ept id="1">&lt;/strong&gt;</ept> The APIs that perform calls to Azure storage in ASP.NET 5 are asynchronous.</source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>NOTE:<ept id="1">&lt;/strong&gt;</ept> The APIs that perform calls to Azure storage in ASP.NET 5 are asynchronous.</target>
          </trans-unit>
          <trans-unit id="133" xml:space="preserve">
            <source>See <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Asynchronous programming with Async and Await<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> for more information.</source>
            <target state="new">See <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Asynchronous programming with Async and Await<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> for more information.</target>
          </trans-unit>
          <trans-unit id="134" xml:space="preserve">
            <source>The code below assumes async programming methods are being used.</source>
            <target state="new">The code below assumes async programming methods are being used.</target>
          </trans-unit>
          <trans-unit id="135" xml:space="preserve">
            <source>To make the files within the container available to everyone, you can set the container to be public by using the following code.</source>
            <target state="new">To make the files within the container available to everyone, you can set the container to be public by using the following code.</target>
          </trans-unit>
          <trans-unit id="136" xml:space="preserve">
            <source>Upload a blob into a container</source>
            <target state="new">Upload a blob into a container</target>
          </trans-unit>
          <trans-unit id="137" xml:space="preserve">
            <source>To upload a blob file into a container, get a container reference and use it to get a blob reference.</source>
            <target state="new">To upload a blob file into a container, get a container reference and use it to get a blob reference.</target>
          </trans-unit>
          <trans-unit id="138" xml:space="preserve">
            <source>After you have a blob reference, you can upload any stream of data to it by calling the <bpt id="2">&lt;code&gt;</bpt>UploadFromStreamAsync<ept id="2">&lt;/code&gt;</ept> method.</source>
            <target state="new">After you have a blob reference, you can upload any stream of data to it by calling the <bpt id="2">&lt;code&gt;</bpt>UploadFromStreamAsync<ept id="2">&lt;/code&gt;</ept> method.</target>
          </trans-unit>
          <trans-unit id="139" xml:space="preserve">
            <source>This operation creates the blob if it’s not already there, or overwrites it if it does exist.</source>
            <target state="new">This operation creates the blob if it’s not already there, or overwrites it if it does exist.</target>
          </trans-unit>
          <trans-unit id="140" xml:space="preserve">
            <source>The following example shows how to upload a blob into a container and assumes that the container was already created.</source>
            <target state="new">The following example shows how to upload a blob into a container and assumes that the container was already created.</target>
          </trans-unit>
          <trans-unit id="141" xml:space="preserve">
            <source>List the blobs in a container</source>
            <target state="new">List the blobs in a container</target>
          </trans-unit>
          <trans-unit id="142" xml:space="preserve">
            <source>To list the blobs in a container, first get a container reference.</source>
            <target state="new">To list the blobs in a container, first get a container reference.</target>
          </trans-unit>
          <trans-unit id="143" xml:space="preserve">
            <source>You can then call the container's <bpt id="2">&lt;code&gt;</bpt>ListBlobsSegmentedAsync<ept id="2">&lt;/code&gt;</ept> method to retrieve the blobs and/or directories within it.</source>
            <target state="new">You can then call the container's <bpt id="2">&lt;code&gt;</bpt>ListBlobsSegmentedAsync<ept id="2">&lt;/code&gt;</ept> method to retrieve the blobs and/or directories within it.</target>
          </trans-unit>
          <trans-unit id="144" xml:space="preserve">
            <source>To access the rich set of properties and methods for a returned <bpt id="2">&lt;code&gt;</bpt>IListBlobItem<ept id="2">&lt;/code&gt;</ept>, you must cast it to a <bpt id="4">&lt;code&gt;</bpt>CloudBlockBlob<ept id="4">&lt;/code&gt;</ept>, <bpt id="6">&lt;code&gt;</bpt>CloudPageBlob<ept id="6">&lt;/code&gt;</ept>, or <bpt id="8">&lt;code&gt;</bpt>CloudBlobDirectory<ept id="8">&lt;/code&gt;</ept> object.</source>
            <target state="new">To access the rich set of properties and methods for a returned <bpt id="2">&lt;code&gt;</bpt>IListBlobItem<ept id="2">&lt;/code&gt;</ept>, you must cast it to a <bpt id="4">&lt;code&gt;</bpt>CloudBlockBlob<ept id="4">&lt;/code&gt;</ept>, <bpt id="6">&lt;code&gt;</bpt>CloudPageBlob<ept id="6">&lt;/code&gt;</ept>, or <bpt id="8">&lt;code&gt;</bpt>CloudBlobDirectory<ept id="8">&lt;/code&gt;</ept> object.</target>
          </trans-unit>
          <trans-unit id="145" xml:space="preserve">
            <source>If you don’t know the blob type, you can use a type check to determine which to cast it to.</source>
            <target state="new">If you don’t know the blob type, you can use a type check to determine which to cast it to.</target>
          </trans-unit>
          <trans-unit id="146" xml:space="preserve">
            <source>The following code demonstrates how to retrieve and output the URI of each item in a container.</source>
            <target state="new">The following code demonstrates how to retrieve and output the URI of each item in a container.</target>
          </trans-unit>
          <trans-unit id="147" xml:space="preserve">
            <source>There are others ways to list the contents of a blob container.</source>
            <target state="new">There are others ways to list the contents of a blob container.</target>
          </trans-unit>
          <trans-unit id="148" xml:space="preserve">
            <source>See <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>How to use blob storage from .NET<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> for more information.</source>
            <target state="new">See <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>How to use blob storage from .NET<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> for more information.</target>
          </trans-unit>
          <trans-unit id="149" xml:space="preserve">
            <source>Download a blob</source>
            <target state="new">Download a blob</target>
          </trans-unit>
          <trans-unit id="150" xml:space="preserve">
            <source>TTo download a blob, first get a reference to the blob, and then call the <bpt id="2">&lt;code&gt;</bpt>DownloadToStreamAsync<ept id="2">&lt;/code&gt;</ept> method.</source>
            <target state="new">TTo download a blob, first get a reference to the blob, and then call the <bpt id="2">&lt;code&gt;</bpt>DownloadToStreamAsync<ept id="2">&lt;/code&gt;</ept> method.</target>
          </trans-unit>
          <trans-unit id="151" xml:space="preserve">
            <source>The following example uses the <bpt id="2">&lt;code&gt;</bpt>DownloadToStreamAsync<ept id="2">&lt;/code&gt;</ept> method to transfer the blob contents to a stream object that you can then save as a local file.</source>
            <target state="new">The following example uses the <bpt id="2">&lt;code&gt;</bpt>DownloadToStreamAsync<ept id="2">&lt;/code&gt;</ept> method to transfer the blob contents to a stream object that you can then save as a local file.</target>
          </trans-unit>
          <trans-unit id="152" xml:space="preserve">
            <source>There are other ways to save blobs as files.</source>
            <target state="new">There are other ways to save blobs as files.</target>
          </trans-unit>
          <trans-unit id="153" xml:space="preserve">
            <source>See <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>How to use blob storage from .NET<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> for more information.</source>
            <target state="new">See <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>How to use blob storage from .NET<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> for more information.</target>
          </trans-unit>
          <trans-unit id="154" xml:space="preserve">
            <source>Delete a blob</source>
            <target state="new">Delete a blob</target>
          </trans-unit>
          <trans-unit id="155" xml:space="preserve">
            <source>To delete a blob, first get a reference to the blob, and then call the <bpt id="2">&lt;code&gt;</bpt>DeleteAsync<ept id="2">&lt;/code&gt;</ept> method on it.</source>
            <target state="new">To delete a blob, first get a reference to the blob, and then call the <bpt id="2">&lt;code&gt;</bpt>DeleteAsync<ept id="2">&lt;/code&gt;</ept> method on it.</target>
          </trans-unit>
          <trans-unit id="156" xml:space="preserve">
            <source>Next steps</source>
            <target state="new">Next steps</target>
          </trans-unit>
          <trans-unit id="157" xml:space="preserve">
            <source><ph id="1">&lt;token href="../../includes/vs-storage-dotnet-blobs-next-steps.md"/&gt;</ph></source>
            <target state="new"><ph id="1">&lt;token href="../../includes/vs-storage-dotnet-blobs-next-steps.md"/&gt;</ph></target>
          </trans-unit>
        </group>
      </group>
    </body>
  </file>
</xliff>