<?xml version="1.0" encoding="utf-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" source-language="en-us" target-language="ko-kr" original="2/21/2016 4:45:03 AM" tool-id="MarkdownTransformer" product-name="N/A" product-version="N/A" build-num="1">
    <header>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c47d03fe87a249ed08aa90117687db980617fa6a</xliffext:olfilehash>
      <tool tool-id="MarkdownTransformer" tool-name="MarkdownToXliff" tool-version="1.0" tool-company="Microsoft" />
    </header>
    <body>
      <group extype="content">
        <group id="101">
          <trans-unit id="101" xml:space="preserve">
            <source>Reliable Actors Smart Cache design pattern</source>
            <target state="new">Reliable Actors Smart Cache design pattern</target>
          </trans-unit>
          <trans-unit id="102" xml:space="preserve">
            <source>Design pattern on how to use Reliable Actors as caching infrastructure on web-based applications</source>
            <target state="new">Design pattern on how to use Reliable Actors as caching infrastructure on web-based applications</target>
          </trans-unit>
          <trans-unit id="103" xml:space="preserve">
            <source>Reliable Actors design pattern: smart cache</source>
            <target state="new">Reliable Actors design pattern: smart cache</target>
          </trans-unit>
          <trans-unit id="104" xml:space="preserve">
            <source>The combination of a web tier, caching tier, storage tier, and occasionally a worker tier are pretty much the standard parts of today’s applications.</source>
            <target state="new">The combination of a web tier, caching tier, storage tier, and occasionally a worker tier are pretty much the standard parts of today’s applications.</target>
          </trans-unit>
          <trans-unit id="105" xml:space="preserve">
            <source>The caching tier is usually vital to performance and may, in fact, be comprised of multiple tiers itself.</source>
            <target state="new">The caching tier is usually vital to performance and may, in fact, be comprised of multiple tiers itself.</target>
          </trans-unit>
          <trans-unit id="106" xml:space="preserve">
            <source>Many caches are simple key-value pairs while other systems like <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Redis<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> that are used as caches offer richer semantics.</source>
            <target state="new">Many caches are simple key-value pairs while other systems like <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Redis<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> that are used as caches offer richer semantics.</target>
          </trans-unit>
          <trans-unit id="107" xml:space="preserve">
            <source>Still, any special, caching tier will be limited in semantics and more importantly it is yet another tier to manage.</source>
            <target state="new">Still, any special, caching tier will be limited in semantics and more importantly it is yet another tier to manage.</target>
          </trans-unit>
          <trans-unit id="108" xml:space="preserve">
            <source>What if instead, objects just kept state in local variables and these objects can be snapshotted or persisted to a durable store automatically?</source>
            <target state="new">What if instead, objects just kept state in local variables and these objects can be snapshotted or persisted to a durable store automatically?</target>
          </trans-unit>
          <trans-unit id="109" xml:space="preserve">
            <source>Furthermore, rich collections such as lists, sorted sets, queues, and any other custom type for that matter are simply modelled as member variables and methods.</source>
            <target state="new">Furthermore, rich collections such as lists, sorted sets, queues, and any other custom type for that matter are simply modelled as member variables and methods.</target>
          </trans-unit>
          <trans-unit id="110" xml:space="preserve">
            <source><bpt id="1">&lt;linkText&gt;</bpt><ept id="1">&lt;/linkText&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;linkText&gt;</bpt><ept id="1">&lt;/linkText&gt;</ept></target>
          </trans-unit>
          <trans-unit id="111" xml:space="preserve">
            <source>The leaderboard sample</source>
            <target state="new">The leaderboard sample</target>
          </trans-unit>
          <trans-unit id="112" xml:space="preserve">
            <source>Take leader boards as an example—a Leaderboard object needs to maintain a sorted list of players and their scores so that we can query it. For example for the "Top 100 Players" or to find a player’s position in the leader board relative to +- N players above and below him/her. A typical solution with traditional tools would require ‘GET’ing the Leaderboard object (collection which supports inserting a new tuple<bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept> named Score), sorting it, and finally ‘PUT’ing it back to the cache. We would probably LOCK (GETLOCK, PUTLOCK) the Leaderboard object for consistency.</source>
            <target state="new">Take leader boards as an example—a Leaderboard object needs to maintain a sorted list of players and their scores so that we can query it. For example for the "Top 100 Players" or to find a player’s position in the leader board relative to +- N players above and below him/her. A typical solution with traditional tools would require ‘GET’ing the Leaderboard object (collection which supports inserting a new tuple<bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept> named Score), sorting it, and finally ‘PUT’ing it back to the cache. We would probably LOCK (GETLOCK, PUTLOCK) the Leaderboard object for consistency.</target>
          </trans-unit>
          <trans-unit id="113" xml:space="preserve">
            <source>Let’s have an actor-based solution where state and behaviour are together.</source>
            <target state="new">Let’s have an actor-based solution where state and behaviour are together.</target>
          </trans-unit>
          <trans-unit id="114" xml:space="preserve">
            <source>There are two options:</source>
            <target state="new">There are two options:</target>
          </trans-unit>
          <trans-unit id="115" xml:space="preserve">
            <source>Implement the Leaderboard Collection as part of the actor,</source>
            <target state="new">Implement the Leaderboard Collection as part of the actor,</target>
          </trans-unit>
          <trans-unit id="116" xml:space="preserve">
            <source>Or use the actor as an interface to the collection that we can keep in a member variable.</source>
            <target state="new">Or use the actor as an interface to the collection that we can keep in a member variable.</target>
          </trans-unit>
          <trans-unit id="117" xml:space="preserve">
            <source>First let’s have a look at what the a interface may look like:</source>
            <target state="new">First let’s have a look at what the a interface may look like:</target>
          </trans-unit>
          <trans-unit id="118" xml:space="preserve">
            <source>Smart Cache code sample – Leaderboard interface</source>
            <target state="new">Smart Cache code sample – Leaderboard interface</target>
          </trans-unit>
          <trans-unit id="119" xml:space="preserve">
            <source>Next, we implement this interface and use the latter option and encapsulate this collection's behaviour in the actor:</source>
            <target state="new">Next, we implement this interface and use the latter option and encapsulate this collection's behaviour in the actor:</target>
          </trans-unit>
          <trans-unit id="120" xml:space="preserve">
            <source>Smart Cache code sample – Leaderboard actor</source>
            <target state="new">Smart Cache code sample – Leaderboard actor</target>
          </trans-unit>
          <trans-unit id="121" xml:space="preserve">
            <source>The state member of the class provides the state of the actor, in the sample code above it also provides methods to read/write data.</source>
            <target state="new">The state member of the class provides the state of the actor, in the sample code above it also provides methods to read/write data.</target>
          </trans-unit>
          <trans-unit id="122" xml:space="preserve">
            <source>Smart Cache code sample – LeaderboardCollection</source>
            <target state="new">Smart Cache code sample – LeaderboardCollection</target>
          </trans-unit>
          <trans-unit id="123" xml:space="preserve">
            <source>No data shipping, no locks, just manipulating remote objects in a distributed runtime, servicing multiple clients as if they were single objects in a single application servicing only one client.</source>
            <target state="new">No data shipping, no locks, just manipulating remote objects in a distributed runtime, servicing multiple clients as if they were single objects in a single application servicing only one client.</target>
          </trans-unit>
          <trans-unit id="124" xml:space="preserve">
            <source>Here is the sample client:</source>
            <target state="new">Here is the sample client:</target>
          </trans-unit>
          <trans-unit id="125" xml:space="preserve">
            <source>Smart Cache code sample – calling the Leaderboard actor</source>
            <target state="new">Smart Cache code sample – calling the Leaderboard actor</target>
          </trans-unit>
          <trans-unit id="126" xml:space="preserve">
            <source>The output looks like this:</source>
            <target state="new">The output looks like this:</target>
          </trans-unit>
          <trans-unit id="127" xml:space="preserve">
            <source>Scaling the architecture</source>
            <target state="new">Scaling the architecture</target>
          </trans-unit>
          <trans-unit id="128" xml:space="preserve">
            <source>It may feel like the example above could create a bottleneck in the Leaderboard instance.</source>
            <target state="new">It may feel like the example above could create a bottleneck in the Leaderboard instance.</target>
          </trans-unit>
          <trans-unit id="129" xml:space="preserve">
            <source>What if, for instance, we are planning to support hundreds and thousands of players?</source>
            <target state="new">What if, for instance, we are planning to support hundreds and thousands of players?</target>
          </trans-unit>
          <trans-unit id="130" xml:space="preserve">
            <source>One way to deal with that might be to introduce stateless aggregators that would act like a buffer—hold the partial scores (say subtotals) and then periodically send them to the Leaderboard actor, which can maintain the final Leaderboard.</source>
            <target state="new">One way to deal with that might be to introduce stateless aggregators that would act like a buffer—hold the partial scores (say subtotals) and then periodically send them to the Leaderboard actor, which can maintain the final Leaderboard.</target>
          </trans-unit>
          <trans-unit id="131" xml:space="preserve">
            <source>We will discuss this “aggregation” technique in more detail later.</source>
            <target state="new">We will discuss this “aggregation” technique in more detail later.</target>
          </trans-unit>
          <trans-unit id="132" xml:space="preserve">
            <source>Also, we do not have to consider mutexes, semaphores, or other concurrency constructs traditionally required by correctly behaving concurrent programs.</source>
            <target state="new">Also, we do not have to consider mutexes, semaphores, or other concurrency constructs traditionally required by correctly behaving concurrent programs.</target>
          </trans-unit>
          <trans-unit id="133" xml:space="preserve">
            <source>Below is another cache example that demonstrates the rich semantics one can implement with actors.</source>
            <target state="new">Below is another cache example that demonstrates the rich semantics one can implement with actors.</target>
          </trans-unit>
          <trans-unit id="134" xml:space="preserve">
            <source>This time we implement the logic of the Priority Queue (lower the number, higher the priority) as part of the Actor implementation.</source>
            <target state="new">This time we implement the logic of the Priority Queue (lower the number, higher the priority) as part of the Actor implementation.</target>
          </trans-unit>
          <trans-unit id="135" xml:space="preserve">
            <source>The interface for IJobQueue looks like below:</source>
            <target state="new">The interface for IJobQueue looks like below:</target>
          </trans-unit>
          <trans-unit id="136" xml:space="preserve">
            <source>Smart Cache code sample – Job Queue interface</source>
            <target state="new">Smart Cache code sample – Job Queue interface</target>
          </trans-unit>
          <trans-unit id="137" xml:space="preserve">
            <source>We also need to define the Job item:</source>
            <target state="new">We also need to define the Job item:</target>
          </trans-unit>
          <trans-unit id="138" xml:space="preserve">
            <source>Smart Cache code sample – Job</source>
            <target state="new">Smart Cache code sample – Job</target>
          </trans-unit>
          <trans-unit id="139" xml:space="preserve">
            <source>Finally, we implement the IJobQueue interface in the grain.</source>
            <target state="new">Finally, we implement the IJobQueue interface in the grain.</target>
          </trans-unit>
          <trans-unit id="140" xml:space="preserve">
            <source>Note that we omitted the implementation details of the priority queue here for clarity.</source>
            <target state="new">Note that we omitted the implementation details of the priority queue here for clarity.</target>
          </trans-unit>
          <trans-unit id="141" xml:space="preserve">
            <source>A sample implementation can be found in the accompanying samples.</source>
            <target state="new">A sample implementation can be found in the accompanying samples.</target>
          </trans-unit>
          <trans-unit id="142" xml:space="preserve">
            <source>Smart Cache code sample – Job Queue</source>
            <target state="new">Smart Cache code sample – Job Queue</target>
          </trans-unit>
          <trans-unit id="143" xml:space="preserve">
            <source>The output looks like this:</source>
            <target state="new">The output looks like this:</target>
          </trans-unit>
          <trans-unit id="144" xml:space="preserve">
            <source>Actors provide flexibility</source>
            <target state="new">Actors provide flexibility</target>
          </trans-unit>
          <trans-unit id="145" xml:space="preserve">
            <source>In the samples above, Leaderboard and JobQueue, we used two different techniques:</source>
            <target state="new">In the samples above, Leaderboard and JobQueue, we used two different techniques:</target>
          </trans-unit>
          <trans-unit id="146" xml:space="preserve">
            <source>In the Leaderboard sample we encapsulated a Leaderboard object as a private member variable in the actor and merely provided an interface to this object – both to its state and functionality.</source>
            <target state="new">In the Leaderboard sample we encapsulated a Leaderboard object as a private member variable in the actor and merely provided an interface to this object – both to its state and functionality.</target>
          </trans-unit>
          <trans-unit id="147" xml:space="preserve">
            <source>On the other hand, in the JobQueue sample we implemented the actor as a priority queue itself rather than referencing another object defined elsewhere.</source>
            <target state="new">On the other hand, in the JobQueue sample we implemented the actor as a priority queue itself rather than referencing another object defined elsewhere.</target>
          </trans-unit>
          <trans-unit id="148" xml:space="preserve">
            <source>Actors provide flexibility for the developer to define rich object structures as part the actors or reference object graphs outside of the actors.</source>
            <target state="new">Actors provide flexibility for the developer to define rich object structures as part the actors or reference object graphs outside of the actors.</target>
          </trans-unit>
          <trans-unit id="149" xml:space="preserve">
            <source>In caching terms actors can write-behind or write-through, or we can use different techniques at a member variable granularity.</source>
            <target state="new">In caching terms actors can write-behind or write-through, or we can use different techniques at a member variable granularity.</target>
          </trans-unit>
          <trans-unit id="150" xml:space="preserve">
            <source>In other words, we have full control over what to persist and when to persist.</source>
            <target state="new">In other words, we have full control over what to persist and when to persist.</target>
          </trans-unit>
          <trans-unit id="151" xml:space="preserve">
            <source>We don’t have to persist transient state or state that we can build from saved state.</source>
            <target state="new">We don’t have to persist transient state or state that we can build from saved state.</target>
          </trans-unit>
          <trans-unit id="152" xml:space="preserve">
            <source>And how about populating these actors caches then?</source>
            <target state="new">And how about populating these actors caches then?</target>
          </trans-unit>
          <trans-unit id="153" xml:space="preserve">
            <source>There are number of ways to achieve this.</source>
            <target state="new">There are number of ways to achieve this.</target>
          </trans-unit>
          <trans-unit id="154" xml:space="preserve">
            <source>Actors provide virtual methods called OnActivateAsync() and OnDectivateAsync() to let us know when an instance of the actor is activated and deactivated.</source>
            <target state="new">Actors provide virtual methods called OnActivateAsync() and OnDectivateAsync() to let us know when an instance of the actor is activated and deactivated.</target>
          </trans-unit>
          <trans-unit id="155" xml:space="preserve">
            <source>Note that the actor is activated on demand when a first request is sent to it.</source>
            <target state="new">Note that the actor is activated on demand when a first request is sent to it.</target>
          </trans-unit>
          <trans-unit id="156" xml:space="preserve">
            <source>We can use OnActivateAsync() to populate state on-demand as in read-through, perhaps from an external stable store.</source>
            <target state="new">We can use OnActivateAsync() to populate state on-demand as in read-through, perhaps from an external stable store.</target>
          </trans-unit>
          <trans-unit id="157" xml:space="preserve">
            <source>Or we can populate state on a timer, say an Exchange Rate actor that provides the conversion function based on the latest currency rates.</source>
            <target state="new">Or we can populate state on a timer, say an Exchange Rate actor that provides the conversion function based on the latest currency rates.</target>
          </trans-unit>
          <trans-unit id="158" xml:space="preserve">
            <source>This actor can populate its state from an external service periodically, say every 5 seconds, and use the state for the conversion function.</source>
            <target state="new">This actor can populate its state from an external service periodically, say every 5 seconds, and use the state for the conversion function.</target>
          </trans-unit>
          <trans-unit id="159" xml:space="preserve">
            <source>See the example below:</source>
            <target state="new">See the example below:</target>
          </trans-unit>
          <trans-unit id="160" xml:space="preserve">
            <source>Smart Cache code sample – Rate Converter</source>
            <target state="new">Smart Cache code sample – Rate Converter</target>
          </trans-unit>
          <trans-unit id="161" xml:space="preserve">
            <source>Essentially Smart Cache provides:</source>
            <target state="new">Essentially Smart Cache provides:</target>
          </trans-unit>
          <trans-unit id="162" xml:space="preserve">
            <source>High throughput/low latency by service requests from memory.</source>
            <target state="new">High throughput/low latency by service requests from memory.</target>
          </trans-unit>
          <trans-unit id="163" xml:space="preserve">
            <source>Single-instance routing and single-threaded serialization of requests to an item with no contention on persistent store.</source>
            <target state="new">Single-instance routing and single-threaded serialization of requests to an item with no contention on persistent store.</target>
          </trans-unit>
          <trans-unit id="164" xml:space="preserve">
            <source>Semantic operations, for example, Enqueue(Job item).</source>
            <target state="new">Semantic operations, for example, Enqueue(Job item).</target>
          </trans-unit>
          <trans-unit id="165" xml:space="preserve">
            <source>Easy-to-implement write-through or write-behind.</source>
            <target state="new">Easy-to-implement write-through or write-behind.</target>
          </trans-unit>
          <trans-unit id="166" xml:space="preserve">
            <source>Automatic eviction of LRU (Least Recently Used) items (resource management).</source>
            <target state="new">Automatic eviction of LRU (Least Recently Used) items (resource management).</target>
          </trans-unit>
          <trans-unit id="167" xml:space="preserve">
            <source>Automatic elasticity and reliability.</source>
            <target state="new">Automatic elasticity and reliability.</target>
          </trans-unit>
          <trans-unit id="168" xml:space="preserve">
            <source>Next Steps</source>
            <target state="new">Next Steps</target>
          </trans-unit>
          <trans-unit id="169" xml:space="preserve">
            <source><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Pattern: Distributed Networks and Graphs<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></source>
            <target state="new"><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Pattern: Distributed Networks and Graphs<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></target>
          </trans-unit>
          <trans-unit id="170" xml:space="preserve">
            <source><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Pattern: Resource Governance<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></source>
            <target state="new"><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Pattern: Resource Governance<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></target>
          </trans-unit>
          <trans-unit id="171" xml:space="preserve">
            <source><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Pattern: Stateful Service Composition<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></source>
            <target state="new"><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Pattern: Stateful Service Composition<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></target>
          </trans-unit>
          <trans-unit id="172" xml:space="preserve">
            <source><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Pattern: Internet of Things<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></source>
            <target state="new"><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Pattern: Internet of Things<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></target>
          </trans-unit>
          <trans-unit id="173" xml:space="preserve">
            <source><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Pattern: Distributed Computation<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></source>
            <target state="new"><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Pattern: Distributed Computation<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></target>
          </trans-unit>
          <trans-unit id="174" xml:space="preserve">
            <source><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Some Anti-patterns<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></source>
            <target state="new"><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Some Anti-patterns<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></target>
          </trans-unit>
          <trans-unit id="175" xml:space="preserve">
            <source><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Introduction to Service Fabric Actors<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></source>
            <target state="new"><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Introduction to Service Fabric Actors<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></target>
          </trans-unit>
        </group>
      </group>
    </body>
  </file>
</xliff>