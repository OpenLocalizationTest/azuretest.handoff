<?xml version="1.0" encoding="utf-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" source-language="en-us" target-language="ko-kr" original="2/21/2016 4:44:55 AM" tool-id="MarkdownTransformer" product-name="N/A" product-version="N/A" build-num="1">
    <header>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fb28f2db96c85e5f7945c51045a7ba2e660d634d</xliffext:olfilehash>
      <tool tool-id="MarkdownTransformer" tool-name="MarkdownToXliff" tool-version="1.0" tool-company="Microsoft" />
    </header>
    <body>
      <group extype="content">
        <group id="101">
          <trans-unit id="101" xml:space="preserve">
            <source>Azure Service Fabric Actors Resource Governance design pattern</source>
            <target state="new">Azure Service Fabric Actors Resource Governance design pattern</target>
          </trans-unit>
          <trans-unit id="102" xml:space="preserve">
            <source>Design pattern on how Service Fabric Actors can be used to model application what needs to scale but use constrained resources</source>
            <target state="new">Design pattern on how Service Fabric Actors can be used to model application what needs to scale but use constrained resources</target>
          </trans-unit>
          <trans-unit id="103" xml:space="preserve">
            <source>Reliable Actors design pattern: resource governance</source>
            <target state="new">Reliable Actors design pattern: resource governance</target>
          </trans-unit>
          <trans-unit id="104" xml:space="preserve">
            <source>This pattern and related scenarios are easily recognizable by developers—enterprise or otherwise—who have constrained resources on-premises or in the cloud, which they cannot immediately scale or that wish to ship large scale applications and data to the cloud.</source>
            <target state="new">This pattern and related scenarios are easily recognizable by developers—enterprise or otherwise—who have constrained resources on-premises or in the cloud, which they cannot immediately scale or that wish to ship large scale applications and data to the cloud.</target>
          </trans-unit>
          <trans-unit id="105" xml:space="preserve">
            <source>In the enterprise these constrained resources, such as databases, run on scale-up hardware.</source>
            <target state="new">In the enterprise these constrained resources, such as databases, run on scale-up hardware.</target>
          </trans-unit>
          <trans-unit id="106" xml:space="preserve">
            <source>Anyone with a long enterprise history knows this is a common situation on-premises.</source>
            <target state="new">Anyone with a long enterprise history knows this is a common situation on-premises.</target>
          </trans-unit>
          <trans-unit id="107" xml:space="preserve">
            <source>Even at cloud scale, we have seen this situation occur when a cloud service has attempted to exceed the 64K TCP limit of connections between an address/port tuple, or when attempting to connect to a cloud-based database that limits the number of concurrent connections.</source>
            <target state="new">Even at cloud scale, we have seen this situation occur when a cloud service has attempted to exceed the 64K TCP limit of connections between an address/port tuple, or when attempting to connect to a cloud-based database that limits the number of concurrent connections.</target>
          </trans-unit>
          <trans-unit id="108" xml:space="preserve">
            <source>Typically in the past, this was solved by throttling through message-based middleware or by custom-built pooling and façade mechanisms.</source>
            <target state="new">Typically in the past, this was solved by throttling through message-based middleware or by custom-built pooling and façade mechanisms.</target>
          </trans-unit>
          <trans-unit id="109" xml:space="preserve">
            <source>These are hard to get right, especially when we need to scale the middle tier but still maintain the correct connection counts.</source>
            <target state="new">These are hard to get right, especially when we need to scale the middle tier but still maintain the correct connection counts.</target>
          </trans-unit>
          <trans-unit id="110" xml:space="preserve">
            <source>It’s just fragile and complex.</source>
            <target state="new">It’s just fragile and complex.</target>
          </trans-unit>
          <trans-unit id="111" xml:space="preserve">
            <source>In fact, like the Smart Cache pattern, this pattern spans across multiple scenarios and customers who already have working systems with constrained resources.</source>
            <target state="new">In fact, like the Smart Cache pattern, this pattern spans across multiple scenarios and customers who already have working systems with constrained resources.</target>
          </trans-unit>
          <trans-unit id="112" xml:space="preserve">
            <source>They are building systems where they need to scale-out not just the services, but their state in-memory as well as the persisted state in stable storage.</source>
            <target state="new">They are building systems where they need to scale-out not just the services, but their state in-memory as well as the persisted state in stable storage.</target>
          </trans-unit>
          <trans-unit id="113" xml:space="preserve">
            <source>The diagram below illustrates this scenario:</source>
            <target state="new">The diagram below illustrates this scenario:</target>
          </trans-unit>
          <trans-unit id="114" xml:space="preserve">
            <source><bpt id="1">&lt;linkText&gt;</bpt><ept id="1">&lt;/linkText&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;linkText&gt;</bpt><ept id="1">&lt;/linkText&gt;</ept></target>
          </trans-unit>
          <trans-unit id="115" xml:space="preserve">
            <source>Modeling cache scenarios with actors</source>
            <target state="new">Modeling cache scenarios with actors</target>
          </trans-unit>
          <trans-unit id="116" xml:space="preserve">
            <source>Essentially we model access to resources as an actor or multiple actors that act as proxies (say connection, for example) to a resource or a group of resources.</source>
            <target state="new">Essentially we model access to resources as an actor or multiple actors that act as proxies (say connection, for example) to a resource or a group of resources.</target>
          </trans-unit>
          <trans-unit id="117" xml:space="preserve">
            <source>You can then either directly manage the resource through individual actors or use a coordination actor that manages the resource actors.</source>
            <target state="new">You can then either directly manage the resource through individual actors or use a coordination actor that manages the resource actors.</target>
          </trans-unit>
          <trans-unit id="118" xml:space="preserve">
            <source>To make this more concrete, we will address the common need of having to work against a partitioned (aka sharded) storage tier for performance and scalability reasons.</source>
            <target state="new">To make this more concrete, we will address the common need of having to work against a partitioned (aka sharded) storage tier for performance and scalability reasons.</target>
          </trans-unit>
          <trans-unit id="119" xml:space="preserve">
            <source>Our first option is pretty basic: we can use a static function to map and resolve our actors to downstream resources.</source>
            <target state="new">Our first option is pretty basic: we can use a static function to map and resolve our actors to downstream resources.</target>
          </trans-unit>
          <trans-unit id="120" xml:space="preserve">
            <source>Such a function can return, for example, a connection string with given input.</source>
            <target state="new">Such a function can return, for example, a connection string with given input.</target>
          </trans-unit>
          <trans-unit id="121" xml:space="preserve">
            <source>It is entirely up to us how to implement that function.</source>
            <target state="new">It is entirely up to us how to implement that function.</target>
          </trans-unit>
          <trans-unit id="122" xml:space="preserve">
            <source>Of course, this approach comes with its own drawbacks such as static affinity that makes repartitioning resources or remapping an actor to resources very difficult.</source>
            <target state="new">Of course, this approach comes with its own drawbacks such as static affinity that makes repartitioning resources or remapping an actor to resources very difficult.</target>
          </trans-unit>
          <trans-unit id="123" xml:space="preserve">
            <source>Here is a very simple example—we do modulo arithmetic to determine the database name using userId and use region to identify the database server.</source>
            <target state="new">Here is a very simple example—we do modulo arithmetic to determine the database name using userId and use region to identify the database server.</target>
          </trans-unit>
          <trans-unit id="124" xml:space="preserve">
            <source>Resource Governance code sample – static resolution</source>
            <target state="new">Resource Governance code sample – static resolution</target>
          </trans-unit>
          <trans-unit id="125" xml:space="preserve">
            <source>Simple yet not very flexible.</source>
            <target state="new">Simple yet not very flexible.</target>
          </trans-unit>
          <trans-unit id="126" xml:space="preserve">
            <source>Now let’s have a look at a more advanced and useful approach.</source>
            <target state="new">Now let’s have a look at a more advanced and useful approach.</target>
          </trans-unit>
          <trans-unit id="127" xml:space="preserve">
            <source>First, we model the affinity between physical resources and actors.</source>
            <target state="new">First, we model the affinity between physical resources and actors.</target>
          </trans-unit>
          <trans-unit id="128" xml:space="preserve">
            <source>This is done through an actor called Resolver that understands the mapping between users, logical partitions, and physical resources.</source>
            <target state="new">This is done through an actor called Resolver that understands the mapping between users, logical partitions, and physical resources.</target>
          </trans-unit>
          <trans-unit id="129" xml:space="preserve">
            <source>Resolver maintains its data in a persisted store, however it is cached for easy lookup.</source>
            <target state="new">Resolver maintains its data in a persisted store, however it is cached for easy lookup.</target>
          </trans-unit>
          <trans-unit id="130" xml:space="preserve">
            <source>As we saw in the Exchange Rate sample earlier in the Smart Cache pattern, Resolver can proactively fetch the latest information using a timer.</source>
            <target state="new">As we saw in the Exchange Rate sample earlier in the Smart Cache pattern, Resolver can proactively fetch the latest information using a timer.</target>
          </trans-unit>
          <trans-unit id="131" xml:space="preserve">
            <source>Once the user actor resolves the resource it needs to use, it caches it in a local variable called _resolution and uses it during its lifetime.</source>
            <target state="new">Once the user actor resolves the resource it needs to use, it caches it in a local variable called _resolution and uses it during its lifetime.</target>
          </trans-unit>
          <trans-unit id="132" xml:space="preserve">
            <source>We chose a look-up based resolution (illustrated below) over simple hashing or range hashing because of the flexibility it provides in operations such as scaling in/out or moving a user from one resource to another.</source>
            <target state="new">We chose a look-up based resolution (illustrated below) over simple hashing or range hashing because of the flexibility it provides in operations such as scaling in/out or moving a user from one resource to another.</target>
          </trans-unit>
          <trans-unit id="133" xml:space="preserve">
            <source><bpt id="1">&lt;linkText&gt;</bpt><ept id="1">&lt;/linkText&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;linkText&gt;</bpt><ept id="1">&lt;/linkText&gt;</ept></target>
          </trans-unit>
          <trans-unit id="134" xml:space="preserve">
            <source>In the illustration above, we see that actor B23 is first resolving its resource (aka resolution) —DB1 and caches it.</source>
            <target state="new">In the illustration above, we see that actor B23 is first resolving its resource (aka resolution) —DB1 and caches it.</target>
          </trans-unit>
          <trans-unit id="135" xml:space="preserve">
            <source>Subsequent operations can now use the cached resolution to access the constrained resource.</source>
            <target state="new">Subsequent operations can now use the cached resolution to access the constrained resource.</target>
          </trans-unit>
          <trans-unit id="136" xml:space="preserve">
            <source>Since the actors support single-threaded execution, developers no longer need to worry about concurrent access to the resource.</source>
            <target state="new">Since the actors support single-threaded execution, developers no longer need to worry about concurrent access to the resource.</target>
          </trans-unit>
          <trans-unit id="137" xml:space="preserve">
            <source>The User and Resolver actors look like this:</source>
            <target state="new">The User and Resolver actors look like this:</target>
          </trans-unit>
          <trans-unit id="138" xml:space="preserve">
            <source>Resource Governance code sample – Resolver</source>
            <target state="new">Resource Governance code sample – Resolver</target>
          </trans-unit>
          <trans-unit id="139" xml:space="preserve">
            <source>Resource Governance – Resolver Example</source>
            <target state="new">Resource Governance – Resolver Example</target>
          </trans-unit>
          <trans-unit id="140" xml:space="preserve">
            <source>Accessing resources with finite capability</source>
            <target state="new">Accessing resources with finite capability</target>
          </trans-unit>
          <trans-unit id="141" xml:space="preserve">
            <source>Now let’s look at another example; exclusive access to precious resources such as DB, storage accounts, and file systems with finite throughput capability.</source>
            <target state="new">Now let’s look at another example; exclusive access to precious resources such as DB, storage accounts, and file systems with finite throughput capability.</target>
          </trans-unit>
          <trans-unit id="142" xml:space="preserve">
            <source>Our scenario is as follows: we would like to process events using an actor called EventProcessor, which is responsible for processing and persisting the event, in this case to a .CSV file for simplicity.</source>
            <target state="new">Our scenario is as follows: we would like to process events using an actor called EventProcessor, which is responsible for processing and persisting the event, in this case to a .CSV file for simplicity.</target>
          </trans-unit>
          <trans-unit id="143" xml:space="preserve">
            <source>While we can follow the partitioning approach discussed above to scale-out our resources, we will still have to deal with the concurrency issues.</source>
            <target state="new">While we can follow the partitioning approach discussed above to scale-out our resources, we will still have to deal with the concurrency issues.</target>
          </trans-unit>
          <trans-unit id="144" xml:space="preserve">
            <source>That is why we chose a file-based example to illustrate this particular point—writing to a single file from multiple actors will raise concurrency issues.</source>
            <target state="new">That is why we chose a file-based example to illustrate this particular point—writing to a single file from multiple actors will raise concurrency issues.</target>
          </trans-unit>
          <trans-unit id="145" xml:space="preserve">
            <source>To address the problem we introduce another actor called EventWriter that has exclusive ownership of the constrained resources.</source>
            <target state="new">To address the problem we introduce another actor called EventWriter that has exclusive ownership of the constrained resources.</target>
          </trans-unit>
          <trans-unit id="146" xml:space="preserve">
            <source>The scenario is illustrated below:</source>
            <target state="new">The scenario is illustrated below:</target>
          </trans-unit>
          <trans-unit id="147" xml:space="preserve">
            <source><bpt id="1">&lt;linkText&gt;</bpt><ept id="1">&lt;/linkText&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;linkText&gt;</bpt><ept id="1">&lt;/linkText&gt;</ept></target>
          </trans-unit>
          <trans-unit id="148" xml:space="preserve">
            <source>We mark EventProcessor actors as “Stateless Workers,” which allows the runtime to scale them across the cluster as necessary.</source>
            <target state="new">We mark EventProcessor actors as “Stateless Workers,” which allows the runtime to scale them across the cluster as necessary.</target>
          </trans-unit>
          <trans-unit id="149" xml:space="preserve">
            <source>Hence we didn’t use any identifiers in the illustration above for these actors.</source>
            <target state="new">Hence we didn’t use any identifiers in the illustration above for these actors.</target>
          </trans-unit>
          <trans-unit id="150" xml:space="preserve">
            <source>In other words, stateless actors are a pool of workers maintained by the runtime.</source>
            <target state="new">In other words, stateless actors are a pool of workers maintained by the runtime.</target>
          </trans-unit>
          <trans-unit id="151" xml:space="preserve">
            <source>In the sample code below, the EventProcessor actor does two things: it first decides which EventWriter (therefore resource) to use, and invokes the chosen actor to write the processed event.</source>
            <target state="new">In the sample code below, the EventProcessor actor does two things: it first decides which EventWriter (therefore resource) to use, and invokes the chosen actor to write the processed event.</target>
          </trans-unit>
          <trans-unit id="152" xml:space="preserve">
            <source>For simplicity, we are choosing Event Type as the identifier for the EventWriter actor.</source>
            <target state="new">For simplicity, we are choosing Event Type as the identifier for the EventWriter actor.</target>
          </trans-unit>
          <trans-unit id="153" xml:space="preserve">
            <source>In other words, there will be one and only one EventWriter for this Event Type providing single-threaded and exclusive access to the resource.</source>
            <target state="new">In other words, there will be one and only one EventWriter for this Event Type providing single-threaded and exclusive access to the resource.</target>
          </trans-unit>
          <trans-unit id="154" xml:space="preserve">
            <source>Resource Governance code sample – Event Processor</source>
            <target state="new">Resource Governance code sample – Event Processor</target>
          </trans-unit>
          <trans-unit id="155" xml:space="preserve">
            <source>Now let’s have a look at the EventWriter actor.</source>
            <target state="new">Now let’s have a look at the EventWriter actor.</target>
          </trans-unit>
          <trans-unit id="156" xml:space="preserve">
            <source>It really doesn’t do much apart from control exclusive access to the constrained resource, in this case the file and writing events to it.</source>
            <target state="new">It really doesn’t do much apart from control exclusive access to the constrained resource, in this case the file and writing events to it.</target>
          </trans-unit>
          <trans-unit id="157" xml:space="preserve">
            <source>Resource Governance code sample – Event Writer</source>
            <target state="new">Resource Governance code sample – Event Writer</target>
          </trans-unit>
          <trans-unit id="158" xml:space="preserve">
            <source>Having a single actor responsible for the resource allows us to add capabilities such as buffering.</source>
            <target state="new">Having a single actor responsible for the resource allows us to add capabilities such as buffering.</target>
          </trans-unit>
          <trans-unit id="159" xml:space="preserve">
            <source>We can buffer incoming events and write these events periodically using a timer or when our buffer is full.</source>
            <target state="new">We can buffer incoming events and write these events periodically using a timer or when our buffer is full.</target>
          </trans-unit>
          <trans-unit id="160" xml:space="preserve">
            <source>Here is a simple timer based example:</source>
            <target state="new">Here is a simple timer based example:</target>
          </trans-unit>
          <trans-unit id="161" xml:space="preserve">
            <source>Resource Governance code sample – Event Writer with buffer</source>
            <target state="new">Resource Governance code sample – Event Writer with buffer</target>
          </trans-unit>
          <trans-unit id="162" xml:space="preserve">
            <source>While the code above will work fine, clients will not know whether their event made it to the underlying store.</source>
            <target state="new">While the code above will work fine, clients will not know whether their event made it to the underlying store.</target>
          </trans-unit>
          <trans-unit id="163" xml:space="preserve">
            <source>To allow buffering and let clients be aware what is happening to their request, we introduce the following approach to let clients wait until their event is written to the .CSV file:</source>
            <target state="new">To allow buffering and let clients be aware what is happening to their request, we introduce the following approach to let clients wait until their event is written to the .CSV file:</target>
          </trans-unit>
          <trans-unit id="164" xml:space="preserve">
            <source>Resource Governance code sample – Async batching</source>
            <target state="new">Resource Governance code sample – Async batching</target>
          </trans-unit>
          <trans-unit id="165" xml:space="preserve">
            <source>We will use this class to create and maintain a list of incomplete tasks (to block clients) and complete them in one go once we write the buffered events to storage.</source>
            <target state="new">We will use this class to create and maintain a list of incomplete tasks (to block clients) and complete them in one go once we write the buffered events to storage.</target>
          </trans-unit>
          <trans-unit id="166" xml:space="preserve">
            <source>In the EventWriter class, we need to do three things: mark the actor class as Reentrant, return the result of SubmitNext(), and Flush our timer.</source>
            <target state="new">In the EventWriter class, we need to do three things: mark the actor class as Reentrant, return the result of SubmitNext(), and Flush our timer.</target>
          </trans-unit>
          <trans-unit id="167" xml:space="preserve">
            <source>The modified code is as follows:</source>
            <target state="new">The modified code is as follows:</target>
          </trans-unit>
          <trans-unit id="168" xml:space="preserve">
            <source>Resource Governance code sample – Buffering with async batching</source>
            <target state="new">Resource Governance code sample – Buffering with async batching</target>
          </trans-unit>
          <trans-unit id="169" xml:space="preserve">
            <source>Seem easy?</source>
            <target state="new">Seem easy?</target>
          </trans-unit>
          <trans-unit id="170" xml:space="preserve">
            <source>Well it is.</source>
            <target state="new">Well it is.</target>
          </trans-unit>
          <trans-unit id="171" xml:space="preserve">
            <source>But the ease belies the enterprise power.</source>
            <target state="new">But the ease belies the enterprise power.</target>
          </trans-unit>
          <trans-unit id="172" xml:space="preserve">
            <source>With this architecture we get:</source>
            <target state="new">With this architecture we get:</target>
          </trans-unit>
          <trans-unit id="173" xml:space="preserve">
            <source>Location independent resource addressing.</source>
            <target state="new">Location independent resource addressing.</target>
          </trans-unit>
          <trans-unit id="174" xml:space="preserve">
            <source>Tuneable pool size based simply on changing the number of actors that act on behalf a resource.</source>
            <target state="new">Tuneable pool size based simply on changing the number of actors that act on behalf a resource.</target>
          </trans-unit>
          <trans-unit id="175" xml:space="preserve">
            <source>Client side coordinated pool usage (as depicted) or server side (just imagine a single actor in front of each of those pools in the picture).</source>
            <target state="new">Client side coordinated pool usage (as depicted) or server side (just imagine a single actor in front of each of those pools in the picture).</target>
          </trans-unit>
          <trans-unit id="176" xml:space="preserve">
            <source>Scalable pool addition (just add actors representing the new resource).</source>
            <target state="new">Scalable pool addition (just add actors representing the new resource).</target>
          </trans-unit>
          <trans-unit id="177" xml:space="preserve">
            <source>Actor (as we demonstrated earlier) can cache results from backend resource on demand or pre-cache using a timer reducing the need to hit the backend resource.</source>
            <target state="new">Actor (as we demonstrated earlier) can cache results from backend resource on demand or pre-cache using a timer reducing the need to hit the backend resource.</target>
          </trans-unit>
          <trans-unit id="178" xml:space="preserve">
            <source>Efficient asynchronous dispatch.</source>
            <target state="new">Efficient asynchronous dispatch.</target>
          </trans-unit>
          <trans-unit id="179" xml:space="preserve">
            <source>A coding environment that will be familiar to any developer not just middleware specialists.</source>
            <target state="new">A coding environment that will be familiar to any developer not just middleware specialists.</target>
          </trans-unit>
          <trans-unit id="180" xml:space="preserve">
            <source>This pattern is very common in scenarios where developers either have constrained resources they need to develop against or building large scale-out systems.</source>
            <target state="new">This pattern is very common in scenarios where developers either have constrained resources they need to develop against or building large scale-out systems.</target>
          </trans-unit>
          <trans-unit id="181" xml:space="preserve">
            <source>Next Steps</source>
            <target state="new">Next Steps</target>
          </trans-unit>
          <trans-unit id="182" xml:space="preserve">
            <source><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Pattern: Smart Cache<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></source>
            <target state="new"><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Pattern: Smart Cache<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></target>
          </trans-unit>
          <trans-unit id="183" xml:space="preserve">
            <source><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Pattern: Distributed Networks and Graphs<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></source>
            <target state="new"><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Pattern: Distributed Networks and Graphs<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></target>
          </trans-unit>
          <trans-unit id="184" xml:space="preserve">
            <source><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Pattern: Stateful Service Composition<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></source>
            <target state="new"><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Pattern: Stateful Service Composition<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></target>
          </trans-unit>
          <trans-unit id="185" xml:space="preserve">
            <source><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Pattern: Internet of Things<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></source>
            <target state="new"><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Pattern: Internet of Things<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></target>
          </trans-unit>
          <trans-unit id="186" xml:space="preserve">
            <source><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Pattern: Distributed Computation<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></source>
            <target state="new"><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Pattern: Distributed Computation<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></target>
          </trans-unit>
          <trans-unit id="187" xml:space="preserve">
            <source><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Some Anti-patterns<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></source>
            <target state="new"><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Some Anti-patterns<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></target>
          </trans-unit>
          <trans-unit id="188" xml:space="preserve">
            <source><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Introduction to Service Fabric Actors<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></source>
            <target state="new"><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Introduction to Service Fabric Actors<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></target>
          </trans-unit>
        </group>
      </group>
    </body>
  </file>
</xliff>