<?xml version="1.0" encoding="utf-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" source-language="en-us" target-language="ko-kr" original="2/21/2016 5:17:52 AM" tool-id="MarkdownTransformer" product-name="N/A" product-version="N/A" build-num="1">
    <header>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e9f17013d26cb5e1e20552690b60cb2e6bcb2838</xliffext:olfilehash>
      <tool tool-id="MarkdownTransformer" tool-name="MarkdownToXliff" tool-version="1.0" tool-company="Microsoft" />
    </header>
    <body>
      <group extype="content">
        <group id="101">
          <trans-unit id="101" xml:space="preserve">
            <source>How to use blob storage from PHP | Microsoft Azure</source>
            <target state="new">How to use blob storage from PHP | Microsoft Azure</target>
          </trans-unit>
          <trans-unit id="102" xml:space="preserve">
            <source>Learn how to use the Azure blob service to upload, list, download, and delete blobs. Code samples are written in PHP.</source>
            <target state="new">Learn how to use the Azure blob service to upload, list, download, and delete blobs. Code samples are written in PHP.</target>
          </trans-unit>
          <trans-unit id="103" xml:space="preserve">
            <source>How to use blob storage from PHP</source>
            <target state="new">How to use blob storage from PHP</target>
          </trans-unit>
          <trans-unit id="104" xml:space="preserve">
            <source><ph id="1">&lt;token href="../../includes/storage-selector-blob-include.md"/&gt;</ph></source>
            <target state="new"><ph id="1">&lt;token href="../../includes/storage-selector-blob-include.md"/&gt;</ph></target>
          </trans-unit>
          <trans-unit id="105" xml:space="preserve">
            <source>Overview</source>
            <target state="new">Overview</target>
          </trans-unit>
          <trans-unit id="106" xml:space="preserve">
            <source>This guide shows you how to perform common scenarios using the Azure blob service.</source>
            <target state="new">This guide shows you how to perform common scenarios using the Azure blob service.</target>
          </trans-unit>
          <trans-unit id="107" xml:space="preserve">
            <source>The samples are written in PHP and use the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Azure SDK for PHP[download]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">The samples are written in PHP and use the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Azure SDK for PHP[download]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="108" xml:space="preserve">
            <source>The scenarios covered include <bpt id="2">&lt;strong&gt;</bpt>uploading<ept id="2">&lt;/strong&gt;</ept>, <bpt id="4">&lt;strong&gt;</bpt>listing<ept id="4">&lt;/strong&gt;</ept>, <bpt id="6">&lt;strong&gt;</bpt>downloading<ept id="6">&lt;/strong&gt;</ept>, and <bpt id="8">&lt;strong&gt;</bpt>deleting<ept id="8">&lt;/strong&gt;</ept> blobs.</source>
            <target state="new">The scenarios covered include <bpt id="2">&lt;strong&gt;</bpt>uploading<ept id="2">&lt;/strong&gt;</ept>, <bpt id="4">&lt;strong&gt;</bpt>listing<ept id="4">&lt;/strong&gt;</ept>, <bpt id="6">&lt;strong&gt;</bpt>downloading<ept id="6">&lt;/strong&gt;</ept>, and <bpt id="8">&lt;strong&gt;</bpt>deleting<ept id="8">&lt;/strong&gt;</ept> blobs.</target>
          </trans-unit>
          <trans-unit id="109" xml:space="preserve">
            <source>For more information on blobs, see the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Next steps<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> section.</source>
            <target state="new">For more information on blobs, see the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Next steps<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> section.</target>
          </trans-unit>
          <trans-unit id="110" xml:space="preserve">
            <source><ph id="1">&lt;token href="../../includes/storage-blob-concepts-include.md"/&gt;</ph></source>
            <target state="new"><ph id="1">&lt;token href="../../includes/storage-blob-concepts-include.md"/&gt;</ph></target>
          </trans-unit>
          <trans-unit id="111" xml:space="preserve">
            <source><ph id="1">&lt;token href="../../includes/storage-create-account-include.md"/&gt;</ph></source>
            <target state="new"><ph id="1">&lt;token href="../../includes/storage-create-account-include.md"/&gt;</ph></target>
          </trans-unit>
          <trans-unit id="112" xml:space="preserve">
            <source>Create a PHP application</source>
            <target state="new">Create a PHP application</target>
          </trans-unit>
          <trans-unit id="113" xml:space="preserve">
            <source>The only requirement for creating a PHP application that accesses the Azure blob service is the referencing of classes in the Azure SDK for PHP from within your code.</source>
            <target state="new">The only requirement for creating a PHP application that accesses the Azure blob service is the referencing of classes in the Azure SDK for PHP from within your code.</target>
          </trans-unit>
          <trans-unit id="114" xml:space="preserve">
            <source>You can use any development tools to create your application, including Notepad.</source>
            <target state="new">You can use any development tools to create your application, including Notepad.</target>
          </trans-unit>
          <trans-unit id="115" xml:space="preserve">
            <source>In this guide, you use service features, which can be called within a PHP application locally or in code running within an Azure web role, worker role, or website.</source>
            <target state="new">In this guide, you use service features, which can be called within a PHP application locally or in code running within an Azure web role, worker role, or website.</target>
          </trans-unit>
          <trans-unit id="116" xml:space="preserve">
            <source>Get the Azure Client Libraries</source>
            <target state="new">Get the Azure Client Libraries</target>
          </trans-unit>
          <trans-unit id="117" xml:space="preserve">
            <source><ph id="1">&lt;token href="../../includes/get-client-libraries.md"/&gt;</ph></source>
            <target state="new"><ph id="1">&lt;token href="../../includes/get-client-libraries.md"/&gt;</ph></target>
          </trans-unit>
          <trans-unit id="118" xml:space="preserve">
            <source>Configure your application to access the blob service</source>
            <target state="new">Configure your application to access the blob service</target>
          </trans-unit>
          <trans-unit id="119" xml:space="preserve">
            <source>To use the Azure blob service APIs, you need to:</source>
            <target state="new">To use the Azure blob service APIs, you need to:</target>
          </trans-unit>
          <trans-unit id="120" xml:space="preserve">
            <source>Reference the autoloader file using the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>require_once[require_once]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> statement, and</source>
            <target state="new">Reference the autoloader file using the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>require_once[require_once]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> statement, and</target>
          </trans-unit>
          <trans-unit id="121" xml:space="preserve">
            <source>Reference any classes you might use.</source>
            <target state="new">Reference any classes you might use.</target>
          </trans-unit>
          <trans-unit id="122" xml:space="preserve">
            <source>The following example shows how to include the autoloader file and reference the <bpt id="2">&lt;strong&gt;</bpt>ServicesBuilder<ept id="2">&lt;/strong&gt;</ept> class.</source>
            <target state="new">The following example shows how to include the autoloader file and reference the <bpt id="2">&lt;strong&gt;</bpt>ServicesBuilder<ept id="2">&lt;/strong&gt;</ept> class.</target>
          </trans-unit>
          <trans-unit id="123" xml:space="preserve">
            <source>This example (and other examples in this article) assume you have installed the PHP Client Libraries for Azure via Composer.</source>
            <target state="new">This example (and other examples in this article) assume you have installed the PHP Client Libraries for Azure via Composer.</target>
          </trans-unit>
          <trans-unit id="124" xml:space="preserve">
            <source>If you installed the libraries manually or as a PEAR package, you need to reference the <bpt id="2">&lt;code&gt;</bpt>WindowsAzure.php<ept id="2">&lt;/code&gt;</ept> autoloader file.</source>
            <target state="new">If you installed the libraries manually or as a PEAR package, you need to reference the <bpt id="2">&lt;code&gt;</bpt>WindowsAzure.php<ept id="2">&lt;/code&gt;</ept> autoloader file.</target>
          </trans-unit>
          <trans-unit id="125" xml:space="preserve">
            <source>In the examples below, the <bpt id="2">&lt;code&gt;</bpt>require_once<ept id="2">&lt;/code&gt;</ept> statement will be shown always, but only the classes necessary for the example to execute are referenced.</source>
            <target state="new">In the examples below, the <bpt id="2">&lt;code&gt;</bpt>require_once<ept id="2">&lt;/code&gt;</ept> statement will be shown always, but only the classes necessary for the example to execute are referenced.</target>
          </trans-unit>
          <trans-unit id="126" xml:space="preserve">
            <source>Set up an Azure storage connection</source>
            <target state="new">Set up an Azure storage connection</target>
          </trans-unit>
          <trans-unit id="127" xml:space="preserve">
            <source>To instantiate an Azure blob service client, you must first have a valid connection string.</source>
            <target state="new">To instantiate an Azure blob service client, you must first have a valid connection string.</target>
          </trans-unit>
          <trans-unit id="128" xml:space="preserve">
            <source>The format for the blob service connection string is:</source>
            <target state="new">The format for the blob service connection string is:</target>
          </trans-unit>
          <trans-unit id="129" xml:space="preserve">
            <source>For accessing a live service:</source>
            <target state="new">For accessing a live service:</target>
          </trans-unit>
          <trans-unit id="130" xml:space="preserve">
            <source>For accessing the storage emulator:</source>
            <target state="new">For accessing the storage emulator:</target>
          </trans-unit>
          <trans-unit id="131" xml:space="preserve">
            <source>To create any Azure service client, you need to use the <bpt id="2">&lt;strong&gt;</bpt>ServicesBuilder<ept id="2">&lt;/strong&gt;</ept> class.</source>
            <target state="new">To create any Azure service client, you need to use the <bpt id="2">&lt;strong&gt;</bpt>ServicesBuilder<ept id="2">&lt;/strong&gt;</ept> class.</target>
          </trans-unit>
          <trans-unit id="132" xml:space="preserve">
            <source>You can:</source>
            <target state="new">You can:</target>
          </trans-unit>
          <trans-unit id="133" xml:space="preserve">
            <source>Pass the connection string directly to it or</source>
            <target state="new">Pass the connection string directly to it or</target>
          </trans-unit>
          <trans-unit id="134" xml:space="preserve">
            <source>Use the <bpt id="2">&lt;strong&gt;</bpt>CloudConfigurationManager (CCM)<ept id="2">&lt;/strong&gt;</ept> to check multiple external sources for the connection string:</source>
            <target state="new">Use the <bpt id="2">&lt;strong&gt;</bpt>CloudConfigurationManager (CCM)<ept id="2">&lt;/strong&gt;</ept> to check multiple external sources for the connection string:</target>
          </trans-unit>
          <trans-unit id="135" xml:space="preserve">
            <source>By default, it comes with support for one external source - environmental variables.</source>
            <target state="new">By default, it comes with support for one external source - environmental variables.</target>
          </trans-unit>
          <trans-unit id="136" xml:space="preserve">
            <source>You can add new sources by extending the <bpt id="2">&lt;strong&gt;</bpt>ConnectionStringSource<ept id="2">&lt;/strong&gt;</ept> class.</source>
            <target state="new">You can add new sources by extending the <bpt id="2">&lt;strong&gt;</bpt>ConnectionStringSource<ept id="2">&lt;/strong&gt;</ept> class.</target>
          </trans-unit>
          <trans-unit id="137" xml:space="preserve">
            <source>For the examples outlined here, the connection string will be passed directly.</source>
            <target state="new">For the examples outlined here, the connection string will be passed directly.</target>
          </trans-unit>
          <trans-unit id="138" xml:space="preserve">
            <source>Create a container</source>
            <target state="new">Create a container</target>
          </trans-unit>
          <trans-unit id="139" xml:space="preserve">
            <source><ph id="1">&lt;token href="../../includes/storage-container-naming-rules-include.md"/&gt;</ph></source>
            <target state="new"><ph id="1">&lt;token href="../../includes/storage-container-naming-rules-include.md"/&gt;</ph></target>
          </trans-unit>
          <trans-unit id="140" xml:space="preserve">
            <source>A <bpt id="2">&lt;strong&gt;</bpt>BlobRestProxy<ept id="2">&lt;/strong&gt;</ept> object lets you create a blob container with the <bpt id="4">&lt;strong&gt;</bpt>createContainer<ept id="4">&lt;/strong&gt;</ept> method.</source>
            <target state="new">A <bpt id="2">&lt;strong&gt;</bpt>BlobRestProxy<ept id="2">&lt;/strong&gt;</ept> object lets you create a blob container with the <bpt id="4">&lt;strong&gt;</bpt>createContainer<ept id="4">&lt;/strong&gt;</ept> method.</target>
          </trans-unit>
          <trans-unit id="141" xml:space="preserve">
            <source>When creating a container, you can set options on the container, but doing so is not required.</source>
            <target state="new">When creating a container, you can set options on the container, but doing so is not required.</target>
          </trans-unit>
          <trans-unit id="142" xml:space="preserve">
            <source>(The example below shows how to set the container access control list (ACL) and container metadata.)</source>
            <target state="new">(The example below shows how to set the container access control list (ACL) and container metadata.)</target>
          </trans-unit>
          <trans-unit id="143" xml:space="preserve">
            <source>Calling <bpt id="2">&lt;strong&gt;</bpt>setPublicAccess(PublicAccessType::CONTAINER\_AND\_BLOBS)<ept id="2">&lt;/strong&gt;</ept> makes the container and blob data accessible via anonymous requests.</source>
            <target state="new">Calling <bpt id="2">&lt;strong&gt;</bpt>setPublicAccess(PublicAccessType::CONTAINER\_AND\_BLOBS)<ept id="2">&lt;/strong&gt;</ept> makes the container and blob data accessible via anonymous requests.</target>
          </trans-unit>
          <trans-unit id="144" xml:space="preserve">
            <source>Calling <bpt id="2">&lt;strong&gt;</bpt>setPublicAccess(PublicAccessType::BLOBS_ONLY)<ept id="2">&lt;/strong&gt;</ept> makes only blob data accessible via anonymous requests.</source>
            <target state="new">Calling <bpt id="2">&lt;strong&gt;</bpt>setPublicAccess(PublicAccessType::BLOBS_ONLY)<ept id="2">&lt;/strong&gt;</ept> makes only blob data accessible via anonymous requests.</target>
          </trans-unit>
          <trans-unit id="145" xml:space="preserve">
            <source>For more information about container ACLs, see <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Set container ACL (REST API)[container-acl]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">For more information about container ACLs, see <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Set container ACL (REST API)[container-acl]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="146" xml:space="preserve">
            <source>For more information about Blob service error codes, see <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Blob Service Error Codes[error-codes]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">For more information about Blob service error codes, see <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Blob Service Error Codes[error-codes]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="147" xml:space="preserve">
            <source>Upload a blob into a container</source>
            <target state="new">Upload a blob into a container</target>
          </trans-unit>
          <trans-unit id="148" xml:space="preserve">
            <source>To upload a file as a blob, use the <bpt id="2">&lt;strong&gt;</bpt>BlobRestProxy-&gt;createBlockBlob<ept id="2">&lt;/strong&gt;</ept> method.</source>
            <target state="new">To upload a file as a blob, use the <bpt id="2">&lt;strong&gt;</bpt>BlobRestProxy-&gt;createBlockBlob<ept id="2">&lt;/strong&gt;</ept> method.</target>
          </trans-unit>
          <trans-unit id="149" xml:space="preserve">
            <source>This operation creates the blob if it doesn't exist, or overwrites it if it does.</source>
            <target state="new">This operation creates the blob if it doesn't exist, or overwrites it if it does.</target>
          </trans-unit>
          <trans-unit id="150" xml:space="preserve">
            <source>The code example below assumes that the container has already been created and uses <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>fopen[fopen]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> to open the file as a stream.</source>
            <target state="new">The code example below assumes that the container has already been created and uses <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>fopen[fopen]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> to open the file as a stream.</target>
          </trans-unit>
          <trans-unit id="151" xml:space="preserve">
            <source>Note that the previous sample uploads a blob as a stream.</source>
            <target state="new">Note that the previous sample uploads a blob as a stream.</target>
          </trans-unit>
          <trans-unit id="152" xml:space="preserve">
            <source>However, a blob can also be uploaded as a string using, for example, the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>file\_get\_contents[file_get_contents]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> function.</source>
            <target state="new">However, a blob can also be uploaded as a string using, for example, the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>file\_get\_contents[file_get_contents]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> function.</target>
          </trans-unit>
          <trans-unit id="153" xml:space="preserve">
            <source>To do this using the previous sample, change <bpt id="2">&lt;code&gt;</bpt>$content = fopen("c:\myfile.txt", "r");<ept id="2">&lt;/code&gt;</ept> to <bpt id="4">&lt;code&gt;</bpt>$content = file_get_contents("c:\myfile.txt");<ept id="4">&lt;/code&gt;</ept>.</source>
            <target state="new">To do this using the previous sample, change <bpt id="2">&lt;code&gt;</bpt>$content = fopen("c:\myfile.txt", "r");<ept id="2">&lt;/code&gt;</ept> to <bpt id="4">&lt;code&gt;</bpt>$content = file_get_contents("c:\myfile.txt");<ept id="4">&lt;/code&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="154" xml:space="preserve">
            <source>List the blobs in a container</source>
            <target state="new">List the blobs in a container</target>
          </trans-unit>
          <trans-unit id="155" xml:space="preserve">
            <source>To list the blobs in a container, use the <bpt id="2">&lt;strong&gt;</bpt>BlobRestProxy-&gt;listBlobs<ept id="2">&lt;/strong&gt;</ept> method with a <bpt id="4">&lt;strong&gt;</bpt>foreach<ept id="4">&lt;/strong&gt;</ept> loop to loop through the result.</source>
            <target state="new">To list the blobs in a container, use the <bpt id="2">&lt;strong&gt;</bpt>BlobRestProxy-&gt;listBlobs<ept id="2">&lt;/strong&gt;</ept> method with a <bpt id="4">&lt;strong&gt;</bpt>foreach<ept id="4">&lt;/strong&gt;</ept> loop to loop through the result.</target>
          </trans-unit>
          <trans-unit id="156" xml:space="preserve">
            <source>The following code displays the name of each blob as output in a container and displays its URI to the browser.</source>
            <target state="new">The following code displays the name of each blob as output in a container and displays its URI to the browser.</target>
          </trans-unit>
          <trans-unit id="157" xml:space="preserve">
            <source>Download a blob</source>
            <target state="new">Download a blob</target>
          </trans-unit>
          <trans-unit id="158" xml:space="preserve">
            <source>To download a blob, call the <bpt id="2">&lt;strong&gt;</bpt>BlobRestProxy-&gt;getBlob<ept id="2">&lt;/strong&gt;</ept> method, then call the <bpt id="4">&lt;strong&gt;</bpt>getContentStream<ept id="4">&lt;/strong&gt;</ept> method on the resulting <bpt id="6">&lt;strong&gt;</bpt>GetBlobResult<ept id="6">&lt;/strong&gt;</ept> object.</source>
            <target state="new">To download a blob, call the <bpt id="2">&lt;strong&gt;</bpt>BlobRestProxy-&gt;getBlob<ept id="2">&lt;/strong&gt;</ept> method, then call the <bpt id="4">&lt;strong&gt;</bpt>getContentStream<ept id="4">&lt;/strong&gt;</ept> method on the resulting <bpt id="6">&lt;strong&gt;</bpt>GetBlobResult<ept id="6">&lt;/strong&gt;</ept> object.</target>
          </trans-unit>
          <trans-unit id="159" xml:space="preserve">
            <source>Note that the example above gets a blob as a stream resource (the default behavior).</source>
            <target state="new">Note that the example above gets a blob as a stream resource (the default behavior).</target>
          </trans-unit>
          <trans-unit id="160" xml:space="preserve">
            <source>However, you can use the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>stream\_get\_contents[stream-get-contents]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> function to convert the returned stream to a string.</source>
            <target state="new">However, you can use the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>stream\_get\_contents[stream-get-contents]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> function to convert the returned stream to a string.</target>
          </trans-unit>
          <trans-unit id="161" xml:space="preserve">
            <source>Delete a blob</source>
            <target state="new">Delete a blob</target>
          </trans-unit>
          <trans-unit id="162" xml:space="preserve">
            <source>To delete a blob, pass the container name and blob name to <bpt id="2">&lt;strong&gt;</bpt>BlobRestProxy-&gt;deleteBlob<ept id="2">&lt;/strong&gt;</ept>.</source>
            <target state="new">To delete a blob, pass the container name and blob name to <bpt id="2">&lt;strong&gt;</bpt>BlobRestProxy-&gt;deleteBlob<ept id="2">&lt;/strong&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="163" xml:space="preserve">
            <source>Delete a blob container</source>
            <target state="new">Delete a blob container</target>
          </trans-unit>
          <trans-unit id="164" xml:space="preserve">
            <source>Finally, to delete a blob container, pass the container name to <bpt id="2">&lt;strong&gt;</bpt>BlobRestProxy-&gt;deleteContainer<ept id="2">&lt;/strong&gt;</ept>.</source>
            <target state="new">Finally, to delete a blob container, pass the container name to <bpt id="2">&lt;strong&gt;</bpt>BlobRestProxy-&gt;deleteContainer<ept id="2">&lt;/strong&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="165" xml:space="preserve">
            <source>Next steps</source>
            <target state="new">Next steps</target>
          </trans-unit>
          <trans-unit id="166" xml:space="preserve">
            <source>Now that you've learned the basics of the Azure blob service, follow these links to learn about more complex storage tasks.</source>
            <target state="new">Now that you've learned the basics of the Azure blob service, follow these links to learn about more complex storage tasks.</target>
          </trans-unit>
          <trans-unit id="167" xml:space="preserve">
            <source>See the MSDN reference: <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Azure Storage<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept></source>
            <target state="new">See the MSDN reference: <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Azure Storage<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept></target>
          </trans-unit>
          <trans-unit id="168" xml:space="preserve">
            <source>Visit the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Azure Storage team blog<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept></source>
            <target state="new">Visit the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Azure Storage team blog<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept></target>
          </trans-unit>
          <trans-unit id="169" xml:space="preserve">
            <source>See the PHP block blob example at <bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>.</source>
            <target state="new">See the PHP block blob example at <bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="170" xml:space="preserve">
            <source>See the PHP page blob example at <bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept></source>
            <target state="new">See the PHP page blob example at <bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept></target>
          </trans-unit>
        </group>
      </group>
    </body>
  </file>
</xliff>