<?xml version="1.0" encoding="utf-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" source-language="en-us" target-language="ko-kr" original="2/21/2016 4:03:14 AM" tool-id="MarkdownTransformer" product-name="N/A" product-version="N/A" build-num="1">
    <header>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">db5eb53bf3db09183a3f89342941f59613cf5f1f</xliffext:olfilehash>
      <tool tool-id="MarkdownTransformer" tool-name="MarkdownToXliff" tool-version="1.0" tool-company="Microsoft" />
    </header>
    <body>
      <group extype="content">
        <group id="101">
          <trans-unit id="101" xml:space="preserve">
            <source>Handle conflicts with offline data in Mobile Services (Windows Phone) | Microsoft Azure</source>
            <target state="new">Handle conflicts with offline data in Mobile Services (Windows Phone) | Microsoft Azure</target>
          </trans-unit>
          <trans-unit id="102" xml:space="preserve">
            <source>Learn how to use Azure Mobile Services handle conflicts when syncing offline data in your Windows phone application</source>
            <target state="new">Learn how to use Azure Mobile Services handle conflicts when syncing offline data in your Windows phone application</target>
          </trans-unit>
          <trans-unit id="103" xml:space="preserve">
            <source>Handling conflicts with offline data sync in Mobile Services</source>
            <target state="new">Handling conflicts with offline data sync in Mobile Services</target>
          </trans-unit>
          <trans-unit id="104" xml:space="preserve">
            <source><ph id="1">&lt;token href="../../includes/mobile-services-selector-offline-conflicts.md"/&gt;</ph></source>
            <target state="new"><ph id="1">&lt;token href="../../includes/mobile-services-selector-offline-conflicts.md"/&gt;</ph></target>
          </trans-unit>
          <trans-unit id="105" xml:space="preserve">
            <source>Overview</source>
            <target state="new">Overview</target>
          </trans-unit>
          <trans-unit id="106" xml:space="preserve">
            <source>This topic shows you how to synchronize data and handle conflicts when using the offline capabilities of Azure Mobile Services.</source>
            <target state="new">This topic shows you how to synchronize data and handle conflicts when using the offline capabilities of Azure Mobile Services.</target>
          </trans-unit>
          <trans-unit id="107" xml:space="preserve">
            <source>In this tutorial, you will download an app that supports both offline and online data, integrate the mobile service with the app, and then login to the Azure Management Portal to view and update the database when running the app.</source>
            <target state="new">In this tutorial, you will download an app that supports both offline and online data, integrate the mobile service with the app, and then login to the Azure Management Portal to view and update the database when running the app.</target>
          </trans-unit>
          <trans-unit id="108" xml:space="preserve">
            <source>This tutorial builds on the steps and the sample app from the previous tutorial [Get started with offline data].</source>
            <target state="new">This tutorial builds on the steps and the sample app from the previous tutorial [Get started with offline data].</target>
          </trans-unit>
          <trans-unit id="109" xml:space="preserve">
            <source>Before you begin this tutorial, you must first complete [Get started with offline data].</source>
            <target state="new">Before you begin this tutorial, you must first complete [Get started with offline data].</target>
          </trans-unit>
          <trans-unit id="110" xml:space="preserve">
            <source>Prerequisites</source>
            <target state="new">Prerequisites</target>
          </trans-unit>
          <trans-unit id="111" xml:space="preserve">
            <source>This tutorial requires Visual Studio 2012 and the [Windows Phone 8 SDK].</source>
            <target state="new">This tutorial requires Visual Studio 2012 and the [Windows Phone 8 SDK].</target>
          </trans-unit>
          <trans-unit id="112" xml:space="preserve">
            <source>Download the sample project</source>
            <target state="new">Download the sample project</target>
          </trans-unit>
          <trans-unit id="113" xml:space="preserve">
            <source>This tutorial is built on the [Handling conflicts code sample], which is a Windows Phone 8 project for Visual Studio 2012.</source>
            <target state="new">This tutorial is built on the [Handling conflicts code sample], which is a Windows Phone 8 project for Visual Studio 2012.</target>
          </trans-unit>
          <trans-unit id="114" xml:space="preserve">
            <source>The UI for this app is similar to the app in the tutorial [Get started with offline data], except that there is a new date column in for each TodoItem.</source>
            <target state="new">The UI for this app is similar to the app in the tutorial [Get started with offline data], except that there is a new date column in for each TodoItem.</target>
          </trans-unit>
          <trans-unit id="115" xml:space="preserve">
            <source><bpt id="1">&lt;linkText&gt;</bpt><ept id="1">&lt;/linkText&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;linkText&gt;</bpt><ept id="1">&lt;/linkText&gt;</ept></target>
          </trans-unit>
          <trans-unit id="116" xml:space="preserve">
            <source>Download the Windows Phone version of the [Handling conflicts code sample].</source>
            <target state="new">Download the Windows Phone version of the [Handling conflicts code sample].</target>
          </trans-unit>
          <trans-unit id="117" xml:space="preserve">
            <source>Install [SQLite for Windows Phone 8] if it has not been installed.</source>
            <target state="new">Install [SQLite for Windows Phone 8] if it has not been installed.</target>
          </trans-unit>
          <trans-unit id="118" xml:space="preserve">
            <source>In Visual Studio 2012, open the downloaded project.</source>
            <target state="new">In Visual Studio 2012, open the downloaded project.</target>
          </trans-unit>
          <trans-unit id="119" xml:space="preserve">
            <source>Add a reference to <bpt id="2">&lt;strong&gt;</bpt>SQLite for Windows Phone<ept id="2">&lt;/strong&gt;</ept> under <bpt id="4">&lt;strong&gt;</bpt>Windows Phone<ept id="4">&lt;/strong&gt;</ept> &gt; <bpt id="6">&lt;strong&gt;</bpt>Extensions<ept id="6">&lt;/strong&gt;</ept>.</source>
            <target state="new">Add a reference to <bpt id="2">&lt;strong&gt;</bpt>SQLite for Windows Phone<ept id="2">&lt;/strong&gt;</ept> under <bpt id="4">&lt;strong&gt;</bpt>Windows Phone<ept id="4">&lt;/strong&gt;</ept> &gt; <bpt id="6">&lt;strong&gt;</bpt>Extensions<ept id="6">&lt;/strong&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="120" xml:space="preserve">
            <source>In Visual Studio 2012, press the <bpt id="2">&lt;strong&gt;</bpt>F5<ept id="2">&lt;/strong&gt;</ept> key to build and run the app in the debugger.</source>
            <target state="new">In Visual Studio 2012, press the <bpt id="2">&lt;strong&gt;</bpt>F5<ept id="2">&lt;/strong&gt;</ept> key to build and run the app in the debugger.</target>
          </trans-unit>
          <trans-unit id="121" xml:space="preserve">
            <source>In the app, type some text for some new todo items, then click <bpt id="2">&lt;strong&gt;</bpt>Save<ept id="2">&lt;/strong&gt;</ept> to save each one.</source>
            <target state="new">In the app, type some text for some new todo items, then click <bpt id="2">&lt;strong&gt;</bpt>Save<ept id="2">&lt;/strong&gt;</ept> to save each one.</target>
          </trans-unit>
          <trans-unit id="122" xml:space="preserve">
            <source>You can also modify the due date of the todo items you add.</source>
            <target state="new">You can also modify the due date of the todo items you add.</target>
          </trans-unit>
          <trans-unit id="123" xml:space="preserve">
            <source>Note that the app is not yet connected to any mobile service, so the buttons <bpt id="2">&lt;strong&gt;</bpt>Push<ept id="2">&lt;/strong&gt;</ept> and <bpt id="4">&lt;strong&gt;</bpt>Pull<ept id="4">&lt;/strong&gt;</ept> will throw exceptions.</source>
            <target state="new">Note that the app is not yet connected to any mobile service, so the buttons <bpt id="2">&lt;strong&gt;</bpt>Push<ept id="2">&lt;/strong&gt;</ept> and <bpt id="4">&lt;strong&gt;</bpt>Pull<ept id="4">&lt;/strong&gt;</ept> will throw exceptions.</target>
          </trans-unit>
          <trans-unit id="124" xml:space="preserve">
            <source>Add a column to the data model</source>
            <target state="new">Add a column to the data model</target>
          </trans-unit>
          <trans-unit id="125" xml:space="preserve">
            <source>In this section you will update the database for your mobile service to include a TodoItem table with a due date column.</source>
            <target state="new">In this section you will update the database for your mobile service to include a TodoItem table with a due date column.</target>
          </trans-unit>
          <trans-unit id="126" xml:space="preserve">
            <source>The app allows you to change the due date for an item at runtime so that you can generate sync conflicts in a later section of this tutorial.</source>
            <target state="new">The app allows you to change the due date for an item at runtime so that you can generate sync conflicts in a later section of this tutorial.</target>
          </trans-unit>
          <trans-unit id="127" xml:space="preserve">
            <source>The <bpt id="2">&lt;code&gt;</bpt>TodoItem<ept id="2">&lt;/code&gt;</ept> class in the sample is defined in MainPage.xaml.cs.</source>
            <target state="new">The <bpt id="2">&lt;code&gt;</bpt>TodoItem<ept id="2">&lt;/code&gt;</ept> class in the sample is defined in MainPage.xaml.cs.</target>
          </trans-unit>
          <trans-unit id="128" xml:space="preserve">
            <source>Notice the class has the following attribute which will target the sync operations against that table.</source>
            <target state="new">Notice the class has the following attribute which will target the sync operations against that table.</target>
          </trans-unit>
          <trans-unit id="129" xml:space="preserve">
            <source>Update your database to include this table.</source>
            <target state="new">Update your database to include this table.</target>
          </trans-unit>
          <trans-unit id="130" xml:space="preserve">
            <source><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>Updating the database for .NET backend mobile services</source>
            <target state="new"><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>Updating the database for .NET backend mobile services</target>
          </trans-unit>
          <trans-unit id="131" xml:space="preserve">
            <source>If you are using the .NET backend for your mobile service, follow these steps to update the schema for your database.</source>
            <target state="new">If you are using the .NET backend for your mobile service, follow these steps to update the schema for your database.</target>
          </trans-unit>
          <trans-unit id="132" xml:space="preserve">
            <source>Open your .NET backend mobile service project in Visual Studio.</source>
            <target state="new">Open your .NET backend mobile service project in Visual Studio.</target>
          </trans-unit>
          <trans-unit id="133" xml:space="preserve">
            <source>In Solution Explorer for Visual Studio, in your service project, expand the <bpt id="2">&lt;strong&gt;</bpt>Models<ept id="2">&lt;/strong&gt;</ept> folder and open ToDoItem.cs.</source>
            <target state="new">In Solution Explorer for Visual Studio, in your service project, expand the <bpt id="2">&lt;strong&gt;</bpt>Models<ept id="2">&lt;/strong&gt;</ept> folder and open ToDoItem.cs.</target>
          </trans-unit>
          <trans-unit id="134" xml:space="preserve">
            <source>Add the <bpt id="2">&lt;code&gt;</bpt>DueDate<ept id="2">&lt;/code&gt;</ept> property as follows.</source>
            <target state="new">Add the <bpt id="2">&lt;code&gt;</bpt>DueDate<ept id="2">&lt;/code&gt;</ept> property as follows.</target>
          </trans-unit>
          <trans-unit id="135" xml:space="preserve">
            <source>In Solution Explorer for Visual Studio, expand the <bpt id="2">&lt;strong&gt;</bpt>App_Start<ept id="2">&lt;/strong&gt;</ept> folder and open the WebApiConfig.cs file.</source>
            <target state="new">In Solution Explorer for Visual Studio, expand the <bpt id="2">&lt;strong&gt;</bpt>App_Start<ept id="2">&lt;/strong&gt;</ept> folder and open the WebApiConfig.cs file.</target>
          </trans-unit>
          <trans-unit id="136" xml:space="preserve">
            <source>In the WebApiConfig.cs file, notice that your default database initializer class is derived from the <bpt id="2">&lt;code&gt;</bpt>DropCreateDatabaseIfModelChanges<ept id="2">&lt;/code&gt;</ept> class.</source>
            <target state="new">In the WebApiConfig.cs file, notice that your default database initializer class is derived from the <bpt id="2">&lt;code&gt;</bpt>DropCreateDatabaseIfModelChanges<ept id="2">&lt;/code&gt;</ept> class.</target>
          </trans-unit>
          <trans-unit id="137" xml:space="preserve">
            <source>This means any change to the model will result in the table being dropped and recreated to accommodate the new model.</source>
            <target state="new">This means any change to the model will result in the table being dropped and recreated to accommodate the new model.</target>
          </trans-unit>
          <trans-unit id="138" xml:space="preserve">
            <source>So the data in the table will be lost and the table will be re-seeded.</source>
            <target state="new">So the data in the table will be lost and the table will be re-seeded.</target>
          </trans-unit>
          <trans-unit id="139" xml:space="preserve">
            <source>Modify the Seed method of the database initializer so that the <bpt id="2">&lt;code&gt;</bpt>Seed()<ept id="2">&lt;/code&gt;</ept> initialization function as follows to initialize the new DueDate column.</source>
            <target state="new">Modify the Seed method of the database initializer so that the <bpt id="2">&lt;code&gt;</bpt>Seed()<ept id="2">&lt;/code&gt;</ept> initialization function as follows to initialize the new DueDate column.</target>
          </trans-unit>
          <trans-unit id="140" xml:space="preserve">
            <source>Save the WebApiConfig.cs file.</source>
            <target state="new">Save the WebApiConfig.cs file.</target>
          </trans-unit>
          <trans-unit id="141" xml:space="preserve">
            <source>When using the default database initializer, Entity Framework will drop and recreate the database whenever it detects a data model change in the Code First model definition.</source>
            <target state="new">When using the default database initializer, Entity Framework will drop and recreate the database whenever it detects a data model change in the Code First model definition.</target>
          </trans-unit>
          <trans-unit id="142" xml:space="preserve">
            <source>To make this data model change and maintain existing data in the database, you must use Code First Migrations.</source>
            <target state="new">To make this data model change and maintain existing data in the database, you must use Code First Migrations.</target>
          </trans-unit>
          <trans-unit id="143" xml:space="preserve">
            <source>For more information, see <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>How to Use Code First Migrations to Update the Data Model<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">For more information, see <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>How to Use Code First Migrations to Update the Data Model<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="144" xml:space="preserve">
            <source>In Solution Explorer for Visual Studio, expand the <bpt id="2">&lt;strong&gt;</bpt>Controllers<ept id="2">&lt;/strong&gt;</ept> folder and open ToDoItemController.cs.</source>
            <target state="new">In Solution Explorer for Visual Studio, expand the <bpt id="2">&lt;strong&gt;</bpt>Controllers<ept id="2">&lt;/strong&gt;</ept> folder and open ToDoItemController.cs.</target>
          </trans-unit>
          <trans-unit id="145" xml:space="preserve">
            <source>Rename the <bpt id="2">&lt;code&gt;</bpt>TodoItemController<ept id="2">&lt;/code&gt;</ept> class to <bpt id="4">&lt;code&gt;</bpt>TodoWithDateController<ept id="4">&lt;/code&gt;</ept>.</source>
            <target state="new">Rename the <bpt id="2">&lt;code&gt;</bpt>TodoItemController<ept id="2">&lt;/code&gt;</ept> class to <bpt id="4">&lt;code&gt;</bpt>TodoWithDateController<ept id="4">&lt;/code&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="146" xml:space="preserve">
            <source>This will change the REST endpoint for table operations.</source>
            <target state="new">This will change the REST endpoint for table operations.</target>
          </trans-unit>
          <trans-unit id="147" xml:space="preserve">
            <source>In Solution Explorer for Visual Studio, right click your .NET backend mobile service project and click <bpt id="2">&lt;strong&gt;</bpt>Publish<ept id="2">&lt;/strong&gt;</ept> to publish your changes.</source>
            <target state="new">In Solution Explorer for Visual Studio, right click your .NET backend mobile service project and click <bpt id="2">&lt;strong&gt;</bpt>Publish<ept id="2">&lt;/strong&gt;</ept> to publish your changes.</target>
          </trans-unit>
          <trans-unit id="148" xml:space="preserve">
            <source><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>Updating the database for JavaScript backend mobile services</source>
            <target state="new"><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>Updating the database for JavaScript backend mobile services</target>
          </trans-unit>
          <trans-unit id="149" xml:space="preserve">
            <source>For JavaScript backend mobile services, you will add a new table named <bpt id="2">&lt;strong&gt;</bpt>TodoWithDate<ept id="2">&lt;/strong&gt;</ept>.</source>
            <target state="new">For JavaScript backend mobile services, you will add a new table named <bpt id="2">&lt;strong&gt;</bpt>TodoWithDate<ept id="2">&lt;/strong&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="150" xml:space="preserve">
            <source>To add the <bpt id="2">&lt;strong&gt;</bpt>TodoWithDate<ept id="2">&lt;/strong&gt;</ept> table for JavaScript backend mobile services, follow these steps.</source>
            <target state="new">To add the <bpt id="2">&lt;strong&gt;</bpt>TodoWithDate<ept id="2">&lt;/strong&gt;</ept> table for JavaScript backend mobile services, follow these steps.</target>
          </trans-unit>
          <trans-unit id="151" xml:space="preserve">
            <source>Log into the [Azure Management Portal].</source>
            <target state="new">Log into the [Azure Management Portal].</target>
          </trans-unit>
          <trans-unit id="152" xml:space="preserve">
            <source>Navigate to the <bpt id="2">&lt;strong&gt;</bpt>Data<ept id="2">&lt;/strong&gt;</ept> tab of your mobile service.</source>
            <target state="new">Navigate to the <bpt id="2">&lt;strong&gt;</bpt>Data<ept id="2">&lt;/strong&gt;</ept> tab of your mobile service.</target>
          </trans-unit>
          <trans-unit id="153" xml:space="preserve">
            <source>Click <bpt id="2">&lt;strong&gt;</bpt>Create<ept id="2">&lt;/strong&gt;</ept> at the bottom of the page and create a new table named <bpt id="4">&lt;strong&gt;</bpt>TodoWithDate<ept id="4">&lt;/strong&gt;</ept>.</source>
            <target state="new">Click <bpt id="2">&lt;strong&gt;</bpt>Create<ept id="2">&lt;/strong&gt;</ept> at the bottom of the page and create a new table named <bpt id="4">&lt;strong&gt;</bpt>TodoWithDate<ept id="4">&lt;/strong&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="154" xml:space="preserve">
            <source>Test the app against your  mobile service</source>
            <target state="new">Test the app against your  mobile service</target>
          </trans-unit>
          <trans-unit id="155" xml:space="preserve">
            <source>Now it's time to test the app against Mobile Services.</source>
            <target state="new">Now it's time to test the app against Mobile Services.</target>
          </trans-unit>
          <trans-unit id="156" xml:space="preserve">
            <source>In the Azure Management Portal, find your mobile service's application key by clicking <bpt id="2">&lt;strong&gt;</bpt>Manage Keys<ept id="2">&lt;/strong&gt;</ept> on the command bar of the <bpt id="4">&lt;strong&gt;</bpt>Dashboard<ept id="4">&lt;/strong&gt;</ept> tab.</source>
            <target state="new">In the Azure Management Portal, find your mobile service's application key by clicking <bpt id="2">&lt;strong&gt;</bpt>Manage Keys<ept id="2">&lt;/strong&gt;</ept> on the command bar of the <bpt id="4">&lt;strong&gt;</bpt>Dashboard<ept id="4">&lt;/strong&gt;</ept> tab.</target>
          </trans-unit>
          <trans-unit id="157" xml:space="preserve">
            <source>Copy the <bpt id="2">&lt;strong&gt;</bpt>Application Key<ept id="2">&lt;/strong&gt;</ept>.</source>
            <target state="new">Copy the <bpt id="2">&lt;strong&gt;</bpt>Application Key<ept id="2">&lt;/strong&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="158" xml:space="preserve">
            <source>In Solution Explorer for Visual Studio, open the App.xaml.cs file in the client sample project.</source>
            <target state="new">In Solution Explorer for Visual Studio, open the App.xaml.cs file in the client sample project.</target>
          </trans-unit>
          <trans-unit id="159" xml:space="preserve">
            <source>Change the initialization of the <bpt id="2">&lt;strong&gt;</bpt>MobileServiceClient<ept id="2">&lt;/strong&gt;</ept> to use your mobile service URL and application key:</source>
            <target state="new">Change the initialization of the <bpt id="2">&lt;strong&gt;</bpt>MobileServiceClient<ept id="2">&lt;/strong&gt;</ept> to use your mobile service URL and application key:</target>
          </trans-unit>
          <trans-unit id="160" xml:space="preserve">
            <source>In Visual Studio, press the <bpt id="2">&lt;strong&gt;</bpt>F5<ept id="2">&lt;/strong&gt;</ept> key to build and run the app.</source>
            <target state="new">In Visual Studio, press the <bpt id="2">&lt;strong&gt;</bpt>F5<ept id="2">&lt;/strong&gt;</ept> key to build and run the app.</target>
          </trans-unit>
          <trans-unit id="161" xml:space="preserve">
            <source>As before, type text in the textbox, and then click <bpt id="2">&lt;strong&gt;</bpt>Save<ept id="2">&lt;/strong&gt;</ept> to save some new todo items.</source>
            <target state="new">As before, type text in the textbox, and then click <bpt id="2">&lt;strong&gt;</bpt>Save<ept id="2">&lt;/strong&gt;</ept> to save some new todo items.</target>
          </trans-unit>
          <trans-unit id="162" xml:space="preserve">
            <source>This saves the data to the local sync table, but not to the server.</source>
            <target state="new">This saves the data to the local sync table, but not to the server.</target>
          </trans-unit>
          <trans-unit id="163" xml:space="preserve">
            <source><bpt id="1">&lt;linkText&gt;</bpt><ept id="1">&lt;/linkText&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;linkText&gt;</bpt><ept id="1">&lt;/linkText&gt;</ept></target>
          </trans-unit>
          <trans-unit id="164" xml:space="preserve">
            <source>To see the current state of your database, log into the [Azure Management Portal], click <bpt id="2">&lt;strong&gt;</bpt>Mobile Services<ept id="2">&lt;/strong&gt;</ept>, and then click your mobile service.</source>
            <target state="new">To see the current state of your database, log into the [Azure Management Portal], click <bpt id="2">&lt;strong&gt;</bpt>Mobile Services<ept id="2">&lt;/strong&gt;</ept>, and then click your mobile service.</target>
          </trans-unit>
          <trans-unit id="165" xml:space="preserve">
            <source>If you are using the JavaScript backend for your mobile service, click the <bpt id="2">&lt;strong&gt;</bpt>Data<ept id="2">&lt;/strong&gt;</ept> tab, then click the <bpt id="4">&lt;strong&gt;</bpt>TodoWithDate<ept id="4">&lt;/strong&gt;</ept> table.</source>
            <target state="new">If you are using the JavaScript backend for your mobile service, click the <bpt id="2">&lt;strong&gt;</bpt>Data<ept id="2">&lt;/strong&gt;</ept> tab, then click the <bpt id="4">&lt;strong&gt;</bpt>TodoWithDate<ept id="4">&lt;/strong&gt;</ept> table.</target>
          </trans-unit>
          <trans-unit id="166" xml:space="preserve">
            <source>Click <bpt id="2">&lt;strong&gt;</bpt>Browse<ept id="2">&lt;/strong&gt;</ept> to see that the table will still be empty, since we have not pushed changes from the app to the server..</source>
            <target state="new">Click <bpt id="2">&lt;strong&gt;</bpt>Browse<ept id="2">&lt;/strong&gt;</ept> to see that the table will still be empty, since we have not pushed changes from the app to the server..</target>
          </trans-unit>
          <trans-unit id="167" xml:space="preserve">
            <source><bpt id="1">&lt;linkText&gt;</bpt><ept id="1">&lt;/linkText&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;linkText&gt;</bpt><ept id="1">&lt;/linkText&gt;</ept></target>
          </trans-unit>
          <trans-unit id="168" xml:space="preserve">
            <source>If you are using the .NET backend for your mobile service, click the <bpt id="2">&lt;strong&gt;</bpt>Configure<ept id="2">&lt;/strong&gt;</ept> tab, then click your SQL database.</source>
            <target state="new">If you are using the .NET backend for your mobile service, click the <bpt id="2">&lt;strong&gt;</bpt>Configure<ept id="2">&lt;/strong&gt;</ept> tab, then click your SQL database.</target>
          </trans-unit>
          <trans-unit id="169" xml:space="preserve">
            <source>Click <bpt id="2">&lt;strong&gt;</bpt>Manage<ept id="2">&lt;/strong&gt;</ept> at the bottom of the screen to log into the SQL Azure Managment Portal to view your database by running a SQL query similar to the following.</source>
            <target state="new">Click <bpt id="2">&lt;strong&gt;</bpt>Manage<ept id="2">&lt;/strong&gt;</ept> at the bottom of the screen to log into the SQL Azure Managment Portal to view your database by running a SQL query similar to the following.</target>
          </trans-unit>
          <trans-unit id="170" xml:space="preserve">
            <source><bpt id="1">&lt;linkText&gt;</bpt><ept id="1">&lt;/linkText&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;linkText&gt;</bpt><ept id="1">&lt;/linkText&gt;</ept></target>
          </trans-unit>
          <trans-unit id="171" xml:space="preserve">
            <source>Back in the app, click <bpt id="2">&lt;strong&gt;</bpt>Push<ept id="2">&lt;/strong&gt;</ept>.</source>
            <target state="new">Back in the app, click <bpt id="2">&lt;strong&gt;</bpt>Push<ept id="2">&lt;/strong&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="172" xml:space="preserve">
            <source>In the Management Portal, click <bpt id="2">&lt;strong&gt;</bpt>Refresh<ept id="2">&lt;/strong&gt;</ept> on the <bpt id="4">&lt;strong&gt;</bpt>TodoItem<ept id="4">&lt;/strong&gt;</ept> table.</source>
            <target state="new">In the Management Portal, click <bpt id="2">&lt;strong&gt;</bpt>Refresh<ept id="2">&lt;/strong&gt;</ept> on the <bpt id="4">&lt;strong&gt;</bpt>TodoItem<ept id="4">&lt;/strong&gt;</ept> table.</target>
          </trans-unit>
          <trans-unit id="173" xml:space="preserve">
            <source>You should now see the data that you entered in your app.</source>
            <target state="new">You should now see the data that you entered in your app.</target>
          </trans-unit>
          <trans-unit id="174" xml:space="preserve">
            <source><bpt id="1">&lt;linkText&gt;</bpt><ept id="1">&lt;/linkText&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;linkText&gt;</bpt><ept id="1">&lt;/linkText&gt;</ept></target>
          </trans-unit>
          <trans-unit id="175" xml:space="preserve">
            <source>Leave <bpt id="2">&lt;strong&gt;</bpt>Emulator WVGA 512MB<ept id="2">&lt;/strong&gt;</ept> up and running for the next section where you will run the app in two emulators to generate a conflict.</source>
            <target state="new">Leave <bpt id="2">&lt;strong&gt;</bpt>Emulator WVGA 512MB<ept id="2">&lt;/strong&gt;</ept> up and running for the next section where you will run the app in two emulators to generate a conflict.</target>
          </trans-unit>
          <trans-unit id="176" xml:space="preserve">
            <source>Update the data in the backend to create a conflict</source>
            <target state="new">Update the data in the backend to create a conflict</target>
          </trans-unit>
          <trans-unit id="177" xml:space="preserve">
            <source>In a real world scenario, a sync conflict would occur when one app pushes updates to a record in the database, and then another app tries to push a change to the same record using an outdated version field in that record.</source>
            <target state="new">In a real world scenario, a sync conflict would occur when one app pushes updates to a record in the database, and then another app tries to push a change to the same record using an outdated version field in that record.</target>
          </trans-unit>
          <trans-unit id="178" xml:space="preserve">
            <source>If an instance of the app tries to update the same record, without pulling in the updated record, a conflict will occur and be caught as a <bpt id="2">&lt;code&gt;</bpt>MobileServicePreconditionFailedException<ept id="2">&lt;/code&gt;</ept> in the app.</source>
            <target state="new">If an instance of the app tries to update the same record, without pulling in the updated record, a conflict will occur and be caught as a <bpt id="2">&lt;code&gt;</bpt>MobileServicePreconditionFailedException<ept id="2">&lt;/code&gt;</ept> in the app.</target>
          </trans-unit>
          <trans-unit id="179" xml:space="preserve">
            <source>In this section you will run two instances of the app at the same time to generate a conflict.</source>
            <target state="new">In this section you will run two instances of the app at the same time to generate a conflict.</target>
          </trans-unit>
          <trans-unit id="180" xml:space="preserve">
            <source>If <bpt id="2">&lt;strong&gt;</bpt>Emulator WVGA 512MB<ept id="2">&lt;/strong&gt;</ept> is not still up and running, press <bpt id="4">&lt;strong&gt;</bpt>Ctrl+F5<ept id="4">&lt;/strong&gt;</ept> to relaunch it.</source>
            <target state="new">If <bpt id="2">&lt;strong&gt;</bpt>Emulator WVGA 512MB<ept id="2">&lt;/strong&gt;</ept> is not still up and running, press <bpt id="4">&lt;strong&gt;</bpt>Ctrl+F5<ept id="4">&lt;/strong&gt;</ept> to relaunch it.</target>
          </trans-unit>
          <trans-unit id="181" xml:space="preserve">
            <source>In Visual Studio, change the output device to <bpt id="2">&lt;strong&gt;</bpt>Emulator WVGA<ept id="2">&lt;/strong&gt;</ept> and run a second instance of the app in the new emulator by pressing <bpt id="4">&lt;strong&gt;</bpt>F5<ept id="4">&lt;/strong&gt;</ept>.</source>
            <target state="new">In Visual Studio, change the output device to <bpt id="2">&lt;strong&gt;</bpt>Emulator WVGA<ept id="2">&lt;/strong&gt;</ept> and run a second instance of the app in the new emulator by pressing <bpt id="4">&lt;strong&gt;</bpt>F5<ept id="4">&lt;/strong&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="182" xml:space="preserve">
            <source><bpt id="1">&lt;linkText&gt;</bpt><ept id="1">&lt;/linkText&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;linkText&gt;</bpt><ept id="1">&lt;/linkText&gt;</ept></target>
          </trans-unit>
          <trans-unit id="183" xml:space="preserve">
            <source>In the second instance of the app, click <bpt id="2">&lt;strong&gt;</bpt>Pull<ept id="2">&lt;/strong&gt;</ept> to sync the local store with the mobile service database.</source>
            <target state="new">In the second instance of the app, click <bpt id="2">&lt;strong&gt;</bpt>Pull<ept id="2">&lt;/strong&gt;</ept> to sync the local store with the mobile service database.</target>
          </trans-unit>
          <trans-unit id="184" xml:space="preserve">
            <source>Both instances of the app should have the same data.</source>
            <target state="new">Both instances of the app should have the same data.</target>
          </trans-unit>
          <trans-unit id="185" xml:space="preserve">
            <source><bpt id="1">&lt;linkText&gt;</bpt><ept id="1">&lt;/linkText&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;linkText&gt;</bpt><ept id="1">&lt;/linkText&gt;</ept></target>
          </trans-unit>
          <trans-unit id="186" xml:space="preserve">
            <source>In the second instance of the app, click the check box to complete one of the items then click <bpt id="2">&lt;strong&gt;</bpt>Push<ept id="2">&lt;/strong&gt;</ept> to push your change to the remote database.</source>
            <target state="new">In the second instance of the app, click the check box to complete one of the items then click <bpt id="2">&lt;strong&gt;</bpt>Push<ept id="2">&lt;/strong&gt;</ept> to push your change to the remote database.</target>
          </trans-unit>
          <trans-unit id="187" xml:space="preserve">
            <source>In the following screen shot, <bpt id="2">&lt;strong&gt;</bpt>Pick up James<ept id="2">&lt;/strong&gt;</ept> has been completed indicating the James has already been picked up.</source>
            <target state="new">In the following screen shot, <bpt id="2">&lt;strong&gt;</bpt>Pick up James<ept id="2">&lt;/strong&gt;</ept> has been completed indicating the James has already been picked up.</target>
          </trans-unit>
          <trans-unit id="188" xml:space="preserve">
            <source>The first instance of the app now has an outdated record.</source>
            <target state="new">The first instance of the app now has an outdated record.</target>
          </trans-unit>
          <trans-unit id="189" xml:space="preserve">
            <source><bpt id="1">&lt;linkText&gt;</bpt><ept id="1">&lt;/linkText&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;linkText&gt;</bpt><ept id="1">&lt;/linkText&gt;</ept></target>
          </trans-unit>
          <trans-unit id="190" xml:space="preserve">
            <source>In the first instance of the app, try to change the date for the outdated record then click <bpt id="2">&lt;strong&gt;</bpt>Push<ept id="2">&lt;/strong&gt;</ept> to attempt to update the remote database with the outdated record.</source>
            <target state="new">In the first instance of the app, try to change the date for the outdated record then click <bpt id="2">&lt;strong&gt;</bpt>Push<ept id="2">&lt;/strong&gt;</ept> to attempt to update the remote database with the outdated record.</target>
          </trans-unit>
          <trans-unit id="191" xml:space="preserve">
            <source>In the screen shot below, we try to schedule James to be picked up on <bpt id="2">&lt;strong&gt;</bpt>5/10/2014<ept id="2">&lt;/strong&gt;</ept>.</source>
            <target state="new">In the screen shot below, we try to schedule James to be picked up on <bpt id="2">&lt;strong&gt;</bpt>5/10/2014<ept id="2">&lt;/strong&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="192" xml:space="preserve">
            <source><bpt id="1">&lt;linkText&gt;</bpt><ept id="1">&lt;/linkText&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;linkText&gt;</bpt><ept id="1">&lt;/linkText&gt;</ept></target>
          </trans-unit>
          <trans-unit id="193" xml:space="preserve">
            <source>When you click the <bpt id="2">&lt;strong&gt;</bpt>Push<ept id="2">&lt;/strong&gt;</ept> button to commit the date change, you will see a dialog box indicating that the conflict has been detected.</source>
            <target state="new">When you click the <bpt id="2">&lt;strong&gt;</bpt>Push<ept id="2">&lt;/strong&gt;</ept> button to commit the date change, you will see a dialog box indicating that the conflict has been detected.</target>
          </trans-unit>
          <trans-unit id="194" xml:space="preserve">
            <source>You will be asked how to resolve the conflict.</source>
            <target state="new">You will be asked how to resolve the conflict.</target>
          </trans-unit>
          <trans-unit id="195" xml:space="preserve">
            <source>Choose one of the options to resolve the conflict.</source>
            <target state="new">Choose one of the options to resolve the conflict.</target>
          </trans-unit>
          <trans-unit id="196" xml:space="preserve">
            <source>In the scenario shown below, James has already been picked up.</source>
            <target state="new">In the scenario shown below, James has already been picked up.</target>
          </trans-unit>
          <trans-unit id="197" xml:space="preserve">
            <source>So there's no need to schedule a pick up for him on <bpt id="2">&lt;strong&gt;</bpt>5/10/2014<ept id="2">&lt;/strong&gt;</ept>.</source>
            <target state="new">So there's no need to schedule a pick up for him on <bpt id="2">&lt;strong&gt;</bpt>5/10/2014<ept id="2">&lt;/strong&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="198" xml:space="preserve">
            <source>The <bpt id="2">&lt;strong&gt;</bpt>Use server version<ept id="2">&lt;/strong&gt;</ept> option would be selected so the first instance of the app would have that record updated with the record from the server.</source>
            <target state="new">The <bpt id="2">&lt;strong&gt;</bpt>Use server version<ept id="2">&lt;/strong&gt;</ept> option would be selected so the first instance of the app would have that record updated with the record from the server.</target>
          </trans-unit>
          <trans-unit id="199" xml:space="preserve">
            <source><bpt id="1">&lt;linkText&gt;</bpt><ept id="1">&lt;/linkText&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;linkText&gt;</bpt><ept id="1">&lt;/linkText&gt;</ept></target>
          </trans-unit>
          <trans-unit id="200" xml:space="preserve">
            <source>Review of the code for handling sync conflicts</source>
            <target state="new">Review of the code for handling sync conflicts</target>
          </trans-unit>
          <trans-unit id="201" xml:space="preserve">
            <source>In order to set up the offline feature to detect conflicts, you must include a version column in both your local database and your data transfer object.</source>
            <target state="new">In order to set up the offline feature to detect conflicts, you must include a version column in both your local database and your data transfer object.</target>
          </trans-unit>
          <trans-unit id="202" xml:space="preserve">
            <source>The class <bpt id="2">&lt;code&gt;</bpt>TodoItem<ept id="2">&lt;/code&gt;</ept> has the following member:</source>
            <target state="new">The class <bpt id="2">&lt;code&gt;</bpt>TodoItem<ept id="2">&lt;/code&gt;</ept> has the following member:</target>
          </trans-unit>
          <trans-unit id="203" xml:space="preserve">
            <source>The column <bpt id="2">&lt;code&gt;</bpt>__version<ept id="2">&lt;/code&gt;</ept> is also specified in the local database set up in the  <bpt id="4">&lt;code&gt;</bpt>OnNavigatedTo()<ept id="4">&lt;/code&gt;</ept> method.</source>
            <target state="new">The column <bpt id="2">&lt;code&gt;</bpt>__version<ept id="2">&lt;/code&gt;</ept> is also specified in the local database set up in the  <bpt id="4">&lt;code&gt;</bpt>OnNavigatedTo()<ept id="4">&lt;/code&gt;</ept> method.</target>
          </trans-unit>
          <trans-unit id="204" xml:space="preserve">
            <source>To handle offline sync conflicts in your code, you create a class that implements <bpt id="2">&lt;code&gt;</bpt>IMobileServiceSyncHandler<ept id="2">&lt;/code&gt;</ept>.</source>
            <target state="new">To handle offline sync conflicts in your code, you create a class that implements <bpt id="2">&lt;code&gt;</bpt>IMobileServiceSyncHandler<ept id="2">&lt;/code&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="205" xml:space="preserve">
            <source>Pass an object of this type in the call to <bpt id="2">&lt;code&gt;</bpt>InitializeAsync<ept id="2">&lt;/code&gt;</ept>:</source>
            <target state="new">Pass an object of this type in the call to <bpt id="2">&lt;code&gt;</bpt>InitializeAsync<ept id="2">&lt;/code&gt;</ept>:</target>
          </trans-unit>
          <trans-unit id="206" xml:space="preserve">
            <source>The class <bpt id="2">&lt;code&gt;</bpt>SyncHandler<ept id="2">&lt;/code&gt;</ept> in <bpt id="4">&lt;strong&gt;</bpt>MainPage.xaml.cs<ept id="4">&lt;/strong&gt;</ept> implements <bpt id="6">&lt;code&gt;</bpt>IMobileServiceSyncHandler<ept id="6">&lt;/code&gt;</ept>.</source>
            <target state="new">The class <bpt id="2">&lt;code&gt;</bpt>SyncHandler<ept id="2">&lt;/code&gt;</ept> in <bpt id="4">&lt;strong&gt;</bpt>MainPage.xaml.cs<ept id="4">&lt;/strong&gt;</ept> implements <bpt id="6">&lt;code&gt;</bpt>IMobileServiceSyncHandler<ept id="6">&lt;/code&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="207" xml:space="preserve">
            <source>The method <bpt id="2">&lt;code&gt;</bpt>ExecuteTableOperationAsync<ept id="2">&lt;/code&gt;</ept> is called when each push operation is sent to the server.</source>
            <target state="new">The method <bpt id="2">&lt;code&gt;</bpt>ExecuteTableOperationAsync<ept id="2">&lt;/code&gt;</ept> is called when each push operation is sent to the server.</target>
          </trans-unit>
          <trans-unit id="208" xml:space="preserve">
            <source>If an exception of type <bpt id="2">&lt;code&gt;</bpt>MobileServicePreconditionFailedException<ept id="2">&lt;/code&gt;</ept> is thrown, this means that there is a conflict between the local and remote versions of an item.</source>
            <target state="new">If an exception of type <bpt id="2">&lt;code&gt;</bpt>MobileServicePreconditionFailedException<ept id="2">&lt;/code&gt;</ept> is thrown, this means that there is a conflict between the local and remote versions of an item.</target>
          </trans-unit>
          <trans-unit id="209" xml:space="preserve">
            <source>To resolve conflicts in favor of the local item, you should simply retry the operation.</source>
            <target state="new">To resolve conflicts in favor of the local item, you should simply retry the operation.</target>
          </trans-unit>
          <trans-unit id="210" xml:space="preserve">
            <source>Once a conflict has occurred, the local item version will be updated to match the server version, so executing the operation again will overwrite the server changes with the local changes:</source>
            <target state="new">Once a conflict has occurred, the local item version will be updated to match the server version, so executing the operation again will overwrite the server changes with the local changes:</target>
          </trans-unit>
          <trans-unit id="211" xml:space="preserve">
            <source>To resolve conflicts in favor of the server item, simply return from the <bpt id="2">&lt;code&gt;</bpt>ExecuteTableOperationAsync<ept id="2">&lt;/code&gt;</ept>.</source>
            <target state="new">To resolve conflicts in favor of the server item, simply return from the <bpt id="2">&lt;code&gt;</bpt>ExecuteTableOperationAsync<ept id="2">&lt;/code&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="212" xml:space="preserve">
            <source>The local version of the object will be discarded and replaced with the value from the server.</source>
            <target state="new">The local version of the object will be discarded and replaced with the value from the server.</target>
          </trans-unit>
          <trans-unit id="213" xml:space="preserve">
            <source>To stop the push operation (but retain the queued changes), use the method <bpt id="2">&lt;code&gt;</bpt>AbortPush()<ept id="2">&lt;/code&gt;</ept>:</source>
            <target state="new">To stop the push operation (but retain the queued changes), use the method <bpt id="2">&lt;code&gt;</bpt>AbortPush()<ept id="2">&lt;/code&gt;</ept>:</target>
          </trans-unit>
          <trans-unit id="214" xml:space="preserve">
            <source>This will stop the current push operation but will keep all pending changes, including the current operation if <bpt id="2">&lt;code&gt;</bpt>AbortPush<ept id="2">&lt;/code&gt;</ept> is called from <bpt id="4">&lt;code&gt;</bpt>ExecuteTableOperationAsync<ept id="4">&lt;/code&gt;</ept>.</source>
            <target state="new">This will stop the current push operation but will keep all pending changes, including the current operation if <bpt id="2">&lt;code&gt;</bpt>AbortPush<ept id="2">&lt;/code&gt;</ept> is called from <bpt id="4">&lt;code&gt;</bpt>ExecuteTableOperationAsync<ept id="4">&lt;/code&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="215" xml:space="preserve">
            <source>The next time that <bpt id="2">&lt;code&gt;</bpt>PushAsync()<ept id="2">&lt;/code&gt;</ept> is called, these changes will be sent to the server.</source>
            <target state="new">The next time that <bpt id="2">&lt;code&gt;</bpt>PushAsync()<ept id="2">&lt;/code&gt;</ept> is called, these changes will be sent to the server.</target>
          </trans-unit>
          <trans-unit id="216" xml:space="preserve">
            <source>When a push is canceled, <bpt id="2">&lt;code&gt;</bpt>PushAsync<ept id="2">&lt;/code&gt;</ept> will throw a <bpt id="4">&lt;code&gt;</bpt>MobileServicePushFailedException<ept id="4">&lt;/code&gt;</ept>, and the exception property <bpt id="6">&lt;code&gt;</bpt>PushResult.Status<ept id="6">&lt;/code&gt;</ept> will have the value <bpt id="8">&lt;code&gt;</bpt>MobileServicePushStatus.CancelledByOperation<ept id="8">&lt;/code&gt;</ept>.</source>
            <target state="new">When a push is canceled, <bpt id="2">&lt;code&gt;</bpt>PushAsync<ept id="2">&lt;/code&gt;</ept> will throw a <bpt id="4">&lt;code&gt;</bpt>MobileServicePushFailedException<ept id="4">&lt;/code&gt;</ept>, and the exception property <bpt id="6">&lt;code&gt;</bpt>PushResult.Status<ept id="6">&lt;/code&gt;</ept> will have the value <bpt id="8">&lt;code&gt;</bpt>MobileServicePushStatus.CancelledByOperation<ept id="8">&lt;/code&gt;</ept>.</target>
          </trans-unit>
        </group>
      </group>
    </body>
  </file>
</xliff>