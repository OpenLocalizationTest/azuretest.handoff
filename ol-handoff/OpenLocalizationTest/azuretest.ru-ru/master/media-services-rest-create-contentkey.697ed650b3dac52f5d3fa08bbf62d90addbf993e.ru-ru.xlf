<?xml version="1.0" encoding="utf-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" source-language="en-us" target-language="ru-ru" original="2/20/2016 3:57:19 PM" tool-id="MarkdownTransformer" product-name="N/A" product-version="N/A" build-num="1">
    <header>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">167818fa4449d409e33be5a9917f3684cc429e5d</xliffext:olfilehash>
      <tool tool-id="MarkdownTransformer" tool-name="MarkdownToXliff" tool-version="1.0" tool-company="Microsoft" />
    </header>
    <body>
      <group extype="content">
        <group id="101">
          <trans-unit id="101" xml:space="preserve">
            <source>Create ContentKeys with REST</source>
            <target state="new">Create ContentKeys with REST</target>
          </trans-unit>
          <trans-unit id="102" xml:space="preserve">
            <source>Learn how to create content keys that provide secure access to Assets.</source>
            <target state="new">Learn how to create content keys that provide secure access to Assets.</target>
          </trans-unit>
          <trans-unit id="103" xml:space="preserve">
            <source>Create ContentKeys with REST</source>
            <target state="new">Create ContentKeys with REST</target>
          </trans-unit>
          <trans-unit id="104" xml:space="preserve">
            <source>Media Services enables you to create new and deliver encrypted assets.</source>
            <target state="new">Media Services enables you to create new and deliver encrypted assets.</target>
          </trans-unit>
          <trans-unit id="105" xml:space="preserve">
            <source>A <bpt id="2">&lt;strong&gt;</bpt>ContentKey<ept id="2">&lt;/strong&gt;</ept> provides secure access to your <bpt id="4">&lt;strong&gt;</bpt>Asset<ept id="4">&lt;/strong&gt;</ept>s.</source>
            <target state="new">A <bpt id="2">&lt;strong&gt;</bpt>ContentKey<ept id="2">&lt;/strong&gt;</ept> provides secure access to your <bpt id="4">&lt;strong&gt;</bpt>Asset<ept id="4">&lt;/strong&gt;</ept>s.</target>
          </trans-unit>
          <trans-unit id="106" xml:space="preserve">
            <source>When you create a new asset (for example, before you <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>upload files<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>, you can specify the following encryption options: <bpt id="4">&lt;strong&gt;</bpt>StorageEncrypted<ept id="4">&lt;/strong&gt;</ept>, <bpt id="6">&lt;strong&gt;</bpt>CommonEncryptionProtected<ept id="6">&lt;/strong&gt;</ept>, or <bpt id="8">&lt;strong&gt;</bpt>EnvelopeEncryptionProtected<ept id="8">&lt;/strong&gt;</ept>.</source>
            <target state="new">When you create a new asset (for example, before you <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>upload files<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>, you can specify the following encryption options: <bpt id="4">&lt;strong&gt;</bpt>StorageEncrypted<ept id="4">&lt;/strong&gt;</ept>, <bpt id="6">&lt;strong&gt;</bpt>CommonEncryptionProtected<ept id="6">&lt;/strong&gt;</ept>, or <bpt id="8">&lt;strong&gt;</bpt>EnvelopeEncryptionProtected<ept id="8">&lt;/strong&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="107" xml:space="preserve">
            <source>When you deliver assets to your clients, you can <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>configure for assets to be dynamically encrypted<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> with one of the following two encryptions: <bpt id="4">&lt;strong&gt;</bpt>DynamicEnvelopeEncryption<ept id="4">&lt;/strong&gt;</ept> or <bpt id="6">&lt;strong&gt;</bpt>DynamicCommonEncryption<ept id="6">&lt;/strong&gt;</ept>.</source>
            <target state="new">When you deliver assets to your clients, you can <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>configure for assets to be dynamically encrypted<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> with one of the following two encryptions: <bpt id="4">&lt;strong&gt;</bpt>DynamicEnvelopeEncryption<ept id="4">&lt;/strong&gt;</ept> or <bpt id="6">&lt;strong&gt;</bpt>DynamicCommonEncryption<ept id="6">&lt;/strong&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="108" xml:space="preserve">
            <source>Encrypted assets have to be associated with <bpt id="2">&lt;strong&gt;</bpt>ContentKey<ept id="2">&lt;/strong&gt;</ept>s.</source>
            <target state="new">Encrypted assets have to be associated with <bpt id="2">&lt;strong&gt;</bpt>ContentKey<ept id="2">&lt;/strong&gt;</ept>s.</target>
          </trans-unit>
          <trans-unit id="109" xml:space="preserve">
            <source>This article describes how to create a content key.</source>
            <target state="new">This article describes how to create a content key.</target>
          </trans-unit>
          <trans-unit id="110" xml:space="preserve">
            <source>The following are general steps for generating content keys that you will associate with assets that you want to be encrypted.</source>
            <target state="new">The following are general steps for generating content keys that you will associate with assets that you want to be encrypted.</target>
          </trans-unit>
          <trans-unit id="111" xml:space="preserve">
            <source>Randomly generate a 16-byte AES key (for common and envelope encryption) or a 32-byte AES key (for storage encryption).</source>
            <target state="new">Randomly generate a 16-byte AES key (for common and envelope encryption) or a 32-byte AES key (for storage encryption).</target>
          </trans-unit>
          <trans-unit id="112" xml:space="preserve">
            <source>This will be the content key for your asset, which means all files associated with that asset will need to use the same content key during decryption.</source>
            <target state="new">This will be the content key for your asset, which means all files associated with that asset will need to use the same content key during decryption.</target>
          </trans-unit>
          <trans-unit id="113" xml:space="preserve">
            <source>Call the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>GetProtectionKeyId<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> and <bpt id="4CapsExtId1">&lt;link&gt;</bpt><bpt id="4CapsExtId2">&lt;linkText&gt;</bpt>GetProtectionKey<ept id="4CapsExtId2">&lt;/linkText&gt;</ept><bpt id="4CapsExtId3">&lt;title&gt;</bpt><ept id="4CapsExtId3">&lt;/title&gt;</ept><ept id="4CapsExtId1">&lt;/link&gt;</ept> methods to get the correct X.509 Certificate that must be used to encrypt your content key.</source>
            <target state="new">Call the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>GetProtectionKeyId<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> and <bpt id="4CapsExtId1">&lt;link&gt;</bpt><bpt id="4CapsExtId2">&lt;linkText&gt;</bpt>GetProtectionKey<ept id="4CapsExtId2">&lt;/linkText&gt;</ept><bpt id="4CapsExtId3">&lt;title&gt;</bpt><ept id="4CapsExtId3">&lt;/title&gt;</ept><ept id="4CapsExtId1">&lt;/link&gt;</ept> methods to get the correct X.509 Certificate that must be used to encrypt your content key.</target>
          </trans-unit>
          <trans-unit id="114" xml:space="preserve">
            <source>Encrypt your content key with the public key of the X.509 Certificate.</source>
            <target state="new">Encrypt your content key with the public key of the X.509 Certificate.</target>
          </trans-unit>
          <trans-unit id="115" xml:space="preserve">
            <source>Media Services .NET SDK uses RSA with OAEP when doing the encryption.</source>
            <target state="new">Media Services .NET SDK uses RSA with OAEP when doing the encryption.</target>
          </trans-unit>
          <trans-unit id="116" xml:space="preserve">
            <source>You can see an example in the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>EncryptSymmetricKeyData function<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">You can see an example in the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>EncryptSymmetricKeyData function<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="117" xml:space="preserve">
            <source>Create a checksum value (based on the PlayReady AES key checksum algorithm) calculated using the key identifier and content key.</source>
            <target state="new">Create a checksum value (based on the PlayReady AES key checksum algorithm) calculated using the key identifier and content key.</target>
          </trans-unit>
          <trans-unit id="118" xml:space="preserve">
            <source>For more information, see the “PlayReady AES Key Checksum Algorithm” section of the PlayReady Header Object document located <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>here<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">For more information, see the “PlayReady AES Key Checksum Algorithm” section of the PlayReady Header Object document located <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>here<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="119" xml:space="preserve">
            <source>The following .NET example calculates the checksum using the GUID part of the key identifier and the clear content key.</source>
            <target state="new">The following .NET example calculates the checksum using the GUID part of the key identifier and the clear content key.</target>
          </trans-unit>
          <trans-unit id="120" xml:space="preserve">
            <source>Create the Content key with the <bpt id="2">&lt;strong&gt;</bpt>EncryptedContentKey<ept id="2">&lt;/strong&gt;</ept> (converted to base64-encoded string), <bpt id="4">&lt;strong&gt;</bpt>ProtectionKeyId<ept id="4">&lt;/strong&gt;</ept>, <bpt id="6">&lt;strong&gt;</bpt>ProtectionKeyType<ept id="6">&lt;/strong&gt;</ept>, <bpt id="8">&lt;strong&gt;</bpt>ContentKeyType<ept id="8">&lt;/strong&gt;</ept>, and <bpt id="10">&lt;strong&gt;</bpt>Checksum<ept id="10">&lt;/strong&gt;</ept> values you have received in previous steps.</source>
            <target state="new">Create the Content key with the <bpt id="2">&lt;strong&gt;</bpt>EncryptedContentKey<ept id="2">&lt;/strong&gt;</ept> (converted to base64-encoded string), <bpt id="4">&lt;strong&gt;</bpt>ProtectionKeyId<ept id="4">&lt;/strong&gt;</ept>, <bpt id="6">&lt;strong&gt;</bpt>ProtectionKeyType<ept id="6">&lt;/strong&gt;</ept>, <bpt id="8">&lt;strong&gt;</bpt>ContentKeyType<ept id="8">&lt;/strong&gt;</ept>, and <bpt id="10">&lt;strong&gt;</bpt>Checksum<ept id="10">&lt;/strong&gt;</ept> values you have received in previous steps.</target>
          </trans-unit>
          <trans-unit id="121" xml:space="preserve">
            <source>Associate the <bpt id="2">&lt;strong&gt;</bpt>ContentKey<ept id="2">&lt;/strong&gt;</ept> entity with your <bpt id="4">&lt;strong&gt;</bpt>Asset<ept id="4">&lt;/strong&gt;</ept> entity through the $links operation.</source>
            <target state="new">Associate the <bpt id="2">&lt;strong&gt;</bpt>ContentKey<ept id="2">&lt;/strong&gt;</ept> entity with your <bpt id="4">&lt;strong&gt;</bpt>Asset<ept id="4">&lt;/strong&gt;</ept> entity through the $links operation.</target>
          </trans-unit>
          <trans-unit id="122" xml:space="preserve">
            <source>Note that examples that generate an AES key, encrypt the key, and calculate the checksum have been omitted from this topic.</source>
            <target state="new">Note that examples that generate an AES key, encrypt the key, and calculate the checksum have been omitted from this topic.</target>
          </trans-unit>
          <trans-unit id="123" xml:space="preserve">
            <source>Only the examples that show how to interact with Media Services are provided.</source>
            <target state="new">Only the examples that show how to interact with Media Services are provided.</target>
          </trans-unit>
          <trans-unit id="124" xml:space="preserve">
            <source>When working with the Media Services REST API, the following considerations apply:</source>
            <target state="new">When working with the Media Services REST API, the following considerations apply:</target>
          </trans-unit>
          <trans-unit id="125" xml:space="preserve">
            <source>When accessing entities in Media Services, you must set specific header fields and values in your HTTP requests.</source>
            <target state="new">When accessing entities in Media Services, you must set specific header fields and values in your HTTP requests.</target>
          </trans-unit>
          <trans-unit id="126" xml:space="preserve">
            <source>For more information, see <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Setup for Media Services REST API Development<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">For more information, see <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Setup for Media Services REST API Development<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="127" xml:space="preserve">
            <source>After successfully connecting to https://media.windows.net, you will receive a 301 redirect specifying another Media Services URI.</source>
            <target state="new">After successfully connecting to https://media.windows.net, you will receive a 301 redirect specifying another Media Services URI.</target>
          </trans-unit>
          <trans-unit id="128" xml:space="preserve">
            <source>You must make subsequent calls to the new URI as described in <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Connecting to Media Services using REST API<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">You must make subsequent calls to the new URI as described in <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Connecting to Media Services using REST API<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="129" xml:space="preserve">
            <source>Retrieve the ProtectionKeyId</source>
            <target state="new">Retrieve the ProtectionKeyId</target>
          </trans-unit>
          <trans-unit id="130" xml:space="preserve">
            <source>The following example shows how to retrieve the ProtectionKeyId, a certificate thumbprint, for the certificate you must use when encrypting your content key.</source>
            <target state="new">The following example shows how to retrieve the ProtectionKeyId, a certificate thumbprint, for the certificate you must use when encrypting your content key.</target>
          </trans-unit>
          <trans-unit id="131" xml:space="preserve">
            <source>Do this step to make sure that you already have the appropriate certificate on your machine.</source>
            <target state="new">Do this step to make sure that you already have the appropriate certificate on your machine.</target>
          </trans-unit>
          <trans-unit id="132" xml:space="preserve">
            <source>Request:</source>
            <target state="new">Request:</target>
          </trans-unit>
          <trans-unit id="133" xml:space="preserve">
            <source>Response:</source>
            <target state="new">Response:</target>
          </trans-unit>
          <trans-unit id="134" xml:space="preserve">
            <source>Retrieve the ProtectionKey for the ProtectionKeyId</source>
            <target state="new">Retrieve the ProtectionKey for the ProtectionKeyId</target>
          </trans-unit>
          <trans-unit id="135" xml:space="preserve">
            <source>The following example shows how to retrieve the X.509 certificate using the ProtectionKeyId you received in the previous step.</source>
            <target state="new">The following example shows how to retrieve the X.509 certificate using the ProtectionKeyId you received in the previous step.</target>
          </trans-unit>
          <trans-unit id="136" xml:space="preserve">
            <source>Request:</source>
            <target state="new">Request:</target>
          </trans-unit>
          <trans-unit id="137" xml:space="preserve">
            <source>Response:</source>
            <target state="new">Response:</target>
          </trans-unit>
          <trans-unit id="138" xml:space="preserve">
            <source>Create the ContentKey</source>
            <target state="new">Create the ContentKey</target>
          </trans-unit>
          <trans-unit id="139" xml:space="preserve">
            <source>After you have retrieved the X.509 certificate and used its public key to encrypt your content key, create a <bpt id="2">&lt;strong&gt;</bpt>ContentKey<ept id="2">&lt;/strong&gt;</ept> entity and set its property values accordingly.</source>
            <target state="new">After you have retrieved the X.509 certificate and used its public key to encrypt your content key, create a <bpt id="2">&lt;strong&gt;</bpt>ContentKey<ept id="2">&lt;/strong&gt;</ept> entity and set its property values accordingly.</target>
          </trans-unit>
          <trans-unit id="140" xml:space="preserve">
            <source>One of the values that you must set when create the content key is the type.</source>
            <target state="new">One of the values that you must set when create the content key is the type.</target>
          </trans-unit>
          <trans-unit id="141" xml:space="preserve">
            <source>Choose from one of the following values.</source>
            <target state="new">Choose from one of the following values.</target>
          </trans-unit>
          <trans-unit id="142" xml:space="preserve">
            <source>The following example shows how to create a <bpt id="2">&lt;strong&gt;</bpt>ContentKey<ept id="2">&lt;/strong&gt;</ept> with a <bpt id="4">&lt;strong&gt;</bpt>ContentKeyType<ept id="4">&lt;/strong&gt;</ept> set for storage encryption ("1") and the <bpt id="6">&lt;strong&gt;</bpt>ProtectionKeyType<ept id="6">&lt;/strong&gt;</ept> set to "0" to indicate that the protection key Id is the X.509 certificate thumbprint.</source>
            <target state="new">The following example shows how to create a <bpt id="2">&lt;strong&gt;</bpt>ContentKey<ept id="2">&lt;/strong&gt;</ept> with a <bpt id="4">&lt;strong&gt;</bpt>ContentKeyType<ept id="4">&lt;/strong&gt;</ept> set for storage encryption ("1") and the <bpt id="6">&lt;strong&gt;</bpt>ProtectionKeyType<ept id="6">&lt;/strong&gt;</ept> set to "0" to indicate that the protection key Id is the X.509 certificate thumbprint.</target>
          </trans-unit>
          <trans-unit id="143" xml:space="preserve">
            <source>Request</source>
            <target state="new">Request</target>
          </trans-unit>
          <trans-unit id="144" xml:space="preserve">
            <source>Response:</source>
            <target state="new">Response:</target>
          </trans-unit>
          <trans-unit id="145" xml:space="preserve">
            <source>Associate the ContentKey with an Asset</source>
            <target state="new">Associate the ContentKey with an Asset</target>
          </trans-unit>
          <trans-unit id="146" xml:space="preserve">
            <source>After creating the ContentKey, associate it with your Asset using the $links operation, as shown in the following example:</source>
            <target state="new">After creating the ContentKey, associate it with your Asset using the $links operation, as shown in the following example:</target>
          </trans-unit>
          <trans-unit id="147" xml:space="preserve">
            <source>Request:</source>
            <target state="new">Request:</target>
          </trans-unit>
          <trans-unit id="148" xml:space="preserve">
            <source>Response:</source>
            <target state="new">Response:</target>
          </trans-unit>
        </group>
      </group>
    </body>
  </file>
</xliff>