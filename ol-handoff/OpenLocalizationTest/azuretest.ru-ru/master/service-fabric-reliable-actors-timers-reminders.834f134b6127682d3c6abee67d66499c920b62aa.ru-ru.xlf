<?xml version="1.0" encoding="utf-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" source-language="en-us" target-language="ru-ru" original="2/20/2016 4:32:23 PM" tool-id="MarkdownTransformer" product-name="N/A" product-version="N/A" build-num="1">
    <header>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">41151d0b1626a8b45439034db32b4cde783ec59f</xliffext:olfilehash>
      <tool tool-id="MarkdownTransformer" tool-name="MarkdownToXliff" tool-version="1.0" tool-company="Microsoft" />
    </header>
    <body>
      <group extype="content">
        <group id="101">
          <trans-unit id="101" xml:space="preserve">
            <source>Reliable Actors Timers and Reminders</source>
            <target state="new">Reliable Actors Timers and Reminders</target>
          </trans-unit>
          <trans-unit id="102" xml:space="preserve">
            <source>Introduction to Timers and Reminders for Service Fabric Reliable Actors.</source>
            <target state="new">Introduction to Timers and Reminders for Service Fabric Reliable Actors.</target>
          </trans-unit>
          <trans-unit id="103" xml:space="preserve">
            <source>Actor Timers</source>
            <target state="new">Actor Timers</target>
          </trans-unit>
          <trans-unit id="104" xml:space="preserve">
            <source>Actor timers provide a simple wrapper around .NET timers such that the callback methods respect the turn-based concurrency guarantees provided by the Actors runtime.</source>
            <target state="new">Actor timers provide a simple wrapper around .NET timers such that the callback methods respect the turn-based concurrency guarantees provided by the Actors runtime.</target>
          </trans-unit>
          <trans-unit id="105" xml:space="preserve">
            <source>Actors can use the <bpt id="2">&lt;code&gt;</bpt>RegisterTimer<ept id="2">&lt;/code&gt;</ept> and <bpt id="4">&lt;code&gt;</bpt>UnregisterTimer<ept id="4">&lt;/code&gt;</ept> methods on their base class to register and unregister their timers.</source>
            <target state="new">Actors can use the <bpt id="2">&lt;code&gt;</bpt>RegisterTimer<ept id="2">&lt;/code&gt;</ept> and <bpt id="4">&lt;code&gt;</bpt>UnregisterTimer<ept id="4">&lt;/code&gt;</ept> methods on their base class to register and unregister their timers.</target>
          </trans-unit>
          <trans-unit id="106" xml:space="preserve">
            <source>The example below shows the use of timer APIs.</source>
            <target state="new">The example below shows the use of timer APIs.</target>
          </trans-unit>
          <trans-unit id="107" xml:space="preserve">
            <source>The APIs are very similar to the .NET timer.</source>
            <target state="new">The APIs are very similar to the .NET timer.</target>
          </trans-unit>
          <trans-unit id="108" xml:space="preserve">
            <source>In the example below when the timer is due the <bpt id="2">&lt;code&gt;</bpt>MoveObject<ept id="2">&lt;/code&gt;</ept> method will be called by the Actors runtime and it is guaranteed to respect the turn-based concurrency, which means that no other actor methods or timer/reminder callbacks will be in progress until this callback completes execution.</source>
            <target state="new">In the example below when the timer is due the <bpt id="2">&lt;code&gt;</bpt>MoveObject<ept id="2">&lt;/code&gt;</ept> method will be called by the Actors runtime and it is guaranteed to respect the turn-based concurrency, which means that no other actor methods or timer/reminder callbacks will be in progress until this callback completes execution.</target>
          </trans-unit>
          <trans-unit id="109" xml:space="preserve">
            <source>The next period of the timer starts after the callback completes execution.</source>
            <target state="new">The next period of the timer starts after the callback completes execution.</target>
          </trans-unit>
          <trans-unit id="110" xml:space="preserve">
            <source>This implies that the timer is stopped while the callback is executing and is started when the callback has completed.</source>
            <target state="new">This implies that the timer is stopped while the callback is executing and is started when the callback has completed.</target>
          </trans-unit>
          <trans-unit id="111" xml:space="preserve">
            <source>The Actors runtime saves the actor state when the callback completes if the Actor is a stateful actor like in the example above.</source>
            <target state="new">The Actors runtime saves the actor state when the callback completes if the Actor is a stateful actor like in the example above.</target>
          </trans-unit>
          <trans-unit id="112" xml:space="preserve">
            <source>If an error occurs in saving the state, that actor object will be deactivated and a new instance will be activated.</source>
            <target state="new">If an error occurs in saving the state, that actor object will be deactivated and a new instance will be activated.</target>
          </trans-unit>
          <trans-unit id="113" xml:space="preserve">
            <source>A callback method that does not modify the actor state can be registered as a read-only timer callback by specifying the Readonly attribute on the timer callback, as described in the section on <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>readonly methods<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">A callback method that does not modify the actor state can be registered as a read-only timer callback by specifying the Readonly attribute on the timer callback, as described in the section on <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>readonly methods<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="114" xml:space="preserve">
            <source>All timers are stopped when the actor is deactivated as part of garbage collection and no timer callbacks are invoked after that.</source>
            <target state="new">All timers are stopped when the actor is deactivated as part of garbage collection and no timer callbacks are invoked after that.</target>
          </trans-unit>
          <trans-unit id="115" xml:space="preserve">
            <source>Also, the Actors runtime does not retain any information about the timers that were running before deactivation.</source>
            <target state="new">Also, the Actors runtime does not retain any information about the timers that were running before deactivation.</target>
          </trans-unit>
          <trans-unit id="116" xml:space="preserve">
            <source>It is up to the actor to register any timers that it needs when it is reactivated in the future.</source>
            <target state="new">It is up to the actor to register any timers that it needs when it is reactivated in the future.</target>
          </trans-unit>
          <trans-unit id="117" xml:space="preserve">
            <source>For more information, please see the section on <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>actor garbage collection<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">For more information, please see the section on <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>actor garbage collection<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="118" xml:space="preserve">
            <source>Actor Reminders</source>
            <target state="new">Actor Reminders</target>
          </trans-unit>
          <trans-unit id="119" xml:space="preserve">
            <source>Reminders are a mechanism to trigger persistent callbacks on an Actor at specified times.</source>
            <target state="new">Reminders are a mechanism to trigger persistent callbacks on an Actor at specified times.</target>
          </trans-unit>
          <trans-unit id="120" xml:space="preserve">
            <source>Their functionality is similar to timers, but unlike timers reminders are triggered under all circumstances until the Reminder is explicitly unregistered by the Actor.</source>
            <target state="new">Their functionality is similar to timers, but unlike timers reminders are triggered under all circumstances until the Reminder is explicitly unregistered by the Actor.</target>
          </trans-unit>
          <trans-unit id="121" xml:space="preserve">
            <source>Specifically, reminders are triggered across actor deactivations and failovers because the Actors runtime persists information about the actor's reminders.</source>
            <target state="new">Specifically, reminders are triggered across actor deactivations and failovers because the Actors runtime persists information about the actor's reminders.</target>
          </trans-unit>
          <trans-unit id="122" xml:space="preserve">
            <source>Reminders are supported for stateful actors only.</source>
            <target state="new">Reminders are supported for stateful actors only.</target>
          </trans-unit>
          <trans-unit id="123" xml:space="preserve">
            <source>Stateless actors cannot use reminders.</source>
            <target state="new">Stateless actors cannot use reminders.</target>
          </trans-unit>
          <trans-unit id="124" xml:space="preserve">
            <source>The actors state providers are responsible for storing information about the reminders that have been registered by actors.</source>
            <target state="new">The actors state providers are responsible for storing information about the reminders that have been registered by actors.</target>
          </trans-unit>
          <trans-unit id="125" xml:space="preserve">
            <source>To register a reminder an actor calls the <bpt id="2">&lt;code&gt;</bpt>RegisterReminder<ept id="2">&lt;/code&gt;</ept> method provided on base class, as shown in the example below.</source>
            <target state="new">To register a reminder an actor calls the <bpt id="2">&lt;code&gt;</bpt>RegisterReminder<ept id="2">&lt;/code&gt;</ept> method provided on base class, as shown in the example below.</target>
          </trans-unit>
          <trans-unit id="126" xml:space="preserve">
            <source>In the example above, <bpt id="2">&lt;code&gt;</bpt>"Pay cell phone bill"<ept id="2">&lt;/code&gt;</ept> is the reminder name, which is a string that the actor uses to uniquely identify a reminder.</source>
            <target state="new">In the example above, <bpt id="2">&lt;code&gt;</bpt>"Pay cell phone bill"<ept id="2">&lt;/code&gt;</ept> is the reminder name, which is a string that the actor uses to uniquely identify a reminder.</target>
          </trans-unit>
          <trans-unit id="127" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>BitConverter.GetBytes(amountInDollars)<ept id="1">&lt;/code&gt;</ept> is the context that is associated with the reminder.</source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>BitConverter.GetBytes(amountInDollars)<ept id="1">&lt;/code&gt;</ept> is the context that is associated with the reminder.</target>
          </trans-unit>
          <trans-unit id="128" xml:space="preserve">
            <source>It will be passed back to the actor as an argument to the reminder callback, i.e. <bpt id="2">&lt;code&gt;</bpt>IRemindable.ReceiveReminderAsync<ept id="2">&lt;/code&gt;</ept>.</source>
            <target state="new">It will be passed back to the actor as an argument to the reminder callback, i.e. <bpt id="2">&lt;code&gt;</bpt>IRemindable.ReceiveReminderAsync<ept id="2">&lt;/code&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="129" xml:space="preserve">
            <source>Actors that use reminders must implement <bpt id="2">&lt;code&gt;</bpt>IRemindable<ept id="2">&lt;/code&gt;</ept> interface, as shown in the example below.</source>
            <target state="new">Actors that use reminders must implement <bpt id="2">&lt;code&gt;</bpt>IRemindable<ept id="2">&lt;/code&gt;</ept> interface, as shown in the example below.</target>
          </trans-unit>
          <trans-unit id="130" xml:space="preserve">
            <source>When a reminder is triggered, Fabric Actors runtime will invoke <bpt id="2">&lt;code&gt;</bpt>ReceiveReminderAsync<ept id="2">&lt;/code&gt;</ept> method on the Actor.</source>
            <target state="new">When a reminder is triggered, Fabric Actors runtime will invoke <bpt id="2">&lt;code&gt;</bpt>ReceiveReminderAsync<ept id="2">&lt;/code&gt;</ept> method on the Actor.</target>
          </trans-unit>
          <trans-unit id="131" xml:space="preserve">
            <source>An actor can register multiple reminders and the <bpt id="2">&lt;code&gt;</bpt>ReceiveReminderAsync<ept id="2">&lt;/code&gt;</ept> method is invoked any time any of those reminders is triggered.</source>
            <target state="new">An actor can register multiple reminders and the <bpt id="2">&lt;code&gt;</bpt>ReceiveReminderAsync<ept id="2">&lt;/code&gt;</ept> method is invoked any time any of those reminders is triggered.</target>
          </trans-unit>
          <trans-unit id="132" xml:space="preserve">
            <source>The actor can use the reminder name that is passed in to the <bpt id="2">&lt;code&gt;</bpt>ReceiveReminderAsync<ept id="2">&lt;/code&gt;</ept> method to figure out which reminder was triggered.</source>
            <target state="new">The actor can use the reminder name that is passed in to the <bpt id="2">&lt;code&gt;</bpt>ReceiveReminderAsync<ept id="2">&lt;/code&gt;</ept> method to figure out which reminder was triggered.</target>
          </trans-unit>
          <trans-unit id="133" xml:space="preserve">
            <source>The Actors runtime saves the actor state when the <bpt id="2">&lt;code&gt;</bpt>ReceiveReminderAsync<ept id="2">&lt;/code&gt;</ept> call completes.</source>
            <target state="new">The Actors runtime saves the actor state when the <bpt id="2">&lt;code&gt;</bpt>ReceiveReminderAsync<ept id="2">&lt;/code&gt;</ept> call completes.</target>
          </trans-unit>
          <trans-unit id="134" xml:space="preserve">
            <source>If an error occurs in saving the state, that actor object will be deactivated and a new instance will be activated.</source>
            <target state="new">If an error occurs in saving the state, that actor object will be deactivated and a new instance will be activated.</target>
          </trans-unit>
          <trans-unit id="135" xml:space="preserve">
            <source>To specify that the state need not be saved upon completion of the reminder callback, the <bpt id="2">&lt;code&gt;</bpt>ActorReminderAttributes.ReadOnly<ept id="2">&lt;/code&gt;</ept> flag can be set in the <bpt id="4">&lt;code&gt;</bpt>attributes<ept id="4">&lt;/code&gt;</ept> parameter when the <bpt id="6">&lt;code&gt;</bpt>RegisterReminder<ept id="6">&lt;/code&gt;</ept> method is called to create the reminder.</source>
            <target state="new">To specify that the state need not be saved upon completion of the reminder callback, the <bpt id="2">&lt;code&gt;</bpt>ActorReminderAttributes.ReadOnly<ept id="2">&lt;/code&gt;</ept> flag can be set in the <bpt id="4">&lt;code&gt;</bpt>attributes<ept id="4">&lt;/code&gt;</ept> parameter when the <bpt id="6">&lt;code&gt;</bpt>RegisterReminder<ept id="6">&lt;/code&gt;</ept> method is called to create the reminder.</target>
          </trans-unit>
          <trans-unit id="136" xml:space="preserve">
            <source>To unregister a reminder, the <bpt id="2">&lt;code&gt;</bpt>UnregisterReminder<ept id="2">&lt;/code&gt;</ept> method should be called, as shown in the example below.</source>
            <target state="new">To unregister a reminder, the <bpt id="2">&lt;code&gt;</bpt>UnregisterReminder<ept id="2">&lt;/code&gt;</ept> method should be called, as shown in the example below.</target>
          </trans-unit>
          <trans-unit id="137" xml:space="preserve">
            <source>As shown above, the <bpt id="2">&lt;code&gt;</bpt>UnregisterReminder<ept id="2">&lt;/code&gt;</ept> method accepts an <bpt id="4">&lt;code&gt;</bpt>IActorReminder<ept id="4">&lt;/code&gt;</ept> interface.</source>
            <target state="new">As shown above, the <bpt id="2">&lt;code&gt;</bpt>UnregisterReminder<ept id="2">&lt;/code&gt;</ept> method accepts an <bpt id="4">&lt;code&gt;</bpt>IActorReminder<ept id="4">&lt;/code&gt;</ept> interface.</target>
          </trans-unit>
          <trans-unit id="138" xml:space="preserve">
            <source>The actor base class supports a <bpt id="2">&lt;code&gt;</bpt>GetReminder<ept id="2">&lt;/code&gt;</ept> method that can be used to retrieve the <bpt id="4">&lt;code&gt;</bpt>IActorReminder<ept id="4">&lt;/code&gt;</ept> interface by passing in the reminder name.</source>
            <target state="new">The actor base class supports a <bpt id="2">&lt;code&gt;</bpt>GetReminder<ept id="2">&lt;/code&gt;</ept> method that can be used to retrieve the <bpt id="4">&lt;code&gt;</bpt>IActorReminder<ept id="4">&lt;/code&gt;</ept> interface by passing in the reminder name.</target>
          </trans-unit>
          <trans-unit id="139" xml:space="preserve">
            <source>This is convenient because the actor does not need to persist the <bpt id="2">&lt;code&gt;</bpt>IActorReminder<ept id="2">&lt;/code&gt;</ept> interface that was returned from the <bpt id="4">&lt;code&gt;</bpt>RegisterReminder<ept id="4">&lt;/code&gt;</ept> method call.</source>
            <target state="new">This is convenient because the actor does not need to persist the <bpt id="2">&lt;code&gt;</bpt>IActorReminder<ept id="2">&lt;/code&gt;</ept> interface that was returned from the <bpt id="4">&lt;code&gt;</bpt>RegisterReminder<ept id="4">&lt;/code&gt;</ept> method call.</target>
          </trans-unit>
        </group>
      </group>
    </body>
  </file>
</xliff>