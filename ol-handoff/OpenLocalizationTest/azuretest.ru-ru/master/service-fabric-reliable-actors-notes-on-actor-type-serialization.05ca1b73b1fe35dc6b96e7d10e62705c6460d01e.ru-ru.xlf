<?xml version="1.0" encoding="utf-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" source-language="en-us" target-language="ru-ru" original="2/20/2016 4:31:46 PM" tool-id="MarkdownTransformer" product-name="N/A" product-version="N/A" build-num="1">
    <header>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0f76cb4f6b5ec1c25dd6f7570ab78e15fbf7324a</xliffext:olfilehash>
      <tool tool-id="MarkdownTransformer" tool-name="MarkdownToXliff" tool-version="1.0" tool-company="Microsoft" />
    </header>
    <body>
      <group extype="content">
        <group id="101">
          <trans-unit id="101" xml:space="preserve">
            <source>Reliable Actors Notes on Actor type serialization</source>
            <target state="new">Reliable Actors Notes on Actor type serialization</target>
          </trans-unit>
          <trans-unit id="102" xml:space="preserve">
            <source>Discusses basic requirements for defining serializable classes that can be used to define Service Fabric Reliable Actor state and interfaces</source>
            <target state="new">Discusses basic requirements for defining serializable classes that can be used to define Service Fabric Reliable Actor state and interfaces</target>
          </trans-unit>
          <trans-unit id="103" xml:space="preserve">
            <source>Notes on Service Fabric Reliable Actors type serialization</source>
            <target state="new">Notes on Service Fabric Reliable Actors type serialization</target>
          </trans-unit>
          <trans-unit id="104" xml:space="preserve">
            <source>There are few important aspects that needs to be kept in mind while defining the Actor's interface(s) and State: types need to be Data Contract serializable.</source>
            <target state="new">There are few important aspects that needs to be kept in mind while defining the Actor's interface(s) and State: types need to be Data Contract serializable.</target>
          </trans-unit>
          <trans-unit id="105" xml:space="preserve">
            <source>More information about Data Contracts can be found on <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>MSDN<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">More information about Data Contracts can be found on <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>MSDN<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="106" xml:space="preserve">
            <source>Types used in Actor Interface(s)</source>
            <target state="new">Types used in Actor Interface(s)</target>
          </trans-unit>
          <trans-unit id="107" xml:space="preserve">
            <source>The arguments of all the methods and the result type of the task returned by each method defined in the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>actor interface<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> need to be data contract serializable.</source>
            <target state="new">The arguments of all the methods and the result type of the task returned by each method defined in the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>actor interface<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> need to be data contract serializable.</target>
          </trans-unit>
          <trans-unit id="108" xml:space="preserve">
            <source>This also applies to the arguments of methods defined in <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>actor event interfaces<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">This also applies to the arguments of methods defined in <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>actor event interfaces<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="109" xml:space="preserve">
            <source>(Actor event interface methods always return void).</source>
            <target state="new">(Actor event interface methods always return void).</target>
          </trans-unit>
          <trans-unit id="110" xml:space="preserve">
            <source>For instance, if the <bpt id="2">&lt;code&gt;</bpt>IVoiceMail<ept id="2">&lt;/code&gt;</ept> interface defines a method as:</source>
            <target state="new">For instance, if the <bpt id="2">&lt;code&gt;</bpt>IVoiceMail<ept id="2">&lt;/code&gt;</ept> interface defines a method as:</target>
          </trans-unit>
          <trans-unit id="111" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>List&lt;T&gt;<ept id="1">&lt;/code&gt;</ept> is a standard .NET type that is already Data Contract serializable. The <bpt id="3">&lt;code&gt;</bpt>Voicemail<ept id="3">&lt;/code&gt;</ept> type needs to be Data Contract serializable.</source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>List&lt;T&gt;<ept id="1">&lt;/code&gt;</ept> is a standard .NET type that is already Data Contract serializable. The <bpt id="3">&lt;code&gt;</bpt>Voicemail<ept id="3">&lt;/code&gt;</ept> type needs to be Data Contract serializable.</target>
          </trans-unit>
          <trans-unit id="112" xml:space="preserve">
            <source>Actor State class</source>
            <target state="new">Actor State class</target>
          </trans-unit>
          <trans-unit id="113" xml:space="preserve">
            <source>The actor state needs to be data contract serializable.</source>
            <target state="new">The actor state needs to be data contract serializable.</target>
          </trans-unit>
          <trans-unit id="114" xml:space="preserve">
            <source>For instance if we have an Actor class definition that looks like:</source>
            <target state="new">For instance if we have an Actor class definition that looks like:</target>
          </trans-unit>
          <trans-unit id="115" xml:space="preserve">
            <source>The state class is going to be defined with the class and its members annotated with the DataContract and DataMember attributes respectively.</source>
            <target state="new">The state class is going to be defined with the class and its members annotated with the DataContract and DataMember attributes respectively.</target>
          </trans-unit>
        </group>
      </group>
    </body>
  </file>
</xliff>