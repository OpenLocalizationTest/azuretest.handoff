<?xml version="1.0" encoding="utf-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" source-language="en-us" target-language="ru-ru" original="2/20/2016 5:42:11 PM" tool-id="MarkdownTransformer" product-name="N/A" product-version="N/A" build-num="1">
    <header>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7cb606631aeefeff4f565d1348e1abe4e62c3e7f</xliffext:olfilehash>
      <tool tool-id="MarkdownTransformer" tool-name="MarkdownToXliff" tool-version="1.0" tool-company="Microsoft" />
    </header>
    <body>
      <group extype="content">
        <group id="101">
          <trans-unit id="101" xml:space="preserve">
            <source>In this section we will modify the model of our database by adding a new timestamp field named <bpt id="2">&lt;strong&gt;</bpt>CompleteDate<ept id="2">&lt;/strong&gt;</ept>.</source>
            <target state="new">In this section we will modify the model of our database by adding a new timestamp field named <bpt id="2">&lt;strong&gt;</bpt>CompleteDate<ept id="2">&lt;/strong&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="102" xml:space="preserve">
            <source>This field will record the last time the todo item was completed.</source>
            <target state="new">This field will record the last time the todo item was completed.</target>
          </trans-unit>
          <trans-unit id="103" xml:space="preserve">
            <source>Entity Framework will update the database based on our model change using a default database initializer class derived from <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>DropCreateDatabaseIfModelChanges<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">Entity Framework will update the database based on our model change using a default database initializer class derived from <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>DropCreateDatabaseIfModelChanges<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="104" xml:space="preserve">
            <source>In Solution Explorer for Visual Studio, expand the <bpt id="2">&lt;strong&gt;</bpt>App_Start<ept id="2">&lt;/strong&gt;</ept> folder in the todolist service project.</source>
            <target state="new">In Solution Explorer for Visual Studio, expand the <bpt id="2">&lt;strong&gt;</bpt>App_Start<ept id="2">&lt;/strong&gt;</ept> folder in the todolist service project.</target>
          </trans-unit>
          <trans-unit id="105" xml:space="preserve">
            <source>Open the WebApiConfig.cs file.</source>
            <target state="new">Open the WebApiConfig.cs file.</target>
          </trans-unit>
          <trans-unit id="106" xml:space="preserve">
            <source>In the WebApiConfig.cs file, notice that your default database initializer class is derived from the <bpt id="2">&lt;code&gt;</bpt>DropCreateDatabaseIfModelChanges<ept id="2">&lt;/code&gt;</ept> class.</source>
            <target state="new">In the WebApiConfig.cs file, notice that your default database initializer class is derived from the <bpt id="2">&lt;code&gt;</bpt>DropCreateDatabaseIfModelChanges<ept id="2">&lt;/code&gt;</ept> class.</target>
          </trans-unit>
          <trans-unit id="107" xml:space="preserve">
            <source>This means any change to the model will result in the table being dropped and recreated to accommodate the new model.</source>
            <target state="new">This means any change to the model will result in the table being dropped and recreated to accommodate the new model.</target>
          </trans-unit>
          <trans-unit id="108" xml:space="preserve">
            <source>So the data in the table will be lost and the table will be re-seeded.</source>
            <target state="new">So the data in the table will be lost and the table will be re-seeded.</target>
          </trans-unit>
          <trans-unit id="109" xml:space="preserve">
            <source>Modify the Seed method of the database initializer so that the seed data is as follows as save the WebApiConfig.cs file.</source>
            <target state="new">Modify the Seed method of the database initializer so that the seed data is as follows as save the WebApiConfig.cs file.</target>
          </trans-unit>
          <trans-unit id="110" xml:space="preserve">
            <source>When using the default database initializer, Entity Framework will drop and recreate the database whenever it detects a data model change in the Code First model definition.</source>
            <target state="new">When using the default database initializer, Entity Framework will drop and recreate the database whenever it detects a data model change in the Code First model definition.</target>
          </trans-unit>
          <trans-unit id="111" xml:space="preserve">
            <source>To make this data model change and maintain existing data in the database, you must use Code First Migrations.</source>
            <target state="new">To make this data model change and maintain existing data in the database, you must use Code First Migrations.</target>
          </trans-unit>
          <trans-unit id="112" xml:space="preserve">
            <source>For more information, see <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>How to Use Code First Migrations to Update the Data Model<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">For more information, see <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>How to Use Code First Migrations to Update the Data Model<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="113" xml:space="preserve">
            <source>In Solution Explorer for Visual Studio, expand the <bpt id="2">&lt;strong&gt;</bpt>DataObjects<ept id="2">&lt;/strong&gt;</ept> folder in the todolist service project.</source>
            <target state="new">In Solution Explorer for Visual Studio, expand the <bpt id="2">&lt;strong&gt;</bpt>DataObjects<ept id="2">&lt;/strong&gt;</ept> folder in the todolist service project.</target>
          </trans-unit>
          <trans-unit id="114" xml:space="preserve">
            <source>Open the TodoItem.cs file and update the TodoItem class to include the CompleteDate field as follows.</source>
            <target state="new">Open the TodoItem.cs file and update the TodoItem class to include the CompleteDate field as follows.</target>
          </trans-unit>
          <trans-unit id="115" xml:space="preserve">
            <source>Then save the TodoItem.cs file.</source>
            <target state="new">Then save the TodoItem.cs file.</target>
          </trans-unit>
          <trans-unit id="116" xml:space="preserve">
            <source>In Solution Explorer for Visual Studio, expand the <bpt id="2">&lt;strong&gt;</bpt>Controllers<ept id="2">&lt;/strong&gt;</ept> folder in the todolist service project.</source>
            <target state="new">In Solution Explorer for Visual Studio, expand the <bpt id="2">&lt;strong&gt;</bpt>Controllers<ept id="2">&lt;/strong&gt;</ept> folder in the todolist service project.</target>
          </trans-unit>
          <trans-unit id="117" xml:space="preserve">
            <source>Open the TodoItemController.cs file and update the <bpt id="2">&lt;code&gt;</bpt>PatchTodoItem<ept id="2">&lt;/code&gt;</ept> method so that it will set the <bpt id="4">&lt;strong&gt;</bpt>CompleteDate<ept id="4">&lt;/strong&gt;</ept> when the <bpt id="6">&lt;strong&gt;</bpt>Complete<ept id="6">&lt;/strong&gt;</ept> property is changing from false to true.</source>
            <target state="new">Open the TodoItemController.cs file and update the <bpt id="2">&lt;code&gt;</bpt>PatchTodoItem<ept id="2">&lt;/code&gt;</ept> method so that it will set the <bpt id="4">&lt;strong&gt;</bpt>CompleteDate<ept id="4">&lt;/strong&gt;</ept> when the <bpt id="6">&lt;strong&gt;</bpt>Complete<ept id="6">&lt;/strong&gt;</ept> property is changing from false to true.</target>
          </trans-unit>
          <trans-unit id="118" xml:space="preserve">
            <source>Then save the TodoItemController.cs file.</source>
            <target state="new">Then save the TodoItemController.cs file.</target>
          </trans-unit>
          <trans-unit id="119" xml:space="preserve">
            <source>Rebuild the todolist .NET backend service project and verify that you have no build errors.</source>
            <target state="new">Rebuild the todolist .NET backend service project and verify that you have no build errors.</target>
          </trans-unit>
          <trans-unit id="120" xml:space="preserve">
            <source>Next, you will update the client app to display the new <bpt id="2">&lt;strong&gt;</bpt>CompleteDate<ept id="2">&lt;/strong&gt;</ept> data.</source>
            <target state="new">Next, you will update the client app to display the new <bpt id="2">&lt;strong&gt;</bpt>CompleteDate<ept id="2">&lt;/strong&gt;</ept> data.</target>
          </trans-unit>
        </group>
      </group>
    </body>
  </file>
</xliff>