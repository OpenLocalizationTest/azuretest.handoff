<?xml version="1.0" encoding="utf-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" source-language="en-us" target-language="ru-ru" original="2/20/2016 4:13:59 PM" tool-id="MarkdownTransformer" product-name="N/A" product-version="N/A" build-num="1">
    <header>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b3f5198ef4a62f962dc3118d8e656c25ccea5efc</xliffext:olfilehash>
      <tool tool-id="MarkdownTransformer" tool-name="MarkdownToXliff" tool-version="1.0" tool-company="Microsoft" />
    </header>
    <body>
      <group extype="content">
        <group id="101">
          <trans-unit id="101" xml:space="preserve">
            <source>Azure Notification Hubs Secure Push</source>
            <target state="new">Azure Notification Hubs Secure Push</target>
          </trans-unit>
          <trans-unit id="102" xml:space="preserve">
            <source>Learn how to send secure push notifications to an Android app from Azure. Code samples written in Java and C#.</source>
            <target state="new">Learn how to send secure push notifications to an Android app from Azure. Code samples written in Java and C#.</target>
          </trans-unit>
          <trans-unit id="103" xml:space="preserve">
            <source>Azure Notification Hubs Secure Push</source>
            <target state="new">Azure Notification Hubs Secure Push</target>
          </trans-unit>
          <trans-unit id="104" xml:space="preserve">
            <source>Overview</source>
            <target state="new">Overview</target>
          </trans-unit>
          <trans-unit id="105" xml:space="preserve">
            <source>Push notification support in Microsoft Azure enables you to access an easy-to-use, multiplatform, and scaled-out push infrastructure, which greatly simplifies the implementation of push notifications for both consumer and enterprise applications for mobile platforms.</source>
            <target state="new">Push notification support in Microsoft Azure enables you to access an easy-to-use, multiplatform, and scaled-out push infrastructure, which greatly simplifies the implementation of push notifications for both consumer and enterprise applications for mobile platforms.</target>
          </trans-unit>
          <trans-unit id="106" xml:space="preserve">
            <source>Due to regulatory or security constraints, sometimes an application might want to include something in the notification that cannot be transmitted through the standard push notification infrastructure.</source>
            <target state="new">Due to regulatory or security constraints, sometimes an application might want to include something in the notification that cannot be transmitted through the standard push notification infrastructure.</target>
          </trans-unit>
          <trans-unit id="107" xml:space="preserve">
            <source>This tutorial describes how to achieve the same experience by sending sensitive information through a secure, authenticated connection between the client device and the app backend.</source>
            <target state="new">This tutorial describes how to achieve the same experience by sending sensitive information through a secure, authenticated connection between the client device and the app backend.</target>
          </trans-unit>
          <trans-unit id="108" xml:space="preserve">
            <source>At a high level, the flow is as follows:</source>
            <target state="new">At a high level, the flow is as follows:</target>
          </trans-unit>
          <trans-unit id="109" xml:space="preserve">
            <source>The app back-end:</source>
            <target state="new">The app back-end:</target>
          </trans-unit>
          <trans-unit id="110" xml:space="preserve">
            <source>Stores secure payload in back-end database.</source>
            <target state="new">Stores secure payload in back-end database.</target>
          </trans-unit>
          <trans-unit id="111" xml:space="preserve">
            <source>Sends the ID of this notification to the device (no secure information is sent).</source>
            <target state="new">Sends the ID of this notification to the device (no secure information is sent).</target>
          </trans-unit>
          <trans-unit id="112" xml:space="preserve">
            <source>The app on the device, when receiving the notification:</source>
            <target state="new">The app on the device, when receiving the notification:</target>
          </trans-unit>
          <trans-unit id="113" xml:space="preserve">
            <source>The device contacts the back-end requesting the secure payload.</source>
            <target state="new">The device contacts the back-end requesting the secure payload.</target>
          </trans-unit>
          <trans-unit id="114" xml:space="preserve">
            <source>The app can show the payload as a notification on the device.</source>
            <target state="new">The app can show the payload as a notification on the device.</target>
          </trans-unit>
          <trans-unit id="115" xml:space="preserve">
            <source>It is important to note that in the preceding flow (and in this tutorial), we assume that the device stores an authentication token in local storage, after the user logs in.</source>
            <target state="new">It is important to note that in the preceding flow (and in this tutorial), we assume that the device stores an authentication token in local storage, after the user logs in.</target>
          </trans-unit>
          <trans-unit id="116" xml:space="preserve">
            <source>This guarantees a completely seamless experience, as the device can retrieve the notification’s secure payload using this token.</source>
            <target state="new">This guarantees a completely seamless experience, as the device can retrieve the notification’s secure payload using this token.</target>
          </trans-unit>
          <trans-unit id="117" xml:space="preserve">
            <source>If your application does not store authentication tokens on the device, or if these tokens can be expired, the device app, upon receiving the notification should display a generic notification prompting the user to launch the app.</source>
            <target state="new">If your application does not store authentication tokens on the device, or if these tokens can be expired, the device app, upon receiving the notification should display a generic notification prompting the user to launch the app.</target>
          </trans-unit>
          <trans-unit id="118" xml:space="preserve">
            <source>The app then authenticates the user and shows the notification payload.</source>
            <target state="new">The app then authenticates the user and shows the notification payload.</target>
          </trans-unit>
          <trans-unit id="119" xml:space="preserve">
            <source>This Secure Push tutorial shows how to send a push notification securely.</source>
            <target state="new">This Secure Push tutorial shows how to send a push notification securely.</target>
          </trans-unit>
          <trans-unit id="120" xml:space="preserve">
            <source>The tutorial builds on the <bpt id="2">&lt;strong&gt;</bpt>Notify Users<ept id="2">&lt;/strong&gt;</ept> tutorial, so you should complete the steps in that tutorial first.</source>
            <target state="new">The tutorial builds on the <bpt id="2">&lt;strong&gt;</bpt>Notify Users<ept id="2">&lt;/strong&gt;</ept> tutorial, so you should complete the steps in that tutorial first.</target>
          </trans-unit>
          <trans-unit id="121" xml:space="preserve">
            <source>This tutorial assumes that you have created and configured your notification hub as described in <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Getting Started with Notification Hubs (Android)<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">This tutorial assumes that you have created and configured your notification hub as described in <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Getting Started with Notification Hubs (Android)<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="122" xml:space="preserve">
            <source><ph id="1">&lt;token href="../../includes/notification-hubs-aspnet-backend-securepush.md"/&gt;</ph></source>
            <target state="new"><ph id="1">&lt;token href="../../includes/notification-hubs-aspnet-backend-securepush.md"/&gt;</ph></target>
          </trans-unit>
          <trans-unit id="123" xml:space="preserve">
            <source>Modify the Android project</source>
            <target state="new">Modify the Android project</target>
          </trans-unit>
          <trans-unit id="124" xml:space="preserve">
            <source>Now that you modified your app back-end to send just the <bpt id="2">&lt;em&gt;</bpt>id<ept id="2">&lt;/em&gt;</ept> of a notification, you have to change your Android app to handle that notification and call back your back-end to retrieve the secure message to be displayed.</source>
            <target state="new">Now that you modified your app back-end to send just the <bpt id="2">&lt;em&gt;</bpt>id<ept id="2">&lt;/em&gt;</ept> of a notification, you have to change your Android app to handle that notification and call back your back-end to retrieve the secure message to be displayed.</target>
          </trans-unit>
          <trans-unit id="125" xml:space="preserve">
            <source>To achieve this goal, you have to make sure that your Android app knows how to authenticate itself with your back-end when it receives the push notifications.</source>
            <target state="new">To achieve this goal, you have to make sure that your Android app knows how to authenticate itself with your back-end when it receives the push notifications.</target>
          </trans-unit>
          <trans-unit id="126" xml:space="preserve">
            <source>We will now modify the <bpt id="2">&lt;em&gt;</bpt>login<ept id="2">&lt;/em&gt;</ept> flow in order to save the authentication header value in the shared preferences of your app.</source>
            <target state="new">We will now modify the <bpt id="2">&lt;em&gt;</bpt>login<ept id="2">&lt;/em&gt;</ept> flow in order to save the authentication header value in the shared preferences of your app.</target>
          </trans-unit>
          <trans-unit id="127" xml:space="preserve">
            <source>Analogous mechanisms can be used to store any authentication token (e.g. OAuth tokens) that the app will have to use without requiring user credentials.</source>
            <target state="new">Analogous mechanisms can be used to store any authentication token (e.g. OAuth tokens) that the app will have to use without requiring user credentials.</target>
          </trans-unit>
          <trans-unit id="128" xml:space="preserve">
            <source>In your Android app project, add the following constants at the top of the <bpt id="2">&lt;strong&gt;</bpt>MainActivity<ept id="2">&lt;/strong&gt;</ept> class:</source>
            <target state="new">In your Android app project, add the following constants at the top of the <bpt id="2">&lt;strong&gt;</bpt>MainActivity<ept id="2">&lt;/strong&gt;</ept> class:</target>
          </trans-unit>
          <trans-unit id="129" xml:space="preserve">
            <source>Still in the <bpt id="2">&lt;strong&gt;</bpt>MainActivity<ept id="2">&lt;/strong&gt;</ept> class, update the <bpt id="4">&lt;code&gt;</bpt>getAuthorizationHeader()<ept id="4">&lt;/code&gt;</ept> method to contain the following code:</source>
            <target state="new">Still in the <bpt id="2">&lt;strong&gt;</bpt>MainActivity<ept id="2">&lt;/strong&gt;</ept> class, update the <bpt id="4">&lt;code&gt;</bpt>getAuthorizationHeader()<ept id="4">&lt;/code&gt;</ept> method to contain the following code:</target>
          </trans-unit>
          <trans-unit id="130" xml:space="preserve">
            <source>Add the following <bpt id="2">&lt;code&gt;</bpt>import<ept id="2">&lt;/code&gt;</ept> statements at the top of the <bpt id="4">&lt;strong&gt;</bpt>MainActivity<ept id="4">&lt;/strong&gt;</ept> file:</source>
            <target state="new">Add the following <bpt id="2">&lt;code&gt;</bpt>import<ept id="2">&lt;/code&gt;</ept> statements at the top of the <bpt id="4">&lt;strong&gt;</bpt>MainActivity<ept id="4">&lt;/strong&gt;</ept> file:</target>
          </trans-unit>
          <trans-unit id="131" xml:space="preserve">
            <source>Now we will change the handler that is called when the notification is received.</source>
            <target state="new">Now we will change the handler that is called when the notification is received.</target>
          </trans-unit>
          <trans-unit id="132" xml:space="preserve">
            <source>In the <bpt id="2">&lt;strong&gt;</bpt>MyHandler<ept id="2">&lt;/strong&gt;</ept> class change the <bpt id="4">&lt;code&gt;</bpt>OnReceive()<ept id="4">&lt;/code&gt;</ept> method to contain:</source>
            <target state="new">In the <bpt id="2">&lt;strong&gt;</bpt>MyHandler<ept id="2">&lt;/strong&gt;</ept> class change the <bpt id="4">&lt;code&gt;</bpt>OnReceive()<ept id="4">&lt;/code&gt;</ept> method to contain:</target>
          </trans-unit>
          <trans-unit id="133" xml:space="preserve">
            <source>Then add the <bpt id="2">&lt;code&gt;</bpt>retrieveNotification()<ept id="2">&lt;/code&gt;</ept> method, replacing the placeholder <bpt id="4">&lt;code&gt;</bpt>{back-end endpoint}<ept id="4">&lt;/code&gt;</ept> with the back-end endpoint obtained while deploying your back-end:</source>
            <target state="new">Then add the <bpt id="2">&lt;code&gt;</bpt>retrieveNotification()<ept id="2">&lt;/code&gt;</ept> method, replacing the placeholder <bpt id="4">&lt;code&gt;</bpt>{back-end endpoint}<ept id="4">&lt;/code&gt;</ept> with the back-end endpoint obtained while deploying your back-end:</target>
          </trans-unit>
          <trans-unit id="134" xml:space="preserve">
            <source>This method calls your app back-end to retrieve the notification content using the credentials stored in the shared preferences and displays it as a normal notification.</source>
            <target state="new">This method calls your app back-end to retrieve the notification content using the credentials stored in the shared preferences and displays it as a normal notification.</target>
          </trans-unit>
          <trans-unit id="135" xml:space="preserve">
            <source>The notification looks to the app user exactly like any other push notification.</source>
            <target state="new">The notification looks to the app user exactly like any other push notification.</target>
          </trans-unit>
          <trans-unit id="136" xml:space="preserve">
            <source>Note that it is preferable to handle the cases of missing authentication header property or rejection by the back-end.</source>
            <target state="new">Note that it is preferable to handle the cases of missing authentication header property or rejection by the back-end.</target>
          </trans-unit>
          <trans-unit id="137" xml:space="preserve">
            <source>The specific handling of these cases depend mostly on your target user experience.</source>
            <target state="new">The specific handling of these cases depend mostly on your target user experience.</target>
          </trans-unit>
          <trans-unit id="138" xml:space="preserve">
            <source>One option is to display a notification with a generic prompt for the user to authenticate to retrieve the actual notification.</source>
            <target state="new">One option is to display a notification with a generic prompt for the user to authenticate to retrieve the actual notification.</target>
          </trans-unit>
          <trans-unit id="139" xml:space="preserve">
            <source>Run the Application</source>
            <target state="new">Run the Application</target>
          </trans-unit>
          <trans-unit id="140" xml:space="preserve">
            <source>To run the application, do the following:</source>
            <target state="new">To run the application, do the following:</target>
          </trans-unit>
          <trans-unit id="141" xml:space="preserve">
            <source>Make sure <bpt id="2">&lt;strong&gt;</bpt>AppBackend<ept id="2">&lt;/strong&gt;</ept> is deployed in Azure.</source>
            <target state="new">Make sure <bpt id="2">&lt;strong&gt;</bpt>AppBackend<ept id="2">&lt;/strong&gt;</ept> is deployed in Azure.</target>
          </trans-unit>
          <trans-unit id="142" xml:space="preserve">
            <source>If using Visual Studio, run the <bpt id="2">&lt;strong&gt;</bpt>AppBackend<ept id="2">&lt;/strong&gt;</ept> Web API application.</source>
            <target state="new">If using Visual Studio, run the <bpt id="2">&lt;strong&gt;</bpt>AppBackend<ept id="2">&lt;/strong&gt;</ept> Web API application.</target>
          </trans-unit>
          <trans-unit id="143" xml:space="preserve">
            <source>An ASP.NET web page is displayed.</source>
            <target state="new">An ASP.NET web page is displayed.</target>
          </trans-unit>
          <trans-unit id="144" xml:space="preserve">
            <source>In Eclipse, run the app on a physical Android device or the emulator.</source>
            <target state="new">In Eclipse, run the app on a physical Android device or the emulator.</target>
          </trans-unit>
          <trans-unit id="145" xml:space="preserve">
            <source>In the Android app UI, enter a username and password.</source>
            <target state="new">In the Android app UI, enter a username and password.</target>
          </trans-unit>
          <trans-unit id="146" xml:space="preserve">
            <source>These can be any string, but they must be the same value.</source>
            <target state="new">These can be any string, but they must be the same value.</target>
          </trans-unit>
          <trans-unit id="147" xml:space="preserve">
            <source>In the Android app UI, click <bpt id="2">&lt;strong&gt;</bpt>Log in<ept id="2">&lt;/strong&gt;</ept>.</source>
            <target state="new">In the Android app UI, click <bpt id="2">&lt;strong&gt;</bpt>Log in<ept id="2">&lt;/strong&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="148" xml:space="preserve">
            <source>Then click <bpt id="2">&lt;strong&gt;</bpt>Send push<ept id="2">&lt;/strong&gt;</ept>.</source>
            <target state="new">Then click <bpt id="2">&lt;strong&gt;</bpt>Send push<ept id="2">&lt;/strong&gt;</ept>.</target>
          </trans-unit>
        </group>
      </group>
    </body>
  </file>
</xliff>