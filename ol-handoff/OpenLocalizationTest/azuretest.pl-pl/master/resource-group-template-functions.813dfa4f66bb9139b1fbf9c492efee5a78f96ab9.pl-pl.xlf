<?xml version="1.0" encoding="utf-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" source-language="en-us" target-language="pl-pl" original="2/20/2016 9:42:52 PM" tool-id="MarkdownTransformer" product-name="N/A" product-version="N/A" build-num="1">
    <header>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d53e843c980a21b3e301522fc3fae6885024de1e</xliffext:olfilehash>
      <tool tool-id="MarkdownTransformer" tool-name="MarkdownToXliff" tool-version="1.0" tool-company="Microsoft" />
    </header>
    <body>
      <group extype="content">
        <group id="101">
          <trans-unit id="101" xml:space="preserve">
            <source>Azure Resource Manager Template Functions</source>
            <target state="new">Azure Resource Manager Template Functions</target>
          </trans-unit>
          <trans-unit id="102" xml:space="preserve">
            <source>Describes the functions to use in an Azure Resource Manager template to retrieve values, format strings and retrieve deployment information.</source>
            <target state="new">Describes the functions to use in an Azure Resource Manager template to retrieve values, format strings and retrieve deployment information.</target>
          </trans-unit>
          <trans-unit id="103" xml:space="preserve">
            <source>Azure Resource Manager Template Functions</source>
            <target state="new">Azure Resource Manager Template Functions</target>
          </trans-unit>
          <trans-unit id="104" xml:space="preserve">
            <source>This topic describes all of the functions you can use in an Azure Resource Manager template.</source>
            <target state="new">This topic describes all of the functions you can use in an Azure Resource Manager template.</target>
          </trans-unit>
          <trans-unit id="105" xml:space="preserve">
            <source>add</source>
            <target state="new">add</target>
          </trans-unit>
          <trans-unit id="106" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>add(operand1, operand2)<ept id="1">&lt;/strong&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>add(operand1, operand2)<ept id="1">&lt;/strong&gt;</ept></target>
          </trans-unit>
          <trans-unit id="107" xml:space="preserve">
            <source>Returns the sum of the two provided integers.</source>
            <target state="new">Returns the sum of the two provided integers.</target>
          </trans-unit>
          <trans-unit id="108" xml:space="preserve">
            <source>Parameter</source>
            <target state="new">Parameter</target>
          </trans-unit>
          <trans-unit id="109" xml:space="preserve">
            <source>Required</source>
            <target state="new">Required</target>
          </trans-unit>
          <trans-unit id="110" xml:space="preserve">
            <source>Description</source>
            <target state="new">Description</target>
          </trans-unit>
          <trans-unit id="111" xml:space="preserve">
            <source>operand1</source>
            <target state="new">operand1</target>
          </trans-unit>
          <trans-unit id="112" xml:space="preserve">
            <source>Yes</source>
            <target state="new">Yes</target>
          </trans-unit>
          <trans-unit id="113" xml:space="preserve">
            <source>First operand to use.</source>
            <target state="new">First operand to use.</target>
          </trans-unit>
          <trans-unit id="114" xml:space="preserve">
            <source>operand2</source>
            <target state="new">operand2</target>
          </trans-unit>
          <trans-unit id="115" xml:space="preserve">
            <source>Yes</source>
            <target state="new">Yes</target>
          </trans-unit>
          <trans-unit id="116" xml:space="preserve">
            <source>Second operand to use.</source>
            <target state="new">Second operand to use.</target>
          </trans-unit>
          <trans-unit id="117" xml:space="preserve">
            <source>base64</source>
            <target state="new">base64</target>
          </trans-unit>
          <trans-unit id="118" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>base64 (inputString)<ept id="1">&lt;/strong&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>base64 (inputString)<ept id="1">&lt;/strong&gt;</ept></target>
          </trans-unit>
          <trans-unit id="119" xml:space="preserve">
            <source>Returns the base64 representation of the input string.</source>
            <target state="new">Returns the base64 representation of the input string.</target>
          </trans-unit>
          <trans-unit id="120" xml:space="preserve">
            <source>Parameter</source>
            <target state="new">Parameter</target>
          </trans-unit>
          <trans-unit id="121" xml:space="preserve">
            <source>Required</source>
            <target state="new">Required</target>
          </trans-unit>
          <trans-unit id="122" xml:space="preserve">
            <source>Description</source>
            <target state="new">Description</target>
          </trans-unit>
          <trans-unit id="123" xml:space="preserve">
            <source>inputString</source>
            <target state="new">inputString</target>
          </trans-unit>
          <trans-unit id="124" xml:space="preserve">
            <source>Yes</source>
            <target state="new">Yes</target>
          </trans-unit>
          <trans-unit id="125" xml:space="preserve">
            <source>The string value to return as a base64 representation.</source>
            <target state="new">The string value to return as a base64 representation.</target>
          </trans-unit>
          <trans-unit id="126" xml:space="preserve">
            <source>The following example show how to use the base64 function.</source>
            <target state="new">The following example show how to use the base64 function.</target>
          </trans-unit>
          <trans-unit id="127" xml:space="preserve">
            <source>concat</source>
            <target state="new">concat</target>
          </trans-unit>
          <trans-unit id="128" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>concat (arg1, arg2, arg3, ...)<ept id="1">&lt;/strong&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>concat (arg1, arg2, arg3, ...)<ept id="1">&lt;/strong&gt;</ept></target>
          </trans-unit>
          <trans-unit id="129" xml:space="preserve">
            <source>Combines multiple string values and returns the resulting string value.</source>
            <target state="new">Combines multiple string values and returns the resulting string value.</target>
          </trans-unit>
          <trans-unit id="130" xml:space="preserve">
            <source>This function can take any number of arguments.</source>
            <target state="new">This function can take any number of arguments.</target>
          </trans-unit>
          <trans-unit id="131" xml:space="preserve">
            <source>The following example shows how to combine multiple values to return a value.</source>
            <target state="new">The following example shows how to combine multiple values to return a value.</target>
          </trans-unit>
          <trans-unit id="132" xml:space="preserve">
            <source>copyIndex</source>
            <target state="new">copyIndex</target>
          </trans-unit>
          <trans-unit id="133" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>copyIndex(offset)<ept id="1">&lt;/strong&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>copyIndex(offset)<ept id="1">&lt;/strong&gt;</ept></target>
          </trans-unit>
          <trans-unit id="134" xml:space="preserve">
            <source>Returns the current index of an iteration loop.</source>
            <target state="new">Returns the current index of an iteration loop.</target>
          </trans-unit>
          <trans-unit id="135" xml:space="preserve">
            <source>For examples of using this function, see <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Create multiple instances of resources in Azure Resource Manager<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">For examples of using this function, see <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Create multiple instances of resources in Azure Resource Manager<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="136" xml:space="preserve">
            <source>deployment</source>
            <target state="new">deployment</target>
          </trans-unit>
          <trans-unit id="137" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>deployment()<ept id="1">&lt;/strong&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>deployment()<ept id="1">&lt;/strong&gt;</ept></target>
          </trans-unit>
          <trans-unit id="138" xml:space="preserve">
            <source>Returns information about the current deployment operation.</source>
            <target state="new">Returns information about the current deployment operation.</target>
          </trans-unit>
          <trans-unit id="139" xml:space="preserve">
            <source>The information about the deployment is returned as an object with the following properties:</source>
            <target state="new">The information about the deployment is returned as an object with the following properties:</target>
          </trans-unit>
          <trans-unit id="140" xml:space="preserve">
            <source>The following example shows how to return deployment information in the outputs section.</source>
            <target state="new">The following example shows how to return deployment information in the outputs section.</target>
          </trans-unit>
          <trans-unit id="141" xml:space="preserve">
            <source>div</source>
            <target state="new">div</target>
          </trans-unit>
          <trans-unit id="142" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>div(operand1, operand2)<ept id="1">&lt;/strong&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>div(operand1, operand2)<ept id="1">&lt;/strong&gt;</ept></target>
          </trans-unit>
          <trans-unit id="143" xml:space="preserve">
            <source>Returns the integer division of the two provided integers.</source>
            <target state="new">Returns the integer division of the two provided integers.</target>
          </trans-unit>
          <trans-unit id="144" xml:space="preserve">
            <source>Parameter</source>
            <target state="new">Parameter</target>
          </trans-unit>
          <trans-unit id="145" xml:space="preserve">
            <source>Required</source>
            <target state="new">Required</target>
          </trans-unit>
          <trans-unit id="146" xml:space="preserve">
            <source>Description</source>
            <target state="new">Description</target>
          </trans-unit>
          <trans-unit id="147" xml:space="preserve">
            <source>operand1</source>
            <target state="new">operand1</target>
          </trans-unit>
          <trans-unit id="148" xml:space="preserve">
            <source>Yes</source>
            <target state="new">Yes</target>
          </trans-unit>
          <trans-unit id="149" xml:space="preserve">
            <source>Number being divided.</source>
            <target state="new">Number being divided.</target>
          </trans-unit>
          <trans-unit id="150" xml:space="preserve">
            <source>operand2</source>
            <target state="new">operand2</target>
          </trans-unit>
          <trans-unit id="151" xml:space="preserve">
            <source>Yes</source>
            <target state="new">Yes</target>
          </trans-unit>
          <trans-unit id="152" xml:space="preserve">
            <source>Number which is used to divide, has to be different from 0.</source>
            <target state="new">Number which is used to divide, has to be different from 0.</target>
          </trans-unit>
          <trans-unit id="153" xml:space="preserve">
            <source>length</source>
            <target state="new">length</target>
          </trans-unit>
          <trans-unit id="154" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>length(array)<ept id="1">&lt;/strong&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>length(array)<ept id="1">&lt;/strong&gt;</ept></target>
          </trans-unit>
          <trans-unit id="155" xml:space="preserve">
            <source>Returns the number of elements in an array.</source>
            <target state="new">Returns the number of elements in an array.</target>
          </trans-unit>
          <trans-unit id="156" xml:space="preserve">
            <source>Typically, used to specify the number of iterations when creating resources.</source>
            <target state="new">Typically, used to specify the number of iterations when creating resources.</target>
          </trans-unit>
          <trans-unit id="157" xml:space="preserve">
            <source>For an example of using this function, see <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Create multiple instances of resources in Azure Resource Manager<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">For an example of using this function, see <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Create multiple instances of resources in Azure Resource Manager<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="158" xml:space="preserve">
            <source>listKeys</source>
            <target state="new">listKeys</target>
          </trans-unit>
          <trans-unit id="159" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>listKeys (resourceName or resourceIdentifier, [apiVersion])<ept id="1">&lt;/strong&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>listKeys (resourceName or resourceIdentifier, [apiVersion])<ept id="1">&lt;/strong&gt;</ept></target>
          </trans-unit>
          <trans-unit id="160" xml:space="preserve">
            <source>Returns the keys of a storage account.</source>
            <target state="new">Returns the keys of a storage account.</target>
          </trans-unit>
          <trans-unit id="161" xml:space="preserve">
            <source>The resourceId can be specified by using the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>resourceId function<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> or by using the format <bpt id="4">&lt;strong&gt;</bpt>providerNamespace/resourceType/resourceName<ept id="4">&lt;/strong&gt;</ept>.</source>
            <target state="new">The resourceId can be specified by using the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>resourceId function<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> or by using the format <bpt id="4">&lt;strong&gt;</bpt>providerNamespace/resourceType/resourceName<ept id="4">&lt;/strong&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="162" xml:space="preserve">
            <source>You can use the function to get the primaryKey and secondaryKey.</source>
            <target state="new">You can use the function to get the primaryKey and secondaryKey.</target>
          </trans-unit>
          <trans-unit id="163" xml:space="preserve">
            <source>Parameter</source>
            <target state="new">Parameter</target>
          </trans-unit>
          <trans-unit id="164" xml:space="preserve">
            <source>Required</source>
            <target state="new">Required</target>
          </trans-unit>
          <trans-unit id="165" xml:space="preserve">
            <source>Description</source>
            <target state="new">Description</target>
          </trans-unit>
          <trans-unit id="166" xml:space="preserve">
            <source>resourceName or resourceIdentifier</source>
            <target state="new">resourceName or resourceIdentifier</target>
          </trans-unit>
          <trans-unit id="167" xml:space="preserve">
            <source>Yes</source>
            <target state="new">Yes</target>
          </trans-unit>
          <trans-unit id="168" xml:space="preserve">
            <source>Unique identifier of a storage account.</source>
            <target state="new">Unique identifier of a storage account.</target>
          </trans-unit>
          <trans-unit id="169" xml:space="preserve">
            <source>apiVersion</source>
            <target state="new">apiVersion</target>
          </trans-unit>
          <trans-unit id="170" xml:space="preserve">
            <source>Yes</source>
            <target state="new">Yes</target>
          </trans-unit>
          <trans-unit id="171" xml:space="preserve">
            <source>API version of resource runtime state.</source>
            <target state="new">API version of resource runtime state.</target>
          </trans-unit>
          <trans-unit id="172" xml:space="preserve">
            <source>The following example shows how to return the keys from a storage account in the outputs section.</source>
            <target state="new">The following example shows how to return the keys from a storage account in the outputs section.</target>
          </trans-unit>
          <trans-unit id="173" xml:space="preserve">
            <source>mod</source>
            <target state="new">mod</target>
          </trans-unit>
          <trans-unit id="174" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>mod(operand1, operand2)<ept id="1">&lt;/strong&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>mod(operand1, operand2)<ept id="1">&lt;/strong&gt;</ept></target>
          </trans-unit>
          <trans-unit id="175" xml:space="preserve">
            <source>Returns the remainder of the integer division using the two provided integers.</source>
            <target state="new">Returns the remainder of the integer division using the two provided integers.</target>
          </trans-unit>
          <trans-unit id="176" xml:space="preserve">
            <source>Parameter</source>
            <target state="new">Parameter</target>
          </trans-unit>
          <trans-unit id="177" xml:space="preserve">
            <source>Required</source>
            <target state="new">Required</target>
          </trans-unit>
          <trans-unit id="178" xml:space="preserve">
            <source>Description</source>
            <target state="new">Description</target>
          </trans-unit>
          <trans-unit id="179" xml:space="preserve">
            <source>operand1</source>
            <target state="new">operand1</target>
          </trans-unit>
          <trans-unit id="180" xml:space="preserve">
            <source>Yes</source>
            <target state="new">Yes</target>
          </trans-unit>
          <trans-unit id="181" xml:space="preserve">
            <source>Number being divided.</source>
            <target state="new">Number being divided.</target>
          </trans-unit>
          <trans-unit id="182" xml:space="preserve">
            <source>operand2</source>
            <target state="new">operand2</target>
          </trans-unit>
          <trans-unit id="183" xml:space="preserve">
            <source>Yes</source>
            <target state="new">Yes</target>
          </trans-unit>
          <trans-unit id="184" xml:space="preserve">
            <source>Number which is used to divide, has to be different from 0.</source>
            <target state="new">Number which is used to divide, has to be different from 0.</target>
          </trans-unit>
          <trans-unit id="185" xml:space="preserve">
            <source>mul</source>
            <target state="new">mul</target>
          </trans-unit>
          <trans-unit id="186" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>mul(operand1, operand2)<ept id="1">&lt;/strong&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>mul(operand1, operand2)<ept id="1">&lt;/strong&gt;</ept></target>
          </trans-unit>
          <trans-unit id="187" xml:space="preserve">
            <source>Returns the multiplication of the two provided integers.</source>
            <target state="new">Returns the multiplication of the two provided integers.</target>
          </trans-unit>
          <trans-unit id="188" xml:space="preserve">
            <source>Parameter</source>
            <target state="new">Parameter</target>
          </trans-unit>
          <trans-unit id="189" xml:space="preserve">
            <source>Required</source>
            <target state="new">Required</target>
          </trans-unit>
          <trans-unit id="190" xml:space="preserve">
            <source>Description</source>
            <target state="new">Description</target>
          </trans-unit>
          <trans-unit id="191" xml:space="preserve">
            <source>operand1</source>
            <target state="new">operand1</target>
          </trans-unit>
          <trans-unit id="192" xml:space="preserve">
            <source>Yes</source>
            <target state="new">Yes</target>
          </trans-unit>
          <trans-unit id="193" xml:space="preserve">
            <source>First operand to use.</source>
            <target state="new">First operand to use.</target>
          </trans-unit>
          <trans-unit id="194" xml:space="preserve">
            <source>operand2</source>
            <target state="new">operand2</target>
          </trans-unit>
          <trans-unit id="195" xml:space="preserve">
            <source>Yes</source>
            <target state="new">Yes</target>
          </trans-unit>
          <trans-unit id="196" xml:space="preserve">
            <source>Second operand to use.</source>
            <target state="new">Second operand to use.</target>
          </trans-unit>
          <trans-unit id="197" xml:space="preserve">
            <source>padLeft</source>
            <target state="new">padLeft</target>
          </trans-unit>
          <trans-unit id="198" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>padLeft(stringToPad, totalLength, paddingCharacter)<ept id="1">&lt;/strong&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>padLeft(stringToPad, totalLength, paddingCharacter)<ept id="1">&lt;/strong&gt;</ept></target>
          </trans-unit>
          <trans-unit id="199" xml:space="preserve">
            <source>Returns a right-aligned string by adding characters to the left until reaching the total specified length.</source>
            <target state="new">Returns a right-aligned string by adding characters to the left until reaching the total specified length.</target>
          </trans-unit>
          <trans-unit id="200" xml:space="preserve">
            <source>Parameter</source>
            <target state="new">Parameter</target>
          </trans-unit>
          <trans-unit id="201" xml:space="preserve">
            <source>Required</source>
            <target state="new">Required</target>
          </trans-unit>
          <trans-unit id="202" xml:space="preserve">
            <source>Description</source>
            <target state="new">Description</target>
          </trans-unit>
          <trans-unit id="203" xml:space="preserve">
            <source>stringToPad</source>
            <target state="new">stringToPad</target>
          </trans-unit>
          <trans-unit id="204" xml:space="preserve">
            <source>Yes</source>
            <target state="new">Yes</target>
          </trans-unit>
          <trans-unit id="205" xml:space="preserve">
            <source>The string to right-align.</source>
            <target state="new">The string to right-align.</target>
          </trans-unit>
          <trans-unit id="206" xml:space="preserve">
            <source>totalLength</source>
            <target state="new">totalLength</target>
          </trans-unit>
          <trans-unit id="207" xml:space="preserve">
            <source>Yes</source>
            <target state="new">Yes</target>
          </trans-unit>
          <trans-unit id="208" xml:space="preserve">
            <source>The total number of characters in the returned string.</source>
            <target state="new">The total number of characters in the returned string.</target>
          </trans-unit>
          <trans-unit id="209" xml:space="preserve">
            <source>paddingCharacter</source>
            <target state="new">paddingCharacter</target>
          </trans-unit>
          <trans-unit id="210" xml:space="preserve">
            <source>Yes</source>
            <target state="new">Yes</target>
          </trans-unit>
          <trans-unit id="211" xml:space="preserve">
            <source>The character to use for left-padding until the total length is reached.</source>
            <target state="new">The character to use for left-padding until the total length is reached.</target>
          </trans-unit>
          <trans-unit id="212" xml:space="preserve">
            <source>The following example shows how to pad the user-provided parameter value by adding the zero character until the string reaches 10 characters.</source>
            <target state="new">The following example shows how to pad the user-provided parameter value by adding the zero character until the string reaches 10 characters.</target>
          </trans-unit>
          <trans-unit id="213" xml:space="preserve">
            <source>If the original parameter value is longer than 10 characters, no characters are added.</source>
            <target state="new">If the original parameter value is longer than 10 characters, no characters are added.</target>
          </trans-unit>
          <trans-unit id="214" xml:space="preserve">
            <source>parameters</source>
            <target state="new">parameters</target>
          </trans-unit>
          <trans-unit id="215" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>parameters (parameterName)<ept id="1">&lt;/strong&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>parameters (parameterName)<ept id="1">&lt;/strong&gt;</ept></target>
          </trans-unit>
          <trans-unit id="216" xml:space="preserve">
            <source>Returns a parameter value.</source>
            <target state="new">Returns a parameter value.</target>
          </trans-unit>
          <trans-unit id="217" xml:space="preserve">
            <source>The specified parameter name must be defined in the parameters section of the template.</source>
            <target state="new">The specified parameter name must be defined in the parameters section of the template.</target>
          </trans-unit>
          <trans-unit id="218" xml:space="preserve">
            <source>Parameter</source>
            <target state="new">Parameter</target>
          </trans-unit>
          <trans-unit id="219" xml:space="preserve">
            <source>Required</source>
            <target state="new">Required</target>
          </trans-unit>
          <trans-unit id="220" xml:space="preserve">
            <source>Description</source>
            <target state="new">Description</target>
          </trans-unit>
          <trans-unit id="221" xml:space="preserve">
            <source>parameterName</source>
            <target state="new">parameterName</target>
          </trans-unit>
          <trans-unit id="222" xml:space="preserve">
            <source>Yes</source>
            <target state="new">Yes</target>
          </trans-unit>
          <trans-unit id="223" xml:space="preserve">
            <source>The name of the parameter to return.</source>
            <target state="new">The name of the parameter to return.</target>
          </trans-unit>
          <trans-unit id="224" xml:space="preserve">
            <source>The following example shows a simplified use of the parameters function.</source>
            <target state="new">The following example shows a simplified use of the parameters function.</target>
          </trans-unit>
          <trans-unit id="225" xml:space="preserve">
            <source>provider</source>
            <target state="new">provider</target>
          </trans-unit>
          <trans-unit id="226" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>provider (providerNamespace, [resourceType])<ept id="1">&lt;/strong&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>provider (providerNamespace, [resourceType])<ept id="1">&lt;/strong&gt;</ept></target>
          </trans-unit>
          <trans-unit id="227" xml:space="preserve">
            <source>Return information about a resource provider and its supported resource types.</source>
            <target state="new">Return information about a resource provider and its supported resource types.</target>
          </trans-unit>
          <trans-unit id="228" xml:space="preserve">
            <source>If not type is provided, all of the supported types are returned.</source>
            <target state="new">If not type is provided, all of the supported types are returned.</target>
          </trans-unit>
          <trans-unit id="229" xml:space="preserve">
            <source>Parameter</source>
            <target state="new">Parameter</target>
          </trans-unit>
          <trans-unit id="230" xml:space="preserve">
            <source>Required</source>
            <target state="new">Required</target>
          </trans-unit>
          <trans-unit id="231" xml:space="preserve">
            <source>Description</source>
            <target state="new">Description</target>
          </trans-unit>
          <trans-unit id="232" xml:space="preserve">
            <source>providerNamespace</source>
            <target state="new">providerNamespace</target>
          </trans-unit>
          <trans-unit id="233" xml:space="preserve">
            <source>Yes</source>
            <target state="new">Yes</target>
          </trans-unit>
          <trans-unit id="234" xml:space="preserve">
            <source>Namespace of the provider</source>
            <target state="new">Namespace of the provider</target>
          </trans-unit>
          <trans-unit id="235" xml:space="preserve">
            <source>resourceType</source>
            <target state="new">resourceType</target>
          </trans-unit>
          <trans-unit id="236" xml:space="preserve">
            <source>No</source>
            <target state="new">No</target>
          </trans-unit>
          <trans-unit id="237" xml:space="preserve">
            <source>The type of resource within the specified namespace.</source>
            <target state="new">The type of resource within the specified namespace.</target>
          </trans-unit>
          <trans-unit id="238" xml:space="preserve">
            <source>Each supported type is returned in the following format:</source>
            <target state="new">Each supported type is returned in the following format:</target>
          </trans-unit>
          <trans-unit id="239" xml:space="preserve">
            <source>The following example shows how to use the provider function:</source>
            <target state="new">The following example shows how to use the provider function:</target>
          </trans-unit>
          <trans-unit id="240" xml:space="preserve">
            <source>reference</source>
            <target state="new">reference</target>
          </trans-unit>
          <trans-unit id="241" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>reference (resourceName or resourceIdentifier, [apiVersion])<ept id="1">&lt;/strong&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>reference (resourceName or resourceIdentifier, [apiVersion])<ept id="1">&lt;/strong&gt;</ept></target>
          </trans-unit>
          <trans-unit id="242" xml:space="preserve">
            <source>Enables an expression to derive its value from another resource's runtime state.</source>
            <target state="new">Enables an expression to derive its value from another resource's runtime state.</target>
          </trans-unit>
          <trans-unit id="243" xml:space="preserve">
            <source>Parameter</source>
            <target state="new">Parameter</target>
          </trans-unit>
          <trans-unit id="244" xml:space="preserve">
            <source>Required</source>
            <target state="new">Required</target>
          </trans-unit>
          <trans-unit id="245" xml:space="preserve">
            <source>Description</source>
            <target state="new">Description</target>
          </trans-unit>
          <trans-unit id="246" xml:space="preserve">
            <source>resourceName or resourceIdentifier</source>
            <target state="new">resourceName or resourceIdentifier</target>
          </trans-unit>
          <trans-unit id="247" xml:space="preserve">
            <source>Yes</source>
            <target state="new">Yes</target>
          </trans-unit>
          <trans-unit id="248" xml:space="preserve">
            <source>Name or the unique identifier of a resource.</source>
            <target state="new">Name or the unique identifier of a resource.</target>
          </trans-unit>
          <trans-unit id="249" xml:space="preserve">
            <source>apiVersion</source>
            <target state="new">apiVersion</target>
          </trans-unit>
          <trans-unit id="250" xml:space="preserve">
            <source>No</source>
            <target state="new">No</target>
          </trans-unit>
          <trans-unit id="251" xml:space="preserve">
            <source>API version of resource runtime state.</source>
            <target state="new">API version of resource runtime state.</target>
          </trans-unit>
          <trans-unit id="252" xml:space="preserve">
            <source>Parameter should be used if resource is not provisioned within same template.</source>
            <target state="new">Parameter should be used if resource is not provisioned within same template.</target>
          </trans-unit>
          <trans-unit id="253" xml:space="preserve">
            <source>The <bpt id="2">&lt;strong&gt;</bpt>reference<ept id="2">&lt;/strong&gt;</ept> function derives its value from a runtime state, and therefore cannot be used in the variables section.</source>
            <target state="new">The <bpt id="2">&lt;strong&gt;</bpt>reference<ept id="2">&lt;/strong&gt;</ept> function derives its value from a runtime state, and therefore cannot be used in the variables section.</target>
          </trans-unit>
          <trans-unit id="254" xml:space="preserve">
            <source>It can be used in outputs section of a template.</source>
            <target state="new">It can be used in outputs section of a template.</target>
          </trans-unit>
          <trans-unit id="255" xml:space="preserve">
            <source>By using the reference expression, you implicitly declare that one resource depends on another resource if the referenced resource is provisioned within same template.</source>
            <target state="new">By using the reference expression, you implicitly declare that one resource depends on another resource if the referenced resource is provisioned within same template.</target>
          </trans-unit>
          <trans-unit id="256" xml:space="preserve">
            <source>You do not need to also use the <bpt id="2">&lt;strong&gt;</bpt>dependsOn<ept id="2">&lt;/strong&gt;</ept> property.</source>
            <target state="new">You do not need to also use the <bpt id="2">&lt;strong&gt;</bpt>dependsOn<ept id="2">&lt;/strong&gt;</ept> property.</target>
          </trans-unit>
          <trans-unit id="257" xml:space="preserve">
            <source>The expression is not evaluated until the referenced resource has completed deployment.</source>
            <target state="new">The expression is not evaluated until the referenced resource has completed deployment.</target>
          </trans-unit>
          <trans-unit id="258" xml:space="preserve">
            <source>replace</source>
            <target state="new">replace</target>
          </trans-unit>
          <trans-unit id="259" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>replace(originalString, oldCharacter, newCharacter)<ept id="1">&lt;/strong&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>replace(originalString, oldCharacter, newCharacter)<ept id="1">&lt;/strong&gt;</ept></target>
          </trans-unit>
          <trans-unit id="260" xml:space="preserve">
            <source>Returns a new string with all instances of one character in the specified string replaced by another character.</source>
            <target state="new">Returns a new string with all instances of one character in the specified string replaced by another character.</target>
          </trans-unit>
          <trans-unit id="261" xml:space="preserve">
            <source>Parameter</source>
            <target state="new">Parameter</target>
          </trans-unit>
          <trans-unit id="262" xml:space="preserve">
            <source>Required</source>
            <target state="new">Required</target>
          </trans-unit>
          <trans-unit id="263" xml:space="preserve">
            <source>Description</source>
            <target state="new">Description</target>
          </trans-unit>
          <trans-unit id="264" xml:space="preserve">
            <source>originalString</source>
            <target state="new">originalString</target>
          </trans-unit>
          <trans-unit id="265" xml:space="preserve">
            <source>Yes</source>
            <target state="new">Yes</target>
          </trans-unit>
          <trans-unit id="266" xml:space="preserve">
            <source>The string that will have all instances of one character replaced by another character.</source>
            <target state="new">The string that will have all instances of one character replaced by another character.</target>
          </trans-unit>
          <trans-unit id="267" xml:space="preserve">
            <source>oldCharacter</source>
            <target state="new">oldCharacter</target>
          </trans-unit>
          <trans-unit id="268" xml:space="preserve">
            <source>Yes</source>
            <target state="new">Yes</target>
          </trans-unit>
          <trans-unit id="269" xml:space="preserve">
            <source>The character to be removed from the original string.</source>
            <target state="new">The character to be removed from the original string.</target>
          </trans-unit>
          <trans-unit id="270" xml:space="preserve">
            <source>newCharacter</source>
            <target state="new">newCharacter</target>
          </trans-unit>
          <trans-unit id="271" xml:space="preserve">
            <source>Yes</source>
            <target state="new">Yes</target>
          </trans-unit>
          <trans-unit id="272" xml:space="preserve">
            <source>The character to add in place of the removed character.</source>
            <target state="new">The character to add in place of the removed character.</target>
          </trans-unit>
          <trans-unit id="273" xml:space="preserve">
            <source>The following example shows how to remove all dashes from the user-provided string.</source>
            <target state="new">The following example shows how to remove all dashes from the user-provided string.</target>
          </trans-unit>
          <trans-unit id="274" xml:space="preserve">
            <source>resourceGroup</source>
            <target state="new">resourceGroup</target>
          </trans-unit>
          <trans-unit id="275" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>resourceGroup()<ept id="1">&lt;/strong&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>resourceGroup()<ept id="1">&lt;/strong&gt;</ept></target>
          </trans-unit>
          <trans-unit id="276" xml:space="preserve">
            <source>Returns a structured object that represents the current resource group.</source>
            <target state="new">Returns a structured object that represents the current resource group.</target>
          </trans-unit>
          <trans-unit id="277" xml:space="preserve">
            <source>The object will be in the following format:</source>
            <target state="new">The object will be in the following format:</target>
          </trans-unit>
          <trans-unit id="278" xml:space="preserve">
            <source>The following example uses the resource group location to assign the location for a web site.</source>
            <target state="new">The following example uses the resource group location to assign the location for a web site.</target>
          </trans-unit>
          <trans-unit id="279" xml:space="preserve">
            <source>resourceId</source>
            <target state="new">resourceId</target>
          </trans-unit>
          <trans-unit id="280" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>resourceId ([resourceGroupName], resourceType, resourceName1, [resourceName2]...)<ept id="1">&lt;/strong&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>resourceId ([resourceGroupName], resourceType, resourceName1, [resourceName2]...)<ept id="1">&lt;/strong&gt;</ept></target>
          </trans-unit>
          <trans-unit id="281" xml:space="preserve">
            <source>Returns the unique identifier of a resource.</source>
            <target state="new">Returns the unique identifier of a resource.</target>
          </trans-unit>
          <trans-unit id="282" xml:space="preserve">
            <source>You use this function when the resource name is ambiguous or not provisioned within the same template.</source>
            <target state="new">You use this function when the resource name is ambiguous or not provisioned within the same template.</target>
          </trans-unit>
          <trans-unit id="283" xml:space="preserve">
            <source>The identifier is returned in the following format:</source>
            <target state="new">The identifier is returned in the following format:</target>
          </trans-unit>
          <trans-unit id="284" xml:space="preserve">
            <source>Parameter</source>
            <target state="new">Parameter</target>
          </trans-unit>
          <trans-unit id="285" xml:space="preserve">
            <source>Required</source>
            <target state="new">Required</target>
          </trans-unit>
          <trans-unit id="286" xml:space="preserve">
            <source>Description</source>
            <target state="new">Description</target>
          </trans-unit>
          <trans-unit id="287" xml:space="preserve">
            <source>resourceGroupName</source>
            <target state="new">resourceGroupName</target>
          </trans-unit>
          <trans-unit id="288" xml:space="preserve">
            <source>No</source>
            <target state="new">No</target>
          </trans-unit>
          <trans-unit id="289" xml:space="preserve">
            <source>Optional resource group name.</source>
            <target state="new">Optional resource group name.</target>
          </trans-unit>
          <trans-unit id="290" xml:space="preserve">
            <source>Default value is current resource group.</source>
            <target state="new">Default value is current resource group.</target>
          </trans-unit>
          <trans-unit id="291" xml:space="preserve">
            <source>Specify this value when you retrieving a resource in another resource group.</source>
            <target state="new">Specify this value when you retrieving a resource in another resource group.</target>
          </trans-unit>
          <trans-unit id="292" xml:space="preserve">
            <source>resourceType</source>
            <target state="new">resourceType</target>
          </trans-unit>
          <trans-unit id="293" xml:space="preserve">
            <source>Yes</source>
            <target state="new">Yes</target>
          </trans-unit>
          <trans-unit id="294" xml:space="preserve">
            <source>Type of resource including resource provider namespace.</source>
            <target state="new">Type of resource including resource provider namespace.</target>
          </trans-unit>
          <trans-unit id="295" xml:space="preserve">
            <source>resourceName1</source>
            <target state="new">resourceName1</target>
          </trans-unit>
          <trans-unit id="296" xml:space="preserve">
            <source>Yes</source>
            <target state="new">Yes</target>
          </trans-unit>
          <trans-unit id="297" xml:space="preserve">
            <source>Name of resource.</source>
            <target state="new">Name of resource.</target>
          </trans-unit>
          <trans-unit id="298" xml:space="preserve">
            <source>resourceName2</source>
            <target state="new">resourceName2</target>
          </trans-unit>
          <trans-unit id="299" xml:space="preserve">
            <source>No</source>
            <target state="new">No</target>
          </trans-unit>
          <trans-unit id="300" xml:space="preserve">
            <source>Next resource name segment if resource is nested.</source>
            <target state="new">Next resource name segment if resource is nested.</target>
          </trans-unit>
          <trans-unit id="301" xml:space="preserve">
            <source>The following example shows how to retrieve the resource ids for a web site and a database.</source>
            <target state="new">The following example shows how to retrieve the resource ids for a web site and a database.</target>
          </trans-unit>
          <trans-unit id="302" xml:space="preserve">
            <source>The web site exists in a resource group named <bpt id="2">&lt;strong&gt;</bpt>myWebsitesGroup<ept id="2">&lt;/strong&gt;</ept> and the database exists in the current resource group for this template.</source>
            <target state="new">The web site exists in a resource group named <bpt id="2">&lt;strong&gt;</bpt>myWebsitesGroup<ept id="2">&lt;/strong&gt;</ept> and the database exists in the current resource group for this template.</target>
          </trans-unit>
          <trans-unit id="303" xml:space="preserve">
            <source>Often, you need to use this function when using a storage account or virtual network in an alternate resource group.</source>
            <target state="new">Often, you need to use this function when using a storage account or virtual network in an alternate resource group.</target>
          </trans-unit>
          <trans-unit id="304" xml:space="preserve">
            <source>The storage account or virtual network may be used across multiple resource groups; therefore, you do not want to delete them when deleting a single resource group.</source>
            <target state="new">The storage account or virtual network may be used across multiple resource groups; therefore, you do not want to delete them when deleting a single resource group.</target>
          </trans-unit>
          <trans-unit id="305" xml:space="preserve">
            <source>The following example shows how a resource from an external resource group can easily be used:</source>
            <target state="new">The following example shows how a resource from an external resource group can easily be used:</target>
          </trans-unit>
          <trans-unit id="306" xml:space="preserve">
            <source>split</source>
            <target state="new">split</target>
          </trans-unit>
          <trans-unit id="307" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>split(inputString, delimiter)<ept id="1">&lt;/strong&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>split(inputString, delimiter)<ept id="1">&lt;/strong&gt;</ept></target>
          </trans-unit>
          <trans-unit id="308" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>split(inputString, [delimiters])<ept id="1">&lt;/strong&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>split(inputString, [delimiters])<ept id="1">&lt;/strong&gt;</ept></target>
          </trans-unit>
          <trans-unit id="309" xml:space="preserve">
            <source>Returns an array of strings that contains the substrings of the input string that are delimited by the sent delimiters.</source>
            <target state="new">Returns an array of strings that contains the substrings of the input string that are delimited by the sent delimiters.</target>
          </trans-unit>
          <trans-unit id="310" xml:space="preserve">
            <source>Parameter</source>
            <target state="new">Parameter</target>
          </trans-unit>
          <trans-unit id="311" xml:space="preserve">
            <source>Required</source>
            <target state="new">Required</target>
          </trans-unit>
          <trans-unit id="312" xml:space="preserve">
            <source>Description</source>
            <target state="new">Description</target>
          </trans-unit>
          <trans-unit id="313" xml:space="preserve">
            <source>inputString</source>
            <target state="new">inputString</target>
          </trans-unit>
          <trans-unit id="314" xml:space="preserve">
            <source>Yes</source>
            <target state="new">Yes</target>
          </trans-unit>
          <trans-unit id="315" xml:space="preserve">
            <source>The string to to be splitted.</source>
            <target state="new">The string to to be splitted.</target>
          </trans-unit>
          <trans-unit id="316" xml:space="preserve">
            <source>delimiter</source>
            <target state="new">delimiter</target>
          </trans-unit>
          <trans-unit id="317" xml:space="preserve">
            <source>Yes</source>
            <target state="new">Yes</target>
          </trans-unit>
          <trans-unit id="318" xml:space="preserve">
            <source>The delimiter to use, can be a single string or an array of strings.</source>
            <target state="new">The delimiter to use, can be a single string or an array of strings.</target>
          </trans-unit>
          <trans-unit id="319" xml:space="preserve">
            <source>The following example splits the input string with a comma.</source>
            <target state="new">The following example splits the input string with a comma.</target>
          </trans-unit>
          <trans-unit id="320" xml:space="preserve">
            <source>sub</source>
            <target state="new">sub</target>
          </trans-unit>
          <trans-unit id="321" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>sub(operand1, operand2)<ept id="1">&lt;/strong&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>sub(operand1, operand2)<ept id="1">&lt;/strong&gt;</ept></target>
          </trans-unit>
          <trans-unit id="322" xml:space="preserve">
            <source>Returns the subtraction of the two provided integers.</source>
            <target state="new">Returns the subtraction of the two provided integers.</target>
          </trans-unit>
          <trans-unit id="323" xml:space="preserve">
            <source>Parameter</source>
            <target state="new">Parameter</target>
          </trans-unit>
          <trans-unit id="324" xml:space="preserve">
            <source>Required</source>
            <target state="new">Required</target>
          </trans-unit>
          <trans-unit id="325" xml:space="preserve">
            <source>Description</source>
            <target state="new">Description</target>
          </trans-unit>
          <trans-unit id="326" xml:space="preserve">
            <source>operand1</source>
            <target state="new">operand1</target>
          </trans-unit>
          <trans-unit id="327" xml:space="preserve">
            <source>Yes</source>
            <target state="new">Yes</target>
          </trans-unit>
          <trans-unit id="328" xml:space="preserve">
            <source>Number which is to be subtracted from.</source>
            <target state="new">Number which is to be subtracted from.</target>
          </trans-unit>
          <trans-unit id="329" xml:space="preserve">
            <source>operand2</source>
            <target state="new">operand2</target>
          </trans-unit>
          <trans-unit id="330" xml:space="preserve">
            <source>Yes</source>
            <target state="new">Yes</target>
          </trans-unit>
          <trans-unit id="331" xml:space="preserve">
            <source>Number to be subtracted.</source>
            <target state="new">Number to be subtracted.</target>
          </trans-unit>
          <trans-unit id="332" xml:space="preserve">
            <source>subscription</source>
            <target state="new">subscription</target>
          </trans-unit>
          <trans-unit id="333" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>subscription()<ept id="1">&lt;/strong&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>subscription()<ept id="1">&lt;/strong&gt;</ept></target>
          </trans-unit>
          <trans-unit id="334" xml:space="preserve">
            <source>Returns details about the subscription in the following format.</source>
            <target state="new">Returns details about the subscription in the following format.</target>
          </trans-unit>
          <trans-unit id="335" xml:space="preserve">
            <source>The following example shows the subscription function called in the outputs section.</source>
            <target state="new">The following example shows the subscription function called in the outputs section.</target>
          </trans-unit>
          <trans-unit id="336" xml:space="preserve">
            <source>toLower</source>
            <target state="new">toLower</target>
          </trans-unit>
          <trans-unit id="337" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>toLower(stringToChange)<ept id="1">&lt;/strong&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>toLower(stringToChange)<ept id="1">&lt;/strong&gt;</ept></target>
          </trans-unit>
          <trans-unit id="338" xml:space="preserve">
            <source>Converts the specified string to lower case.</source>
            <target state="new">Converts the specified string to lower case.</target>
          </trans-unit>
          <trans-unit id="339" xml:space="preserve">
            <source>Parameter</source>
            <target state="new">Parameter</target>
          </trans-unit>
          <trans-unit id="340" xml:space="preserve">
            <source>Required</source>
            <target state="new">Required</target>
          </trans-unit>
          <trans-unit id="341" xml:space="preserve">
            <source>Description</source>
            <target state="new">Description</target>
          </trans-unit>
          <trans-unit id="342" xml:space="preserve">
            <source>stringToChange</source>
            <target state="new">stringToChange</target>
          </trans-unit>
          <trans-unit id="343" xml:space="preserve">
            <source>Yes</source>
            <target state="new">Yes</target>
          </trans-unit>
          <trans-unit id="344" xml:space="preserve">
            <source>The string to convert to lower case.</source>
            <target state="new">The string to convert to lower case.</target>
          </trans-unit>
          <trans-unit id="345" xml:space="preserve">
            <source>The following example converts the user-provided parameter value to lower case.</source>
            <target state="new">The following example converts the user-provided parameter value to lower case.</target>
          </trans-unit>
          <trans-unit id="346" xml:space="preserve">
            <source>toUpper</source>
            <target state="new">toUpper</target>
          </trans-unit>
          <trans-unit id="347" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>toUpper(stringToChange)<ept id="1">&lt;/strong&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>toUpper(stringToChange)<ept id="1">&lt;/strong&gt;</ept></target>
          </trans-unit>
          <trans-unit id="348" xml:space="preserve">
            <source>Converts the specified string to upper case.</source>
            <target state="new">Converts the specified string to upper case.</target>
          </trans-unit>
          <trans-unit id="349" xml:space="preserve">
            <source>Parameter</source>
            <target state="new">Parameter</target>
          </trans-unit>
          <trans-unit id="350" xml:space="preserve">
            <source>Required</source>
            <target state="new">Required</target>
          </trans-unit>
          <trans-unit id="351" xml:space="preserve">
            <source>Description</source>
            <target state="new">Description</target>
          </trans-unit>
          <trans-unit id="352" xml:space="preserve">
            <source>stringToChange</source>
            <target state="new">stringToChange</target>
          </trans-unit>
          <trans-unit id="353" xml:space="preserve">
            <source>Yes</source>
            <target state="new">Yes</target>
          </trans-unit>
          <trans-unit id="354" xml:space="preserve">
            <source>The string to convert to upper case.</source>
            <target state="new">The string to convert to upper case.</target>
          </trans-unit>
          <trans-unit id="355" xml:space="preserve">
            <source>The following example converts the user-provided parameter value to upper case.</source>
            <target state="new">The following example converts the user-provided parameter value to upper case.</target>
          </trans-unit>
          <trans-unit id="356" xml:space="preserve">
            <source>variables</source>
            <target state="new">variables</target>
          </trans-unit>
          <trans-unit id="357" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>variables (variableName)<ept id="1">&lt;/strong&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>variables (variableName)<ept id="1">&lt;/strong&gt;</ept></target>
          </trans-unit>
          <trans-unit id="358" xml:space="preserve">
            <source>Returns the value of variable.</source>
            <target state="new">Returns the value of variable.</target>
          </trans-unit>
          <trans-unit id="359" xml:space="preserve">
            <source>The specified variable name must be defined in the variables section of the template.</source>
            <target state="new">The specified variable name must be defined in the variables section of the template.</target>
          </trans-unit>
          <trans-unit id="360" xml:space="preserve">
            <source>Parameter</source>
            <target state="new">Parameter</target>
          </trans-unit>
          <trans-unit id="361" xml:space="preserve">
            <source>Required</source>
            <target state="new">Required</target>
          </trans-unit>
          <trans-unit id="362" xml:space="preserve">
            <source>Description</source>
            <target state="new">Description</target>
          </trans-unit>
          <trans-unit id="363" xml:space="preserve">
            <source>variable Name</source>
            <target state="new">variable Name</target>
          </trans-unit>
          <trans-unit id="364" xml:space="preserve">
            <source>Yes</source>
            <target state="new">Yes</target>
          </trans-unit>
          <trans-unit id="365" xml:space="preserve">
            <source>The name of the variable to return.</source>
            <target state="new">The name of the variable to return.</target>
          </trans-unit>
          <trans-unit id="366" xml:space="preserve">
            <source>Next Steps</source>
            <target state="new">Next Steps</target>
          </trans-unit>
          <trans-unit id="367" xml:space="preserve">
            <source>For a description of the sections in an Azure Resource Manager template, see <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Authoring Azure Resource Manager templates<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept></source>
            <target state="new">For a description of the sections in an Azure Resource Manager template, see <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Authoring Azure Resource Manager templates<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept></target>
          </trans-unit>
          <trans-unit id="368" xml:space="preserve">
            <source>To merge multiple templates, see <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Using linked templates with Azure Resource Manager<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept></source>
            <target state="new">To merge multiple templates, see <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Using linked templates with Azure Resource Manager<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept></target>
          </trans-unit>
          <trans-unit id="369" xml:space="preserve">
            <source>To iterate a specified number of times when creating a type of resource, see <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Create multiple instances of resources in Azure Resource Manager<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept></source>
            <target state="new">To iterate a specified number of times when creating a type of resource, see <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Create multiple instances of resources in Azure Resource Manager<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept></target>
          </trans-unit>
          <trans-unit id="370" xml:space="preserve">
            <source>To see how to deploy the template you have created, see <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Deploy an application with Azure Resource Manager template<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept></source>
            <target state="new">To see how to deploy the template you have created, see <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Deploy an application with Azure Resource Manager template<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept></target>
          </trans-unit>
        </group>
      </group>
    </body>
  </file>
</xliff>