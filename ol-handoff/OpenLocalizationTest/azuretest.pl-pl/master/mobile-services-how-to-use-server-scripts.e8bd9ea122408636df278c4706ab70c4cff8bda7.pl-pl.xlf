<?xml version="1.0" encoding="utf-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" source-language="en-us" target-language="pl-pl" original="2/20/2016 9:18:00 PM" tool-id="MarkdownTransformer" product-name="N/A" product-version="N/A" build-num="1">
    <header>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9af35adfc20c72b90b59c071bea93da9d368d96d</xliffext:olfilehash>
      <tool tool-id="MarkdownTransformer" tool-name="MarkdownToXliff" tool-version="1.0" tool-company="Microsoft" />
    </header>
    <body>
      <group extype="content">
        <group id="101">
          <trans-unit id="101" xml:space="preserve">
            <source>Work with a JavaScript backend mobile service</source>
            <target state="new">Work with a JavaScript backend mobile service</target>
          </trans-unit>
          <trans-unit id="102" xml:space="preserve">
            <source>Provides examples on how to define, register, and use server scripts in Azure Mobile Services.</source>
            <target state="new">Provides examples on how to define, register, and use server scripts in Azure Mobile Services.</target>
          </trans-unit>
          <trans-unit id="103" xml:space="preserve">
            <source>Work with a JavaScript backend mobile service</source>
            <target state="new">Work with a JavaScript backend mobile service</target>
          </trans-unit>
          <trans-unit id="104" xml:space="preserve">
            <source>This article provides detailed information about and examples of how to work with a JavaScript backend in Azure Mobile Services.</source>
            <target state="new">This article provides detailed information about and examples of how to work with a JavaScript backend in Azure Mobile Services.</target>
          </trans-unit>
          <trans-unit id="105" xml:space="preserve">
            <source><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>Introduction</source>
            <target state="new"><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>Introduction</target>
          </trans-unit>
          <trans-unit id="106" xml:space="preserve">
            <source>In a JavaScript backend mobile service, you can define custom business logic as JavaScript code that's stored and executed on the server.</source>
            <target state="new">In a JavaScript backend mobile service, you can define custom business logic as JavaScript code that's stored and executed on the server.</target>
          </trans-unit>
          <trans-unit id="107" xml:space="preserve">
            <source>This server script code is assigned to one of the following server functions:</source>
            <target state="new">This server script code is assigned to one of the following server functions:</target>
          </trans-unit>
          <trans-unit id="108" xml:space="preserve">
            <source><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Insert, read, update, or delete operations on a given table[table operations]<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new"><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Insert, read, update, or delete operations on a given table[table operations]<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="109" xml:space="preserve">
            <source><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Scheduled jobs[job scheduler]<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new"><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Scheduled jobs[job scheduler]<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="110" xml:space="preserve">
            <source><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>HTTP methods defined in a custom API[custom api anchor]<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new"><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>HTTP methods defined in a custom API[custom api anchor]<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="111" xml:space="preserve">
            <source>The signature of the main function in the server script depends on the context of where the script is used.</source>
            <target state="new">The signature of the main function in the server script depends on the context of where the script is used.</target>
          </trans-unit>
          <trans-unit id="112" xml:space="preserve">
            <source>You can also define common script code as nodes.js modules that are shared across scripts.</source>
            <target state="new">You can also define common script code as nodes.js modules that are shared across scripts.</target>
          </trans-unit>
          <trans-unit id="113" xml:space="preserve">
            <source>For more information, see <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Source control and shared code[source control, shared code, and helper functions]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">For more information, see <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Source control and shared code[source control, shared code, and helper functions]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="114" xml:space="preserve">
            <source>For descriptions of individual server script objects and functions, see [Mobile Services server script reference].</source>
            <target state="new">For descriptions of individual server script objects and functions, see [Mobile Services server script reference].</target>
          </trans-unit>
          <trans-unit id="115" xml:space="preserve">
            <source><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>Table operations</source>
            <target state="new"><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>Table operations</target>
          </trans-unit>
          <trans-unit id="116" xml:space="preserve">
            <source>A table operation script is a server script that is registered to an operation on a table&amp;mdash;insert, read, update, or delete (<bpt id="2">&lt;em&gt;</bpt>del<ept id="2">&lt;/em&gt;</ept>).</source>
            <target state="new">A table operation script is a server script that is registered to an operation on a table&amp;mdash;insert, read, update, or delete (<bpt id="2">&lt;em&gt;</bpt>del<ept id="2">&lt;/em&gt;</ept>).</target>
          </trans-unit>
          <trans-unit id="117" xml:space="preserve">
            <source>This section describes how to work with table operations in a JavaScript backend, which includes the following sections:</source>
            <target state="new">This section describes how to work with table operations in a JavaScript backend, which includes the following sections:</target>
          </trans-unit>
          <trans-unit id="118" xml:space="preserve">
            <source><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Overview of table operations[basic table operations]<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></source>
            <target state="new"><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Overview of table operations[basic table operations]<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></target>
          </trans-unit>
          <trans-unit id="119" xml:space="preserve">
            <source>[How to: Register for table operations]</source>
            <target state="new">[How to: Register for table operations]</target>
          </trans-unit>
          <trans-unit id="120" xml:space="preserve">
            <source>[How to: Override the default response]</source>
            <target state="new">[How to: Override the default response]</target>
          </trans-unit>
          <trans-unit id="121" xml:space="preserve">
            <source>[How to: Override execute success]</source>
            <target state="new">[How to: Override execute success]</target>
          </trans-unit>
          <trans-unit id="122" xml:space="preserve">
            <source>[How to: Override default error handling]</source>
            <target state="new">[How to: Override default error handling]</target>
          </trans-unit>
          <trans-unit id="123" xml:space="preserve">
            <source><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>How to: Generate unique ID values<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></source>
            <target state="new"><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>How to: Generate unique ID values<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></target>
          </trans-unit>
          <trans-unit id="124" xml:space="preserve">
            <source>[How to: Add custom parameters]</source>
            <target state="new">[How to: Add custom parameters]</target>
          </trans-unit>
          <trans-unit id="125" xml:space="preserve">
            <source><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>How to: Work with table users[how to: work with users]<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></source>
            <target state="new"><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>How to: Work with table users[how to: work with users]<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></target>
          </trans-unit>
          <trans-unit id="126" xml:space="preserve">
            <source><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>Overview of table operations</source>
            <target state="new"><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>Overview of table operations</target>
          </trans-unit>
          <trans-unit id="127" xml:space="preserve">
            <source>The name of the script must match the kind of operation for which it is registered.</source>
            <target state="new">The name of the script must match the kind of operation for which it is registered.</target>
          </trans-unit>
          <trans-unit id="128" xml:space="preserve">
            <source>Only one script can be registered for a given table operation.</source>
            <target state="new">Only one script can be registered for a given table operation.</target>
          </trans-unit>
          <trans-unit id="129" xml:space="preserve">
            <source>The script is executed every time that the given operation is invoked by a REST request&amp;mdash;for example, when a POST request is received to insert an item into the table.</source>
            <target state="new">The script is executed every time that the given operation is invoked by a REST request&amp;mdash;for example, when a POST request is received to insert an item into the table.</target>
          </trans-unit>
          <trans-unit id="130" xml:space="preserve">
            <source>Mobile Services does not preserve state between script executions.</source>
            <target state="new">Mobile Services does not preserve state between script executions.</target>
          </trans-unit>
          <trans-unit id="131" xml:space="preserve">
            <source>Because a new global context is created every time a script is run, any state variables that are defined in the script are reinitialized.</source>
            <target state="new">Because a new global context is created every time a script is run, any state variables that are defined in the script are reinitialized.</target>
          </trans-unit>
          <trans-unit id="132" xml:space="preserve">
            <source>If you want to store state from one request to another, create a table in your mobile service, and then read and write the state to the table.</source>
            <target state="new">If you want to store state from one request to another, create a table in your mobile service, and then read and write the state to the table.</target>
          </trans-unit>
          <trans-unit id="133" xml:space="preserve">
            <source>For more information, see [How to: Access tables from scripts].</source>
            <target state="new">For more information, see [How to: Access tables from scripts].</target>
          </trans-unit>
          <trans-unit id="134" xml:space="preserve">
            <source>You write table operation scripts if you need to enforce customized business logic when the operation is executed.</source>
            <target state="new">You write table operation scripts if you need to enforce customized business logic when the operation is executed.</target>
          </trans-unit>
          <trans-unit id="135" xml:space="preserve">
            <source>For example, the following script rejects insert operations where the string length of the <bpt id="2">&lt;code&gt;</bpt>text<ept id="2">&lt;/code&gt;</ept> field is greater than ten characters:</source>
            <target state="new">For example, the following script rejects insert operations where the string length of the <bpt id="2">&lt;code&gt;</bpt>text<ept id="2">&lt;/code&gt;</ept> field is greater than ten characters:</target>
          </trans-unit>
          <trans-unit id="136" xml:space="preserve">
            <source>A table script function always takes three arguments.</source>
            <target state="new">A table script function always takes three arguments.</target>
          </trans-unit>
          <trans-unit id="137" xml:space="preserve">
            <source>The first argument varies depending on the table operation.</source>
            <target state="new">The first argument varies depending on the table operation.</target>
          </trans-unit>
          <trans-unit id="138" xml:space="preserve">
            <source>For inserts and updates, it is an <bpt id="2">&lt;strong&gt;</bpt>item<ept id="2">&lt;/strong&gt;</ept> object, which is a JSON representation of the row being affected by the operation.</source>
            <target state="new">For inserts and updates, it is an <bpt id="2">&lt;strong&gt;</bpt>item<ept id="2">&lt;/strong&gt;</ept> object, which is a JSON representation of the row being affected by the operation.</target>
          </trans-unit>
          <trans-unit id="139" xml:space="preserve">
            <source>This allows you to access column values by name, for example, <bpt id="2">&lt;em&gt;</bpt>item.Owner<ept id="2">&lt;/em&gt;</ept>, where <bpt id="4">&lt;em&gt;</bpt>Owner<ept id="4">&lt;/em&gt;</ept> is one of the names in the JSON representation.</source>
            <target state="new">This allows you to access column values by name, for example, <bpt id="2">&lt;em&gt;</bpt>item.Owner<ept id="2">&lt;/em&gt;</ept>, where <bpt id="4">&lt;em&gt;</bpt>Owner<ept id="4">&lt;/em&gt;</ept> is one of the names in the JSON representation.</target>
          </trans-unit>
          <trans-unit id="140" xml:space="preserve">
            <source>For a delete, it is the ID of the record to delete.</source>
            <target state="new">For a delete, it is the ID of the record to delete.</target>
          </trans-unit>
          <trans-unit id="141" xml:space="preserve">
            <source>And for a read, it is a [query object] that specifies the rowset to return.</source>
            <target state="new">And for a read, it is a [query object] that specifies the rowset to return.</target>
          </trans-unit>
          <trans-unit id="142" xml:space="preserve">
            <source>The second argument is always a <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>user object[user object]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> that represents the user that submitted the request.</source>
            <target state="new">The second argument is always a <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>user object[user object]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> that represents the user that submitted the request.</target>
          </trans-unit>
          <trans-unit id="143" xml:space="preserve">
            <source>The third argument is always a <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>request object[request object]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>, by which you can control execution of the requested operation and the response that's sent to the client.</source>
            <target state="new">The third argument is always a <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>request object[request object]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>, by which you can control execution of the requested operation and the response that's sent to the client.</target>
          </trans-unit>
          <trans-unit id="144" xml:space="preserve">
            <source>Here are the canonical main-function signatures for the table operations:</source>
            <target state="new">Here are the canonical main-function signatures for the table operations:</target>
          </trans-unit>
          <trans-unit id="145" xml:space="preserve">
            <source><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Insert[insert function]<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept>: <bpt id="3">&lt;code&gt;</bpt>function insert (item, user, request) { ... }<ept id="3">&lt;/code&gt;</ept></source>
            <target state="new"><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Insert[insert function]<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept>: <bpt id="3">&lt;code&gt;</bpt>function insert (item, user, request) { ... }<ept id="3">&lt;/code&gt;</ept></target>
          </trans-unit>
          <trans-unit id="146" xml:space="preserve">
            <source><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Update[update function]<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept>: <bpt id="3">&lt;code&gt;</bpt>function update (item, user, request) { ... }<ept id="3">&lt;/code&gt;</ept></source>
            <target state="new"><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Update[update function]<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept>: <bpt id="3">&lt;code&gt;</bpt>function update (item, user, request) { ... }<ept id="3">&lt;/code&gt;</ept></target>
          </trans-unit>
          <trans-unit id="147" xml:space="preserve">
            <source><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Delete[delete function]<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept>: <bpt id="3">&lt;code&gt;</bpt>function del (id, user, request) { ... }<ept id="3">&lt;/code&gt;</ept></source>
            <target state="new"><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Delete[delete function]<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept>: <bpt id="3">&lt;code&gt;</bpt>function del (id, user, request) { ... }<ept id="3">&lt;/code&gt;</ept></target>
          </trans-unit>
          <trans-unit id="148" xml:space="preserve">
            <source><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Read[read function]<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept>: <bpt id="3">&lt;code&gt;</bpt>function read (query, user, request) { ... }<ept id="3">&lt;/code&gt;</ept></source>
            <target state="new"><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Read[read function]<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept>: <bpt id="3">&lt;code&gt;</bpt>function read (query, user, request) { ... }<ept id="3">&lt;/code&gt;</ept></target>
          </trans-unit>
          <trans-unit id="149" xml:space="preserve">
            <source>A function that's registered to the delete operation must be named <bpt id="2">&lt;em&gt;</bpt>del<ept id="2">&lt;/em&gt;</ept> because delete is a reserved keyword in JavaScript.</source>
            <target state="new">A function that's registered to the delete operation must be named <bpt id="2">&lt;em&gt;</bpt>del<ept id="2">&lt;/em&gt;</ept> because delete is a reserved keyword in JavaScript.</target>
          </trans-unit>
          <trans-unit id="150" xml:space="preserve">
            <source>Every server script has a main function, and may have optional helper functions.</source>
            <target state="new">Every server script has a main function, and may have optional helper functions.</target>
          </trans-unit>
          <trans-unit id="151" xml:space="preserve">
            <source>Even though a server script may have been been created for a specific table, it can also reference other tables in the same database.</source>
            <target state="new">Even though a server script may have been been created for a specific table, it can also reference other tables in the same database.</target>
          </trans-unit>
          <trans-unit id="152" xml:space="preserve">
            <source>You can also define common functions as modules that can be shared across scripts.</source>
            <target state="new">You can also define common functions as modules that can be shared across scripts.</target>
          </trans-unit>
          <trans-unit id="153" xml:space="preserve">
            <source>For more information, see <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Source control and shared code[source control, shared code, and helper functions]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">For more information, see <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Source control and shared code[source control, shared code, and helper functions]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="154" xml:space="preserve">
            <source><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>How to: Register table scripts</source>
            <target state="new"><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>How to: Register table scripts</target>
          </trans-unit>
          <trans-unit id="155" xml:space="preserve">
            <source>You can define server scripts that are registered to a table operation in one of the following ways:</source>
            <target state="new">You can define server scripts that are registered to a table operation in one of the following ways:</target>
          </trans-unit>
          <trans-unit id="156" xml:space="preserve">
            <source>In the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Azure Management Portal[management portal]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">In the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Azure Management Portal[management portal]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="157" xml:space="preserve">
            <source>Scripts for table operations are accessed in the <bpt id="2">&lt;strong&gt;</bpt>Scripts<ept id="2">&lt;/strong&gt;</ept> tab for a given table.</source>
            <target state="new">Scripts for table operations are accessed in the <bpt id="2">&lt;strong&gt;</bpt>Scripts<ept id="2">&lt;/strong&gt;</ept> tab for a given table.</target>
          </trans-unit>
          <trans-unit id="158" xml:space="preserve">
            <source>The following shows the default code registered to the insert script for the <bpt id="2">&lt;code&gt;</bpt>TodoItem<ept id="2">&lt;/code&gt;</ept> table.</source>
            <target state="new">The following shows the default code registered to the insert script for the <bpt id="2">&lt;code&gt;</bpt>TodoItem<ept id="2">&lt;/code&gt;</ept> table.</target>
          </trans-unit>
          <trans-unit id="159" xml:space="preserve">
            <source>You can override this code with your own custom business logic.</source>
            <target state="new">You can override this code with your own custom business logic.</target>
          </trans-unit>
          <trans-unit id="160" xml:space="preserve">
            <source><bpt id="1">&lt;linkText&gt;</bpt>1<ept id="1">&lt;/linkText&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;linkText&gt;</bpt>1<ept id="1">&lt;/linkText&gt;</ept></target>
          </trans-unit>
          <trans-unit id="161" xml:space="preserve">
            <source>To learn how to do this, see [Validate and modify data in Mobile Services by using server scripts].</source>
            <target state="new">To learn how to do this, see [Validate and modify data in Mobile Services by using server scripts].</target>
          </trans-unit>
          <trans-unit id="162" xml:space="preserve">
            <source>By using source control. When you have source control enabled, simply create a file named <bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept><bpt id="3">&lt;code&gt;</bpt>&lt;table&gt;<ept id="3">&lt;/code&gt;</ept><bpt id="4">&lt;html&gt;</bpt><ept id="4">&lt;/html&gt;</ept>.<bpt id="6">&lt;html&gt;</bpt><ept id="6">&lt;/html&gt;</ept><bpt id="7">&lt;code&gt;</bpt>&lt;operation&gt;<ept id="7">&lt;/code&gt;</ept><bpt id="8">&lt;html&gt;</bpt><ept id="8">&lt;/html&gt;</ept>.js in the .\service\table subfolder in your git repository, where <bpt id="10">&lt;html&gt;</bpt><ept id="10">&lt;/html&gt;</ept><bpt id="11">&lt;code&gt;</bpt>&lt;table&gt;<ept id="11">&lt;/code&gt;</ept><bpt id="12">&lt;html&gt;</bpt><ept id="12">&lt;/html&gt;</ept> is the name of the table and <bpt id="14">&lt;html&gt;</bpt><ept id="14">&lt;/html&gt;</ept><bpt id="15">&lt;code&gt;</bpt>&lt;operation&gt;<ept id="15">&lt;/code&gt;</ept><bpt id="16">&lt;html&gt;</bpt><ept id="16">&lt;/html&gt;</ept> is the table operation being registered. For more information, see <bpt id="18CapsExtId1">&lt;link&gt;</bpt><bpt id="18CapsExtId2">&lt;linkText&gt;</bpt>Source control and shared code[source control, shared code, and helper functions]<ept id="18CapsExtId2">&lt;/linkText&gt;</ept><bpt id="18CapsExtId3">&lt;title&gt;</bpt><ept id="18CapsExtId3">&lt;/title&gt;</ept><ept id="18CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">By using source control. When you have source control enabled, simply create a file named <bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept><bpt id="3">&lt;code&gt;</bpt>&lt;table&gt;<ept id="3">&lt;/code&gt;</ept><bpt id="4">&lt;html&gt;</bpt><ept id="4">&lt;/html&gt;</ept>.<bpt id="6">&lt;html&gt;</bpt><ept id="6">&lt;/html&gt;</ept><bpt id="7">&lt;code&gt;</bpt>&lt;operation&gt;<ept id="7">&lt;/code&gt;</ept><bpt id="8">&lt;html&gt;</bpt><ept id="8">&lt;/html&gt;</ept>.js in the .\service\table subfolder in your git repository, where <bpt id="10">&lt;html&gt;</bpt><ept id="10">&lt;/html&gt;</ept><bpt id="11">&lt;code&gt;</bpt>&lt;table&gt;<ept id="11">&lt;/code&gt;</ept><bpt id="12">&lt;html&gt;</bpt><ept id="12">&lt;/html&gt;</ept> is the name of the table and <bpt id="14">&lt;html&gt;</bpt><ept id="14">&lt;/html&gt;</ept><bpt id="15">&lt;code&gt;</bpt>&lt;operation&gt;<ept id="15">&lt;/code&gt;</ept><bpt id="16">&lt;html&gt;</bpt><ept id="16">&lt;/html&gt;</ept> is the table operation being registered. For more information, see <bpt id="18CapsExtId1">&lt;link&gt;</bpt><bpt id="18CapsExtId2">&lt;linkText&gt;</bpt>Source control and shared code[source control, shared code, and helper functions]<ept id="18CapsExtId2">&lt;/linkText&gt;</ept><bpt id="18CapsExtId3">&lt;title&gt;</bpt><ept id="18CapsExtId3">&lt;/title&gt;</ept><ept id="18CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="163" xml:space="preserve">
            <source>From the command prompt by using the Azure command line tool.</source>
            <target state="new">From the command prompt by using the Azure command line tool.</target>
          </trans-unit>
          <trans-unit id="164" xml:space="preserve">
            <source>For more information, see [Using the command line tool].</source>
            <target state="new">For more information, see [Using the command line tool].</target>
          </trans-unit>
          <trans-unit id="165" xml:space="preserve">
            <source>A table operation script must call at least one of the following functions of the [request object] to make sure that the client receives a response.</source>
            <target state="new">A table operation script must call at least one of the following functions of the [request object] to make sure that the client receives a response.</target>
          </trans-unit>
          <trans-unit id="166" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>execute function<ept id="1">&lt;/strong&gt;</ept>: The operation is completed as requested and the standard response is returned.</source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>execute function<ept id="1">&lt;/strong&gt;</ept>: The operation is completed as requested and the standard response is returned.</target>
          </trans-unit>
          <trans-unit id="167" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>respond function<ept id="1">&lt;/strong&gt;</ept>: A custom response is returned.</source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>respond function<ept id="1">&lt;/strong&gt;</ept>: A custom response is returned.</target>
          </trans-unit>
          <trans-unit id="168" xml:space="preserve">
            <source>When a script has a code path in which neither <bpt id="2">&lt;strong&gt;</bpt>execute<ept id="2">&lt;/strong&gt;</ept> nor <bpt id="4">&lt;strong&gt;</bpt>respond<ept id="4">&lt;/strong&gt;</ept> is invoked, the operation may become unresponsive.</source>
            <target state="new">When a script has a code path in which neither <bpt id="2">&lt;strong&gt;</bpt>execute<ept id="2">&lt;/strong&gt;</ept> nor <bpt id="4">&lt;strong&gt;</bpt>respond<ept id="4">&lt;/strong&gt;</ept> is invoked, the operation may become unresponsive.</target>
          </trans-unit>
          <trans-unit id="169" xml:space="preserve">
            <source>The following script calls the <bpt id="2">&lt;strong&gt;</bpt>execute<ept id="2">&lt;/strong&gt;</ept> function to complete the data operation requested by the client:</source>
            <target state="new">The following script calls the <bpt id="2">&lt;strong&gt;</bpt>execute<ept id="2">&lt;/strong&gt;</ept> function to complete the data operation requested by the client:</target>
          </trans-unit>
          <trans-unit id="170" xml:space="preserve">
            <source>In this example, the item is inserted into the database and the appropriate status code is returned to the user.</source>
            <target state="new">In this example, the item is inserted into the database and the appropriate status code is returned to the user.</target>
          </trans-unit>
          <trans-unit id="171" xml:space="preserve">
            <source>When the <bpt id="2">&lt;strong&gt;</bpt>execute<ept id="2">&lt;/strong&gt;</ept> function is called, the <bpt id="4">&lt;code&gt;</bpt>item<ept id="4">&lt;/code&gt;</ept>, <bpt id="6CapsExtId1">&lt;link&gt;</bpt><bpt id="6CapsExtId2">&lt;linkText&gt;</bpt>query[query object]<ept id="6CapsExtId2">&lt;/linkText&gt;</ept><bpt id="6CapsExtId3">&lt;title&gt;</bpt><ept id="6CapsExtId3">&lt;/title&gt;</ept><ept id="6CapsExtId1">&lt;/link&gt;</ept>, or <bpt id="8">&lt;code&gt;</bpt>id<ept id="8">&lt;/code&gt;</ept> value that was passed as the first argument into the script function is used to perform the operation.</source>
            <target state="new">When the <bpt id="2">&lt;strong&gt;</bpt>execute<ept id="2">&lt;/strong&gt;</ept> function is called, the <bpt id="4">&lt;code&gt;</bpt>item<ept id="4">&lt;/code&gt;</ept>, <bpt id="6CapsExtId1">&lt;link&gt;</bpt><bpt id="6CapsExtId2">&lt;linkText&gt;</bpt>query[query object]<ept id="6CapsExtId2">&lt;/linkText&gt;</ept><bpt id="6CapsExtId3">&lt;title&gt;</bpt><ept id="6CapsExtId3">&lt;/title&gt;</ept><ept id="6CapsExtId1">&lt;/link&gt;</ept>, or <bpt id="8">&lt;code&gt;</bpt>id<ept id="8">&lt;/code&gt;</ept> value that was passed as the first argument into the script function is used to perform the operation.</target>
          </trans-unit>
          <trans-unit id="172" xml:space="preserve">
            <source>For an insert, update or query operation, you can modify the item or query before you call <bpt id="2">&lt;strong&gt;</bpt>execute<ept id="2">&lt;/strong&gt;</ept>:</source>
            <target state="new">For an insert, update or query operation, you can modify the item or query before you call <bpt id="2">&lt;strong&gt;</bpt>execute<ept id="2">&lt;/strong&gt;</ept>:</target>
          </trans-unit>
          <trans-unit id="173" xml:space="preserve">
            <source>In a delete script, changing the value of the supplied userId variable does not affect which record gets deleted.</source>
            <target state="new">In a delete script, changing the value of the supplied userId variable does not affect which record gets deleted.</target>
          </trans-unit>
          <trans-unit id="174" xml:space="preserve">
            <source>For more examples, see [Read and write data], [Modify the request] and [Validate data].</source>
            <target state="new">For more examples, see [Read and write data], [Modify the request] and [Validate data].</target>
          </trans-unit>
          <trans-unit id="175" xml:space="preserve">
            <source><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>How to: Override the default response</source>
            <target state="new"><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>How to: Override the default response</target>
          </trans-unit>
          <trans-unit id="176" xml:space="preserve">
            <source>You can also use a script to implement validation logic that can override the default response behavior.</source>
            <target state="new">You can also use a script to implement validation logic that can override the default response behavior.</target>
          </trans-unit>
          <trans-unit id="177" xml:space="preserve">
            <source>If validation fails, just call the <bpt id="2">&lt;strong&gt;</bpt>respond<ept id="2">&lt;/strong&gt;</ept> function instead of the <bpt id="4">&lt;strong&gt;</bpt>execute<ept id="4">&lt;/strong&gt;</ept> function and write the response to the client:</source>
            <target state="new">If validation fails, just call the <bpt id="2">&lt;strong&gt;</bpt>respond<ept id="2">&lt;/strong&gt;</ept> function instead of the <bpt id="4">&lt;strong&gt;</bpt>execute<ept id="4">&lt;/strong&gt;</ept> function and write the response to the client:</target>
          </trans-unit>
          <trans-unit id="178" xml:space="preserve">
            <source>In this example, the request is rejected when the inserted item does not have a <bpt id="2">&lt;code&gt;</bpt>userId<ept id="2">&lt;/code&gt;</ept> property that matches the <bpt id="4">&lt;code&gt;</bpt>userId<ept id="4">&lt;/code&gt;</ept> of the [user object] that's supplied for the authenticated client.</source>
            <target state="new">In this example, the request is rejected when the inserted item does not have a <bpt id="2">&lt;code&gt;</bpt>userId<ept id="2">&lt;/code&gt;</ept> property that matches the <bpt id="4">&lt;code&gt;</bpt>userId<ept id="4">&lt;/code&gt;</ept> of the [user object] that's supplied for the authenticated client.</target>
          </trans-unit>
          <trans-unit id="179" xml:space="preserve">
            <source>In this case, a database operation (<bpt id="2">&lt;em&gt;</bpt>insert<ept id="2">&lt;/em&gt;</ept>) does not occur, and a response that has a 403 HTTP status code and a custom error message is returned to the client.</source>
            <target state="new">In this case, a database operation (<bpt id="2">&lt;em&gt;</bpt>insert<ept id="2">&lt;/em&gt;</ept>) does not occur, and a response that has a 403 HTTP status code and a custom error message is returned to the client.</target>
          </trans-unit>
          <trans-unit id="180" xml:space="preserve">
            <source>For more examples, see [Modify the response].</source>
            <target state="new">For more examples, see [Modify the response].</target>
          </trans-unit>
          <trans-unit id="181" xml:space="preserve">
            <source><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>How to: Override execute success</source>
            <target state="new"><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>How to: Override execute success</target>
          </trans-unit>
          <trans-unit id="182" xml:space="preserve">
            <source>By default in a table operation, the <bpt id="2">&lt;strong&gt;</bpt>execute<ept id="2">&lt;/strong&gt;</ept> function writes responses automatically.</source>
            <target state="new">By default in a table operation, the <bpt id="2">&lt;strong&gt;</bpt>execute<ept id="2">&lt;/strong&gt;</ept> function writes responses automatically.</target>
          </trans-unit>
          <trans-unit id="183" xml:space="preserve">
            <source>However, you can pass two optional parameters to the execute function that override its behavior on success and/or on error.</source>
            <target state="new">However, you can pass two optional parameters to the execute function that override its behavior on success and/or on error.</target>
          </trans-unit>
          <trans-unit id="184" xml:space="preserve">
            <source>By passing in a <bpt id="2">&lt;strong&gt;</bpt>success<ept id="2">&lt;/strong&gt;</ept> handler when you call execute, you can modify the results of a query before you write them to the response.</source>
            <target state="new">By passing in a <bpt id="2">&lt;strong&gt;</bpt>success<ept id="2">&lt;/strong&gt;</ept> handler when you call execute, you can modify the results of a query before you write them to the response.</target>
          </trans-unit>
          <trans-unit id="185" xml:space="preserve">
            <source>The following example calls <bpt id="2">&lt;code&gt;</bpt>execute({ success: function(results) { ... })<ept id="2">&lt;/code&gt;</ept> to perform additional work after data is read from the database but before the response is written:</source>
            <target state="new">The following example calls <bpt id="2">&lt;code&gt;</bpt>execute({ success: function(results) { ... })<ept id="2">&lt;/code&gt;</ept> to perform additional work after data is read from the database but before the response is written:</target>
          </trans-unit>
          <trans-unit id="186" xml:space="preserve">
            <source>When you provide a <bpt id="2">&lt;strong&gt;</bpt>success<ept id="2">&lt;/strong&gt;</ept> handler to the <bpt id="4">&lt;strong&gt;</bpt>execute<ept id="4">&lt;/strong&gt;</ept> function, you must also call the <bpt id="6">&lt;strong&gt;</bpt>respond<ept id="6">&lt;/strong&gt;</ept> function as part of the <bpt id="8">&lt;strong&gt;</bpt>success<ept id="8">&lt;/strong&gt;</ept> handler so that the runtime knows that the script has completed and that a response can be written.</source>
            <target state="new">When you provide a <bpt id="2">&lt;strong&gt;</bpt>success<ept id="2">&lt;/strong&gt;</ept> handler to the <bpt id="4">&lt;strong&gt;</bpt>execute<ept id="4">&lt;/strong&gt;</ept> function, you must also call the <bpt id="6">&lt;strong&gt;</bpt>respond<ept id="6">&lt;/strong&gt;</ept> function as part of the <bpt id="8">&lt;strong&gt;</bpt>success<ept id="8">&lt;/strong&gt;</ept> handler so that the runtime knows that the script has completed and that a response can be written.</target>
          </trans-unit>
          <trans-unit id="187" xml:space="preserve">
            <source>When you call <bpt id="2">&lt;strong&gt;</bpt>respond<ept id="2">&lt;/strong&gt;</ept> without passing any arguments, Mobile Services generates the default response.</source>
            <target state="new">When you call <bpt id="2">&lt;strong&gt;</bpt>respond<ept id="2">&lt;/strong&gt;</ept> without passing any arguments, Mobile Services generates the default response.</target>
          </trans-unit>
          <trans-unit id="188" xml:space="preserve">
            <source>You can call <bpt id="2">&lt;strong&gt;</bpt>respond<ept id="2">&lt;/strong&gt;</ept> without arguments to invoke the default response only after you first call the <bpt id="4">&lt;strong&gt;</bpt>execute<ept id="4">&lt;/strong&gt;</ept> function.</source>
            <target state="new">You can call <bpt id="2">&lt;strong&gt;</bpt>respond<ept id="2">&lt;/strong&gt;</ept> without arguments to invoke the default response only after you first call the <bpt id="4">&lt;strong&gt;</bpt>execute<ept id="4">&lt;/strong&gt;</ept> function.</target>
          </trans-unit>
          <trans-unit id="189" xml:space="preserve">
            <source><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>How to: Override default error handling</source>
            <target state="new"><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>How to: Override default error handling</target>
          </trans-unit>
          <trans-unit id="190" xml:space="preserve">
            <source>The <bpt id="2">&lt;strong&gt;</bpt>execute<ept id="2">&lt;/strong&gt;</ept> function can fail if there is a loss of connectivity to the database, an invalid object, or an incorrect query.</source>
            <target state="new">The <bpt id="2">&lt;strong&gt;</bpt>execute<ept id="2">&lt;/strong&gt;</ept> function can fail if there is a loss of connectivity to the database, an invalid object, or an incorrect query.</target>
          </trans-unit>
          <trans-unit id="191" xml:space="preserve">
            <source>By default when an error occurs, server scripts log the error and write an error result to the response.</source>
            <target state="new">By default when an error occurs, server scripts log the error and write an error result to the response.</target>
          </trans-unit>
          <trans-unit id="192" xml:space="preserve">
            <source>Because Mobile Services provides default error handling, you don't have to handle errors that may occur in the service.</source>
            <target state="new">Because Mobile Services provides default error handling, you don't have to handle errors that may occur in the service.</target>
          </trans-unit>
          <trans-unit id="193" xml:space="preserve">
            <source>You can override the default error handling by implementing explicit error handling if you want a particular compensating action or when you want to use the global console object to write more detailed information to the log.</source>
            <target state="new">You can override the default error handling by implementing explicit error handling if you want a particular compensating action or when you want to use the global console object to write more detailed information to the log.</target>
          </trans-unit>
          <trans-unit id="194" xml:space="preserve">
            <source>Do this by supplying an <bpt id="2">&lt;strong&gt;</bpt>error<ept id="2">&lt;/strong&gt;</ept> handler to the <bpt id="4">&lt;strong&gt;</bpt>execute<ept id="4">&lt;/strong&gt;</ept> function:</source>
            <target state="new">Do this by supplying an <bpt id="2">&lt;strong&gt;</bpt>error<ept id="2">&lt;/strong&gt;</ept> handler to the <bpt id="4">&lt;strong&gt;</bpt>execute<ept id="4">&lt;/strong&gt;</ept> function:</target>
          </trans-unit>
          <trans-unit id="195" xml:space="preserve">
            <source>When you provide an error handler, Mobile Services returns an error result to the client when <bpt id="2">&lt;strong&gt;</bpt>respond<ept id="2">&lt;/strong&gt;</ept> is called.</source>
            <target state="new">When you provide an error handler, Mobile Services returns an error result to the client when <bpt id="2">&lt;strong&gt;</bpt>respond<ept id="2">&lt;/strong&gt;</ept> is called.</target>
          </trans-unit>
          <trans-unit id="196" xml:space="preserve">
            <source>You can also provide both a <bpt id="2">&lt;strong&gt;</bpt>success<ept id="2">&lt;/strong&gt;</ept> and an <bpt id="4">&lt;strong&gt;</bpt>error<ept id="4">&lt;/strong&gt;</ept> handler if you wish.</source>
            <target state="new">You can also provide both a <bpt id="2">&lt;strong&gt;</bpt>success<ept id="2">&lt;/strong&gt;</ept> and an <bpt id="4">&lt;strong&gt;</bpt>error<ept id="4">&lt;/strong&gt;</ept> handler if you wish.</target>
          </trans-unit>
          <trans-unit id="197" xml:space="preserve">
            <source><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>How to: Generate unique ID values</source>
            <target state="new"><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>How to: Generate unique ID values</target>
          </trans-unit>
          <trans-unit id="198" xml:space="preserve">
            <source>Mobile Services supports unique custom string values for the table's <bpt id="2">&lt;strong&gt;</bpt>id<ept id="2">&lt;/strong&gt;</ept> column.</source>
            <target state="new">Mobile Services supports unique custom string values for the table's <bpt id="2">&lt;strong&gt;</bpt>id<ept id="2">&lt;/strong&gt;</ept> column.</target>
          </trans-unit>
          <trans-unit id="199" xml:space="preserve">
            <source>This allows applications to use custom values such as email addresses or user names for the ID.</source>
            <target state="new">This allows applications to use custom values such as email addresses or user names for the ID.</target>
          </trans-unit>
          <trans-unit id="200" xml:space="preserve">
            <source>String IDs provide you with the following benefits:</source>
            <target state="new">String IDs provide you with the following benefits:</target>
          </trans-unit>
          <trans-unit id="201" xml:space="preserve">
            <source>IDs are generated without making a round-trip to the database.</source>
            <target state="new">IDs are generated without making a round-trip to the database.</target>
          </trans-unit>
          <trans-unit id="202" xml:space="preserve">
            <source>Records are easier to merge from different tables or databases.</source>
            <target state="new">Records are easier to merge from different tables or databases.</target>
          </trans-unit>
          <trans-unit id="203" xml:space="preserve">
            <source>IDs values can integrate better with an application's logic.</source>
            <target state="new">IDs values can integrate better with an application's logic.</target>
          </trans-unit>
          <trans-unit id="204" xml:space="preserve">
            <source>When a string ID value is not set on an inserted records, Mobile Services generates a unique value for the ID.</source>
            <target state="new">When a string ID value is not set on an inserted records, Mobile Services generates a unique value for the ID.</target>
          </trans-unit>
          <trans-unit id="205" xml:space="preserve">
            <source>You can generate your own unique ID values in server scripts.</source>
            <target state="new">You can generate your own unique ID values in server scripts.</target>
          </trans-unit>
          <trans-unit id="206" xml:space="preserve">
            <source>The script example below generates a custom GUID and assigns it to a new record's ID.</source>
            <target state="new">The script example below generates a custom GUID and assigns it to a new record's ID.</target>
          </trans-unit>
          <trans-unit id="207" xml:space="preserve">
            <source>This is similar to the id value that Mobile Services would generate if you didn't pass in a value for a record's ID.</source>
            <target state="new">This is similar to the id value that Mobile Services would generate if you didn't pass in a value for a record's ID.</target>
          </trans-unit>
          <trans-unit id="208" xml:space="preserve">
            <source>When an application provides a value for an ID, Mobile Services stores it as-is.</source>
            <target state="new">When an application provides a value for an ID, Mobile Services stores it as-is.</target>
          </trans-unit>
          <trans-unit id="209" xml:space="preserve">
            <source>This includes leading or trailing white spaces.</source>
            <target state="new">This includes leading or trailing white spaces.</target>
          </trans-unit>
          <trans-unit id="210" xml:space="preserve">
            <source>White space are not trimmed from value.</source>
            <target state="new">White space are not trimmed from value.</target>
          </trans-unit>
          <trans-unit id="211" xml:space="preserve">
            <source>The value for the <bpt id="2">&lt;code&gt;</bpt>id<ept id="2">&lt;/code&gt;</ept> must be unique and it must not include characters from the following sets:</source>
            <target state="new">The value for the <bpt id="2">&lt;code&gt;</bpt>id<ept id="2">&lt;/code&gt;</ept> must be unique and it must not include characters from the following sets:</target>
          </trans-unit>
          <trans-unit id="212" xml:space="preserve">
            <source>Control characters: [0x0000-0x001F] and [0x007F-0x009F].</source>
            <target state="new">Control characters: [0x0000-0x001F] and [0x007F-0x009F].</target>
          </trans-unit>
          <trans-unit id="213" xml:space="preserve">
            <source>For more information, see <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>ASCII control codes C0 and C1<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">For more information, see <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>ASCII control codes C0 and C1<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="214" xml:space="preserve">
            <source>Printable characters: <bpt id="2">&lt;strong&gt;</bpt>"<ept id="2">&lt;/strong&gt;</ept>(0x0022), <bpt id="4">&lt;strong&gt;</bpt>\+<ept id="4">&lt;/strong&gt;</ept> (0x002B), <bpt id="6">&lt;strong&gt;</bpt>/<ept id="6">&lt;/strong&gt;</ept> (0x002F), <bpt id="8">&lt;strong&gt;</bpt>?<ept id="8">&lt;/strong&gt;</ept> (0x003F), <bpt id="10">&lt;strong&gt;</bpt>\\<ept id="10">&lt;/strong&gt;</ept> (0x005C), <bpt id="12">&lt;strong&gt;</bpt>`<ept id="12">&lt;/strong&gt;</ept> (0x0060)</source>
            <target state="new">Printable characters: <bpt id="2">&lt;strong&gt;</bpt>"<ept id="2">&lt;/strong&gt;</ept>(0x0022), <bpt id="4">&lt;strong&gt;</bpt>\+<ept id="4">&lt;/strong&gt;</ept> (0x002B), <bpt id="6">&lt;strong&gt;</bpt>/<ept id="6">&lt;/strong&gt;</ept> (0x002F), <bpt id="8">&lt;strong&gt;</bpt>?<ept id="8">&lt;/strong&gt;</ept> (0x003F), <bpt id="10">&lt;strong&gt;</bpt>\\<ept id="10">&lt;/strong&gt;</ept> (0x005C), <bpt id="12">&lt;strong&gt;</bpt>`<ept id="12">&lt;/strong&gt;</ept> (0x0060)</target>
          </trans-unit>
          <trans-unit id="215" xml:space="preserve">
            <source>The ids "." and ".."</source>
            <target state="new">The ids "." and ".."</target>
          </trans-unit>
          <trans-unit id="216" xml:space="preserve">
            <source>You can also use integer IDs for your tables.</source>
            <target state="new">You can also use integer IDs for your tables.</target>
          </trans-unit>
          <trans-unit id="217" xml:space="preserve">
            <source>To use an integer ID, you must create your table with the <bpt id="2">&lt;code&gt;</bpt>mobile table create<ept id="2">&lt;/code&gt;</ept> command using the <bpt id="4">&lt;code&gt;</bpt>--integerId<ept id="4">&lt;/code&gt;</ept> option.</source>
            <target state="new">To use an integer ID, you must create your table with the <bpt id="2">&lt;code&gt;</bpt>mobile table create<ept id="2">&lt;/code&gt;</ept> command using the <bpt id="4">&lt;code&gt;</bpt>--integerId<ept id="4">&lt;/code&gt;</ept> option.</target>
          </trans-unit>
          <trans-unit id="218" xml:space="preserve">
            <source>This command is used with the Command-line Interface (CLI) for Azure.</source>
            <target state="new">This command is used with the Command-line Interface (CLI) for Azure.</target>
          </trans-unit>
          <trans-unit id="219" xml:space="preserve">
            <source>For more information on using the CLI, see <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>CLI to manage Mobile Services tables<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">For more information on using the CLI, see <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>CLI to manage Mobile Services tables<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="220" xml:space="preserve">
            <source><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>How to: Access custom parameters</source>
            <target state="new"><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>How to: Access custom parameters</target>
          </trans-unit>
          <trans-unit id="221" xml:space="preserve">
            <source>When you send a request to your mobile service, you can include custom parameters in the URI of the request to instruct your table operation scripts how to process a given request.</source>
            <target state="new">When you send a request to your mobile service, you can include custom parameters in the URI of the request to instruct your table operation scripts how to process a given request.</target>
          </trans-unit>
          <trans-unit id="222" xml:space="preserve">
            <source>You then modify your script to inspect the parameter to determine the processing path.</source>
            <target state="new">You then modify your script to inspect the parameter to determine the processing path.</target>
          </trans-unit>
          <trans-unit id="223" xml:space="preserve">
            <source>For example, the following URI for a POST request tells the service to not permit the insertion of a new <bpt id="2">&lt;em&gt;</bpt>TodoItem<ept id="2">&lt;/em&gt;</ept> that has the same text value:</source>
            <target state="new">For example, the following URI for a POST request tells the service to not permit the insertion of a new <bpt id="2">&lt;em&gt;</bpt>TodoItem<ept id="2">&lt;/em&gt;</ept> that has the same text value:</target>
          </trans-unit>
          <trans-unit id="224" xml:space="preserve">
            <source>These custom query parameters are accessed as JSON values from the <bpt id="2">&lt;strong&gt;</bpt>parameters<ept id="2">&lt;/strong&gt;</ept> property of the [request object].</source>
            <target state="new">These custom query parameters are accessed as JSON values from the <bpt id="2">&lt;strong&gt;</bpt>parameters<ept id="2">&lt;/strong&gt;</ept> property of the [request object].</target>
          </trans-unit>
          <trans-unit id="225" xml:space="preserve">
            <source>The <bpt id="2">&lt;strong&gt;</bpt>request<ept id="2">&lt;/strong&gt;</ept> object is supplied by Mobile Services to any function registered to a table operation.</source>
            <target state="new">The <bpt id="2">&lt;strong&gt;</bpt>request<ept id="2">&lt;/strong&gt;</ept> object is supplied by Mobile Services to any function registered to a table operation.</target>
          </trans-unit>
          <trans-unit id="226" xml:space="preserve">
            <source>The following server script for the insert operation checks the value of the <bpt id="2">&lt;code&gt;</bpt>duplicateText<ept id="2">&lt;/code&gt;</ept> parameter before the insert operation is run:</source>
            <target state="new">The following server script for the insert operation checks the value of the <bpt id="2">&lt;code&gt;</bpt>duplicateText<ept id="2">&lt;/code&gt;</ept> parameter before the insert operation is run:</target>
          </trans-unit>
          <trans-unit id="227" xml:space="preserve">
            <source>Note that in <bpt id="2">&lt;strong&gt;</bpt>insertItemIfNotComplete<ept id="2">&lt;/strong&gt;</ept> the <bpt id="4">&lt;strong&gt;</bpt>execute<ept id="4">&lt;/strong&gt;</ept> function of the [request object] is invoked to insert the item when there is no duplicate text; otherwise the <bpt id="6">&lt;strong&gt;</bpt>respond<ept id="6">&lt;/strong&gt;</ept> function is invoked to notify the client of the duplicate.</source>
            <target state="new">Note that in <bpt id="2">&lt;strong&gt;</bpt>insertItemIfNotComplete<ept id="2">&lt;/strong&gt;</ept> the <bpt id="4">&lt;strong&gt;</bpt>execute<ept id="4">&lt;/strong&gt;</ept> function of the [request object] is invoked to insert the item when there is no duplicate text; otherwise the <bpt id="6">&lt;strong&gt;</bpt>respond<ept id="6">&lt;/strong&gt;</ept> function is invoked to notify the client of the duplicate.</target>
          </trans-unit>
          <trans-unit id="228" xml:space="preserve">
            <source>Note the syntax of the call to the <bpt id="2">&lt;strong&gt;</bpt>success<ept id="2">&lt;/strong&gt;</ept> function in the above code:</source>
            <target state="new">Note the syntax of the call to the <bpt id="2">&lt;strong&gt;</bpt>success<ept id="2">&lt;/strong&gt;</ept> function in the above code:</target>
          </trans-unit>
          <trans-unit id="229" xml:space="preserve">
            <source>In JavaScript it is a compact version of the lengthier equivalent:</source>
            <target state="new">In JavaScript it is a compact version of the lengthier equivalent:</target>
          </trans-unit>
          <trans-unit id="230" xml:space="preserve">
            <source><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>How to: Work with users</source>
            <target state="new"><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>How to: Work with users</target>
          </trans-unit>
          <trans-unit id="231" xml:space="preserve">
            <source>In Azure Mobile Services, you can use an identity provider to authenticate users.</source>
            <target state="new">In Azure Mobile Services, you can use an identity provider to authenticate users.</target>
          </trans-unit>
          <trans-unit id="232" xml:space="preserve">
            <source>For more information, see [Get started with authentication].</source>
            <target state="new">For more information, see [Get started with authentication].</target>
          </trans-unit>
          <trans-unit id="233" xml:space="preserve">
            <source>When an authenticated user invokes a table operation, Mobile Services uses the [user object] to supply information about the user to the registered script function.</source>
            <target state="new">When an authenticated user invokes a table operation, Mobile Services uses the [user object] to supply information about the user to the registered script function.</target>
          </trans-unit>
          <trans-unit id="234" xml:space="preserve">
            <source>The <bpt id="2">&lt;strong&gt;</bpt>userId<ept id="2">&lt;/strong&gt;</ept> property can be used to store and retrieve user-specific information.</source>
            <target state="new">The <bpt id="2">&lt;strong&gt;</bpt>userId<ept id="2">&lt;/strong&gt;</ept> property can be used to store and retrieve user-specific information.</target>
          </trans-unit>
          <trans-unit id="235" xml:space="preserve">
            <source>The following example sets the owner property of an item based on the userId of an authenticated user:</source>
            <target state="new">The following example sets the owner property of an item based on the userId of an authenticated user:</target>
          </trans-unit>
          <trans-unit id="236" xml:space="preserve">
            <source>The next example adds an additional filter to the query based on the <bpt id="2">&lt;strong&gt;</bpt>userId<ept id="2">&lt;/strong&gt;</ept> of an authenticated user.</source>
            <target state="new">The next example adds an additional filter to the query based on the <bpt id="2">&lt;strong&gt;</bpt>userId<ept id="2">&lt;/strong&gt;</ept> of an authenticated user.</target>
          </trans-unit>
          <trans-unit id="237" xml:space="preserve">
            <source>This filter restricts the result to only items that belong to the current user:</source>
            <target state="new">This filter restricts the result to only items that belong to the current user:</target>
          </trans-unit>
          <trans-unit id="238" xml:space="preserve">
            <source><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>Custom APIs</source>
            <target state="new"><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>Custom APIs</target>
          </trans-unit>
          <trans-unit id="239" xml:space="preserve">
            <source>This section describes how you create and work with custom API endpoints, which includes the following sections:</source>
            <target state="new">This section describes how you create and work with custom API endpoints, which includes the following sections:</target>
          </trans-unit>
          <trans-unit id="240" xml:space="preserve">
            <source><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Overview of custom APIs<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></source>
            <target state="new"><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Overview of custom APIs<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></target>
          </trans-unit>
          <trans-unit id="241" xml:space="preserve">
            <source>[How to: Define a custom API]</source>
            <target state="new">[How to: Define a custom API]</target>
          </trans-unit>
          <trans-unit id="242" xml:space="preserve">
            <source>[How to: Implement HTTP methods]</source>
            <target state="new">[How to: Implement HTTP methods]</target>
          </trans-unit>
          <trans-unit id="243" xml:space="preserve">
            <source>[How to: Send and receive data as XML]</source>
            <target state="new">[How to: Send and receive data as XML]</target>
          </trans-unit>
          <trans-unit id="244" xml:space="preserve">
            <source>[How to: Work with users and headers in a custom API]</source>
            <target state="new">[How to: Work with users and headers in a custom API]</target>
          </trans-unit>
          <trans-unit id="245" xml:space="preserve">
            <source>[How to: Define multiple routes in a custom API]</source>
            <target state="new">[How to: Define multiple routes in a custom API]</target>
          </trans-unit>
          <trans-unit id="246" xml:space="preserve">
            <source><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>Overview of custom APIs</source>
            <target state="new"><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>Overview of custom APIs</target>
          </trans-unit>
          <trans-unit id="247" xml:space="preserve">
            <source>A custom API is an endpoint in your mobile service that is accessed by one or more of the standard HTTP methods: GET, POST, PUT, PATCH, DELETE.</source>
            <target state="new">A custom API is an endpoint in your mobile service that is accessed by one or more of the standard HTTP methods: GET, POST, PUT, PATCH, DELETE.</target>
          </trans-unit>
          <trans-unit id="248" xml:space="preserve">
            <source>A separate function export can be defined for each HTTP method supported by the custom API, all in a single script file.</source>
            <target state="new">A separate function export can be defined for each HTTP method supported by the custom API, all in a single script file.</target>
          </trans-unit>
          <trans-unit id="249" xml:space="preserve">
            <source>The registered script is invoked when a request to the custom API using the given method is received.</source>
            <target state="new">The registered script is invoked when a request to the custom API using the given method is received.</target>
          </trans-unit>
          <trans-unit id="250" xml:space="preserve">
            <source>For more information, see [Custom API].</source>
            <target state="new">For more information, see [Custom API].</target>
          </trans-unit>
          <trans-unit id="251" xml:space="preserve">
            <source>When custom API functions are called by the Mobile Services runtime, both a <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>request[request object]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> and <bpt id="4CapsExtId1">&lt;link&gt;</bpt><bpt id="4CapsExtId2">&lt;linkText&gt;</bpt>response[response object]<ept id="4CapsExtId2">&lt;/linkText&gt;</ept><bpt id="4CapsExtId3">&lt;title&gt;</bpt><ept id="4CapsExtId3">&lt;/title&gt;</ept><ept id="4CapsExtId1">&lt;/link&gt;</ept> object are supplied.</source>
            <target state="new">When custom API functions are called by the Mobile Services runtime, both a <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>request[request object]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> and <bpt id="4CapsExtId1">&lt;link&gt;</bpt><bpt id="4CapsExtId2">&lt;linkText&gt;</bpt>response[response object]<ept id="4CapsExtId2">&lt;/linkText&gt;</ept><bpt id="4CapsExtId3">&lt;title&gt;</bpt><ept id="4CapsExtId3">&lt;/title&gt;</ept><ept id="4CapsExtId1">&lt;/link&gt;</ept> object are supplied.</target>
          </trans-unit>
          <trans-unit id="252" xml:space="preserve">
            <source>These objects expose the functionality of the [express.js library], which can be leveraged by your scripts.</source>
            <target state="new">These objects expose the functionality of the [express.js library], which can be leveraged by your scripts.</target>
          </trans-unit>
          <trans-unit id="253" xml:space="preserve">
            <source>The following custom API named <bpt id="2">&lt;strong&gt;</bpt>hello<ept id="2">&lt;/strong&gt;</ept> is a very simple example that returns _Hello, world!_ in response to a POST request:</source>
            <target state="new">The following custom API named <bpt id="2">&lt;strong&gt;</bpt>hello<ept id="2">&lt;/strong&gt;</ept> is a very simple example that returns _Hello, world!_ in response to a POST request:</target>
          </trans-unit>
          <trans-unit id="254" xml:space="preserve">
            <source>The <bpt id="2">&lt;strong&gt;</bpt>send<ept id="2">&lt;/strong&gt;</ept> function on the [response object] returns your desired response to the client.</source>
            <target state="new">The <bpt id="2">&lt;strong&gt;</bpt>send<ept id="2">&lt;/strong&gt;</ept> function on the [response object] returns your desired response to the client.</target>
          </trans-unit>
          <trans-unit id="255" xml:space="preserve">
            <source>This code is invoked by sending a POST request to the following URL:</source>
            <target state="new">This code is invoked by sending a POST request to the following URL:</target>
          </trans-unit>
          <trans-unit id="256" xml:space="preserve">
            <source>The global state is maintained between executions.</source>
            <target state="new">The global state is maintained between executions.</target>
          </trans-unit>
          <trans-unit id="257" xml:space="preserve">
            <source><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>How to: Define a custom API</source>
            <target state="new"><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>How to: Define a custom API</target>
          </trans-unit>
          <trans-unit id="258" xml:space="preserve">
            <source>You can define server scripts that are registered to HTTP methods in a custom API endpoint in one of the following ways:</source>
            <target state="new">You can define server scripts that are registered to HTTP methods in a custom API endpoint in one of the following ways:</target>
          </trans-unit>
          <trans-unit id="259" xml:space="preserve">
            <source>In the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Azure Management Portal[management portal]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">In the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Azure Management Portal[management portal]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="260" xml:space="preserve">
            <source>Custom API scripts are created and modified in the <bpt id="2">&lt;strong&gt;</bpt>API<ept id="2">&lt;/strong&gt;</ept> tab.</source>
            <target state="new">Custom API scripts are created and modified in the <bpt id="2">&lt;strong&gt;</bpt>API<ept id="2">&lt;/strong&gt;</ept> tab.</target>
          </trans-unit>
          <trans-unit id="261" xml:space="preserve">
            <source>The server script code is in the <bpt id="2">&lt;strong&gt;</bpt>Scripts<ept id="2">&lt;/strong&gt;</ept> tab of a given custom API.</source>
            <target state="new">The server script code is in the <bpt id="2">&lt;strong&gt;</bpt>Scripts<ept id="2">&lt;/strong&gt;</ept> tab of a given custom API.</target>
          </trans-unit>
          <trans-unit id="262" xml:space="preserve">
            <source>The following shows the script that is invoked by a POST request to the <bpt id="2">&lt;code&gt;</bpt>CompleteAll<ept id="2">&lt;/code&gt;</ept> custom API endpoint.</source>
            <target state="new">The following shows the script that is invoked by a POST request to the <bpt id="2">&lt;code&gt;</bpt>CompleteAll<ept id="2">&lt;/code&gt;</ept> custom API endpoint.</target>
          </trans-unit>
          <trans-unit id="263" xml:space="preserve">
            <source><bpt id="1">&lt;linkText&gt;</bpt>2<ept id="1">&lt;/linkText&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;linkText&gt;</bpt>2<ept id="1">&lt;/linkText&gt;</ept></target>
          </trans-unit>
          <trans-unit id="264" xml:space="preserve">
            <source>Access permissions to custom API methods are assigned in the Permissions tab.</source>
            <target state="new">Access permissions to custom API methods are assigned in the Permissions tab.</target>
          </trans-unit>
          <trans-unit id="265" xml:space="preserve">
            <source>To see how this custom API was created, see [Call a custom API from the client].</source>
            <target state="new">To see how this custom API was created, see [Call a custom API from the client].</target>
          </trans-unit>
          <trans-unit id="266" xml:space="preserve">
            <source>By using source control. When you have source control enabled, simply create a file named <bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept><bpt id="3">&lt;code&gt;</bpt>&lt;custom_api&gt;<ept id="3">&lt;/code&gt;</ept><bpt id="4">&lt;html&gt;</bpt><ept id="4">&lt;/html&gt;</ept>.js in the .\service\api subfolder in your git repository, where <bpt id="6">&lt;html&gt;</bpt><ept id="6">&lt;/html&gt;</ept><bpt id="7">&lt;code&gt;</bpt>&lt;custom_api&gt;<ept id="7">&lt;/code&gt;</ept><bpt id="8">&lt;html&gt;</bpt><ept id="8">&lt;/html&gt;</ept> is the name of the custom API being registered. This script file contains an <bpt id="10">&lt;em&gt;</bpt>exported<ept id="10">&lt;/em&gt;</ept> function for each HTTP method exposed by the custom API. Permissions are defined in a companion .json file. For more information, see <bpt id="12CapsExtId1">&lt;link&gt;</bpt><bpt id="12CapsExtId2">&lt;linkText&gt;</bpt>Source control and shared code[source control, shared code, and helper functions]<ept id="12CapsExtId2">&lt;/linkText&gt;</ept><bpt id="12CapsExtId3">&lt;title&gt;</bpt><ept id="12CapsExtId3">&lt;/title&gt;</ept><ept id="12CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">By using source control. When you have source control enabled, simply create a file named <bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept><bpt id="3">&lt;code&gt;</bpt>&lt;custom_api&gt;<ept id="3">&lt;/code&gt;</ept><bpt id="4">&lt;html&gt;</bpt><ept id="4">&lt;/html&gt;</ept>.js in the .\service\api subfolder in your git repository, where <bpt id="6">&lt;html&gt;</bpt><ept id="6">&lt;/html&gt;</ept><bpt id="7">&lt;code&gt;</bpt>&lt;custom_api&gt;<ept id="7">&lt;/code&gt;</ept><bpt id="8">&lt;html&gt;</bpt><ept id="8">&lt;/html&gt;</ept> is the name of the custom API being registered. This script file contains an <bpt id="10">&lt;em&gt;</bpt>exported<ept id="10">&lt;/em&gt;</ept> function for each HTTP method exposed by the custom API. Permissions are defined in a companion .json file. For more information, see <bpt id="12CapsExtId1">&lt;link&gt;</bpt><bpt id="12CapsExtId2">&lt;linkText&gt;</bpt>Source control and shared code[source control, shared code, and helper functions]<ept id="12CapsExtId2">&lt;/linkText&gt;</ept><bpt id="12CapsExtId3">&lt;title&gt;</bpt><ept id="12CapsExtId3">&lt;/title&gt;</ept><ept id="12CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="267" xml:space="preserve">
            <source>From the command prompt by using the Azure command line tool.</source>
            <target state="new">From the command prompt by using the Azure command line tool.</target>
          </trans-unit>
          <trans-unit id="268" xml:space="preserve">
            <source>For more information, see [Using the command line tool].</source>
            <target state="new">For more information, see [Using the command line tool].</target>
          </trans-unit>
          <trans-unit id="269" xml:space="preserve">
            <source><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>How to: Implement HTTP methods</source>
            <target state="new"><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>How to: Implement HTTP methods</target>
          </trans-unit>
          <trans-unit id="270" xml:space="preserve">
            <source>A custom API can handle one or more of the HTTP methods, GET, POST, PUT, PATCH, and DELETE.</source>
            <target state="new">A custom API can handle one or more of the HTTP methods, GET, POST, PUT, PATCH, and DELETE.</target>
          </trans-unit>
          <trans-unit id="271" xml:space="preserve">
            <source>An exported function is defined for each HTTP method handled by the custom API.</source>
            <target state="new">An exported function is defined for each HTTP method handled by the custom API.</target>
          </trans-unit>
          <trans-unit id="272" xml:space="preserve">
            <source>A single custom API code file can export one or all of the following functions:</source>
            <target state="new">A single custom API code file can export one or all of the following functions:</target>
          </trans-unit>
          <trans-unit id="273" xml:space="preserve">
            <source>The custom API endpoint cannot be called using an HTTP method that has not been implemented in the server script, and a 405 (Method Not Allowed) error response is returned.</source>
            <target state="new">The custom API endpoint cannot be called using an HTTP method that has not been implemented in the server script, and a 405 (Method Not Allowed) error response is returned.</target>
          </trans-unit>
          <trans-unit id="274" xml:space="preserve">
            <source>Separate permission levels can be assigned to each support HTTP method.</source>
            <target state="new">Separate permission levels can be assigned to each support HTTP method.</target>
          </trans-unit>
          <trans-unit id="275" xml:space="preserve">
            <source><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>How to: Send and receive data as XML</source>
            <target state="new"><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>How to: Send and receive data as XML</target>
          </trans-unit>
          <trans-unit id="276" xml:space="preserve">
            <source>When clients store and retrieve data, Mobile Services uses JavaScript Object Notation (JSON) to represent data in the message body.</source>
            <target state="new">When clients store and retrieve data, Mobile Services uses JavaScript Object Notation (JSON) to represent data in the message body.</target>
          </trans-unit>
          <trans-unit id="277" xml:space="preserve">
            <source>However, there are scenarios where you instead want to use an XML payload.</source>
            <target state="new">However, there are scenarios where you instead want to use an XML payload.</target>
          </trans-unit>
          <trans-unit id="278" xml:space="preserve">
            <source>For example, Windows Store apps have a built-in periodic notifications functionality that requires the service to emit XML.</source>
            <target state="new">For example, Windows Store apps have a built-in periodic notifications functionality that requires the service to emit XML.</target>
          </trans-unit>
          <trans-unit id="279" xml:space="preserve">
            <source>For more information, see [Define a custom API that supports periodic notifications].</source>
            <target state="new">For more information, see [Define a custom API that supports periodic notifications].</target>
          </trans-unit>
          <trans-unit id="280" xml:space="preserve">
            <source>The following <bpt id="2">&lt;strong&gt;</bpt>OrderPizza<ept id="2">&lt;/strong&gt;</ept> custom API function returns a simple XML document as the response payload:</source>
            <target state="new">The following <bpt id="2">&lt;strong&gt;</bpt>OrderPizza<ept id="2">&lt;/strong&gt;</ept> custom API function returns a simple XML document as the response payload:</target>
          </trans-unit>
          <trans-unit id="281" xml:space="preserve">
            <source>This custom API function is invoked by an HTTP GET request to the following endpoint:</source>
            <target state="new">This custom API function is invoked by an HTTP GET request to the following endpoint:</target>
          </trans-unit>
          <trans-unit id="282" xml:space="preserve">
            <source><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>How to: Work with users and headers in a custom API</source>
            <target state="new"><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>How to: Work with users and headers in a custom API</target>
          </trans-unit>
          <trans-unit id="283" xml:space="preserve">
            <source>In Azure Mobile Services, you can use an identity provider to authenticate users.</source>
            <target state="new">In Azure Mobile Services, you can use an identity provider to authenticate users.</target>
          </trans-unit>
          <trans-unit id="284" xml:space="preserve">
            <source>For more information, see [Get started with authentication].</source>
            <target state="new">For more information, see [Get started with authentication].</target>
          </trans-unit>
          <trans-unit id="285" xml:space="preserve">
            <source>When an authenticated user requests a custom API, Mobile Services uses the [user object] to provide information about the user to custom API code.</source>
            <target state="new">When an authenticated user requests a custom API, Mobile Services uses the [user object] to provide information about the user to custom API code.</target>
          </trans-unit>
          <trans-unit id="286" xml:space="preserve">
            <source>The [user object] is accessed from the user property of the [request object].</source>
            <target state="new">The [user object] is accessed from the user property of the [request object].</target>
          </trans-unit>
          <trans-unit id="287" xml:space="preserve">
            <source>The <bpt id="2">&lt;strong&gt;</bpt>userId<ept id="2">&lt;/strong&gt;</ept> property can be used to store and retrieve user-specific information.</source>
            <target state="new">The <bpt id="2">&lt;strong&gt;</bpt>userId<ept id="2">&lt;/strong&gt;</ept> property can be used to store and retrieve user-specific information.</target>
          </trans-unit>
          <trans-unit id="288" xml:space="preserve">
            <source>The following <bpt id="2">&lt;strong&gt;</bpt>OrderPizza<ept id="2">&lt;/strong&gt;</ept> custom API function sets the owner property of an item based on the userId of an authenticated user:</source>
            <target state="new">The following <bpt id="2">&lt;strong&gt;</bpt>OrderPizza<ept id="2">&lt;/strong&gt;</ept> custom API function sets the owner property of an item based on the userId of an authenticated user:</target>
          </trans-unit>
          <trans-unit id="289" xml:space="preserve">
            <source>This custom API function is invoked by an HTTP POST request to the following endpoint:</source>
            <target state="new">This custom API function is invoked by an HTTP POST request to the following endpoint:</target>
          </trans-unit>
          <trans-unit id="290" xml:space="preserve">
            <source>You can also access a specific HTTP header from the [request object], as shown in the following code:</source>
            <target state="new">You can also access a specific HTTP header from the [request object], as shown in the following code:</target>
          </trans-unit>
          <trans-unit id="291" xml:space="preserve">
            <source>This simple example reads a custom header named <bpt id="2">&lt;code&gt;</bpt>my-custom-header<ept id="2">&lt;/code&gt;</ept>, then returns the value in the response.</source>
            <target state="new">This simple example reads a custom header named <bpt id="2">&lt;code&gt;</bpt>my-custom-header<ept id="2">&lt;/code&gt;</ept>, then returns the value in the response.</target>
          </trans-unit>
          <trans-unit id="292" xml:space="preserve">
            <source><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>How to: Define multiple routes in a custom API</source>
            <target state="new"><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>How to: Define multiple routes in a custom API</target>
          </trans-unit>
          <trans-unit id="293" xml:space="preserve">
            <source>Mobile Services enables you to define multiple paths, or routes, in a custom API.</source>
            <target state="new">Mobile Services enables you to define multiple paths, or routes, in a custom API.</target>
          </trans-unit>
          <trans-unit id="294" xml:space="preserve">
            <source>For example, HTTP GET requests to the following URLs in a <bpt id="2">&lt;strong&gt;</bpt>calculator<ept id="2">&lt;/strong&gt;</ept> custom API will invoke an <bpt id="4">&lt;strong&gt;</bpt>add<ept id="4">&lt;/strong&gt;</ept> or <bpt id="6">&lt;strong&gt;</bpt>subtract<ept id="6">&lt;/strong&gt;</ept> function, respectively:</source>
            <target state="new">For example, HTTP GET requests to the following URLs in a <bpt id="2">&lt;strong&gt;</bpt>calculator<ept id="2">&lt;/strong&gt;</ept> custom API will invoke an <bpt id="4">&lt;strong&gt;</bpt>add<ept id="4">&lt;/strong&gt;</ept> or <bpt id="6">&lt;strong&gt;</bpt>subtract<ept id="6">&lt;/strong&gt;</ept> function, respectively:</target>
          </trans-unit>
          <trans-unit id="295" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>https://&lt;service&gt;.azure-mobile.net/api/calculator/add<ept id="1">&lt;/code&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>https://&lt;service&gt;.azure-mobile.net/api/calculator/add<ept id="1">&lt;/code&gt;</ept></target>
          </trans-unit>
          <trans-unit id="296" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>https://&lt;service&gt;.azure-mobile.net/api/calculator/sub<ept id="1">&lt;/code&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>https://&lt;service&gt;.azure-mobile.net/api/calculator/sub<ept id="1">&lt;/code&gt;</ept></target>
          </trans-unit>
          <trans-unit id="297" xml:space="preserve">
            <source>Multiple routes are defined by exporting a <bpt id="2">&lt;strong&gt;</bpt>register<ept id="2">&lt;/strong&gt;</ept> function, which is passed an <bpt id="4">&lt;strong&gt;</bpt>api<ept id="4">&lt;/strong&gt;</ept> object (similar to the [express object in express.js]) that is used to register routes under the custom API endpoint.</source>
            <target state="new">Multiple routes are defined by exporting a <bpt id="2">&lt;strong&gt;</bpt>register<ept id="2">&lt;/strong&gt;</ept> function, which is passed an <bpt id="4">&lt;strong&gt;</bpt>api<ept id="4">&lt;/strong&gt;</ept> object (similar to the [express object in express.js]) that is used to register routes under the custom API endpoint.</target>
          </trans-unit>
          <trans-unit id="298" xml:space="preserve">
            <source>The following example implements the <bpt id="2">&lt;strong&gt;</bpt>add<ept id="2">&lt;/strong&gt;</ept> and <bpt id="4">&lt;strong&gt;</bpt>sub<ept id="4">&lt;/strong&gt;</ept> methods in the <bpt id="6">&lt;strong&gt;</bpt>calculator<ept id="6">&lt;/strong&gt;</ept> custom API:</source>
            <target state="new">The following example implements the <bpt id="2">&lt;strong&gt;</bpt>add<ept id="2">&lt;/strong&gt;</ept> and <bpt id="4">&lt;strong&gt;</bpt>sub<ept id="4">&lt;/strong&gt;</ept> methods in the <bpt id="6">&lt;strong&gt;</bpt>calculator<ept id="6">&lt;/strong&gt;</ept> custom API:</target>
          </trans-unit>
          <trans-unit id="299" xml:space="preserve">
            <source>The <bpt id="2">&lt;strong&gt;</bpt>api<ept id="2">&lt;/strong&gt;</ept> object passed to the <bpt id="4">&lt;strong&gt;</bpt>register<ept id="4">&lt;/strong&gt;</ept> function exposes a function for each HTTP method (<bpt id="6">&lt;strong&gt;</bpt>get<ept id="6">&lt;/strong&gt;</ept>, <bpt id="8">&lt;strong&gt;</bpt>post<ept id="8">&lt;/strong&gt;</ept>, <bpt id="10">&lt;strong&gt;</bpt>put<ept id="10">&lt;/strong&gt;</ept>, <bpt id="12">&lt;strong&gt;</bpt>patch<ept id="12">&lt;/strong&gt;</ept>, <bpt id="14">&lt;strong&gt;</bpt>delete<ept id="14">&lt;/strong&gt;</ept>).</source>
            <target state="new">The <bpt id="2">&lt;strong&gt;</bpt>api<ept id="2">&lt;/strong&gt;</ept> object passed to the <bpt id="4">&lt;strong&gt;</bpt>register<ept id="4">&lt;/strong&gt;</ept> function exposes a function for each HTTP method (<bpt id="6">&lt;strong&gt;</bpt>get<ept id="6">&lt;/strong&gt;</ept>, <bpt id="8">&lt;strong&gt;</bpt>post<ept id="8">&lt;/strong&gt;</ept>, <bpt id="10">&lt;strong&gt;</bpt>put<ept id="10">&lt;/strong&gt;</ept>, <bpt id="12">&lt;strong&gt;</bpt>patch<ept id="12">&lt;/strong&gt;</ept>, <bpt id="14">&lt;strong&gt;</bpt>delete<ept id="14">&lt;/strong&gt;</ept>).</target>
          </trans-unit>
          <trans-unit id="300" xml:space="preserve">
            <source>These functions register a route to a defined function for a specific HTTP method.</source>
            <target state="new">These functions register a route to a defined function for a specific HTTP method.</target>
          </trans-unit>
          <trans-unit id="301" xml:space="preserve">
            <source>Each function takes two parameters, the first is the route name and the second is the function registered to the route.</source>
            <target state="new">Each function takes two parameters, the first is the route name and the second is the function registered to the route.</target>
          </trans-unit>
          <trans-unit id="302" xml:space="preserve">
            <source>The two routes in the above custom API example can be invoked by HTTP GET requests as follows (shown with the response):</source>
            <target state="new">The two routes in the above custom API example can be invoked by HTTP GET requests as follows (shown with the response):</target>
          </trans-unit>
          <trans-unit id="303" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>https://&lt;service&gt;.azure-mobile.net/api/calculator/add?a=1&amp;b=2<ept id="1">&lt;/code&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>https://&lt;service&gt;.azure-mobile.net/api/calculator/add?a=1&amp;b=2<ept id="1">&lt;/code&gt;</ept></target>
          </trans-unit>
          <trans-unit id="304" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>https://&lt;service&gt;.azure-mobile.net/api/calculator/sub?a=3&amp;b=5<ept id="1">&lt;/code&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>https://&lt;service&gt;.azure-mobile.net/api/calculator/sub?a=3&amp;b=5<ept id="1">&lt;/code&gt;</ept></target>
          </trans-unit>
          <trans-unit id="305" xml:space="preserve">
            <source><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>Job Scheduler</source>
            <target state="new"><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>Job Scheduler</target>
          </trans-unit>
          <trans-unit id="306" xml:space="preserve">
            <source>Mobile Services enables you to define server scripts that are executed either as jobs on a fixed schedule or on-demand from the Management Portal.</source>
            <target state="new">Mobile Services enables you to define server scripts that are executed either as jobs on a fixed schedule or on-demand from the Management Portal.</target>
          </trans-unit>
          <trans-unit id="307" xml:space="preserve">
            <source>Scheduled jobs are useful for performing periodic tasks such as cleaning-up table data and batch processing.</source>
            <target state="new">Scheduled jobs are useful for performing periodic tasks such as cleaning-up table data and batch processing.</target>
          </trans-unit>
          <trans-unit id="308" xml:space="preserve">
            <source>For more information, see [Schedule jobs].</source>
            <target state="new">For more information, see [Schedule jobs].</target>
          </trans-unit>
          <trans-unit id="309" xml:space="preserve">
            <source>Scripts that are registered to scheduled jobs have a main function with the same name as the scheduled job.</source>
            <target state="new">Scripts that are registered to scheduled jobs have a main function with the same name as the scheduled job.</target>
          </trans-unit>
          <trans-unit id="310" xml:space="preserve">
            <source>Because a scheduled script is not invoked by an HTTP request, there is no context that can be passed by the server runtime and the function takes no parameters.</source>
            <target state="new">Because a scheduled script is not invoked by an HTTP request, there is no context that can be passed by the server runtime and the function takes no parameters.</target>
          </trans-unit>
          <trans-unit id="311" xml:space="preserve">
            <source>Like other kinds of scripts, you can have subroutine functions and require shared modules.</source>
            <target state="new">Like other kinds of scripts, you can have subroutine functions and require shared modules.</target>
          </trans-unit>
          <trans-unit id="312" xml:space="preserve">
            <source>For more information, see [Source control, shared code, and helper functions].</source>
            <target state="new">For more information, see [Source control, shared code, and helper functions].</target>
          </trans-unit>
          <trans-unit id="313" xml:space="preserve">
            <source><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>How to: Define scheduled job scripts</source>
            <target state="new"><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>How to: Define scheduled job scripts</target>
          </trans-unit>
          <trans-unit id="314" xml:space="preserve">
            <source>A server script can be assigned to a job that's defined in the Mobile Services Scheduler.</source>
            <target state="new">A server script can be assigned to a job that's defined in the Mobile Services Scheduler.</target>
          </trans-unit>
          <trans-unit id="315" xml:space="preserve">
            <source>These scripts belong to the job and are executed according to the job schedule.</source>
            <target state="new">These scripts belong to the job and are executed according to the job schedule.</target>
          </trans-unit>
          <trans-unit id="316" xml:space="preserve">
            <source>(You can also use the [Management Portal] to run jobs on demand.)</source>
            <target state="new">(You can also use the [Management Portal] to run jobs on demand.)</target>
          </trans-unit>
          <trans-unit id="317" xml:space="preserve">
            <source>A script that defines a scheduled job has no parameters because Mobile Services doesn't pass it any data; it's executed as a regular JavaScript function and doesn't interact with Mobile Services directly.</source>
            <target state="new">A script that defines a scheduled job has no parameters because Mobile Services doesn't pass it any data; it's executed as a regular JavaScript function and doesn't interact with Mobile Services directly.</target>
          </trans-unit>
          <trans-unit id="318" xml:space="preserve">
            <source>You define scheduled jobs in one of the following ways:</source>
            <target state="new">You define scheduled jobs in one of the following ways:</target>
          </trans-unit>
          <trans-unit id="319" xml:space="preserve">
            <source>In the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Azure Management Portal[management portal]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> in the <bpt id="4">&lt;strong&gt;</bpt>Script<ept id="4">&lt;/strong&gt;</ept> tab in the scheduler:</source>
            <target state="new">In the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Azure Management Portal[management portal]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> in the <bpt id="4">&lt;strong&gt;</bpt>Script<ept id="4">&lt;/strong&gt;</ept> tab in the scheduler:</target>
          </trans-unit>
          <trans-unit id="320" xml:space="preserve">
            <source><bpt id="1">&lt;linkText&gt;</bpt>3<ept id="1">&lt;/linkText&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;linkText&gt;</bpt>3<ept id="1">&lt;/linkText&gt;</ept></target>
          </trans-unit>
          <trans-unit id="321" xml:space="preserve">
            <source>For more information about how to do this, see [Schedule backend jobs in Mobile Services].</source>
            <target state="new">For more information about how to do this, see [Schedule backend jobs in Mobile Services].</target>
          </trans-unit>
          <trans-unit id="322" xml:space="preserve">
            <source>From the command prompt by using the Azure command line tool.</source>
            <target state="new">From the command prompt by using the Azure command line tool.</target>
          </trans-unit>
          <trans-unit id="323" xml:space="preserve">
            <source>For more information, see [Using the command line tool].</source>
            <target state="new">For more information, see [Using the command line tool].</target>
          </trans-unit>
          <trans-unit id="324" xml:space="preserve">
            <source>When you have source control enabled, you can edit scheduled job script files directly in the .\service\scheduler subfolder in your git repository.</source>
            <target state="new">When you have source control enabled, you can edit scheduled job script files directly in the .\service\scheduler subfolder in your git repository.</target>
          </trans-unit>
          <trans-unit id="325" xml:space="preserve">
            <source>For more information, see [How to: Share code by using source control].</source>
            <target state="new">For more information, see [How to: Share code by using source control].</target>
          </trans-unit>
          <trans-unit id="326" xml:space="preserve">
            <source><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>Source control, shared code, and helper functions</source>
            <target state="new"><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>Source control, shared code, and helper functions</target>
          </trans-unit>
          <trans-unit id="327" xml:space="preserve">
            <source>This sections shows you how to leverage source control to add your own custom node.js modules, shared code and other code reuse strategies, including the following sections:</source>
            <target state="new">This sections shows you how to leverage source control to add your own custom node.js modules, shared code and other code reuse strategies, including the following sections:</target>
          </trans-unit>
          <trans-unit id="328" xml:space="preserve">
            <source><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Overview of leveraging shared code<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></source>
            <target state="new"><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Overview of leveraging shared code<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></target>
          </trans-unit>
          <trans-unit id="329" xml:space="preserve">
            <source>[How to: Load Node.js modules]</source>
            <target state="new">[How to: Load Node.js modules]</target>
          </trans-unit>
          <trans-unit id="330" xml:space="preserve">
            <source>[How to: Use helper functions]</source>
            <target state="new">[How to: Use helper functions]</target>
          </trans-unit>
          <trans-unit id="331" xml:space="preserve">
            <source>[How to: Share code by using source control]</source>
            <target state="new">[How to: Share code by using source control]</target>
          </trans-unit>
          <trans-unit id="332" xml:space="preserve">
            <source>[How to: Work with app settings]</source>
            <target state="new">[How to: Work with app settings]</target>
          </trans-unit>
          <trans-unit id="333" xml:space="preserve">
            <source><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>Overview of leveraging shared code</source>
            <target state="new"><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>Overview of leveraging shared code</target>
          </trans-unit>
          <trans-unit id="334" xml:space="preserve">
            <source>Because Mobile Services uses Node.js on the server, your scripts already have access to the built-in Node.js modules.</source>
            <target state="new">Because Mobile Services uses Node.js on the server, your scripts already have access to the built-in Node.js modules.</target>
          </trans-unit>
          <trans-unit id="335" xml:space="preserve">
            <source>You can also use source control to define your own modules or add other Node.js modules to your service.</source>
            <target state="new">You can also use source control to define your own modules or add other Node.js modules to your service.</target>
          </trans-unit>
          <trans-unit id="336" xml:space="preserve">
            <source>The following are just some of the more useful modules that can be leveraged in your scripts by using the global <bpt id="2">&lt;strong&gt;</bpt>require<ept id="2">&lt;/strong&gt;</ept> function:</source>
            <target state="new">The following are just some of the more useful modules that can be leveraged in your scripts by using the global <bpt id="2">&lt;strong&gt;</bpt>require<ept id="2">&lt;/strong&gt;</ept> function:</target>
          </trans-unit>
          <trans-unit id="337" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>azure<ept id="1">&lt;/strong&gt;</ept>: Exposes the functionality of the Azure SDK for Node.js.</source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>azure<ept id="1">&lt;/strong&gt;</ept>: Exposes the functionality of the Azure SDK for Node.js.</target>
          </trans-unit>
          <trans-unit id="338" xml:space="preserve">
            <source>For more information, see the [Azure SDK for Node.js].</source>
            <target state="new">For more information, see the [Azure SDK for Node.js].</target>
          </trans-unit>
          <trans-unit id="339" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>crypto<ept id="1">&lt;/strong&gt;</ept>: Provides crypto functionality of OpenSSL.</source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>crypto<ept id="1">&lt;/strong&gt;</ept>: Provides crypto functionality of OpenSSL.</target>
          </trans-unit>
          <trans-unit id="340" xml:space="preserve">
            <source>For more information, see the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Node.js documentation[crypto api]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">For more information, see the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Node.js documentation[crypto api]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="341" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>path<ept id="1">&lt;/strong&gt;</ept>: Contains utilities for working with file paths.</source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>path<ept id="1">&lt;/strong&gt;</ept>: Contains utilities for working with file paths.</target>
          </trans-unit>
          <trans-unit id="342" xml:space="preserve">
            <source>For more information, see the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Node.js documentation[path api]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">For more information, see the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Node.js documentation[path api]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="343" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>querystring<ept id="1">&lt;/strong&gt;</ept>: Contains utilities for working with query strings.</source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>querystring<ept id="1">&lt;/strong&gt;</ept>: Contains utilities for working with query strings.</target>
          </trans-unit>
          <trans-unit id="344" xml:space="preserve">
            <source>For more information, see the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Node.js documentation[querystring api]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">For more information, see the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Node.js documentation[querystring api]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="345" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>request<ept id="1">&lt;/strong&gt;</ept>: Sends HTTP requests to external REST services, such as Twitter and Facebook.</source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>request<ept id="1">&lt;/strong&gt;</ept>: Sends HTTP requests to external REST services, such as Twitter and Facebook.</target>
          </trans-unit>
          <trans-unit id="346" xml:space="preserve">
            <source>For more information, see [Send HTTP request].</source>
            <target state="new">For more information, see [Send HTTP request].</target>
          </trans-unit>
          <trans-unit id="347" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>sendgrid<ept id="1">&lt;/strong&gt;</ept>: Sends email by using the Sendgrid email service in Azure.</source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>sendgrid<ept id="1">&lt;/strong&gt;</ept>: Sends email by using the Sendgrid email service in Azure.</target>
          </trans-unit>
          <trans-unit id="348" xml:space="preserve">
            <source>For more information, see [Send email from Mobile Services with SendGrid].</source>
            <target state="new">For more information, see [Send email from Mobile Services with SendGrid].</target>
          </trans-unit>
          <trans-unit id="349" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>url<ept id="1">&lt;/strong&gt;</ept>: Contains utilities to parse and resolve URLs.</source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>url<ept id="1">&lt;/strong&gt;</ept>: Contains utilities to parse and resolve URLs.</target>
          </trans-unit>
          <trans-unit id="350" xml:space="preserve">
            <source>For more information, see the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Node.js documentation[url api]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">For more information, see the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Node.js documentation[url api]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="351" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>util<ept id="1">&lt;/strong&gt;</ept>: Contains various utilities, such as string formatting and object type checking.</source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>util<ept id="1">&lt;/strong&gt;</ept>: Contains various utilities, such as string formatting and object type checking.</target>
          </trans-unit>
          <trans-unit id="352" xml:space="preserve">
            <source>For more information, see the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Node.js documentation[util api]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">For more information, see the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Node.js documentation[util api]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="353" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>zlib<ept id="1">&lt;/strong&gt;</ept>: Exposes compression functionality, such as gzip and deflate.</source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>zlib<ept id="1">&lt;/strong&gt;</ept>: Exposes compression functionality, such as gzip and deflate.</target>
          </trans-unit>
          <trans-unit id="354" xml:space="preserve">
            <source>For more information, see the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Node.js documentation[zlib api]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">For more information, see the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Node.js documentation[zlib api]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="355" xml:space="preserve">
            <source><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>How to: Leverage modules</source>
            <target state="new"><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>How to: Leverage modules</target>
          </trans-unit>
          <trans-unit id="356" xml:space="preserve">
            <source>Mobile Services exposes a set of modules that scripts can load by using the global <bpt id="2">&lt;strong&gt;</bpt>require<ept id="2">&lt;/strong&gt;</ept> function.</source>
            <target state="new">Mobile Services exposes a set of modules that scripts can load by using the global <bpt id="2">&lt;strong&gt;</bpt>require<ept id="2">&lt;/strong&gt;</ept> function.</target>
          </trans-unit>
          <trans-unit id="357" xml:space="preserve">
            <source>For example, a script can require <bpt id="2">&lt;strong&gt;</bpt>request<ept id="2">&lt;/strong&gt;</ept> to make HTTP requests:</source>
            <target state="new">For example, a script can require <bpt id="2">&lt;strong&gt;</bpt>request<ept id="2">&lt;/strong&gt;</ept> to make HTTP requests:</target>
          </trans-unit>
          <trans-unit id="358" xml:space="preserve">
            <source><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>How to: Share code by using source control</source>
            <target state="new"><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>How to: Share code by using source control</target>
          </trans-unit>
          <trans-unit id="359" xml:space="preserve">
            <source>You can use source control with the Node.js package manager (npm) to control which modules are available to your mobile service.</source>
            <target state="new">You can use source control with the Node.js package manager (npm) to control which modules are available to your mobile service.</target>
          </trans-unit>
          <trans-unit id="360" xml:space="preserve">
            <source>There are two ways to do this:</source>
            <target state="new">There are two ways to do this:</target>
          </trans-unit>
          <trans-unit id="361" xml:space="preserve">
            <source>For modules that are published to and installed by npm, use the package.json file to declare which packages you want to be installed by your mobile service.</source>
            <target state="new">For modules that are published to and installed by npm, use the package.json file to declare which packages you want to be installed by your mobile service.</target>
          </trans-unit>
          <trans-unit id="362" xml:space="preserve">
            <source>In this way, your service always has access to the latest version of the required packages.</source>
            <target state="new">In this way, your service always has access to the latest version of the required packages.</target>
          </trans-unit>
          <trans-unit id="363" xml:space="preserve">
            <source>The package.json file lives in the <bpt id="2">&lt;code&gt;</bpt>.\service<ept id="2">&lt;/code&gt;</ept> directory.</source>
            <target state="new">The package.json file lives in the <bpt id="2">&lt;code&gt;</bpt>.\service<ept id="2">&lt;/code&gt;</ept> directory.</target>
          </trans-unit>
          <trans-unit id="364" xml:space="preserve">
            <source>For more information, see [Support for package.json in Azure Mobile Services].</source>
            <target state="new">For more information, see [Support for package.json in Azure Mobile Services].</target>
          </trans-unit>
          <trans-unit id="365" xml:space="preserve">
            <source>For private or custom modules, you can use npm to manually install the module into the <bpt id="2">&lt;code&gt;</bpt>.\service\node_modules<ept id="2">&lt;/code&gt;</ept> directory of your source control.</source>
            <target state="new">For private or custom modules, you can use npm to manually install the module into the <bpt id="2">&lt;code&gt;</bpt>.\service\node_modules<ept id="2">&lt;/code&gt;</ept> directory of your source control.</target>
          </trans-unit>
          <trans-unit id="366" xml:space="preserve">
            <source>For an example of how to manually upload a module, see [Leverage shared code and Node.js modules in your server scripts].</source>
            <target state="new">For an example of how to manually upload a module, see [Leverage shared code and Node.js modules in your server scripts].</target>
          </trans-unit>
          <trans-unit id="367" xml:space="preserve">
            <source>When <bpt id="2">&lt;code&gt;</bpt>node_modules<ept id="2">&lt;/code&gt;</ept> already exists in the directory hierarchy, NPM will create the <bpt id="4">&lt;code&gt;</bpt>\node-uuid<ept id="4">&lt;/code&gt;</ept> subdirectory there instead of creating a new <bpt id="6">&lt;code&gt;</bpt>node_modules<ept id="6">&lt;/code&gt;</ept> in the repository.</source>
            <target state="new">When <bpt id="2">&lt;code&gt;</bpt>node_modules<ept id="2">&lt;/code&gt;</ept> already exists in the directory hierarchy, NPM will create the <bpt id="4">&lt;code&gt;</bpt>\node-uuid<ept id="4">&lt;/code&gt;</ept> subdirectory there instead of creating a new <bpt id="6">&lt;code&gt;</bpt>node_modules<ept id="6">&lt;/code&gt;</ept> in the repository.</target>
          </trans-unit>
          <trans-unit id="368" xml:space="preserve">
            <source>In this case, just delete the existing <bpt id="2">&lt;code&gt;</bpt>node_modules<ept id="2">&lt;/code&gt;</ept> directory.</source>
            <target state="new">In this case, just delete the existing <bpt id="2">&lt;code&gt;</bpt>node_modules<ept id="2">&lt;/code&gt;</ept> directory.</target>
          </trans-unit>
          <trans-unit id="369" xml:space="preserve">
            <source>After you commit the package.json file or custom modules to the repository for your mobile service, use <bpt id="2">&lt;strong&gt;</bpt>require<ept id="2">&lt;/strong&gt;</ept> to reference the modules by name.</source>
            <target state="new">After you commit the package.json file or custom modules to the repository for your mobile service, use <bpt id="2">&lt;strong&gt;</bpt>require<ept id="2">&lt;/strong&gt;</ept> to reference the modules by name.</target>
          </trans-unit>
          <trans-unit id="370" xml:space="preserve">
            <source>Modules that you specify in package.json or upload to your mobile service are only used in your server script code.</source>
            <target state="new">Modules that you specify in package.json or upload to your mobile service are only used in your server script code.</target>
          </trans-unit>
          <trans-unit id="371" xml:space="preserve">
            <source>These modules are not used by the Mobile Services runtime.</source>
            <target state="new">These modules are not used by the Mobile Services runtime.</target>
          </trans-unit>
          <trans-unit id="372" xml:space="preserve">
            <source><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>How to: Use helper functions</source>
            <target state="new"><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>How to: Use helper functions</target>
          </trans-unit>
          <trans-unit id="373" xml:space="preserve">
            <source>In addition to requiring modules, individual server scripts can include helper functions.</source>
            <target state="new">In addition to requiring modules, individual server scripts can include helper functions.</target>
          </trans-unit>
          <trans-unit id="374" xml:space="preserve">
            <source>These are functions that are separate from the main function, which can be used to factor code in the script.</source>
            <target state="new">These are functions that are separate from the main function, which can be used to factor code in the script.</target>
          </trans-unit>
          <trans-unit id="375" xml:space="preserve">
            <source>In the following example, a table script is registered to the insert operation, which includes the helper function <bpt id="2">&lt;strong&gt;</bpt>handleUnapprovedItem<ept id="2">&lt;/strong&gt;</ept>:</source>
            <target state="new">In the following example, a table script is registered to the insert operation, which includes the helper function <bpt id="2">&lt;strong&gt;</bpt>handleUnapprovedItem<ept id="2">&lt;/strong&gt;</ept>:</target>
          </trans-unit>
          <trans-unit id="376" xml:space="preserve">
            <source>In a script, helper functions must be declared after the main function.</source>
            <target state="new">In a script, helper functions must be declared after the main function.</target>
          </trans-unit>
          <trans-unit id="377" xml:space="preserve">
            <source>You must declare all variables in your script.</source>
            <target state="new">You must declare all variables in your script.</target>
          </trans-unit>
          <trans-unit id="378" xml:space="preserve">
            <source>Undeclared variables cause an error.</source>
            <target state="new">Undeclared variables cause an error.</target>
          </trans-unit>
          <trans-unit id="379" xml:space="preserve">
            <source>Helper functions can also be defined once and shared between server scripts.</source>
            <target state="new">Helper functions can also be defined once and shared between server scripts.</target>
          </trans-unit>
          <trans-unit id="380" xml:space="preserve">
            <source>To share a function between scripts, functions must be exported and the script file must exist in the <bpt id="2">&lt;code&gt;</bpt>.\service\shared\<ept id="2">&lt;/code&gt;</ept> directory.</source>
            <target state="new">To share a function between scripts, functions must be exported and the script file must exist in the <bpt id="2">&lt;code&gt;</bpt>.\service\shared\<ept id="2">&lt;/code&gt;</ept> directory.</target>
          </trans-unit>
          <trans-unit id="381" xml:space="preserve">
            <source>The following is a template for how to export a shared function in a file <bpt id="2">&lt;code&gt;</bpt>.\services\shared\helpers.js<ept id="2">&lt;/code&gt;</ept>:</source>
            <target state="new">The following is a template for how to export a shared function in a file <bpt id="2">&lt;code&gt;</bpt>.\services\shared\helpers.js<ept id="2">&lt;/code&gt;</ept>:</target>
          </trans-unit>
          <trans-unit id="382" xml:space="preserve">
            <source>You can then use a function like this in a table operation script:</source>
            <target state="new">You can then use a function like this in a table operation script:</target>
          </trans-unit>
          <trans-unit id="383" xml:space="preserve">
            <source>In this example, you must pass both a [tables object] and a [user object] to the shared function.</source>
            <target state="new">In this example, you must pass both a [tables object] and a [user object] to the shared function.</target>
          </trans-unit>
          <trans-unit id="384" xml:space="preserve">
            <source>This is because shared scripts cannot access the global [tables object], and the [user object] only exists in the context of a request.</source>
            <target state="new">This is because shared scripts cannot access the global [tables object], and the [user object] only exists in the context of a request.</target>
          </trans-unit>
          <trans-unit id="385" xml:space="preserve">
            <source>Script files are uploaded to the shared directory either by using <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>source control[how to: share code by using source control]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> or by using the <bpt id="4CapsExtId1">&lt;link&gt;</bpt><bpt id="4CapsExtId2">&lt;linkText&gt;</bpt>command line tool[using the command line tool]<ept id="4CapsExtId2">&lt;/linkText&gt;</ept><bpt id="4CapsExtId3">&lt;title&gt;</bpt><ept id="4CapsExtId3">&lt;/title&gt;</ept><ept id="4CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">Script files are uploaded to the shared directory either by using <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>source control[how to: share code by using source control]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> or by using the <bpt id="4CapsExtId1">&lt;link&gt;</bpt><bpt id="4CapsExtId2">&lt;linkText&gt;</bpt>command line tool[using the command line tool]<ept id="4CapsExtId2">&lt;/linkText&gt;</ept><bpt id="4CapsExtId3">&lt;title&gt;</bpt><ept id="4CapsExtId3">&lt;/title&gt;</ept><ept id="4CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="386" xml:space="preserve">
            <source><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>How to: Work with app settings</source>
            <target state="new"><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>How to: Work with app settings</target>
          </trans-unit>
          <trans-unit id="387" xml:space="preserve">
            <source>Mobile Services enables you to securely store values as app settings, which can be accessed by your server scripts at runtime.</source>
            <target state="new">Mobile Services enables you to securely store values as app settings, which can be accessed by your server scripts at runtime.</target>
          </trans-unit>
          <trans-unit id="388" xml:space="preserve">
            <source>When you add data to the app settings of your mobile service, the name/value pairs are stored encrypted and you can access them in your server scripts without hard-coding them in the script file.</source>
            <target state="new">When you add data to the app settings of your mobile service, the name/value pairs are stored encrypted and you can access them in your server scripts without hard-coding them in the script file.</target>
          </trans-unit>
          <trans-unit id="389" xml:space="preserve">
            <source>For more information, see [App settings].</source>
            <target state="new">For more information, see [App settings].</target>
          </trans-unit>
          <trans-unit id="390" xml:space="preserve">
            <source>The following custom API example uses the supplied [service object] to retrieve an app setting value.</source>
            <target state="new">The following custom API example uses the supplied [service object] to retrieve an app setting value.</target>
          </trans-unit>
          <trans-unit id="391" xml:space="preserve">
            <source>The following code uses the configuration module to retrieve Twitter access token values, stored in app settings, that are used in a scheduled job script:</source>
            <target state="new">The following code uses the configuration module to retrieve Twitter access token values, stored in app settings, that are used in a scheduled job script:</target>
          </trans-unit>
          <trans-unit id="392" xml:space="preserve">
            <source>Note that this code also retrieves Twitter consumer key values stored in the <bpt id="2">&lt;strong&gt;</bpt>Identity<ept id="2">&lt;/strong&gt;</ept> tab in the portal.</source>
            <target state="new">Note that this code also retrieves Twitter consumer key values stored in the <bpt id="2">&lt;strong&gt;</bpt>Identity<ept id="2">&lt;/strong&gt;</ept> tab in the portal.</target>
          </trans-unit>
          <trans-unit id="393" xml:space="preserve">
            <source>Because a <bpt id="2">&lt;strong&gt;</bpt>config object<ept id="2">&lt;/strong&gt;</ept> is not available in table operation and scheduled job scripts, you must require the configuration module to access app settings.</source>
            <target state="new">Because a <bpt id="2">&lt;strong&gt;</bpt>config object<ept id="2">&lt;/strong&gt;</ept> is not available in table operation and scheduled job scripts, you must require the configuration module to access app settings.</target>
          </trans-unit>
          <trans-unit id="394" xml:space="preserve">
            <source>For a complete example, see [Schedule backend jobs in Mobile Services].</source>
            <target state="new">For a complete example, see [Schedule backend jobs in Mobile Services].</target>
          </trans-unit>
          <trans-unit id="395" xml:space="preserve">
            <source>Using the command line tool</source>
            <target state="new">Using the command line tool</target>
          </trans-unit>
          <trans-unit id="396" xml:space="preserve">
            <source>In Mobile Services, you can create, modify, and delete server scripts by using the Azure command line tool.</source>
            <target state="new">In Mobile Services, you can create, modify, and delete server scripts by using the Azure command line tool.</target>
          </trans-unit>
          <trans-unit id="397" xml:space="preserve">
            <source>Before uploading your scripts, make sure that you are using the following directory structure:</source>
            <target state="new">Before uploading your scripts, make sure that you are using the following directory structure:</target>
          </trans-unit>
          <trans-unit id="398" xml:space="preserve">
            <source><bpt id="1">&lt;linkText&gt;</bpt>4<ept id="1">&lt;/linkText&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;linkText&gt;</bpt>4<ept id="1">&lt;/linkText&gt;</ept></target>
          </trans-unit>
          <trans-unit id="399" xml:space="preserve">
            <source>Note that this directory structure is the same as the git repository when using source control.</source>
            <target state="new">Note that this directory structure is the same as the git repository when using source control.</target>
          </trans-unit>
          <trans-unit id="400" xml:space="preserve">
            <source>When uploading script files from the command line tool, you must first navigate to the <bpt id="2">&lt;code&gt;</bpt>.\services\<ept id="2">&lt;/code&gt;</ept> directory.</source>
            <target state="new">When uploading script files from the command line tool, you must first navigate to the <bpt id="2">&lt;code&gt;</bpt>.\services\<ept id="2">&lt;/code&gt;</ept> directory.</target>
          </trans-unit>
          <trans-unit id="401" xml:space="preserve">
            <source>The following command uploads a script named <bpt id="2">&lt;code&gt;</bpt>todoitem.insert.js<ept id="2">&lt;/code&gt;</ept> from the <bpt id="4">&lt;code&gt;</bpt>table<ept id="4">&lt;/code&gt;</ept> subdirectory:</source>
            <target state="new">The following command uploads a script named <bpt id="2">&lt;code&gt;</bpt>todoitem.insert.js<ept id="2">&lt;/code&gt;</ept> from the <bpt id="4">&lt;code&gt;</bpt>table<ept id="4">&lt;/code&gt;</ept> subdirectory:</target>
          </trans-unit>
          <trans-unit id="402" xml:space="preserve">
            <source>The following command returns information about every script file maintained in your mobile service:</source>
            <target state="new">The following command returns information about every script file maintained in your mobile service:</target>
          </trans-unit>
          <trans-unit id="403" xml:space="preserve">
            <source>For more information, see [Commands to manage Azure Mobile Services].</source>
            <target state="new">For more information, see [Commands to manage Azure Mobile Services].</target>
          </trans-unit>
          <trans-unit id="404" xml:space="preserve">
            <source><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>Working with tables</source>
            <target state="new"><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>Working with tables</target>
          </trans-unit>
          <trans-unit id="405" xml:space="preserve">
            <source>This section details strategies for working directly with SQL Database table data, including the following sections:</source>
            <target state="new">This section details strategies for working directly with SQL Database table data, including the following sections:</target>
          </trans-unit>
          <trans-unit id="406" xml:space="preserve">
            <source><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Overview of working with tables<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></source>
            <target state="new"><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Overview of working with tables<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></target>
          </trans-unit>
          <trans-unit id="407" xml:space="preserve">
            <source>[How to: Access tables from scripts]</source>
            <target state="new">[How to: Access tables from scripts]</target>
          </trans-unit>
          <trans-unit id="408" xml:space="preserve">
            <source>[How to: Perform Bulk Inserts]</source>
            <target state="new">[How to: Perform Bulk Inserts]</target>
          </trans-unit>
          <trans-unit id="409" xml:space="preserve">
            <source>[How to: Map JSON types to database types]</source>
            <target state="new">[How to: Map JSON types to database types]</target>
          </trans-unit>
          <trans-unit id="410" xml:space="preserve">
            <source>[Using Transact-SQL to access tables]</source>
            <target state="new">[Using Transact-SQL to access tables]</target>
          </trans-unit>
          <trans-unit id="411" xml:space="preserve">
            <source><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>Overview of working with tables</source>
            <target state="new"><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>Overview of working with tables</target>
          </trans-unit>
          <trans-unit id="412" xml:space="preserve">
            <source>Many scenarios in Mobile Services require server scripts to access tables in the database.</source>
            <target state="new">Many scenarios in Mobile Services require server scripts to access tables in the database.</target>
          </trans-unit>
          <trans-unit id="413" xml:space="preserve">
            <source>For example.</source>
            <target state="new">For example.</target>
          </trans-unit>
          <trans-unit id="414" xml:space="preserve">
            <source>because Mobile Services does not preserve state between script executions, any data that needs to be persisted between script executions must be stored in tables.</source>
            <target state="new">because Mobile Services does not preserve state between script executions, any data that needs to be persisted between script executions must be stored in tables.</target>
          </trans-unit>
          <trans-unit id="415" xml:space="preserve">
            <source>You might also want to examine entries in a permissions table or store audit data instead of just writing to the log, where data has a limited duration and cannot be accessed programmatically.</source>
            <target state="new">You might also want to examine entries in a permissions table or store audit data instead of just writing to the log, where data has a limited duration and cannot be accessed programmatically.</target>
          </trans-unit>
          <trans-unit id="416" xml:space="preserve">
            <source>Mobile Services has two ways of accessing tables, either by using a [table object] proxy or by composing Transact-SQL queries using the [mssql object].</source>
            <target state="new">Mobile Services has two ways of accessing tables, either by using a [table object] proxy or by composing Transact-SQL queries using the [mssql object].</target>
          </trans-unit>
          <trans-unit id="417" xml:space="preserve">
            <source>The [table object] makes it easy to access table data from your sever script code, but the [mssql object] supports more complex data operations and provides the most flexibility.</source>
            <target state="new">The [table object] makes it easy to access table data from your sever script code, but the [mssql object] supports more complex data operations and provides the most flexibility.</target>
          </trans-unit>
          <trans-unit id="418" xml:space="preserve">
            <source><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>How to: Access tables from scripts</source>
            <target state="new"><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>How to: Access tables from scripts</target>
          </trans-unit>
          <trans-unit id="419" xml:space="preserve">
            <source>The easiest way to access tables from your script is by using the [tables object].</source>
            <target state="new">The easiest way to access tables from your script is by using the [tables object].</target>
          </trans-unit>
          <trans-unit id="420" xml:space="preserve">
            <source>The <bpt id="2">&lt;strong&gt;</bpt>getTable<ept id="2">&lt;/strong&gt;</ept> function returns a [table object] instance that's a proxy for accessing the requested table.</source>
            <target state="new">The <bpt id="2">&lt;strong&gt;</bpt>getTable<ept id="2">&lt;/strong&gt;</ept> function returns a [table object] instance that's a proxy for accessing the requested table.</target>
          </trans-unit>
          <trans-unit id="421" xml:space="preserve">
            <source>You can then call functions on the proxy to access and change data.</source>
            <target state="new">You can then call functions on the proxy to access and change data.</target>
          </trans-unit>
          <trans-unit id="422" xml:space="preserve">
            <source>Scripts registered to both table operations and scheduled jobs can access the [tables object] as a global object.</source>
            <target state="new">Scripts registered to both table operations and scheduled jobs can access the [tables object] as a global object.</target>
          </trans-unit>
          <trans-unit id="423" xml:space="preserve">
            <source>This line of code gets a proxy for the <bpt id="2">&lt;em&gt;</bpt>TodoItems<ept id="2">&lt;/em&gt;</ept> table from the global [tables object]:</source>
            <target state="new">This line of code gets a proxy for the <bpt id="2">&lt;em&gt;</bpt>TodoItems<ept id="2">&lt;/em&gt;</ept> table from the global [tables object]:</target>
          </trans-unit>
          <trans-unit id="424" xml:space="preserve">
            <source>Custom API scripts can access the [tables object] from the <bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>service<bpt id="4">&lt;html&gt;</bpt><ept id="4">&lt;/html&gt;</ept> property of the supplied [request object].</source>
            <target state="new">Custom API scripts can access the [tables object] from the <bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>service<bpt id="4">&lt;html&gt;</bpt><ept id="4">&lt;/html&gt;</ept> property of the supplied [request object].</target>
          </trans-unit>
          <trans-unit id="425" xml:space="preserve">
            <source>This line of code gets [tables object] from the request:</source>
            <target state="new">This line of code gets [tables object] from the request:</target>
          </trans-unit>
          <trans-unit id="426" xml:space="preserve">
            <source>Shared functions cannot access the <bpt id="2">&lt;strong&gt;</bpt>tables<ept id="2">&lt;/strong&gt;</ept> object directly.</source>
            <target state="new">Shared functions cannot access the <bpt id="2">&lt;strong&gt;</bpt>tables<ept id="2">&lt;/strong&gt;</ept> object directly.</target>
          </trans-unit>
          <trans-unit id="427" xml:space="preserve">
            <source>In a shared function, you must pass the tables object to the function.</source>
            <target state="new">In a shared function, you must pass the tables object to the function.</target>
          </trans-unit>
          <trans-unit id="428" xml:space="preserve">
            <source>Once you have a [table object], you can call one or more table operation functions: insert, update, delete or read.</source>
            <target state="new">Once you have a [table object], you can call one or more table operation functions: insert, update, delete or read.</target>
          </trans-unit>
          <trans-unit id="429" xml:space="preserve">
            <source>This example reads user permissions from a permissions table:</source>
            <target state="new">This example reads user permissions from a permissions table:</target>
          </trans-unit>
          <trans-unit id="430" xml:space="preserve">
            <source>The next example writes auditing information to an <bpt id="2">&lt;strong&gt;</bpt>audit<ept id="2">&lt;/strong&gt;</ept> table:</source>
            <target state="new">The next example writes auditing information to an <bpt id="2">&lt;strong&gt;</bpt>audit<ept id="2">&lt;/strong&gt;</ept> table:</target>
          </trans-unit>
          <trans-unit id="431" xml:space="preserve">
            <source>A final example is in the code sample here: <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>How to: Access custom parameters[how to: add custom parameters]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">A final example is in the code sample here: <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>How to: Access custom parameters[how to: add custom parameters]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="432" xml:space="preserve">
            <source><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>How to: Perform Bulk Inserts</source>
            <target state="new"><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>How to: Perform Bulk Inserts</target>
          </trans-unit>
          <trans-unit id="433" xml:space="preserve">
            <source>If you use a <bpt id="2">&lt;strong&gt;</bpt>for<ept id="2">&lt;/strong&gt;</ept> or <bpt id="4">&lt;strong&gt;</bpt>while<ept id="4">&lt;/strong&gt;</ept> loop to directly insert a large number of items (1000, for example) into a  table , you may encounter a SQL connection limit that causes some of the inserts to fail.</source>
            <target state="new">If you use a <bpt id="2">&lt;strong&gt;</bpt>for<ept id="2">&lt;/strong&gt;</ept> or <bpt id="4">&lt;strong&gt;</bpt>while<ept id="4">&lt;/strong&gt;</ept> loop to directly insert a large number of items (1000, for example) into a  table , you may encounter a SQL connection limit that causes some of the inserts to fail.</target>
          </trans-unit>
          <trans-unit id="434" xml:space="preserve">
            <source>Your request may never complete or it may return a HTTP 500 Internal Server Error.</source>
            <target state="new">Your request may never complete or it may return a HTTP 500 Internal Server Error.</target>
          </trans-unit>
          <trans-unit id="435" xml:space="preserve">
            <source>To avoid this problem, you can insert the items in batches of 10 or so.</source>
            <target state="new">To avoid this problem, you can insert the items in batches of 10 or so.</target>
          </trans-unit>
          <trans-unit id="436" xml:space="preserve">
            <source>After the first batch is inserted, submit the next batch, and so on.</source>
            <target state="new">After the first batch is inserted, submit the next batch, and so on.</target>
          </trans-unit>
          <trans-unit id="437" xml:space="preserve">
            <source>By using the following script, you can set the size of a batch of records to insert in parallel.</source>
            <target state="new">By using the following script, you can set the size of a batch of records to insert in parallel.</target>
          </trans-unit>
          <trans-unit id="438" xml:space="preserve">
            <source>We recomend that you keep the number of records small.</source>
            <target state="new">We recomend that you keep the number of records small.</target>
          </trans-unit>
          <trans-unit id="439" xml:space="preserve">
            <source>The function <bpt id="2">&lt;strong&gt;</bpt>insertItems<ept id="2">&lt;/strong&gt;</ept> calls itself recursively when an async insert batch has completed.</source>
            <target state="new">The function <bpt id="2">&lt;strong&gt;</bpt>insertItems<ept id="2">&lt;/strong&gt;</ept> calls itself recursively when an async insert batch has completed.</target>
          </trans-unit>
          <trans-unit id="440" xml:space="preserve">
            <source>The for loop at the end inserts one record at a time, and calls <bpt id="2">&lt;strong&gt;</bpt>insertComplete<ept id="2">&lt;/strong&gt;</ept> on success and <bpt id="4">&lt;strong&gt;</bpt>errorHandler<ept id="4">&lt;/strong&gt;</ept> on error.</source>
            <target state="new">The for loop at the end inserts one record at a time, and calls <bpt id="2">&lt;strong&gt;</bpt>insertComplete<ept id="2">&lt;/strong&gt;</ept> on success and <bpt id="4">&lt;strong&gt;</bpt>errorHandler<ept id="4">&lt;/strong&gt;</ept> on error.</target>
          </trans-unit>
          <trans-unit id="441" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>insertComplete<ept id="1">&lt;/strong&gt;</ept>  controls whether <bpt id="3">&lt;strong&gt;</bpt>insertItems<ept id="3">&lt;/strong&gt;</ept> will be called recursively for the next batch, or whether the job is done and the script should exit.</source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>insertComplete<ept id="1">&lt;/strong&gt;</ept>  controls whether <bpt id="3">&lt;strong&gt;</bpt>insertItems<ept id="3">&lt;/strong&gt;</ept> will be called recursively for the next batch, or whether the job is done and the script should exit.</target>
          </trans-unit>
          <trans-unit id="442" xml:space="preserve">
            <source>The entire code sample, and accompanying discussion, can be found in this <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>blog posting<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">The entire code sample, and accompanying discussion, can be found in this <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>blog posting<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="443" xml:space="preserve">
            <source>If you use this code, you can adapt it to your specific situation, and thoroughly test it.</source>
            <target state="new">If you use this code, you can adapt it to your specific situation, and thoroughly test it.</target>
          </trans-unit>
          <trans-unit id="444" xml:space="preserve">
            <source><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>How to: Map JSON types to database types</source>
            <target state="new"><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>How to: Map JSON types to database types</target>
          </trans-unit>
          <trans-unit id="445" xml:space="preserve">
            <source>The collections of data types on the client and in a Mobile Services database table are different.</source>
            <target state="new">The collections of data types on the client and in a Mobile Services database table are different.</target>
          </trans-unit>
          <trans-unit id="446" xml:space="preserve">
            <source>Sometimes they map easily to one another, and other times they don't.</source>
            <target state="new">Sometimes they map easily to one another, and other times they don't.</target>
          </trans-unit>
          <trans-unit id="447" xml:space="preserve">
            <source>Mobile Services performs a number of type transformations in the mapping:</source>
            <target state="new">Mobile Services performs a number of type transformations in the mapping:</target>
          </trans-unit>
          <trans-unit id="448" xml:space="preserve">
            <source>The client language-specific types are serialized into JSON.</source>
            <target state="new">The client language-specific types are serialized into JSON.</target>
          </trans-unit>
          <trans-unit id="449" xml:space="preserve">
            <source>The JSON representation is translated into JavaScript before it appears in server scripts.</source>
            <target state="new">The JSON representation is translated into JavaScript before it appears in server scripts.</target>
          </trans-unit>
          <trans-unit id="450" xml:space="preserve">
            <source>The JavaScript data types are converted to SQL database types when saved using the [tables object].</source>
            <target state="new">The JavaScript data types are converted to SQL database types when saved using the [tables object].</target>
          </trans-unit>
          <trans-unit id="451" xml:space="preserve">
            <source>The transformation from client schema into JSON varies across platforms.</source>
            <target state="new">The transformation from client schema into JSON varies across platforms.</target>
          </trans-unit>
          <trans-unit id="452" xml:space="preserve">
            <source>JSON.NET is used in Windows Store and Windows Phone clients.</source>
            <target state="new">JSON.NET is used in Windows Store and Windows Phone clients.</target>
          </trans-unit>
          <trans-unit id="453" xml:space="preserve">
            <source>The Android client uses the gson library.</source>
            <target state="new">The Android client uses the gson library.</target>
          </trans-unit>
          <trans-unit id="454" xml:space="preserve">
            <source>The iOS client uses the NSJSONSerialization class.</source>
            <target state="new">The iOS client uses the NSJSONSerialization class.</target>
          </trans-unit>
          <trans-unit id="455" xml:space="preserve">
            <source>The default serialization behavior of each of these libraries is used, except that date objects are converted to JSON strings that contain the date that's encoded by using ISO 8601.</source>
            <target state="new">The default serialization behavior of each of these libraries is used, except that date objects are converted to JSON strings that contain the date that's encoded by using ISO 8601.</target>
          </trans-unit>
          <trans-unit id="456" xml:space="preserve">
            <source>When you are writing server scripts that use [insert], [update], [read] or [delete] functions, you can access the JavaScript representation of your data.</source>
            <target state="new">When you are writing server scripts that use [insert], [update], [read] or [delete] functions, you can access the JavaScript representation of your data.</target>
          </trans-unit>
          <trans-unit id="457" xml:space="preserve">
            <source>Mobile Services uses the Node.js's deserialization function (<bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>JSON.parse<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> to transform JSON on the wire into JavaScript objects.</source>
            <target state="new">Mobile Services uses the Node.js's deserialization function (<bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>JSON.parse<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> to transform JSON on the wire into JavaScript objects.</target>
          </trans-unit>
          <trans-unit id="458" xml:space="preserve">
            <source>However Mobile Services does  a transformation to extract <bpt id="2">&lt;strong&gt;</bpt>Date<ept id="2">&lt;/strong&gt;</ept> objects from ISO 8601 strings.</source>
            <target state="new">However Mobile Services does  a transformation to extract <bpt id="2">&lt;strong&gt;</bpt>Date<ept id="2">&lt;/strong&gt;</ept> objects from ISO 8601 strings.</target>
          </trans-unit>
          <trans-unit id="459" xml:space="preserve">
            <source>When you use the [tables object] or the [mssql object], or just let your table scripts execute, the deserialized JavaScript objects are inserted into your SQL database.</source>
            <target state="new">When you use the [tables object] or the [mssql object], or just let your table scripts execute, the deserialized JavaScript objects are inserted into your SQL database.</target>
          </trans-unit>
          <trans-unit id="460" xml:space="preserve">
            <source>In that process, object properties are mapped to T-SQL types:</source>
            <target state="new">In that process, object properties are mapped to T-SQL types:</target>
          </trans-unit>
          <trans-unit id="461" xml:space="preserve">
            <source>JavaScript property</source>
            <target state="new">JavaScript property</target>
          </trans-unit>
          <trans-unit id="462" xml:space="preserve">
            <source>T-SQL type</source>
            <target state="new">T-SQL type</target>
          </trans-unit>
          <trans-unit id="463" xml:space="preserve">
            <source>Number</source>
            <target state="new">Number</target>
          </trans-unit>
          <trans-unit id="464" xml:space="preserve">
            <source>Float(53)</source>
            <target state="new">Float(53)</target>
          </trans-unit>
          <trans-unit id="465" xml:space="preserve">
            <source>Boolean</source>
            <target state="new">Boolean</target>
          </trans-unit>
          <trans-unit id="466" xml:space="preserve">
            <source>Bit</source>
            <target state="new">Bit</target>
          </trans-unit>
          <trans-unit id="467" xml:space="preserve">
            <source>Date</source>
            <target state="new">Date</target>
          </trans-unit>
          <trans-unit id="468" xml:space="preserve">
            <source>DateTimeOffset(3)</source>
            <target state="new">DateTimeOffset(3)</target>
          </trans-unit>
          <trans-unit id="469" xml:space="preserve">
            <source>String</source>
            <target state="new">String</target>
          </trans-unit>
          <trans-unit id="470" xml:space="preserve">
            <source>Nvarchar(max)</source>
            <target state="new">Nvarchar(max)</target>
          </trans-unit>
          <trans-unit id="471" xml:space="preserve">
            <source>Buffer</source>
            <target state="new">Buffer</target>
          </trans-unit>
          <trans-unit id="472" xml:space="preserve">
            <source>Not supported</source>
            <target state="new">Not supported</target>
          </trans-unit>
          <trans-unit id="473" xml:space="preserve">
            <source>Object</source>
            <target state="new">Object</target>
          </trans-unit>
          <trans-unit id="474" xml:space="preserve">
            <source>Not supported</source>
            <target state="new">Not supported</target>
          </trans-unit>
          <trans-unit id="475" xml:space="preserve">
            <source>Array</source>
            <target state="new">Array</target>
          </trans-unit>
          <trans-unit id="476" xml:space="preserve">
            <source>Not supported</source>
            <target state="new">Not supported</target>
          </trans-unit>
          <trans-unit id="477" xml:space="preserve">
            <source>Stream</source>
            <target state="new">Stream</target>
          </trans-unit>
          <trans-unit id="478" xml:space="preserve">
            <source>Not supported</source>
            <target state="new">Not supported</target>
          </trans-unit>
          <trans-unit id="479" xml:space="preserve">
            <source><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>Using Transact-SQL to access tables</source>
            <target state="new"><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>Using Transact-SQL to access tables</target>
          </trans-unit>
          <trans-unit id="480" xml:space="preserve">
            <source>The easiest way to work table data from server scripts is by using a [table object] proxy.</source>
            <target state="new">The easiest way to work table data from server scripts is by using a [table object] proxy.</target>
          </trans-unit>
          <trans-unit id="481" xml:space="preserve">
            <source>However, there are more advanced scenarios that are not supported by the [table object], such as as join queries and other complex queries and invoking stored procedures.</source>
            <target state="new">However, there are more advanced scenarios that are not supported by the [table object], such as as join queries and other complex queries and invoking stored procedures.</target>
          </trans-unit>
          <trans-unit id="482" xml:space="preserve">
            <source>In these cases, you must execute Transact-SQL statements directly against the relational table by using the [mssql object].</source>
            <target state="new">In these cases, you must execute Transact-SQL statements directly against the relational table by using the [mssql object].</target>
          </trans-unit>
          <trans-unit id="483" xml:space="preserve">
            <source>This object provides the following functions:</source>
            <target state="new">This object provides the following functions:</target>
          </trans-unit>
          <trans-unit id="484" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>query<ept id="1">&lt;/strong&gt;</ept>: executes a query, specified by a TSQL string; the results are returned to the <bpt id="3">&lt;strong&gt;</bpt>success<ept id="3">&lt;/strong&gt;</ept> callback on the <bpt id="5">&lt;strong&gt;</bpt>options<ept id="5">&lt;/strong&gt;</ept> object.</source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>query<ept id="1">&lt;/strong&gt;</ept>: executes a query, specified by a TSQL string; the results are returned to the <bpt id="3">&lt;strong&gt;</bpt>success<ept id="3">&lt;/strong&gt;</ept> callback on the <bpt id="5">&lt;strong&gt;</bpt>options<ept id="5">&lt;/strong&gt;</ept> object.</target>
          </trans-unit>
          <trans-unit id="485" xml:space="preserve">
            <source>The query can include parameters if the <bpt id="2">&lt;em&gt;</bpt>params<ept id="2">&lt;/em&gt;</ept> parameter is present.</source>
            <target state="new">The query can include parameters if the <bpt id="2">&lt;em&gt;</bpt>params<ept id="2">&lt;/em&gt;</ept> parameter is present.</target>
          </trans-unit>
          <trans-unit id="486" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>queryRaw<ept id="1">&lt;/strong&gt;</ept>: like <bpt id="3">&lt;em&gt;</bpt>query<ept id="3">&lt;/em&gt;</ept> except that the result set returned from the query is in a "raw" format (see example below).</source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>queryRaw<ept id="1">&lt;/strong&gt;</ept>: like <bpt id="3">&lt;em&gt;</bpt>query<ept id="3">&lt;/em&gt;</ept> except that the result set returned from the query is in a "raw" format (see example below).</target>
          </trans-unit>
          <trans-unit id="487" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>open<ept id="1">&lt;/strong&gt;</ept>: used to get a connection to your Mobile Services database, and you can then use the connection object to invoke database operations such as transactions.</source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>open<ept id="1">&lt;/strong&gt;</ept>: used to get a connection to your Mobile Services database, and you can then use the connection object to invoke database operations such as transactions.</target>
          </trans-unit>
          <trans-unit id="488" xml:space="preserve">
            <source>These methods give you increasingly more low-level control over the query processing.</source>
            <target state="new">These methods give you increasingly more low-level control over the query processing.</target>
          </trans-unit>
          <trans-unit id="489" xml:space="preserve">
            <source>[How to: Run a static query]</source>
            <target state="new">[How to: Run a static query]</target>
          </trans-unit>
          <trans-unit id="490" xml:space="preserve">
            <source>[How to: Run a dynamic query]</source>
            <target state="new">[How to: Run a dynamic query]</target>
          </trans-unit>
          <trans-unit id="491" xml:space="preserve">
            <source>[How to: Join relational tables]</source>
            <target state="new">[How to: Join relational tables]</target>
          </trans-unit>
          <trans-unit id="492" xml:space="preserve">
            <source>[How to: Run a query that returns <bpt id="2">&lt;em&gt;</bpt>raw<ept id="2">&lt;/em&gt;</ept> results]</source>
            <target state="new">[How to: Run a query that returns <bpt id="2">&lt;em&gt;</bpt>raw<ept id="2">&lt;/em&gt;</ept> results]</target>
          </trans-unit>
          <trans-unit id="493" xml:space="preserve">
            <source>[How to: Get access to a database connection]</source>
            <target state="new">[How to: Get access to a database connection]</target>
          </trans-unit>
          <trans-unit id="494" xml:space="preserve">
            <source><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>How to: Run a static query</source>
            <target state="new"><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>How to: Run a static query</target>
          </trans-unit>
          <trans-unit id="495" xml:space="preserve">
            <source>The following query has no parameters and returns three records from the <bpt id="2">&lt;code&gt;</bpt>statusupdate<ept id="2">&lt;/code&gt;</ept> table.</source>
            <target state="new">The following query has no parameters and returns three records from the <bpt id="2">&lt;code&gt;</bpt>statusupdate<ept id="2">&lt;/code&gt;</ept> table.</target>
          </trans-unit>
          <trans-unit id="496" xml:space="preserve">
            <source>The rowset is in standard JSON format.</source>
            <target state="new">The rowset is in standard JSON format.</target>
          </trans-unit>
          <trans-unit id="497" xml:space="preserve">
            <source><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>How to: Run a dynamic parameterized query</source>
            <target state="new"><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>How to: Run a dynamic parameterized query</target>
          </trans-unit>
          <trans-unit id="498" xml:space="preserve">
            <source>The following example implements custom authorization by reading permissions for each user from the permissions table.</source>
            <target state="new">The following example implements custom authorization by reading permissions for each user from the permissions table.</target>
          </trans-unit>
          <trans-unit id="499" xml:space="preserve">
            <source>The placeholder (?) is replaced with the supplied parameter when the query is executed.</source>
            <target state="new">The placeholder (?) is replaced with the supplied parameter when the query is executed.</target>
          </trans-unit>
          <trans-unit id="500" xml:space="preserve">
            <source><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>How to: Join relational tables</source>
            <target state="new"><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>How to: Join relational tables</target>
          </trans-unit>
          <trans-unit id="501" xml:space="preserve">
            <source>You can join two tables by using the <bpt id="2">&lt;strong&gt;</bpt>query<ept id="2">&lt;/strong&gt;</ept> method of the [mssql object] to pass in the TSQL code that implements the join.</source>
            <target state="new">You can join two tables by using the <bpt id="2">&lt;strong&gt;</bpt>query<ept id="2">&lt;/strong&gt;</ept> method of the [mssql object] to pass in the TSQL code that implements the join.</target>
          </trans-unit>
          <trans-unit id="502" xml:space="preserve">
            <source>Let's assume we have some items in our <bpt id="2">&lt;strong&gt;</bpt>ToDoItem<ept id="2">&lt;/strong&gt;</ept> table and each item in the table has a <bpt id="4">&lt;strong&gt;</bpt>priority<ept id="4">&lt;/strong&gt;</ept> property, which corresponds to a column in the table.</source>
            <target state="new">Let's assume we have some items in our <bpt id="2">&lt;strong&gt;</bpt>ToDoItem<ept id="2">&lt;/strong&gt;</ept> table and each item in the table has a <bpt id="4">&lt;strong&gt;</bpt>priority<ept id="4">&lt;/strong&gt;</ept> property, which corresponds to a column in the table.</target>
          </trans-unit>
          <trans-unit id="503" xml:space="preserve">
            <source>An item may look like this:</source>
            <target state="new">An item may look like this:</target>
          </trans-unit>
          <trans-unit id="504" xml:space="preserve">
            <source>Let's also assume we have an additional table called <bpt id="2">&lt;strong&gt;</bpt>Priority<ept id="2">&lt;/strong&gt;</ept> with rows that contain a priority <bpt id="4">&lt;strong&gt;</bpt>number<ept id="4">&lt;/strong&gt;</ept> and a text <bpt id="6">&lt;strong&gt;</bpt>description<ept id="6">&lt;/strong&gt;</ept>.</source>
            <target state="new">Let's also assume we have an additional table called <bpt id="2">&lt;strong&gt;</bpt>Priority<ept id="2">&lt;/strong&gt;</ept> with rows that contain a priority <bpt id="4">&lt;strong&gt;</bpt>number<ept id="4">&lt;/strong&gt;</ept> and a text <bpt id="6">&lt;strong&gt;</bpt>description<ept id="6">&lt;/strong&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="505" xml:space="preserve">
            <source>For example, the priority number 1 might have the description of "Critical", with the object looking as follows:</source>
            <target state="new">For example, the priority number 1 might have the description of "Critical", with the object looking as follows:</target>
          </trans-unit>
          <trans-unit id="506" xml:space="preserve">
            <source>We can now replace the <bpt id="2">&lt;strong&gt;</bpt>priority<ept id="2">&lt;/strong&gt;</ept> number in our item with the text description of the priority number.</source>
            <target state="new">We can now replace the <bpt id="2">&lt;strong&gt;</bpt>priority<ept id="2">&lt;/strong&gt;</ept> number in our item with the text description of the priority number.</target>
          </trans-unit>
          <trans-unit id="507" xml:space="preserve">
            <source>We do this with a relational join of the two tables.</source>
            <target state="new">We do this with a relational join of the two tables.</target>
          </trans-unit>
          <trans-unit id="508" xml:space="preserve">
            <source>The script joins the two tables and writes the results to the log.</source>
            <target state="new">The script joins the two tables and writes the results to the log.</target>
          </trans-unit>
          <trans-unit id="509" xml:space="preserve">
            <source>The resulting objects could look like this:</source>
            <target state="new">The resulting objects could look like this:</target>
          </trans-unit>
          <trans-unit id="510" xml:space="preserve">
            <source><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>How to: Run a query that returns <bpt id="4">&lt;em&gt;</bpt>raw<ept id="4">&lt;/em&gt;</ept> results</source>
            <target state="new"><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>How to: Run a query that returns <bpt id="4">&lt;em&gt;</bpt>raw<ept id="4">&lt;/em&gt;</ept> results</target>
          </trans-unit>
          <trans-unit id="511" xml:space="preserve">
            <source>This example executes the query, as before, but returns the resultset in "raw" format which requires you to parse it, row by row, and column by column.</source>
            <target state="new">This example executes the query, as before, but returns the resultset in "raw" format which requires you to parse it, row by row, and column by column.</target>
          </trans-unit>
          <trans-unit id="512" xml:space="preserve">
            <source>A possible scenario for this is if you need access to data types that Mobile Services does not support.</source>
            <target state="new">A possible scenario for this is if you need access to data types that Mobile Services does not support.</target>
          </trans-unit>
          <trans-unit id="513" xml:space="preserve">
            <source>This code simply writes the output to the console log so you can inspect the raw format.</source>
            <target state="new">This code simply writes the output to the console log so you can inspect the raw format.</target>
          </trans-unit>
          <trans-unit id="514" xml:space="preserve">
            <source>Here is the output from running this query.</source>
            <target state="new">Here is the output from running this query.</target>
          </trans-unit>
          <trans-unit id="515" xml:space="preserve">
            <source>It contains metadata about each column in the table, followed by a representation of the rows and columns.</source>
            <target state="new">It contains metadata about each column in the table, followed by a representation of the rows and columns.</target>
          </trans-unit>
          <trans-unit id="516" xml:space="preserve">
            <source><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>How to: Get access to a database connection</source>
            <target state="new"><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>How to: Get access to a database connection</target>
          </trans-unit>
          <trans-unit id="517" xml:space="preserve">
            <source>You can use the <bpt id="2">&lt;strong&gt;</bpt>open<ept id="2">&lt;/strong&gt;</ept> method to get access to the database connection.</source>
            <target state="new">You can use the <bpt id="2">&lt;strong&gt;</bpt>open<ept id="2">&lt;/strong&gt;</ept> method to get access to the database connection.</target>
          </trans-unit>
          <trans-unit id="518" xml:space="preserve">
            <source>One reason to do this might be if you need to use database transactions.</source>
            <target state="new">One reason to do this might be if you need to use database transactions.</target>
          </trans-unit>
          <trans-unit id="519" xml:space="preserve">
            <source>Successful execution of the <bpt id="2">&lt;strong&gt;</bpt>open<ept id="2">&lt;/strong&gt;</ept> causes the database connection to be passed into the <bpt id="4">&lt;strong&gt;</bpt>success<ept id="4">&lt;/strong&gt;</ept> function as a parameter.</source>
            <target state="new">Successful execution of the <bpt id="2">&lt;strong&gt;</bpt>open<ept id="2">&lt;/strong&gt;</ept> causes the database connection to be passed into the <bpt id="4">&lt;strong&gt;</bpt>success<ept id="4">&lt;/strong&gt;</ept> function as a parameter.</target>
          </trans-unit>
          <trans-unit id="520" xml:space="preserve">
            <source>You can invoke any of the following functions on the <bpt id="2">&lt;strong&gt;</bpt>connection<ept id="2">&lt;/strong&gt;</ept> object: <bpt id="4">&lt;em&gt;</bpt>close<ept id="4">&lt;/em&gt;</ept>, <bpt id="6">&lt;em&gt;</bpt>queryRaw<ept id="6">&lt;/em&gt;</ept>, <bpt id="8">&lt;em&gt;</bpt>query<ept id="8">&lt;/em&gt;</ept>, <bpt id="10">&lt;em&gt;</bpt>beginTransaction<ept id="10">&lt;/em&gt;</ept>, <bpt id="12">&lt;em&gt;</bpt>commit<ept id="12">&lt;/em&gt;</ept>, and <bpt id="14">&lt;em&gt;</bpt>rollback<ept id="14">&lt;/em&gt;</ept>.</source>
            <target state="new">You can invoke any of the following functions on the <bpt id="2">&lt;strong&gt;</bpt>connection<ept id="2">&lt;/strong&gt;</ept> object: <bpt id="4">&lt;em&gt;</bpt>close<ept id="4">&lt;/em&gt;</ept>, <bpt id="6">&lt;em&gt;</bpt>queryRaw<ept id="6">&lt;/em&gt;</ept>, <bpt id="8">&lt;em&gt;</bpt>query<ept id="8">&lt;/em&gt;</ept>, <bpt id="10">&lt;em&gt;</bpt>beginTransaction<ept id="10">&lt;/em&gt;</ept>, <bpt id="12">&lt;em&gt;</bpt>commit<ept id="12">&lt;/em&gt;</ept>, and <bpt id="14">&lt;em&gt;</bpt>rollback<ept id="14">&lt;/em&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="521" xml:space="preserve">
            <source><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>Debugging and troubleshooting</source>
            <target state="new"><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>Debugging and troubleshooting</target>
          </trans-unit>
          <trans-unit id="522" xml:space="preserve">
            <source>The primary way to debug and troubleshoot your server scripts is by writing to the service log.</source>
            <target state="new">The primary way to debug and troubleshoot your server scripts is by writing to the service log.</target>
          </trans-unit>
          <trans-unit id="523" xml:space="preserve">
            <source>By default, Mobile Services writes errors that occur during service script execution to the service logs.</source>
            <target state="new">By default, Mobile Services writes errors that occur during service script execution to the service logs.</target>
          </trans-unit>
          <trans-unit id="524" xml:space="preserve">
            <source>Your scripts can also write to the logs.</source>
            <target state="new">Your scripts can also write to the logs.</target>
          </trans-unit>
          <trans-unit id="525" xml:space="preserve">
            <source>Writing to logs is great way to debug your scripts and validate that they are behaving as desired.</source>
            <target state="new">Writing to logs is great way to debug your scripts and validate that they are behaving as desired.</target>
          </trans-unit>
          <trans-unit id="526" xml:space="preserve">
            <source><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>How to: Write output to the mobile service logs</source>
            <target state="new"><bpt id="1">&lt;html&gt;</bpt><ept id="1">&lt;/html&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>How to: Write output to the mobile service logs</target>
          </trans-unit>
          <trans-unit id="527" xml:space="preserve">
            <source>To write to the logs, use the global [console object].</source>
            <target state="new">To write to the logs, use the global [console object].</target>
          </trans-unit>
          <trans-unit id="528" xml:space="preserve">
            <source>Use the <bpt id="2">&lt;strong&gt;</bpt>log<ept id="2">&lt;/strong&gt;</ept> or <bpt id="4">&lt;strong&gt;</bpt>info<ept id="4">&lt;/strong&gt;</ept> function to log information-level warnings.</source>
            <target state="new">Use the <bpt id="2">&lt;strong&gt;</bpt>log<ept id="2">&lt;/strong&gt;</ept> or <bpt id="4">&lt;strong&gt;</bpt>info<ept id="4">&lt;/strong&gt;</ept> function to log information-level warnings.</target>
          </trans-unit>
          <trans-unit id="529" xml:space="preserve">
            <source>The <bpt id="2">&lt;strong&gt;</bpt>warning<ept id="2">&lt;/strong&gt;</ept> and <bpt id="4">&lt;strong&gt;</bpt>error<ept id="4">&lt;/strong&gt;</ept> functions log their respective levels, which are called-out in the logs.</source>
            <target state="new">The <bpt id="2">&lt;strong&gt;</bpt>warning<ept id="2">&lt;/strong&gt;</ept> and <bpt id="4">&lt;strong&gt;</bpt>error<ept id="4">&lt;/strong&gt;</ept> functions log their respective levels, which are called-out in the logs.</target>
          </trans-unit>
          <trans-unit id="530" xml:space="preserve">
            <source>To view the logs for your mobile service, log on to the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Management Portal<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>, select your mobile service, and then choose the <bpt id="4">&lt;strong&gt;</bpt>Logs<ept id="4">&lt;/strong&gt;</ept> tab.</source>
            <target state="new">To view the logs for your mobile service, log on to the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Management Portal<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>, select your mobile service, and then choose the <bpt id="4">&lt;strong&gt;</bpt>Logs<ept id="4">&lt;/strong&gt;</ept> tab.</target>
          </trans-unit>
          <trans-unit id="531" xml:space="preserve">
            <source>You can also use the logging functions of the [console object] to format your messages using parameters.</source>
            <target state="new">You can also use the logging functions of the [console object] to format your messages using parameters.</target>
          </trans-unit>
          <trans-unit id="532" xml:space="preserve">
            <source>The following example supplies a JSON object as a parameter to the message string:</source>
            <target state="new">The following example supplies a JSON object as a parameter to the message string:</target>
          </trans-unit>
          <trans-unit id="533" xml:space="preserve">
            <source>Notice that the string <bpt id="2">&lt;code&gt;</bpt>%j<ept id="2">&lt;/code&gt;</ept> is used as the placeholder for a JSON object and that parameters are supplied in sequential order.</source>
            <target state="new">Notice that the string <bpt id="2">&lt;code&gt;</bpt>%j<ept id="2">&lt;/code&gt;</ept> is used as the placeholder for a JSON object and that parameters are supplied in sequential order.</target>
          </trans-unit>
          <trans-unit id="534" xml:space="preserve">
            <source>To avoid overloading your log, you should remove or disable calls to console.log() that aren't needed for production use.</source>
            <target state="new">To avoid overloading your log, you should remove or disable calls to console.log() that aren't needed for production use.</target>
          </trans-unit>
        </group>
      </group>
    </body>
  </file>
</xliff>