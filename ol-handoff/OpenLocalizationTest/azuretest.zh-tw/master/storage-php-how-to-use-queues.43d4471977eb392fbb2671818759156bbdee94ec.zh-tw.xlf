<?xml version="1.0" encoding="utf-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" source-language="en-us" target-language="zh-tw" original="2/20/2016 12:45:07 PM" tool-id="MarkdownTransformer" product-name="N/A" product-version="N/A" build-num="1">
    <header>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a3d5b197c9589e43ee0d503ac49ce4638dcdd7e8</xliffext:olfilehash>
      <tool tool-id="MarkdownTransformer" tool-name="MarkdownToXliff" tool-version="1.0" tool-company="Microsoft" />
    </header>
    <body>
      <group extype="content">
        <group id="101">
          <trans-unit id="101" xml:space="preserve">
            <source>How to use Queue storage from PHP | Microsoft Azure</source>
            <target state="new">How to use Queue storage from PHP | Microsoft Azure</target>
          </trans-unit>
          <trans-unit id="102" xml:space="preserve">
            <source>Learn how to use the Azure Queue storage service to create and delete queues, and insert, get, and delete messages. Samples are written in PHP.</source>
            <target state="new">Learn how to use the Azure Queue storage service to create and delete queues, and insert, get, and delete messages. Samples are written in PHP.</target>
          </trans-unit>
          <trans-unit id="103" xml:space="preserve">
            <source>How to use Queue storage from PHP</source>
            <target state="new">How to use Queue storage from PHP</target>
          </trans-unit>
          <trans-unit id="104" xml:space="preserve">
            <source><ph id="1">&lt;token href="../../includes/storage-selector-queue-include.md"/&gt;</ph></source>
            <target state="new"><ph id="1">&lt;token href="../../includes/storage-selector-queue-include.md"/&gt;</ph></target>
          </trans-unit>
          <trans-unit id="105" xml:space="preserve">
            <source>Overview</source>
            <target state="new">Overview</target>
          </trans-unit>
          <trans-unit id="106" xml:space="preserve">
            <source>This guide will show you how to perform common scenarios by using the Azure Queue storage service.</source>
            <target state="new">This guide will show you how to perform common scenarios by using the Azure Queue storage service.</target>
          </trans-unit>
          <trans-unit id="107" xml:space="preserve">
            <source>The samples are written via classes from the Windows SDK for PHP.</source>
            <target state="new">The samples are written via classes from the Windows SDK for PHP.</target>
          </trans-unit>
          <trans-unit id="108" xml:space="preserve">
            <source>The covered scenarios include inserting, peeking, getting, and deleting queue messages, as well as creating and deleting queues.</source>
            <target state="new">The covered scenarios include inserting, peeking, getting, and deleting queue messages, as well as creating and deleting queues.</target>
          </trans-unit>
          <trans-unit id="109" xml:space="preserve">
            <source><ph id="1">&lt;token href="../../includes/storage-queue-concepts-include.md"/&gt;</ph></source>
            <target state="new"><ph id="1">&lt;token href="../../includes/storage-queue-concepts-include.md"/&gt;</ph></target>
          </trans-unit>
          <trans-unit id="110" xml:space="preserve">
            <source><ph id="1">&lt;token href="../../includes/storage-create-account-include.md"/&gt;</ph></source>
            <target state="new"><ph id="1">&lt;token href="../../includes/storage-create-account-include.md"/&gt;</ph></target>
          </trans-unit>
          <trans-unit id="111" xml:space="preserve">
            <source>Create a PHP application</source>
            <target state="new">Create a PHP application</target>
          </trans-unit>
          <trans-unit id="112" xml:space="preserve">
            <source>The only requirement for creating a PHP application that accesses Azure Queue storage is the referencing of classes from the Azure SDK for PHP from within your code.</source>
            <target state="new">The only requirement for creating a PHP application that accesses Azure Queue storage is the referencing of classes from the Azure SDK for PHP from within your code.</target>
          </trans-unit>
          <trans-unit id="113" xml:space="preserve">
            <source>You can use any development tools to create your application, including Notepad.</source>
            <target state="new">You can use any development tools to create your application, including Notepad.</target>
          </trans-unit>
          <trans-unit id="114" xml:space="preserve">
            <source>In this guide, you will use Queue storage features that can be called within a PHP application locally, or in code running within an Azure web role, worker role, or website.</source>
            <target state="new">In this guide, you will use Queue storage features that can be called within a PHP application locally, or in code running within an Azure web role, worker role, or website.</target>
          </trans-unit>
          <trans-unit id="115" xml:space="preserve">
            <source>Get the Azure Client Libraries</source>
            <target state="new">Get the Azure Client Libraries</target>
          </trans-unit>
          <trans-unit id="116" xml:space="preserve">
            <source><ph id="1">&lt;token href="../../includes/get-client-libraries.md"/&gt;</ph></source>
            <target state="new"><ph id="1">&lt;token href="../../includes/get-client-libraries.md"/&gt;</ph></target>
          </trans-unit>
          <trans-unit id="117" xml:space="preserve">
            <source>Configure your application to access Queue storage</source>
            <target state="new">Configure your application to access Queue storage</target>
          </trans-unit>
          <trans-unit id="118" xml:space="preserve">
            <source>To use the APIs for Azure Queue storage, you need to:</source>
            <target state="new">To use the APIs for Azure Queue storage, you need to:</target>
          </trans-unit>
          <trans-unit id="119" xml:space="preserve">
            <source>Reference the autoloader file by using the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>require_once[require_once]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> statement.</source>
            <target state="new">Reference the autoloader file by using the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>require_once[require_once]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> statement.</target>
          </trans-unit>
          <trans-unit id="120" xml:space="preserve">
            <source>Reference any classes that you might use.</source>
            <target state="new">Reference any classes that you might use.</target>
          </trans-unit>
          <trans-unit id="121" xml:space="preserve">
            <source>The following example shows how to include the autoloader file and reference the <bpt id="2">&lt;strong&gt;</bpt>ServicesBuilder<ept id="2">&lt;/strong&gt;</ept> class.</source>
            <target state="new">The following example shows how to include the autoloader file and reference the <bpt id="2">&lt;strong&gt;</bpt>ServicesBuilder<ept id="2">&lt;/strong&gt;</ept> class.</target>
          </trans-unit>
          <trans-unit id="122" xml:space="preserve">
            <source>This example (and other examples in this article) assumes that you have installed the PHP Client Libraries for Azure via Composer.</source>
            <target state="new">This example (and other examples in this article) assumes that you have installed the PHP Client Libraries for Azure via Composer.</target>
          </trans-unit>
          <trans-unit id="123" xml:space="preserve">
            <source>If you installed the libraries manually or as a PEAR package, you will need to reference the <bpt id="2">&lt;code&gt;</bpt>WindowsAzure.php<ept id="2">&lt;/code&gt;</ept> autoloader file.</source>
            <target state="new">If you installed the libraries manually or as a PEAR package, you will need to reference the <bpt id="2">&lt;code&gt;</bpt>WindowsAzure.php<ept id="2">&lt;/code&gt;</ept> autoloader file.</target>
          </trans-unit>
          <trans-unit id="124" xml:space="preserve">
            <source>In the examples below, the <bpt id="2">&lt;code&gt;</bpt>require_once<ept id="2">&lt;/code&gt;</ept> statement will be shown always, but only the classes that are necessary for the example to execute will be referenced.</source>
            <target state="new">In the examples below, the <bpt id="2">&lt;code&gt;</bpt>require_once<ept id="2">&lt;/code&gt;</ept> statement will be shown always, but only the classes that are necessary for the example to execute will be referenced.</target>
          </trans-unit>
          <trans-unit id="125" xml:space="preserve">
            <source>Set up an Azure storage connection</source>
            <target state="new">Set up an Azure storage connection</target>
          </trans-unit>
          <trans-unit id="126" xml:space="preserve">
            <source>To instantiate an Azure Queue storage client, you must first have a valid connection string.</source>
            <target state="new">To instantiate an Azure Queue storage client, you must first have a valid connection string.</target>
          </trans-unit>
          <trans-unit id="127" xml:space="preserve">
            <source>The format for the queue service connection string is as follows.</source>
            <target state="new">The format for the queue service connection string is as follows.</target>
          </trans-unit>
          <trans-unit id="128" xml:space="preserve">
            <source>For accessing a live service:</source>
            <target state="new">For accessing a live service:</target>
          </trans-unit>
          <trans-unit id="129" xml:space="preserve">
            <source>For accessing the emulator storage:</source>
            <target state="new">For accessing the emulator storage:</target>
          </trans-unit>
          <trans-unit id="130" xml:space="preserve">
            <source>To create any Azure service client, you need to use the <bpt id="2">&lt;strong&gt;</bpt>ServicesBuilder<ept id="2">&lt;/strong&gt;</ept> class.</source>
            <target state="new">To create any Azure service client, you need to use the <bpt id="2">&lt;strong&gt;</bpt>ServicesBuilder<ept id="2">&lt;/strong&gt;</ept> class.</target>
          </trans-unit>
          <trans-unit id="131" xml:space="preserve">
            <source>You can use either of the following techniques:</source>
            <target state="new">You can use either of the following techniques:</target>
          </trans-unit>
          <trans-unit id="132" xml:space="preserve">
            <source>Pass the connection string directly to it.</source>
            <target state="new">Pass the connection string directly to it.</target>
          </trans-unit>
          <trans-unit id="133" xml:space="preserve">
            <source>Use <bpt id="2">&lt;strong&gt;</bpt>CloudConfigurationManager (CCM)<ept id="2">&lt;/strong&gt;</ept> to check multiple external sources for the connection string:</source>
            <target state="new">Use <bpt id="2">&lt;strong&gt;</bpt>CloudConfigurationManager (CCM)<ept id="2">&lt;/strong&gt;</ept> to check multiple external sources for the connection string:</target>
          </trans-unit>
          <trans-unit id="134" xml:space="preserve">
            <source>By default, it comes with support for one external source—environmental variables.</source>
            <target state="new">By default, it comes with support for one external source—environmental variables.</target>
          </trans-unit>
          <trans-unit id="135" xml:space="preserve">
            <source>You can add new sources by extending the <bpt id="2">&lt;strong&gt;</bpt>ConnectionStringSource<ept id="2">&lt;/strong&gt;</ept> class.</source>
            <target state="new">You can add new sources by extending the <bpt id="2">&lt;strong&gt;</bpt>ConnectionStringSource<ept id="2">&lt;/strong&gt;</ept> class.</target>
          </trans-unit>
          <trans-unit id="136" xml:space="preserve">
            <source>For the examples outlined here, the connection string will be passed directly.</source>
            <target state="new">For the examples outlined here, the connection string will be passed directly.</target>
          </trans-unit>
          <trans-unit id="137" xml:space="preserve">
            <source>Create a queue</source>
            <target state="new">Create a queue</target>
          </trans-unit>
          <trans-unit id="138" xml:space="preserve">
            <source>A <bpt id="2">&lt;strong&gt;</bpt>QueueRestProxy<ept id="2">&lt;/strong&gt;</ept> object lets you create a queue by using the <bpt id="4">&lt;strong&gt;</bpt>createQueue<ept id="4">&lt;/strong&gt;</ept> method.</source>
            <target state="new">A <bpt id="2">&lt;strong&gt;</bpt>QueueRestProxy<ept id="2">&lt;/strong&gt;</ept> object lets you create a queue by using the <bpt id="4">&lt;strong&gt;</bpt>createQueue<ept id="4">&lt;/strong&gt;</ept> method.</target>
          </trans-unit>
          <trans-unit id="139" xml:space="preserve">
            <source>When creating a queue, you can set options on the queue, but doing so is not required.</source>
            <target state="new">When creating a queue, you can set options on the queue, but doing so is not required.</target>
          </trans-unit>
          <trans-unit id="140" xml:space="preserve">
            <source>(The example below shows how to set metadata on a queue.)</source>
            <target state="new">(The example below shows how to set metadata on a queue.)</target>
          </trans-unit>
          <trans-unit id="141" xml:space="preserve">
            <source>You should not rely on case sensitivity for metadata keys.</source>
            <target state="new">You should not rely on case sensitivity for metadata keys.</target>
          </trans-unit>
          <trans-unit id="142" xml:space="preserve">
            <source>All keys are read from the service in lowercase.</source>
            <target state="new">All keys are read from the service in lowercase.</target>
          </trans-unit>
          <trans-unit id="143" xml:space="preserve">
            <source>Add a message to a queue</source>
            <target state="new">Add a message to a queue</target>
          </trans-unit>
          <trans-unit id="144" xml:space="preserve">
            <source>To add a message to a queue, use <bpt id="2">&lt;strong&gt;</bpt>QueueRestProxy-&gt;createMessage<ept id="2">&lt;/strong&gt;</ept>.</source>
            <target state="new">To add a message to a queue, use <bpt id="2">&lt;strong&gt;</bpt>QueueRestProxy-&gt;createMessage<ept id="2">&lt;/strong&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="145" xml:space="preserve">
            <source>The method takes the queue name, the message text, and message options (which are optional).</source>
            <target state="new">The method takes the queue name, the message text, and message options (which are optional).</target>
          </trans-unit>
          <trans-unit id="146" xml:space="preserve">
            <source>Peek at the next message</source>
            <target state="new">Peek at the next message</target>
          </trans-unit>
          <trans-unit id="147" xml:space="preserve">
            <source>You can peek at a message (or messages) at the front of a queue without removing it from the queue by calling <bpt id="2">&lt;strong&gt;</bpt>QueueRestProxy-&gt;peekMessages<ept id="2">&lt;/strong&gt;</ept>.</source>
            <target state="new">You can peek at a message (or messages) at the front of a queue without removing it from the queue by calling <bpt id="2">&lt;strong&gt;</bpt>QueueRestProxy-&gt;peekMessages<ept id="2">&lt;/strong&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="148" xml:space="preserve">
            <source>By default, the <bpt id="2">&lt;strong&gt;</bpt>peekMessage<ept id="2">&lt;/strong&gt;</ept> method returns a single message, but you can change that value by using the <bpt id="4">&lt;strong&gt;</bpt>PeekMessagesOptions-&gt;setNumberOfMessages<ept id="4">&lt;/strong&gt;</ept> method.</source>
            <target state="new">By default, the <bpt id="2">&lt;strong&gt;</bpt>peekMessage<ept id="2">&lt;/strong&gt;</ept> method returns a single message, but you can change that value by using the <bpt id="4">&lt;strong&gt;</bpt>PeekMessagesOptions-&gt;setNumberOfMessages<ept id="4">&lt;/strong&gt;</ept> method.</target>
          </trans-unit>
          <trans-unit id="149" xml:space="preserve">
            <source>De-queue the next message</source>
            <target state="new">De-queue the next message</target>
          </trans-unit>
          <trans-unit id="150" xml:space="preserve">
            <source>Your code removes a message from a queue in two steps.</source>
            <target state="new">Your code removes a message from a queue in two steps.</target>
          </trans-unit>
          <trans-unit id="151" xml:space="preserve">
            <source>First, you call <bpt id="2">&lt;strong&gt;</bpt>QueueRestProxy-&gt;listMessages<ept id="2">&lt;/strong&gt;</ept>, which makes the message invisible to any other code that's reading from the queue.</source>
            <target state="new">First, you call <bpt id="2">&lt;strong&gt;</bpt>QueueRestProxy-&gt;listMessages<ept id="2">&lt;/strong&gt;</ept>, which makes the message invisible to any other code that's reading from the queue.</target>
          </trans-unit>
          <trans-unit id="152" xml:space="preserve">
            <source>By default, this message will stay invisible for 30 seconds.</source>
            <target state="new">By default, this message will stay invisible for 30 seconds.</target>
          </trans-unit>
          <trans-unit id="153" xml:space="preserve">
            <source>(If the message is not deleted in this time period, it will become visible on the queue again.)</source>
            <target state="new">(If the message is not deleted in this time period, it will become visible on the queue again.)</target>
          </trans-unit>
          <trans-unit id="154" xml:space="preserve">
            <source>To finish removing the message from the queue, you must call <bpt id="2">&lt;strong&gt;</bpt>QueueRestProxy-&gt;deleteMessage<ept id="2">&lt;/strong&gt;</ept>.</source>
            <target state="new">To finish removing the message from the queue, you must call <bpt id="2">&lt;strong&gt;</bpt>QueueRestProxy-&gt;deleteMessage<ept id="2">&lt;/strong&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="155" xml:space="preserve">
            <source>This two-step process of removing a message assures that when your code fails to process a message due to hardware or software failure, another instance of your code can get the same message and try again.</source>
            <target state="new">This two-step process of removing a message assures that when your code fails to process a message due to hardware or software failure, another instance of your code can get the same message and try again.</target>
          </trans-unit>
          <trans-unit id="156" xml:space="preserve">
            <source>Your code calls <bpt id="2">&lt;strong&gt;</bpt>deleteMessage<ept id="2">&lt;/strong&gt;</ept> right after the message has been processed.</source>
            <target state="new">Your code calls <bpt id="2">&lt;strong&gt;</bpt>deleteMessage<ept id="2">&lt;/strong&gt;</ept> right after the message has been processed.</target>
          </trans-unit>
          <trans-unit id="157" xml:space="preserve">
            <source>Change the contents of a queued message</source>
            <target state="new">Change the contents of a queued message</target>
          </trans-unit>
          <trans-unit id="158" xml:space="preserve">
            <source>You can change the contents of a message in-place in the queue by calling <bpt id="2">&lt;strong&gt;</bpt>QueueRestProxy-&gt;updateMessage<ept id="2">&lt;/strong&gt;</ept>.</source>
            <target state="new">You can change the contents of a message in-place in the queue by calling <bpt id="2">&lt;strong&gt;</bpt>QueueRestProxy-&gt;updateMessage<ept id="2">&lt;/strong&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="159" xml:space="preserve">
            <source>If the message represents a work task, you could use this feature to update the status of the work task.</source>
            <target state="new">If the message represents a work task, you could use this feature to update the status of the work task.</target>
          </trans-unit>
          <trans-unit id="160" xml:space="preserve">
            <source>The following code updates the queue message with new contents, and it sets the visibility timeout to extend another 60 seconds.</source>
            <target state="new">The following code updates the queue message with new contents, and it sets the visibility timeout to extend another 60 seconds.</target>
          </trans-unit>
          <trans-unit id="161" xml:space="preserve">
            <source>This saves the state of work that's associated with the message, and it gives the client another minute to continue working on the message.</source>
            <target state="new">This saves the state of work that's associated with the message, and it gives the client another minute to continue working on the message.</target>
          </trans-unit>
          <trans-unit id="162" xml:space="preserve">
            <source>You could use this technique to track multi-step workflows on queue messages, without having to start over from the beginning if a processing step fails due to hardware or software failure.</source>
            <target state="new">You could use this technique to track multi-step workflows on queue messages, without having to start over from the beginning if a processing step fails due to hardware or software failure.</target>
          </trans-unit>
          <trans-unit id="163" xml:space="preserve">
            <source>Typically, you would keep a retry count as well, and if the message is retried more than <bpt id="2">&lt;em&gt;</bpt>n<ept id="2">&lt;/em&gt;</ept> times, you would delete it.</source>
            <target state="new">Typically, you would keep a retry count as well, and if the message is retried more than <bpt id="2">&lt;em&gt;</bpt>n<ept id="2">&lt;/em&gt;</ept> times, you would delete it.</target>
          </trans-unit>
          <trans-unit id="164" xml:space="preserve">
            <source>This protects against a message that triggers an application error each time it is processed.</source>
            <target state="new">This protects against a message that triggers an application error each time it is processed.</target>
          </trans-unit>
          <trans-unit id="165" xml:space="preserve">
            <source>Additional options for de-queuing messages</source>
            <target state="new">Additional options for de-queuing messages</target>
          </trans-unit>
          <trans-unit id="166" xml:space="preserve">
            <source>There are two ways that you can customize message retrieval from a queue.</source>
            <target state="new">There are two ways that you can customize message retrieval from a queue.</target>
          </trans-unit>
          <trans-unit id="167" xml:space="preserve">
            <source>First, you can get a batch of messages (up to 32).</source>
            <target state="new">First, you can get a batch of messages (up to 32).</target>
          </trans-unit>
          <trans-unit id="168" xml:space="preserve">
            <source>Second, you can set a longer or shorter visibility timeout, allowing your code more or less time to fully process each message.</source>
            <target state="new">Second, you can set a longer or shorter visibility timeout, allowing your code more or less time to fully process each message.</target>
          </trans-unit>
          <trans-unit id="169" xml:space="preserve">
            <source>The following code example uses the <bpt id="2">&lt;strong&gt;</bpt>getMessages<ept id="2">&lt;/strong&gt;</ept> method to get 16 messages in one call.</source>
            <target state="new">The following code example uses the <bpt id="2">&lt;strong&gt;</bpt>getMessages<ept id="2">&lt;/strong&gt;</ept> method to get 16 messages in one call.</target>
          </trans-unit>
          <trans-unit id="170" xml:space="preserve">
            <source>Then it processes each message by using a <bpt id="2">&lt;strong&gt;</bpt>for<ept id="2">&lt;/strong&gt;</ept> loop.</source>
            <target state="new">Then it processes each message by using a <bpt id="2">&lt;strong&gt;</bpt>for<ept id="2">&lt;/strong&gt;</ept> loop.</target>
          </trans-unit>
          <trans-unit id="171" xml:space="preserve">
            <source>It also sets the invisibility timeout to five minutes for each message.</source>
            <target state="new">It also sets the invisibility timeout to five minutes for each message.</target>
          </trans-unit>
          <trans-unit id="172" xml:space="preserve">
            <source>Get queue length</source>
            <target state="new">Get queue length</target>
          </trans-unit>
          <trans-unit id="173" xml:space="preserve">
            <source>You can get an estimate of the number of messages in a queue.</source>
            <target state="new">You can get an estimate of the number of messages in a queue.</target>
          </trans-unit>
          <trans-unit id="174" xml:space="preserve">
            <source>The <bpt id="2">&lt;strong&gt;</bpt>QueueRestProxy-&gt;getQueueMetadata<ept id="2">&lt;/strong&gt;</ept> method asks the queue service to return metadata about the queue.</source>
            <target state="new">The <bpt id="2">&lt;strong&gt;</bpt>QueueRestProxy-&gt;getQueueMetadata<ept id="2">&lt;/strong&gt;</ept> method asks the queue service to return metadata about the queue.</target>
          </trans-unit>
          <trans-unit id="175" xml:space="preserve">
            <source>Calling the <bpt id="2">&lt;strong&gt;</bpt>getApproximateMessageCount<ept id="2">&lt;/strong&gt;</ept> method on the returned object provides a count of how many messages are in a queue.</source>
            <target state="new">Calling the <bpt id="2">&lt;strong&gt;</bpt>getApproximateMessageCount<ept id="2">&lt;/strong&gt;</ept> method on the returned object provides a count of how many messages are in a queue.</target>
          </trans-unit>
          <trans-unit id="176" xml:space="preserve">
            <source>The count is only approximate because messages can be added or removed after the queue service responds to your request.</source>
            <target state="new">The count is only approximate because messages can be added or removed after the queue service responds to your request.</target>
          </trans-unit>
          <trans-unit id="177" xml:space="preserve">
            <source>Delete a queue</source>
            <target state="new">Delete a queue</target>
          </trans-unit>
          <trans-unit id="178" xml:space="preserve">
            <source>To delete a queue and all the messages in it, call the <bpt id="2">&lt;strong&gt;</bpt>QueueRestProxy-&gt;deleteQueue<ept id="2">&lt;/strong&gt;</ept> method.</source>
            <target state="new">To delete a queue and all the messages in it, call the <bpt id="2">&lt;strong&gt;</bpt>QueueRestProxy-&gt;deleteQueue<ept id="2">&lt;/strong&gt;</ept> method.</target>
          </trans-unit>
          <trans-unit id="179" xml:space="preserve">
            <source>Next steps</source>
            <target state="new">Next steps</target>
          </trans-unit>
          <trans-unit id="180" xml:space="preserve">
            <source>Now that you've learned the basics of Azure Queue storage, follow these links to learn about more complex storage tasks:</source>
            <target state="new">Now that you've learned the basics of Azure Queue storage, follow these links to learn about more complex storage tasks:</target>
          </trans-unit>
          <trans-unit id="181" xml:space="preserve">
            <source>See the MSDN reference <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Azure Storage<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">See the MSDN reference <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Azure Storage<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="182" xml:space="preserve">
            <source>Visit the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Azure Storage Team blog<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">Visit the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Azure Storage Team blog<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
        </group>
      </group>
    </body>
  </file>
</xliff>