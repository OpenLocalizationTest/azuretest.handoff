<?xml version="1.0" encoding="utf-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" source-language="en-us" target-language="zh-tw" original="2/20/2016 12:28:52 PM" tool-id="MarkdownTransformer" product-name="N/A" product-version="N/A" build-num="1">
    <header>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a7e2e7572a623982e613bf3ecd27e30d482cd86d</xliffext:olfilehash>
      <tool tool-id="MarkdownTransformer" tool-name="MarkdownToXliff" tool-version="1.0" tool-company="Microsoft" />
    </header>
    <body>
      <group extype="content">
        <group id="101">
          <trans-unit id="101" xml:space="preserve">
            <source>How to use Service Bus queues (Ruby) | Microsoft Azure</source>
            <target state="new">How to use Service Bus queues (Ruby) | Microsoft Azure</target>
          </trans-unit>
          <trans-unit id="102" xml:space="preserve">
            <source>Learn how to use Service Bus queues in Azure. Code samples written in Ruby.</source>
            <target state="new">Learn how to use Service Bus queues in Azure. Code samples written in Ruby.</target>
          </trans-unit>
          <trans-unit id="103" xml:space="preserve">
            <source>How to Use Service Bus Queues</source>
            <target state="new">How to Use Service Bus Queues</target>
          </trans-unit>
          <trans-unit id="104" xml:space="preserve">
            <source>This guide will show you how to use Service Bus queues.</source>
            <target state="new">This guide will show you how to use Service Bus queues.</target>
          </trans-unit>
          <trans-unit id="105" xml:space="preserve">
            <source>The samples are</source>
            <target state="new">The samples are</target>
          </trans-unit>
          <trans-unit id="106" xml:space="preserve">
            <source>written in Ruby and use the Azure gem.</source>
            <target state="new">written in Ruby and use the Azure gem.</target>
          </trans-unit>
          <trans-unit id="107" xml:space="preserve">
            <source>The scenarios</source>
            <target state="new">The scenarios</target>
          </trans-unit>
          <trans-unit id="108" xml:space="preserve">
            <source>covered include <bpt id="2">&lt;strong&gt;</bpt>creating queues, sending and receiving messages<ept id="2">&lt;/strong&gt;</ept>, and</source>
            <target state="new">covered include <bpt id="2">&lt;strong&gt;</bpt>creating queues, sending and receiving messages<ept id="2">&lt;/strong&gt;</ept>, and</target>
          </trans-unit>
          <trans-unit id="109" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>deleting queues<ept id="1">&lt;/strong&gt;</ept>.</source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>deleting queues<ept id="1">&lt;/strong&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="110" xml:space="preserve">
            <source>For more information on queues, see the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Next Steps<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> section.</source>
            <target state="new">For more information on queues, see the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Next Steps<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> section.</target>
          </trans-unit>
          <trans-unit id="111" xml:space="preserve">
            <source>What are Service Bus queues?</source>
            <target state="new">What are Service Bus queues?</target>
          </trans-unit>
          <trans-unit id="112" xml:space="preserve">
            <source>Service Bus Queues support a <bpt id="2">&lt;strong&gt;</bpt>brokered messaging communication<ept id="2">&lt;/strong&gt;</ept></source>
            <target state="new">Service Bus Queues support a <bpt id="2">&lt;strong&gt;</bpt>brokered messaging communication<ept id="2">&lt;/strong&gt;</ept></target>
          </trans-unit>
          <trans-unit id="113" xml:space="preserve">
            <source>model.</source>
            <target state="new">model.</target>
          </trans-unit>
          <trans-unit id="114" xml:space="preserve">
            <source>When using queues, components of a distributed application do not</source>
            <target state="new">When using queues, components of a distributed application do not</target>
          </trans-unit>
          <trans-unit id="115" xml:space="preserve">
            <source>communicate directly with each other, they instead exchange messages via</source>
            <target state="new">communicate directly with each other, they instead exchange messages via</target>
          </trans-unit>
          <trans-unit id="116" xml:space="preserve">
            <source>a queue, which acts as an intermediary.</source>
            <target state="new">a queue, which acts as an intermediary.</target>
          </trans-unit>
          <trans-unit id="117" xml:space="preserve">
            <source>A message producer (sender)</source>
            <target state="new">A message producer (sender)</target>
          </trans-unit>
          <trans-unit id="118" xml:space="preserve">
            <source>hands off a message to the queue and then continues its processing.</source>
            <target state="new">hands off a message to the queue and then continues its processing.</target>
          </trans-unit>
          <trans-unit id="119" xml:space="preserve">
            <source>Asynchronously, a message consumer (receiver) pulls the message from the</source>
            <target state="new">Asynchronously, a message consumer (receiver) pulls the message from the</target>
          </trans-unit>
          <trans-unit id="120" xml:space="preserve">
            <source>queue and processes it.</source>
            <target state="new">queue and processes it.</target>
          </trans-unit>
          <trans-unit id="121" xml:space="preserve">
            <source>The producer does not have to wait for a reply</source>
            <target state="new">The producer does not have to wait for a reply</target>
          </trans-unit>
          <trans-unit id="122" xml:space="preserve">
            <source>from the consumer in order to continue to process and send further</source>
            <target state="new">from the consumer in order to continue to process and send further</target>
          </trans-unit>
          <trans-unit id="123" xml:space="preserve">
            <source>messages.</source>
            <target state="new">messages.</target>
          </trans-unit>
          <trans-unit id="124" xml:space="preserve">
            <source>Queues offer <bpt id="2">&lt;strong&gt;</bpt>First In, First Out (FIFO)<ept id="2">&lt;/strong&gt;</ept> message delivery</source>
            <target state="new">Queues offer <bpt id="2">&lt;strong&gt;</bpt>First In, First Out (FIFO)<ept id="2">&lt;/strong&gt;</ept> message delivery</target>
          </trans-unit>
          <trans-unit id="125" xml:space="preserve">
            <source>to one or more competing consumers.</source>
            <target state="new">to one or more competing consumers.</target>
          </trans-unit>
          <trans-unit id="126" xml:space="preserve">
            <source>That is, messages are typically</source>
            <target state="new">That is, messages are typically</target>
          </trans-unit>
          <trans-unit id="127" xml:space="preserve">
            <source>received and processed by the receivers in the order in which they were</source>
            <target state="new">received and processed by the receivers in the order in which they were</target>
          </trans-unit>
          <trans-unit id="128" xml:space="preserve">
            <source>added to the queue, and each message is received and processed by only</source>
            <target state="new">added to the queue, and each message is received and processed by only</target>
          </trans-unit>
          <trans-unit id="129" xml:space="preserve">
            <source>one message consumer.</source>
            <target state="new">one message consumer.</target>
          </trans-unit>
          <trans-unit id="130" xml:space="preserve">
            <source><bpt id="1">&lt;linkText&gt;</bpt>QueueConcepts<ept id="1">&lt;/linkText&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;linkText&gt;</bpt>QueueConcepts<ept id="1">&lt;/linkText&gt;</ept></target>
          </trans-unit>
          <trans-unit id="131" xml:space="preserve">
            <source>Service Bus queues are a general-purpose technology that can be used for</source>
            <target state="new">Service Bus queues are a general-purpose technology that can be used for</target>
          </trans-unit>
          <trans-unit id="132" xml:space="preserve">
            <source>a wide variety of scenarios:</source>
            <target state="new">a wide variety of scenarios:</target>
          </trans-unit>
          <trans-unit id="133" xml:space="preserve">
            <source>Communication between web and worker roles in a multi-tier</source>
            <target state="new">Communication between web and worker roles in a multi-tier</target>
          </trans-unit>
          <trans-unit id="134" xml:space="preserve">
            <source>Azure application</source>
            <target state="new">Azure application</target>
          </trans-unit>
          <trans-unit id="135" xml:space="preserve">
            <source>Communication between on-premises apps and Azure hosted apps</source>
            <target state="new">Communication between on-premises apps and Azure hosted apps</target>
          </trans-unit>
          <trans-unit id="136" xml:space="preserve">
            <source>in a hybrid solution</source>
            <target state="new">in a hybrid solution</target>
          </trans-unit>
          <trans-unit id="137" xml:space="preserve">
            <source>Communication between components of a distributed application</source>
            <target state="new">Communication between components of a distributed application</target>
          </trans-unit>
          <trans-unit id="138" xml:space="preserve">
            <source>running on-premises in different organizations or departments of an</source>
            <target state="new">running on-premises in different organizations or departments of an</target>
          </trans-unit>
          <trans-unit id="139" xml:space="preserve">
            <source>organization</source>
            <target state="new">organization</target>
          </trans-unit>
          <trans-unit id="140" xml:space="preserve">
            <source>Using queues can enable you to scale out your applications better, and</source>
            <target state="new">Using queues can enable you to scale out your applications better, and</target>
          </trans-unit>
          <trans-unit id="141" xml:space="preserve">
            <source>enable more resiliency to your architecture.</source>
            <target state="new">enable more resiliency to your architecture.</target>
          </trans-unit>
          <trans-unit id="142" xml:space="preserve">
            <source>Create a service namespace</source>
            <target state="new">Create a service namespace</target>
          </trans-unit>
          <trans-unit id="143" xml:space="preserve">
            <source>To begin using Service Bus queues in Azure, you must first create a service namespace.</source>
            <target state="new">To begin using Service Bus queues in Azure, you must first create a service namespace.</target>
          </trans-unit>
          <trans-unit id="144" xml:space="preserve">
            <source>A service namespace provides a scoping container for addressing Service Bus resources within your application.</source>
            <target state="new">A service namespace provides a scoping container for addressing Service Bus resources within your application.</target>
          </trans-unit>
          <trans-unit id="145" xml:space="preserve">
            <source>You must create the</source>
            <target state="new">You must create the</target>
          </trans-unit>
          <trans-unit id="146" xml:space="preserve">
            <source>namespace through the command-line interface because the Portal does not create the service bus with an ACS connection.</source>
            <target state="new">namespace through the command-line interface because the Portal does not create the service bus with an ACS connection.</target>
          </trans-unit>
          <trans-unit id="147" xml:space="preserve">
            <source>To create a service namespace:</source>
            <target state="new">To create a service namespace:</target>
          </trans-unit>
          <trans-unit id="148" xml:space="preserve">
            <source>Open an Azure Powershell console.</source>
            <target state="new">Open an Azure Powershell console.</target>
          </trans-unit>
          <trans-unit id="149" xml:space="preserve">
            <source>Type the command to create an Azure service bus namespace as shown below.</source>
            <target state="new">Type the command to create an Azure service bus namespace as shown below.</target>
          </trans-unit>
          <trans-unit id="150" xml:space="preserve">
            <source>Provide your own namespace value and specify the same region as your application.</source>
            <target state="new">Provide your own namespace value and specify the same region as your application.</target>
          </trans-unit>
          <trans-unit id="151" xml:space="preserve">
            <source>New-AzureSBNamespace -Name 'yourexamplenamespace' -Location 'West US' -NamespaceType 'Messaging' -CreateACSNamespace $true</source>
            <target state="new">New-AzureSBNamespace -Name 'yourexamplenamespace' -Location 'West US' -NamespaceType 'Messaging' -CreateACSNamespace $true</target>
          </trans-unit>
          <trans-unit id="152" xml:space="preserve">
            <source><bpt id="1">&lt;linkText&gt;</bpt>Create Namespace<ept id="1">&lt;/linkText&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;linkText&gt;</bpt>Create Namespace<ept id="1">&lt;/linkText&gt;</ept></target>
          </trans-unit>
          <trans-unit id="153" xml:space="preserve">
            <source>Obtain management credentials for the namespace</source>
            <target state="new">Obtain management credentials for the namespace</target>
          </trans-unit>
          <trans-unit id="154" xml:space="preserve">
            <source>In order to perform management operations, such as creating a queue on the new</source>
            <target state="new">In order to perform management operations, such as creating a queue on the new</target>
          </trans-unit>
          <trans-unit id="155" xml:space="preserve">
            <source>namespace, you must obtain the management credentials for the namespace.</source>
            <target state="new">namespace, you must obtain the management credentials for the namespace.</target>
          </trans-unit>
          <trans-unit id="156" xml:space="preserve">
            <source>The PowerShell cmdlet you ran to create the Azure service bus namespace displays</source>
            <target state="new">The PowerShell cmdlet you ran to create the Azure service bus namespace displays</target>
          </trans-unit>
          <trans-unit id="157" xml:space="preserve">
            <source>the key you can use to manage the namespace.</source>
            <target state="new">the key you can use to manage the namespace.</target>
          </trans-unit>
          <trans-unit id="158" xml:space="preserve">
            <source>Copy the <bpt id="2">&lt;strong&gt;</bpt>DefaultKey<ept id="2">&lt;/strong&gt;</ept> value.</source>
            <target state="new">Copy the <bpt id="2">&lt;strong&gt;</bpt>DefaultKey<ept id="2">&lt;/strong&gt;</ept> value.</target>
          </trans-unit>
          <trans-unit id="159" xml:space="preserve">
            <source>You</source>
            <target state="new">You</target>
          </trans-unit>
          <trans-unit id="160" xml:space="preserve">
            <source>will use this value in your code later in this tutorial.</source>
            <target state="new">will use this value in your code later in this tutorial.</target>
          </trans-unit>
          <trans-unit id="161" xml:space="preserve">
            <source><bpt id="1">&lt;linkText&gt;</bpt>Copy key<ept id="1">&lt;/linkText&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;linkText&gt;</bpt>Copy key<ept id="1">&lt;/linkText&gt;</ept></target>
          </trans-unit>
          <trans-unit id="162" xml:space="preserve">
            <source>You can also find this key if you log on to the</source>
            <target state="new">You can also find this key if you log on to the</target>
          </trans-unit>
          <trans-unit id="163" xml:space="preserve">
            <source><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Azure Portal<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept> and navigate to the</source>
            <target state="new"><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Azure Portal<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept> and navigate to the</target>
          </trans-unit>
          <trans-unit id="164" xml:space="preserve">
            <source>connection information for your service bus namespace.</source>
            <target state="new">connection information for your service bus namespace.</target>
          </trans-unit>
          <trans-unit id="165" xml:space="preserve">
            <source>Create a Ruby application</source>
            <target state="new">Create a Ruby application</target>
          </trans-unit>
          <trans-unit id="166" xml:space="preserve">
            <source>Create a Ruby application.</source>
            <target state="new">Create a Ruby application.</target>
          </trans-unit>
          <trans-unit id="167" xml:space="preserve">
            <source>For instructions, see <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Create a Ruby Application on Azure<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">For instructions, see <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Create a Ruby Application on Azure<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="168" xml:space="preserve">
            <source>Configure your application to use Service Bus</source>
            <target state="new">Configure your application to use Service Bus</target>
          </trans-unit>
          <trans-unit id="169" xml:space="preserve">
            <source>To use Azure service bus, you need to download and use the Ruby azure package, which includes a set of convenience libraries that communicate with the storage REST services.</source>
            <target state="new">To use Azure service bus, you need to download and use the Ruby azure package, which includes a set of convenience libraries that communicate with the storage REST services.</target>
          </trans-unit>
          <trans-unit id="170" xml:space="preserve">
            <source>Use RubyGems to obtain the package</source>
            <target state="new">Use RubyGems to obtain the package</target>
          </trans-unit>
          <trans-unit id="171" xml:space="preserve">
            <source>Use a command-line interface such as <bpt id="2">&lt;strong&gt;</bpt>PowerShell<ept id="2">&lt;/strong&gt;</ept> (Windows), <bpt id="4">&lt;strong&gt;</bpt>Terminal<ept id="4">&lt;/strong&gt;</ept> (Mac), or <bpt id="6">&lt;strong&gt;</bpt>Bash<ept id="6">&lt;/strong&gt;</ept> (Unix).</source>
            <target state="new">Use a command-line interface such as <bpt id="2">&lt;strong&gt;</bpt>PowerShell<ept id="2">&lt;/strong&gt;</ept> (Windows), <bpt id="4">&lt;strong&gt;</bpt>Terminal<ept id="4">&lt;/strong&gt;</ept> (Mac), or <bpt id="6">&lt;strong&gt;</bpt>Bash<ept id="6">&lt;/strong&gt;</ept> (Unix).</target>
          </trans-unit>
          <trans-unit id="172" xml:space="preserve">
            <source>Type "gem install azure" in the command window to install the gem and dependencies.</source>
            <target state="new">Type "gem install azure" in the command window to install the gem and dependencies.</target>
          </trans-unit>
          <trans-unit id="173" xml:space="preserve">
            <source>Import the package</source>
            <target state="new">Import the package</target>
          </trans-unit>
          <trans-unit id="174" xml:space="preserve">
            <source>Use your favorite text editor, add the following to the top of the Ruby file where you intend to use storage:</source>
            <target state="new">Use your favorite text editor, add the following to the top of the Ruby file where you intend to use storage:</target>
          </trans-unit>
          <trans-unit id="175" xml:space="preserve">
            <source>Set up an Azure Service Bus connection</source>
            <target state="new">Set up an Azure Service Bus connection</target>
          </trans-unit>
          <trans-unit id="176" xml:space="preserve">
            <source>The azure module will read the environment variables <bpt id="2">&lt;strong&gt;</bpt>AZURE\_SERVICEBUS\_NAMESPACE<ept id="2">&lt;/strong&gt;</ept> and <bpt id="4">&lt;strong&gt;</bpt>AZURE\_SERVICEBUS\_ACCESS_KEY<ept id="4">&lt;/strong&gt;</ept></source>
            <target state="new">The azure module will read the environment variables <bpt id="2">&lt;strong&gt;</bpt>AZURE\_SERVICEBUS\_NAMESPACE<ept id="2">&lt;/strong&gt;</ept> and <bpt id="4">&lt;strong&gt;</bpt>AZURE\_SERVICEBUS\_ACCESS_KEY<ept id="4">&lt;/strong&gt;</ept></target>
          </trans-unit>
          <trans-unit id="177" xml:space="preserve">
            <source>for information required to connect to your Azure service bus namespace.</source>
            <target state="new">for information required to connect to your Azure service bus namespace.</target>
          </trans-unit>
          <trans-unit id="178" xml:space="preserve">
            <source>If these environment variables are not set, you must specify the namespace information before using <bpt id="2">&lt;strong&gt;</bpt>Azure::ServiceBusService<ept id="2">&lt;/strong&gt;</ept> with the following code:</source>
            <target state="new">If these environment variables are not set, you must specify the namespace information before using <bpt id="2">&lt;strong&gt;</bpt>Azure::ServiceBusService<ept id="2">&lt;/strong&gt;</ept> with the following code:</target>
          </trans-unit>
          <trans-unit id="179" xml:space="preserve">
            <source>Set the service bus namespace value to the value you created rather than the entire URL.</source>
            <target state="new">Set the service bus namespace value to the value you created rather than the entire URL.</target>
          </trans-unit>
          <trans-unit id="180" xml:space="preserve">
            <source>For example, use <bpt id="2">&lt;strong&gt;</bpt>"yourexamplenamespace"<ept id="2">&lt;/strong&gt;</ept>, not "yourexamplenamespace.servicebus.windows.net".</source>
            <target state="new">For example, use <bpt id="2">&lt;strong&gt;</bpt>"yourexamplenamespace"<ept id="2">&lt;/strong&gt;</ept>, not "yourexamplenamespace.servicebus.windows.net".</target>
          </trans-unit>
          <trans-unit id="181" xml:space="preserve">
            <source>How to create a queue</source>
            <target state="new">How to create a queue</target>
          </trans-unit>
          <trans-unit id="182" xml:space="preserve">
            <source>The <bpt id="2">&lt;strong&gt;</bpt>Azure::ServiceBusService<ept id="2">&lt;/strong&gt;</ept> object lets you work with queues.</source>
            <target state="new">The <bpt id="2">&lt;strong&gt;</bpt>Azure::ServiceBusService<ept id="2">&lt;/strong&gt;</ept> object lets you work with queues.</target>
          </trans-unit>
          <trans-unit id="183" xml:space="preserve">
            <source>To create a queue, use the <bpt id="2">&lt;strong&gt;</bpt>create_queue()<ept id="2">&lt;/strong&gt;</ept> method.</source>
            <target state="new">To create a queue, use the <bpt id="2">&lt;strong&gt;</bpt>create_queue()<ept id="2">&lt;/strong&gt;</ept> method.</target>
          </trans-unit>
          <trans-unit id="184" xml:space="preserve">
            <source>The following example creates a queue or print out the error if there is any.</source>
            <target state="new">The following example creates a queue or print out the error if there is any.</target>
          </trans-unit>
          <trans-unit id="185" xml:space="preserve">
            <source>You can also pass in a <bpt id="2">&lt;strong&gt;</bpt>Azure::ServiceBus::Queue<ept id="2">&lt;/strong&gt;</ept> object with additional options, which allows you to override default queue settings such as message time to live or maximum queue size.</source>
            <target state="new">You can also pass in a <bpt id="2">&lt;strong&gt;</bpt>Azure::ServiceBus::Queue<ept id="2">&lt;/strong&gt;</ept> object with additional options, which allows you to override default queue settings such as message time to live or maximum queue size.</target>
          </trans-unit>
          <trans-unit id="186" xml:space="preserve">
            <source>The following example shows setting the maximum queue size to 5GB and time to live to 1 minute:</source>
            <target state="new">The following example shows setting the maximum queue size to 5GB and time to live to 1 minute:</target>
          </trans-unit>
          <trans-unit id="187" xml:space="preserve">
            <source>How to send messages to a queue</source>
            <target state="new">How to send messages to a queue</target>
          </trans-unit>
          <trans-unit id="188" xml:space="preserve">
            <source>To send a message to a Service Bus queue, you application will call the <bpt id="2">&lt;strong&gt;</bpt>send\_queue\_message()<ept id="2">&lt;/strong&gt;</ept> method on the <bpt id="4">&lt;strong&gt;</bpt>Azure::ServiceBusService<ept id="4">&lt;/strong&gt;</ept> object.</source>
            <target state="new">To send a message to a Service Bus queue, you application will call the <bpt id="2">&lt;strong&gt;</bpt>send\_queue\_message()<ept id="2">&lt;/strong&gt;</ept> method on the <bpt id="4">&lt;strong&gt;</bpt>Azure::ServiceBusService<ept id="4">&lt;/strong&gt;</ept> object.</target>
          </trans-unit>
          <trans-unit id="189" xml:space="preserve">
            <source>Messages sent to (and received from) service bus queues are <bpt id="2">&lt;strong&gt;</bpt>Azure::ServiceBus::BrokeredMessage<ept id="2">&lt;/strong&gt;</ept> objects, and have a set of standard properties (such as <bpt id="4">&lt;strong&gt;</bpt>label<ept id="4">&lt;/strong&gt;</ept> and <bpt id="6">&lt;strong&gt;</bpt>time\_to\_live<ept id="6">&lt;/strong&gt;</ept>), a dictionary that is used to hold custom application specific properties, and a body of arbitrary application data.</source>
            <target state="new">Messages sent to (and received from) service bus queues are <bpt id="2">&lt;strong&gt;</bpt>Azure::ServiceBus::BrokeredMessage<ept id="2">&lt;/strong&gt;</ept> objects, and have a set of standard properties (such as <bpt id="4">&lt;strong&gt;</bpt>label<ept id="4">&lt;/strong&gt;</ept> and <bpt id="6">&lt;strong&gt;</bpt>time\_to\_live<ept id="6">&lt;/strong&gt;</ept>), a dictionary that is used to hold custom application specific properties, and a body of arbitrary application data.</target>
          </trans-unit>
          <trans-unit id="190" xml:space="preserve">
            <source>An application can set the body of the message by passing a string value as the message and any required standard properties will be populated with default values.</source>
            <target state="new">An application can set the body of the message by passing a string value as the message and any required standard properties will be populated with default values.</target>
          </trans-unit>
          <trans-unit id="191" xml:space="preserve">
            <source>The following example demonstrates how to send a test message to the queue named "test-queue" using <bpt id="2">&lt;strong&gt;</bpt>send\_queue\_message()<ept id="2">&lt;/strong&gt;</ept>:</source>
            <target state="new">The following example demonstrates how to send a test message to the queue named "test-queue" using <bpt id="2">&lt;strong&gt;</bpt>send\_queue\_message()<ept id="2">&lt;/strong&gt;</ept>:</target>
          </trans-unit>
          <trans-unit id="192" xml:space="preserve">
            <source>Service bus queues support a maximum message size of 256 KB (the header, which includes the standard and custom application properties, can have a maximum size of 64 KB).</source>
            <target state="new">Service bus queues support a maximum message size of 256 KB (the header, which includes the standard and custom application properties, can have a maximum size of 64 KB).</target>
          </trans-unit>
          <trans-unit id="193" xml:space="preserve">
            <source>There is no limit on the number of messages held in a queue but there is a cap on the total size of the messages held by a queue.</source>
            <target state="new">There is no limit on the number of messages held in a queue but there is a cap on the total size of the messages held by a queue.</target>
          </trans-unit>
          <trans-unit id="194" xml:space="preserve">
            <source>This queue size is defined at creation time, with an upper limit of 5 GB.</source>
            <target state="new">This queue size is defined at creation time, with an upper limit of 5 GB.</target>
          </trans-unit>
          <trans-unit id="195" xml:space="preserve">
            <source>How to receive messages from a queue</source>
            <target state="new">How to receive messages from a queue</target>
          </trans-unit>
          <trans-unit id="196" xml:space="preserve">
            <source>Messages are received from a queue using the <bpt id="2">&lt;strong&gt;</bpt>receive\_queue\_message()<ept id="2">&lt;/strong&gt;</ept> method on the <bpt id="4">&lt;strong&gt;</bpt>Azure::ServiceBusService<ept id="4">&lt;/strong&gt;</ept> object.</source>
            <target state="new">Messages are received from a queue using the <bpt id="2">&lt;strong&gt;</bpt>receive\_queue\_message()<ept id="2">&lt;/strong&gt;</ept> method on the <bpt id="4">&lt;strong&gt;</bpt>Azure::ServiceBusService<ept id="4">&lt;/strong&gt;</ept> object.</target>
          </trans-unit>
          <trans-unit id="197" xml:space="preserve">
            <source>By default, messages are read and locked without being deleted from the queue.</source>
            <target state="new">By default, messages are read and locked without being deleted from the queue.</target>
          </trans-unit>
          <trans-unit id="198" xml:space="preserve">
            <source>However, you can delete messages from the queue as they are read by setting the <bpt id="2">&lt;strong&gt;</bpt>:peek_lock<ept id="2">&lt;/strong&gt;</ept> option to <bpt id="4">&lt;strong&gt;</bpt>false<ept id="4">&lt;/strong&gt;</ept>.</source>
            <target state="new">However, you can delete messages from the queue as they are read by setting the <bpt id="2">&lt;strong&gt;</bpt>:peek_lock<ept id="2">&lt;/strong&gt;</ept> option to <bpt id="4">&lt;strong&gt;</bpt>false<ept id="4">&lt;/strong&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="199" xml:space="preserve">
            <source>The default behavior makes the reading and deleting into a two stage operation, which makes it possible to support applications that cannot tolerate missing messages.</source>
            <target state="new">The default behavior makes the reading and deleting into a two stage operation, which makes it possible to support applications that cannot tolerate missing messages.</target>
          </trans-unit>
          <trans-unit id="200" xml:space="preserve">
            <source>When service bus receives a request, it finds the next message to be consumed, locks it to prevent other consumers receiving it, and then returns it to the application.</source>
            <target state="new">When service bus receives a request, it finds the next message to be consumed, locks it to prevent other consumers receiving it, and then returns it to the application.</target>
          </trans-unit>
          <trans-unit id="201" xml:space="preserve">
            <source>After the application finishes processing the message (or stores it reliably for future processing), it completes the second stage of the receive process by calling <bpt id="2">&lt;strong&gt;</bpt>delete\_queue\_message()<ept id="2">&lt;/strong&gt;</ept> method and providing the message to be deleted as a parameter.</source>
            <target state="new">After the application finishes processing the message (or stores it reliably for future processing), it completes the second stage of the receive process by calling <bpt id="2">&lt;strong&gt;</bpt>delete\_queue\_message()<ept id="2">&lt;/strong&gt;</ept> method and providing the message to be deleted as a parameter.</target>
          </trans-unit>
          <trans-unit id="202" xml:space="preserve">
            <source>The <bpt id="2">&lt;strong&gt;</bpt>delete\_queue\_message()<ept id="2">&lt;/strong&gt;</ept> method will mark the message as being consumed and remove it from the queue.</source>
            <target state="new">The <bpt id="2">&lt;strong&gt;</bpt>delete\_queue\_message()<ept id="2">&lt;/strong&gt;</ept> method will mark the message as being consumed and remove it from the queue.</target>
          </trans-unit>
          <trans-unit id="203" xml:space="preserve">
            <source>If the <bpt id="2">&lt;strong&gt;</bpt>:peek\_lock<ept id="2">&lt;/strong&gt;</ept> parameter is set to <bpt id="4">&lt;strong&gt;</bpt>false<ept id="4">&lt;/strong&gt;</ept>, reading and deleting the message becomes the simplest model, and works best for scenarios in which an application can tolerate not processing a message in the event of a failure.</source>
            <target state="new">If the <bpt id="2">&lt;strong&gt;</bpt>:peek\_lock<ept id="2">&lt;/strong&gt;</ept> parameter is set to <bpt id="4">&lt;strong&gt;</bpt>false<ept id="4">&lt;/strong&gt;</ept>, reading and deleting the message becomes the simplest model, and works best for scenarios in which an application can tolerate not processing a message in the event of a failure.</target>
          </trans-unit>
          <trans-unit id="204" xml:space="preserve">
            <source>To understand this, consider a scenario in which the consumer issues the receive request and then crashes before processing it.</source>
            <target state="new">To understand this, consider a scenario in which the consumer issues the receive request and then crashes before processing it.</target>
          </trans-unit>
          <trans-unit id="205" xml:space="preserve">
            <source>Because Service Bus will have marked the message as being consumed, then when the application restarts and begins consuming messages again, it will have missed the message that was consumed prior to the crash.</source>
            <target state="new">Because Service Bus will have marked the message as being consumed, then when the application restarts and begins consuming messages again, it will have missed the message that was consumed prior to the crash.</target>
          </trans-unit>
          <trans-unit id="206" xml:space="preserve">
            <source>The example below demonstrates how messages can be received and processed using <bpt id="2">&lt;strong&gt;</bpt>receive\_queue\_message()<ept id="2">&lt;/strong&gt;</ept>.</source>
            <target state="new">The example below demonstrates how messages can be received and processed using <bpt id="2">&lt;strong&gt;</bpt>receive\_queue\_message()<ept id="2">&lt;/strong&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="207" xml:space="preserve">
            <source>The example first receives and deletes a message by using <bpt id="2">&lt;strong&gt;</bpt>:peek\_lock<ept id="2">&lt;/strong&gt;</ept> set to <bpt id="4">&lt;strong&gt;</bpt>false<ept id="4">&lt;/strong&gt;</ept>, then it receives another message and then deletes the message using <bpt id="6">&lt;strong&gt;</bpt>delete\_queue\_message()<ept id="6">&lt;/strong&gt;</ept>:</source>
            <target state="new">The example first receives and deletes a message by using <bpt id="2">&lt;strong&gt;</bpt>:peek\_lock<ept id="2">&lt;/strong&gt;</ept> set to <bpt id="4">&lt;strong&gt;</bpt>false<ept id="4">&lt;/strong&gt;</ept>, then it receives another message and then deletes the message using <bpt id="6">&lt;strong&gt;</bpt>delete\_queue\_message()<ept id="6">&lt;/strong&gt;</ept>:</target>
          </trans-unit>
          <trans-unit id="208" xml:space="preserve">
            <source>How to handle application crashes and unreadable messages</source>
            <target state="new">How to handle application crashes and unreadable messages</target>
          </trans-unit>
          <trans-unit id="209" xml:space="preserve">
            <source>Service bus provides functionality to help you gracefully recover from errors in your application or difficulties processing a message.</source>
            <target state="new">Service bus provides functionality to help you gracefully recover from errors in your application or difficulties processing a message.</target>
          </trans-unit>
          <trans-unit id="210" xml:space="preserve">
            <source>If a receiver application is unable to process the message for some reason, then it can call the <bpt id="2">&lt;strong&gt;</bpt>unlock\_queue\_message()<ept id="2">&lt;/strong&gt;</ept> method on the <bpt id="4">&lt;strong&gt;</bpt>Azure::ServiceBusService<ept id="4">&lt;/strong&gt;</ept> object.</source>
            <target state="new">If a receiver application is unable to process the message for some reason, then it can call the <bpt id="2">&lt;strong&gt;</bpt>unlock\_queue\_message()<ept id="2">&lt;/strong&gt;</ept> method on the <bpt id="4">&lt;strong&gt;</bpt>Azure::ServiceBusService<ept id="4">&lt;/strong&gt;</ept> object.</target>
          </trans-unit>
          <trans-unit id="211" xml:space="preserve">
            <source>This will cause service bus to unlock the message within the queue and make it available to be received again, either by the same consuming application or by another consuming application.</source>
            <target state="new">This will cause service bus to unlock the message within the queue and make it available to be received again, either by the same consuming application or by another consuming application.</target>
          </trans-unit>
          <trans-unit id="212" xml:space="preserve">
            <source>There is also a timeout associated with a message locked within the queue, and if the application fails to process the message before the lock timeout expires (e.g., if the application crashes), then service bus will unlock the message automatically and make it available to be received again.</source>
            <target state="new">There is also a timeout associated with a message locked within the queue, and if the application fails to process the message before the lock timeout expires (e.g., if the application crashes), then service bus will unlock the message automatically and make it available to be received again.</target>
          </trans-unit>
          <trans-unit id="213" xml:space="preserve">
            <source>In the event that the application crashes after processing the message but before the <bpt id="2">&lt;strong&gt;</bpt>delete\_queue\_message()<ept id="2">&lt;/strong&gt;</ept> method is called, then the message will be redelivered to the application when it restarts.</source>
            <target state="new">In the event that the application crashes after processing the message but before the <bpt id="2">&lt;strong&gt;</bpt>delete\_queue\_message()<ept id="2">&lt;/strong&gt;</ept> method is called, then the message will be redelivered to the application when it restarts.</target>
          </trans-unit>
          <trans-unit id="214" xml:space="preserve">
            <source>This is often called <bpt id="2">&lt;strong&gt;</bpt>At Least Once Processing<ept id="2">&lt;/strong&gt;</ept>, that is, each message will be processed at least once but in certain situations the same message may be redelivered.</source>
            <target state="new">This is often called <bpt id="2">&lt;strong&gt;</bpt>At Least Once Processing<ept id="2">&lt;/strong&gt;</ept>, that is, each message will be processed at least once but in certain situations the same message may be redelivered.</target>
          </trans-unit>
          <trans-unit id="215" xml:space="preserve">
            <source>If the scenario cannot tolerate duplicate processing, then application developers should add additional logic to their application to handle duplicate message delivery.</source>
            <target state="new">If the scenario cannot tolerate duplicate processing, then application developers should add additional logic to their application to handle duplicate message delivery.</target>
          </trans-unit>
          <trans-unit id="216" xml:space="preserve">
            <source>This is often achieved using the <bpt id="2">&lt;strong&gt;</bpt>message\_id<ept id="2">&lt;/strong&gt;</ept> property of the message, which will remain constant across delivery attempts.</source>
            <target state="new">This is often achieved using the <bpt id="2">&lt;strong&gt;</bpt>message\_id<ept id="2">&lt;/strong&gt;</ept> property of the message, which will remain constant across delivery attempts.</target>
          </trans-unit>
          <trans-unit id="217" xml:space="preserve">
            <source>Next Steps</source>
            <target state="new">Next Steps</target>
          </trans-unit>
          <trans-unit id="218" xml:space="preserve">
            <source>Now that you've learned the basics of Service Bus queues, follow these links to learn more.</source>
            <target state="new">Now that you've learned the basics of Service Bus queues, follow these links to learn more.</target>
          </trans-unit>
          <trans-unit id="219" xml:space="preserve">
            <source>See the MSDN Reference: <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Queues, Topics, and Subscriptions<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept></source>
            <target state="new">See the MSDN Reference: <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Queues, Topics, and Subscriptions<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept></target>
          </trans-unit>
          <trans-unit id="220" xml:space="preserve">
            <source>Visit the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Azure SDK for Ruby<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> repository on GitHub</source>
            <target state="new">Visit the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Azure SDK for Ruby<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> repository on GitHub</target>
          </trans-unit>
          <trans-unit id="221" xml:space="preserve">
            <source>For a comparision between the Azure Service Bus Queues discussed in this article and Azure Queues discussed in the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>How to use the Azure Queue Service<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> article, see <bpt id="4CapsExtId1">&lt;link&gt;</bpt><bpt id="4CapsExtId2">&lt;linkText&gt;</bpt>Azure Queues and Azure Service Bus Queues - Compared and Contrasted<ept id="4CapsExtId2">&lt;/linkText&gt;</ept><bpt id="4CapsExtId3">&lt;title&gt;</bpt><ept id="4CapsExtId3">&lt;/title&gt;</ept><ept id="4CapsExtId1">&lt;/link&gt;</ept></source>
            <target state="new">For a comparision between the Azure Service Bus Queues discussed in this article and Azure Queues discussed in the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>How to use the Azure Queue Service<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> article, see <bpt id="4CapsExtId1">&lt;link&gt;</bpt><bpt id="4CapsExtId2">&lt;linkText&gt;</bpt>Azure Queues and Azure Service Bus Queues - Compared and Contrasted<ept id="4CapsExtId2">&lt;/linkText&gt;</ept><bpt id="4CapsExtId3">&lt;title&gt;</bpt><ept id="4CapsExtId3">&lt;/title&gt;</ept><ept id="4CapsExtId1">&lt;/link&gt;</ept></target>
          </trans-unit>
        </group>
      </group>
    </body>
  </file>
</xliff>