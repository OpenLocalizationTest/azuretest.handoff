<?xml version="1.0" encoding="utf-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" source-language="en-us" target-language="zh-tw" original="2/20/2016 12:17:19 PM" tool-id="MarkdownTransformer" product-name="N/A" product-version="N/A" build-num="1">
    <header>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">af890323e170769bfb79d41e81d69cec03284d79</xliffext:olfilehash>
      <tool tool-id="MarkdownTransformer" tool-name="MarkdownToXliff" tool-version="1.0" tool-company="Microsoft" />
    </header>
    <body>
      <group extype="content">
        <group id="101">
          <trans-unit id="101" xml:space="preserve">
            <source>Azure Notification Hubs Notify Users</source>
            <target state="new">Azure Notification Hubs Notify Users</target>
          </trans-unit>
          <trans-unit id="102" xml:space="preserve">
            <source>Learn how to send push notifications to users in Azure. Code samples written in Objective-C and the .NET API for the backend.</source>
            <target state="new">Learn how to send push notifications to users in Azure. Code samples written in Objective-C and the .NET API for the backend.</target>
          </trans-unit>
          <trans-unit id="103" xml:space="preserve">
            <source>Azure Notification Hubs Notify Users</source>
            <target state="new">Azure Notification Hubs Notify Users</target>
          </trans-unit>
          <trans-unit id="104" xml:space="preserve">
            <source><ph id="1">&lt;token href="../../includes/notification-hubs-selector-aspnet-backend-notify-users.md"/&gt;</ph></source>
            <target state="new"><ph id="1">&lt;token href="../../includes/notification-hubs-selector-aspnet-backend-notify-users.md"/&gt;</ph></target>
          </trans-unit>
          <trans-unit id="105" xml:space="preserve">
            <source>Overview</source>
            <target state="new">Overview</target>
          </trans-unit>
          <trans-unit id="106" xml:space="preserve">
            <source>Push notification support in Azure enables you to access an easy-to-use, multiplatform, and scaled-out push infrastructure, which greatly simplifies the implementation of push notifications for both consumer and enterprise applications for mobile platforms.</source>
            <target state="new">Push notification support in Azure enables you to access an easy-to-use, multiplatform, and scaled-out push infrastructure, which greatly simplifies the implementation of push notifications for both consumer and enterprise applications for mobile platforms.</target>
          </trans-unit>
          <trans-unit id="107" xml:space="preserve">
            <source>This tutorial shows you how to use Azure Notification Hubs to send push notifications to a specific app user on a specific device.</source>
            <target state="new">This tutorial shows you how to use Azure Notification Hubs to send push notifications to a specific app user on a specific device.</target>
          </trans-unit>
          <trans-unit id="108" xml:space="preserve">
            <source>An ASP.NET WebAPI backend is used to authenticate clients and to generate notifications, as shown in the guidance topic <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Registering from your app backend<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">An ASP.NET WebAPI backend is used to authenticate clients and to generate notifications, as shown in the guidance topic <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Registering from your app backend<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="109" xml:space="preserve">
            <source>This tutorial assumes that you have created and configured your notification hub as described in <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Getting Started with Notification Hubs (iOS)<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">This tutorial assumes that you have created and configured your notification hub as described in <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Getting Started with Notification Hubs (iOS)<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="110" xml:space="preserve">
            <source>This tutorial is also the prerequisite to the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Secure Push (iOS)<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> tutorial.</source>
            <target state="new">This tutorial is also the prerequisite to the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Secure Push (iOS)<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> tutorial.</target>
          </trans-unit>
          <trans-unit id="111" xml:space="preserve">
            <source>If you are using Mobile Services as your backend service, see the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Mobile Services version<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> of this tutorial.</source>
            <target state="new">If you are using Mobile Services as your backend service, see the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Mobile Services version<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> of this tutorial.</target>
          </trans-unit>
          <trans-unit id="112" xml:space="preserve">
            <source><ph id="1">&lt;token href="../../includes/notification-hubs-aspnet-backend-notifyusers.md"/&gt;</ph></source>
            <target state="new"><ph id="1">&lt;token href="../../includes/notification-hubs-aspnet-backend-notifyusers.md"/&gt;</ph></target>
          </trans-unit>
          <trans-unit id="113" xml:space="preserve">
            <source>Modify your iOS app</source>
            <target state="new">Modify your iOS app</target>
          </trans-unit>
          <trans-unit id="114" xml:space="preserve">
            <source>Open the Single Page view app you created in the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Getting Started with Notification Hubs (iOS)<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> tutorial.</source>
            <target state="new">Open the Single Page view app you created in the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Getting Started with Notification Hubs (iOS)<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> tutorial.</target>
          </trans-unit>
          <trans-unit id="115" xml:space="preserve">
            <source>In this section we assume that your project is configured with an empty organization name.</source>
            <target state="new">In this section we assume that your project is configured with an empty organization name.</target>
          </trans-unit>
          <trans-unit id="116" xml:space="preserve">
            <source>If not, you will need to prepend your organization name to all class names.</source>
            <target state="new">If not, you will need to prepend your organization name to all class names.</target>
          </trans-unit>
          <trans-unit id="117" xml:space="preserve">
            <source>In your Main.storyboard add the components shown in the screenshot below from the object library.</source>
            <target state="new">In your Main.storyboard add the components shown in the screenshot below from the object library.</target>
          </trans-unit>
          <trans-unit id="118" xml:space="preserve">
            <source><bpt id="1">&lt;linkText&gt;</bpt><ept id="1">&lt;/linkText&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;linkText&gt;</bpt><ept id="1">&lt;/linkText&gt;</ept></target>
          </trans-unit>
          <trans-unit id="119" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Username<ept id="1">&lt;/strong&gt;</ept>: A UITextField with placeholder text, <bpt id="3">&lt;em&gt;</bpt>Enter Username<ept id="3">&lt;/em&gt;</ept>, immediately beneath the send results label and constrained to the left and right margins and beneath the send results label.</source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Username<ept id="1">&lt;/strong&gt;</ept>: A UITextField with placeholder text, <bpt id="3">&lt;em&gt;</bpt>Enter Username<ept id="3">&lt;/em&gt;</ept>, immediately beneath the send results label and constrained to the left and right margins and beneath the send results label.</target>
          </trans-unit>
          <trans-unit id="120" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Password<ept id="1">&lt;/strong&gt;</ept>: A UITextField with placeholder text, <bpt id="3">&lt;em&gt;</bpt>Enter Password<ept id="3">&lt;/em&gt;</ept>, immediately beneath the username text field and constrained to the left and right margins and beneath the username text field.</source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Password<ept id="1">&lt;/strong&gt;</ept>: A UITextField with placeholder text, <bpt id="3">&lt;em&gt;</bpt>Enter Password<ept id="3">&lt;/em&gt;</ept>, immediately beneath the username text field and constrained to the left and right margins and beneath the username text field.</target>
          </trans-unit>
          <trans-unit id="121" xml:space="preserve">
            <source>Check the <bpt id="2">&lt;strong&gt;</bpt>Secure Text Entry<ept id="2">&lt;/strong&gt;</ept> option in the Attribute Inspector, under <bpt id="4">&lt;em&gt;</bpt>Return Key<ept id="4">&lt;/em&gt;</ept>.</source>
            <target state="new">Check the <bpt id="2">&lt;strong&gt;</bpt>Secure Text Entry<ept id="2">&lt;/strong&gt;</ept> option in the Attribute Inspector, under <bpt id="4">&lt;em&gt;</bpt>Return Key<ept id="4">&lt;/em&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="122" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Log in<ept id="1">&lt;/strong&gt;</ept>: A UIButton labeled immediately beneath the password text field and uncheck the <bpt id="3">&lt;strong&gt;</bpt>Enabled<ept id="3">&lt;/strong&gt;</ept> option in the Attributes Inspector, under <bpt id="5">&lt;em&gt;</bpt>Control-Content<ept id="5">&lt;/em&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Log in<ept id="1">&lt;/strong&gt;</ept>: A UIButton labeled immediately beneath the password text field and uncheck the <bpt id="3">&lt;strong&gt;</bpt>Enabled<ept id="3">&lt;/strong&gt;</ept> option in the Attributes Inspector, under <bpt id="5">&lt;em&gt;</bpt>Control-Content<ept id="5">&lt;/em&gt;</ept></target>
          </trans-unit>
          <trans-unit id="123" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>WNS<ept id="1">&lt;/strong&gt;</ept>: Label and switch to enable sending the notification Windows Notification Service if it has been setup on the hub.</source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>WNS<ept id="1">&lt;/strong&gt;</ept>: Label and switch to enable sending the notification Windows Notification Service if it has been setup on the hub.</target>
          </trans-unit>
          <trans-unit id="124" xml:space="preserve">
            <source>See the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Windows Getting Started<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> tutorial.</source>
            <target state="new">See the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Windows Getting Started<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> tutorial.</target>
          </trans-unit>
          <trans-unit id="125" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>GCM<ept id="1">&lt;/strong&gt;</ept>: Label and switch to enable sending the notification to Google Cloud Messaging if it has been setup on the hub.</source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>GCM<ept id="1">&lt;/strong&gt;</ept>: Label and switch to enable sending the notification to Google Cloud Messaging if it has been setup on the hub.</target>
          </trans-unit>
          <trans-unit id="126" xml:space="preserve">
            <source>See <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Android Getting Started<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> tutorial.</source>
            <target state="new">See <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Android Getting Started<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> tutorial.</target>
          </trans-unit>
          <trans-unit id="127" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>APNS<ept id="1">&lt;/strong&gt;</ept>: Label and switch to enable sending the notification to the Apple Platform Notification Service.</source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>APNS<ept id="1">&lt;/strong&gt;</ept>: Label and switch to enable sending the notification to the Apple Platform Notification Service.</target>
          </trans-unit>
          <trans-unit id="128" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Recipent Username<ept id="1">&lt;/strong&gt;</ept>:A UITextField with placeholder text, <bpt id="3">&lt;em&gt;</bpt>Recipient username tag<ept id="3">&lt;/em&gt;</ept>, immediately beneath the GCM label and constrained to the left and right margins and beneath the GCM label.</source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Recipent Username<ept id="1">&lt;/strong&gt;</ept>:A UITextField with placeholder text, <bpt id="3">&lt;em&gt;</bpt>Recipient username tag<ept id="3">&lt;/em&gt;</ept>, immediately beneath the GCM label and constrained to the left and right margins and beneath the GCM label.</target>
          </trans-unit>
          <trans-unit id="129" xml:space="preserve">
            <source>Some components were added in the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Getting Started with Notification Hubs (iOS)<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> tutorial.</source>
            <target state="new">Some components were added in the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Getting Started with Notification Hubs (iOS)<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> tutorial.</target>
          </trans-unit>
          <trans-unit id="130" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Ctrl<ept id="1">&lt;/strong&gt;</ept> drag from the components in the view to ViewController.h and add these new outlets.</source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Ctrl<ept id="1">&lt;/strong&gt;</ept> drag from the components in the view to ViewController.h and add these new outlets.</target>
          </trans-unit>
          <trans-unit id="131" xml:space="preserve">
            <source>In ViewController.h, add the following <bpt id="2">&lt;code&gt;</bpt>#define<ept id="2">&lt;/code&gt;</ept> just below your import statements. Substitute the *<bpt id="4">&lt;html&gt;</bpt><ept id="4">&lt;/html&gt;</ept>* placeholder with the Destination URL you used to deploy your app backend in the previous section. For example, <bpt id="6">&lt;em&gt;</bpt>http://you_backend.azurewebsites.net<ept id="6">&lt;/em&gt;</ept>.</source>
            <target state="new">In ViewController.h, add the following <bpt id="2">&lt;code&gt;</bpt>#define<ept id="2">&lt;/code&gt;</ept> just below your import statements. Substitute the *<bpt id="4">&lt;html&gt;</bpt><ept id="4">&lt;/html&gt;</ept>* placeholder with the Destination URL you used to deploy your app backend in the previous section. For example, <bpt id="6">&lt;em&gt;</bpt>http://you_backend.azurewebsites.net<ept id="6">&lt;/em&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="132" xml:space="preserve">
            <source>In your project, create a new <bpt id="2">&lt;strong&gt;</bpt>Cocoa Touch class<ept id="2">&lt;/strong&gt;</ept> named <bpt id="4">&lt;strong&gt;</bpt>RegisterClient<ept id="4">&lt;/strong&gt;</ept> to interface with the ASP.NET back-end you created.</source>
            <target state="new">In your project, create a new <bpt id="2">&lt;strong&gt;</bpt>Cocoa Touch class<ept id="2">&lt;/strong&gt;</ept> named <bpt id="4">&lt;strong&gt;</bpt>RegisterClient<ept id="4">&lt;/strong&gt;</ept> to interface with the ASP.NET back-end you created.</target>
          </trans-unit>
          <trans-unit id="133" xml:space="preserve">
            <source>Create the class inheriting from <bpt id="2">&lt;code&gt;</bpt>NSObject<ept id="2">&lt;/code&gt;</ept>.</source>
            <target state="new">Create the class inheriting from <bpt id="2">&lt;code&gt;</bpt>NSObject<ept id="2">&lt;/code&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="134" xml:space="preserve">
            <source>Then add the following code in the RegisterClient.h.</source>
            <target state="new">Then add the following code in the RegisterClient.h.</target>
          </trans-unit>
          <trans-unit id="135" xml:space="preserve">
            <source>In the RegisterClient.m update the <bpt id="2">&lt;code&gt;</bpt>@interface<ept id="2">&lt;/code&gt;</ept> section:</source>
            <target state="new">In the RegisterClient.m update the <bpt id="2">&lt;code&gt;</bpt>@interface<ept id="2">&lt;/code&gt;</ept> section:</target>
          </trans-unit>
          <trans-unit id="136" xml:space="preserve">
            <source>Replace the <bpt id="2">&lt;code&gt;</bpt>@implementation<ept id="2">&lt;/code&gt;</ept> section in the RegisterClient.m with the following code.</source>
            <target state="new">Replace the <bpt id="2">&lt;code&gt;</bpt>@implementation<ept id="2">&lt;/code&gt;</ept> section in the RegisterClient.m with the following code.</target>
          </trans-unit>
          <trans-unit id="137" xml:space="preserve">
            <source>The code above implements the logic explained in the guidance article <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Registering from your app backend<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> using NSURLSession to perform REST calls to your app backend, and NSUserDefaults to locally store the registrationId returned by the notification hub.</source>
            <target state="new">The code above implements the logic explained in the guidance article <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Registering from your app backend<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> using NSURLSession to perform REST calls to your app backend, and NSUserDefaults to locally store the registrationId returned by the notification hub.</target>
          </trans-unit>
          <trans-unit id="138" xml:space="preserve">
            <source>Note that this class requires its property <bpt id="2">&lt;strong&gt;</bpt>authorizationHeader<ept id="2">&lt;/strong&gt;</ept> to be set in order to work properly.</source>
            <target state="new">Note that this class requires its property <bpt id="2">&lt;strong&gt;</bpt>authorizationHeader<ept id="2">&lt;/strong&gt;</ept> to be set in order to work properly.</target>
          </trans-unit>
          <trans-unit id="139" xml:space="preserve">
            <source>This property is set by the <bpt id="2">&lt;strong&gt;</bpt>ViewController<ept id="2">&lt;/strong&gt;</ept> class after the log in.</source>
            <target state="new">This property is set by the <bpt id="2">&lt;strong&gt;</bpt>ViewController<ept id="2">&lt;/strong&gt;</ept> class after the log in.</target>
          </trans-unit>
          <trans-unit id="140" xml:space="preserve">
            <source>In ViewController.h, add a <bpt id="2">&lt;code&gt;</bpt>#import<ept id="2">&lt;/code&gt;</ept> statement for RegisterClient.h.</source>
            <target state="new">In ViewController.h, add a <bpt id="2">&lt;code&gt;</bpt>#import<ept id="2">&lt;/code&gt;</ept> statement for RegisterClient.h.</target>
          </trans-unit>
          <trans-unit id="141" xml:space="preserve">
            <source>Then add a declaration for the device token and reference to a <bpt id="2">&lt;code&gt;</bpt>RegisterClient<ept id="2">&lt;/code&gt;</ept> instance in the <bpt id="4">&lt;code&gt;</bpt>@interface<ept id="4">&lt;/code&gt;</ept> section:</source>
            <target state="new">Then add a declaration for the device token and reference to a <bpt id="2">&lt;code&gt;</bpt>RegisterClient<ept id="2">&lt;/code&gt;</ept> instance in the <bpt id="4">&lt;code&gt;</bpt>@interface<ept id="4">&lt;/code&gt;</ept> section:</target>
          </trans-unit>
          <trans-unit id="142" xml:space="preserve">
            <source>In ViewController.m, add a private method declaration in the <bpt id="2">&lt;code&gt;</bpt>@interface<ept id="2">&lt;/code&gt;</ept> section:</source>
            <target state="new">In ViewController.m, add a private method declaration in the <bpt id="2">&lt;code&gt;</bpt>@interface<ept id="2">&lt;/code&gt;</ept> section:</target>
          </trans-unit>
          <trans-unit id="143" xml:space="preserve">
            <source>The following snippet is not a secure authentication scheme, you should substitute the implementation of the <bpt id="2">&lt;strong&gt;</bpt>createAndSetAuthenticationHeaderWithUsername:AndPassword:<ept id="2">&lt;/strong&gt;</ept> with your specific authentication mechanism that generates an authentication token to be consumed by the register client class, e.g. OAuth, Active Directory.</source>
            <target state="new">The following snippet is not a secure authentication scheme, you should substitute the implementation of the <bpt id="2">&lt;strong&gt;</bpt>createAndSetAuthenticationHeaderWithUsername:AndPassword:<ept id="2">&lt;/strong&gt;</ept> with your specific authentication mechanism that generates an authentication token to be consumed by the register client class, e.g. OAuth, Active Directory.</target>
          </trans-unit>
          <trans-unit id="144" xml:space="preserve">
            <source>Then in the <bpt id="2">&lt;code&gt;</bpt>@implementation<ept id="2">&lt;/code&gt;</ept> section of ViewController.m add the following code which adds the implementation for setting the device token and authentication header.</source>
            <target state="new">Then in the <bpt id="2">&lt;code&gt;</bpt>@implementation<ept id="2">&lt;/code&gt;</ept> section of ViewController.m add the following code which adds the implementation for setting the device token and authentication header.</target>
          </trans-unit>
          <trans-unit id="145" xml:space="preserve">
            <source>Note how setting the device token enables the log in button.</source>
            <target state="new">Note how setting the device token enables the log in button.</target>
          </trans-unit>
          <trans-unit id="146" xml:space="preserve">
            <source>This is becasue as a part of the login action, the view controller registers for push notifications with the app backend.</source>
            <target state="new">This is becasue as a part of the login action, the view controller registers for push notifications with the app backend.</target>
          </trans-unit>
          <trans-unit id="147" xml:space="preserve">
            <source>Hence, we do not want Log In action to be accessible till the device token has been properly set up.</source>
            <target state="new">Hence, we do not want Log In action to be accessible till the device token has been properly set up.</target>
          </trans-unit>
          <trans-unit id="148" xml:space="preserve">
            <source>You can decouple the log in from the push registration as long as the former happens before the latter.</source>
            <target state="new">You can decouple the log in from the push registration as long as the former happens before the latter.</target>
          </trans-unit>
          <trans-unit id="149" xml:space="preserve">
            <source>In ViewController.m, use the following snippets to implement the action method for your <bpt id="2">&lt;strong&gt;</bpt>Log In<ept id="2">&lt;/strong&gt;</ept> button and a method to send the notification message using the ASP.NET backend.</source>
            <target state="new">In ViewController.m, use the following snippets to implement the action method for your <bpt id="2">&lt;strong&gt;</bpt>Log In<ept id="2">&lt;/strong&gt;</ept> button and a method to send the notification message using the ASP.NET backend.</target>
          </trans-unit>
          <trans-unit id="150" xml:space="preserve">
            <source>Update the action for the <bpt id="2">&lt;strong&gt;</bpt>Send Notification<ept id="2">&lt;/strong&gt;</ept> button to use the ASP.NET backend and send to any PNS enabled by a switch.</source>
            <target state="new">Update the action for the <bpt id="2">&lt;strong&gt;</bpt>Send Notification<ept id="2">&lt;/strong&gt;</ept> button to use the ASP.NET backend and send to any PNS enabled by a switch.</target>
          </trans-unit>
          <trans-unit id="151" xml:space="preserve">
            <source>In function <bpt id="2">&lt;strong&gt;</bpt>ViewDidLoad<ept id="2">&lt;/strong&gt;</ept>, add the following to instantiate the RegisterClient instance and set the delegate for your text fields.</source>
            <target state="new">In function <bpt id="2">&lt;strong&gt;</bpt>ViewDidLoad<ept id="2">&lt;/strong&gt;</ept>, add the following to instantiate the RegisterClient instance and set the delegate for your text fields.</target>
          </trans-unit>
          <trans-unit id="152" xml:space="preserve">
            <source>Now in <bpt id="2">&lt;strong&gt;</bpt>AppDelegate.m<ept id="2">&lt;/strong&gt;</ept>, remove all the content of the method <bpt id="4">&lt;strong&gt;</bpt>application:didRegisterForPushNotificationWithDeviceToken:<ept id="4">&lt;/strong&gt;</ept> and replace it with the following to make sure that the view controller contains the latest device token retrieved from APNs:</source>
            <target state="new">Now in <bpt id="2">&lt;strong&gt;</bpt>AppDelegate.m<ept id="2">&lt;/strong&gt;</ept>, remove all the content of the method <bpt id="4">&lt;strong&gt;</bpt>application:didRegisterForPushNotificationWithDeviceToken:<ept id="4">&lt;/strong&gt;</ept> and replace it with the following to make sure that the view controller contains the latest device token retrieved from APNs:</target>
          </trans-unit>
          <trans-unit id="153" xml:space="preserve">
            <source>Finally in <bpt id="2">&lt;strong&gt;</bpt>AppDelegate.m<ept id="2">&lt;/strong&gt;</ept>, make sure you have the following method:</source>
            <target state="new">Finally in <bpt id="2">&lt;strong&gt;</bpt>AppDelegate.m<ept id="2">&lt;/strong&gt;</ept>, make sure you have the following method:</target>
          </trans-unit>
          <trans-unit id="154" xml:space="preserve">
            <source>Test the Application</source>
            <target state="new">Test the Application</target>
          </trans-unit>
          <trans-unit id="155" xml:space="preserve">
            <source>In XCode, run the app on a physical iOS device (push notifications will not work in the simulator).</source>
            <target state="new">In XCode, run the app on a physical iOS device (push notifications will not work in the simulator).</target>
          </trans-unit>
          <trans-unit id="156" xml:space="preserve">
            <source>In the iOS app UI, enter a username and password.</source>
            <target state="new">In the iOS app UI, enter a username and password.</target>
          </trans-unit>
          <trans-unit id="157" xml:space="preserve">
            <source>These can be any string, but they must both be the same string value.</source>
            <target state="new">These can be any string, but they must both be the same string value.</target>
          </trans-unit>
          <trans-unit id="158" xml:space="preserve">
            <source>Then click <bpt id="2">&lt;strong&gt;</bpt>Log In<ept id="2">&lt;/strong&gt;</ept>.</source>
            <target state="new">Then click <bpt id="2">&lt;strong&gt;</bpt>Log In<ept id="2">&lt;/strong&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="159" xml:space="preserve">
            <source><bpt id="1">&lt;linkText&gt;</bpt><ept id="1">&lt;/linkText&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;linkText&gt;</bpt><ept id="1">&lt;/linkText&gt;</ept></target>
          </trans-unit>
          <trans-unit id="160" xml:space="preserve">
            <source>You should see a pop-up informing you of registration success.</source>
            <target state="new">You should see a pop-up informing you of registration success.</target>
          </trans-unit>
          <trans-unit id="161" xml:space="preserve">
            <source>Click <bpt id="2">&lt;strong&gt;</bpt>OK<ept id="2">&lt;/strong&gt;</ept>.</source>
            <target state="new">Click <bpt id="2">&lt;strong&gt;</bpt>OK<ept id="2">&lt;/strong&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="162" xml:space="preserve">
            <source><bpt id="1">&lt;linkText&gt;</bpt><ept id="1">&lt;/linkText&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;linkText&gt;</bpt><ept id="1">&lt;/linkText&gt;</ept></target>
          </trans-unit>
          <trans-unit id="163" xml:space="preserve">
            <source>In the <bpt id="2">&lt;em&gt;</bpt>*Recipient username tag<ept id="2">&lt;/em&gt;</ept> text field, enter the user name tag used with the registration from another device.</source>
            <target state="new">In the <bpt id="2">&lt;em&gt;</bpt>*Recipient username tag<ept id="2">&lt;/em&gt;</ept> text field, enter the user name tag used with the registration from another device.</target>
          </trans-unit>
          <trans-unit id="164" xml:space="preserve">
            <source>Enter a notification message and click <bpt id="2">&lt;strong&gt;</bpt>Send Notification<ept id="2">&lt;/strong&gt;</ept>.</source>
            <target state="new">Enter a notification message and click <bpt id="2">&lt;strong&gt;</bpt>Send Notification<ept id="2">&lt;/strong&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="165" xml:space="preserve">
            <source>Only the devices that have a registration with the recipient user name tag receive the notification message.</source>
            <target state="new">Only the devices that have a registration with the recipient user name tag receive the notification message.</target>
          </trans-unit>
          <trans-unit id="166" xml:space="preserve">
            <source>It is only sent to those users.</source>
            <target state="new">It is only sent to those users.</target>
          </trans-unit>
          <trans-unit id="167" xml:space="preserve">
            <source><bpt id="1">&lt;linkText&gt;</bpt><ept id="1">&lt;/linkText&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;linkText&gt;</bpt><ept id="1">&lt;/linkText&gt;</ept></target>
          </trans-unit>
        </group>
      </group>
    </body>
  </file>
</xliff>