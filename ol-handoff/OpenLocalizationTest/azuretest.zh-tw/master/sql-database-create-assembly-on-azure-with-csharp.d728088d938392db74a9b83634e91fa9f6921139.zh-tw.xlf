<?xml version="1.0" encoding="utf-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" source-language="en-us" target-language="zh-tw" original="2/20/2016 12:38:32 PM" tool-id="MarkdownTransformer" product-name="N/A" product-version="N/A" build-num="1">
    <header>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b2823a876628c2f88bb3c6ba10996889050fa47c</xliffext:olfilehash>
      <tool tool-id="MarkdownTransformer" tool-name="MarkdownToXliff" tool-version="1.0" tool-company="Microsoft" />
    </header>
    <body>
      <group extype="content">
        <group id="101">
          <trans-unit id="101" xml:space="preserve">
            <source>CREATE ASSEMBLY on Azure SQL Database with CSharp</source>
            <target state="new">CREATE ASSEMBLY on Azure SQL Database with CSharp</target>
          </trans-unit>
          <trans-unit id="102" xml:space="preserve">
            <source>Provides C# source code to issue CREATE ASSEMBLY to Azure SQL Database after first encoding a DLL file into a string that contains a long hexadecimal number.</source>
            <target state="new">Provides C# source code to issue CREATE ASSEMBLY to Azure SQL Database after first encoding a DLL file into a string that contains a long hexadecimal number.</target>
          </trans-unit>
          <trans-unit id="103" xml:space="preserve">
            <source>CREATE ASSEMBLY on Azure SQL Database with CSharp</source>
            <target state="new">CREATE ASSEMBLY on Azure SQL Database with CSharp</target>
          </trans-unit>
          <trans-unit id="104" xml:space="preserve">
            <source>This topic provides a C# code sample you can use to issue a <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>CREATE ASSEMBLY<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> statement to Azure SQL Database.</source>
            <target state="new">This topic provides a C# code sample you can use to issue a <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>CREATE ASSEMBLY<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> statement to Azure SQL Database.</target>
          </trans-unit>
          <trans-unit id="105" xml:space="preserve">
            <source>For SQL Database, the FROM clause cannot accept the simple format of a path on the local computer that hosts the database.</source>
            <target state="new">For SQL Database, the FROM clause cannot accept the simple format of a path on the local computer that hosts the database.</target>
          </trans-unit>
          <trans-unit id="106" xml:space="preserve">
            <source>An alternative is to first encode the binary bits of the assembly DLL into a long string containing a hexadecimal number.</source>
            <target state="new">An alternative is to first encode the binary bits of the assembly DLL into a long string containing a hexadecimal number.</target>
          </trans-unit>
          <trans-unit id="107" xml:space="preserve">
            <source>Then give the string as the value on the FROM clause.</source>
            <target state="new">Then give the string as the value on the FROM clause.</target>
          </trans-unit>
          <trans-unit id="108" xml:space="preserve">
            <source>Prerequisites</source>
            <target state="new">Prerequisites</target>
          </trans-unit>
          <trans-unit id="109" xml:space="preserve">
            <source>To understand this topic, you must have already partially know the following:</source>
            <target state="new">To understand this topic, you must have already partially know the following:</target>
          </trans-unit>
          <trans-unit id="110" xml:space="preserve">
            <source><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>CLR Table-Valued Functions<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>Explains how the CREATE ASSEMBLY Transact-SQL statement works with other statements for the on-premises Microsoft SQL Server.</source>
            <target state="new"><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>CLR Table-Valued Functions<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept>Explains how the CREATE ASSEMBLY Transact-SQL statement works with other statements for the on-premises Microsoft SQL Server.</target>
          </trans-unit>
          <trans-unit id="111" xml:space="preserve">
            <source>A. Overall Technique</source>
            <target state="new">A. Overall Technique</target>
          </trans-unit>
          <trans-unit id="112" xml:space="preserve">
            <source>DROP FUNCTION and DROP ASSEMBLY, if necessary to clean up a previous run.</source>
            <target state="new">DROP FUNCTION and DROP ASSEMBLY, if necessary to clean up a previous run.</target>
          </trans-unit>
          <trans-unit id="113" xml:space="preserve">
            <source>Remember the location of the Microsoft .NET Framework assembly DLL file that you compiled from your own code.</source>
            <target state="new">Remember the location of the Microsoft .NET Framework assembly DLL file that you compiled from your own code.</target>
          </trans-unit>
          <trans-unit id="114" xml:space="preserve">
            <source>You provide the location in the next step.</source>
            <target state="new">You provide the location in the next step.</target>
          </trans-unit>
          <trans-unit id="115" xml:space="preserve">
            <source>Run the EXE for which the C# source code is given in this topic.</source>
            <target state="new">Run the EXE for which the C# source code is given in this topic.</target>
          </trans-unit>
          <trans-unit id="116" xml:space="preserve">
            <source>Tell the EXE where your DLL file is.</source>
            <target state="new">Tell the EXE where your DLL file is.</target>
          </trans-unit>
          <trans-unit id="117" xml:space="preserve">
            <source>Encodes your binary DLL into a long string containing a hexadecimal number.</source>
            <target state="new">Encodes your binary DLL into a long string containing a hexadecimal number.</target>
          </trans-unit>
          <trans-unit id="118" xml:space="preserve">
            <source>Issues a CREATE ASSEMBLY statement with the hex string given in the FROM clause.</source>
            <target state="new">Issues a CREATE ASSEMBLY statement with the hex string given in the FROM clause.</target>
          </trans-unit>
          <trans-unit id="119" xml:space="preserve">
            <source><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>CREATE FUNCTION<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept> to reference a method in your assembly.</source>
            <target state="new"><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>CREATE FUNCTION<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept> to reference a method in your assembly.</target>
          </trans-unit>
          <trans-unit id="120" xml:space="preserve">
            <source>T-SQL SELECT statement to call and test your function.</source>
            <target state="new">T-SQL SELECT statement to call and test your function.</target>
          </trans-unit>
          <trans-unit id="121" xml:space="preserve">
            <source>The preceding list makes no mention of...<bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept></source>
            <target state="new">The preceding list makes no mention of...<bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="122" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>execute sp_configure 'clr enabled', 1;<ept id="1">&lt;/strong&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>execute sp_configure 'clr enabled', 1;<ept id="1">&lt;/strong&gt;</ept><bpt id="2">&lt;html&gt;</bpt><ept id="2">&lt;/html&gt;</ept></target>
          </trans-unit>
          <trans-unit id="123" xml:space="preserve">
            <source>...because this is not needed for Azure SQL Database, even though it is needed for Microsoft SQL Server.</source>
            <target state="new">...because this is not needed for Azure SQL Database, even though it is needed for Microsoft SQL Server.</target>
          </trans-unit>
          <trans-unit id="124" xml:space="preserve">
            <source>If necessary for reruns, the T-SQL code to drop the function and assembly is the following:</source>
            <target state="new">If necessary for reruns, the T-SQL code to drop the function and assembly is the following:</target>
          </trans-unit>
          <trans-unit id="125" xml:space="preserve">
            <source>B. Simple Assembly DLL for T-SQL Function to Reference</source>
            <target state="new">B. Simple Assembly DLL for T-SQL Function to Reference</target>
          </trans-unit>
          <trans-unit id="126" xml:space="preserve">
            <source>The trivial C# code sample in this section can be compiled into an assembly DLL file.</source>
            <target state="new">The trivial C# code sample in this section can be compiled into an assembly DLL file.</target>
          </trans-unit>
          <trans-unit id="127" xml:space="preserve">
            <source>This code sample contains the method <bpt id="2">&lt;strong&gt;</bpt>CompareCaseSensitiveNet<ept id="2">&lt;/strong&gt;</ept> which is referenced later in a T-SQL CREATE FUNCTION statement.</source>
            <target state="new">This code sample contains the method <bpt id="2">&lt;strong&gt;</bpt>CompareCaseSensitiveNet<ept id="2">&lt;/strong&gt;</ept> which is referenced later in a T-SQL CREATE FUNCTION statement.</target>
          </trans-unit>
          <trans-unit id="128" xml:space="preserve">
            <source>Notice that the method is decorated with a .NET attribute named <bpt id="2">&lt;strong&gt;</bpt>SqlFunction<ept id="2">&lt;/strong&gt;</ept>.</source>
            <target state="new">Notice that the method is decorated with a .NET attribute named <bpt id="2">&lt;strong&gt;</bpt>SqlFunction<ept id="2">&lt;/strong&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="129" xml:space="preserve">
            <source>A method that is decorated with this attribute can be called by your T-SQL as a function.</source>
            <target state="new">A method that is decorated with this attribute can be called by your T-SQL as a function.</target>
          </trans-unit>
          <trans-unit id="130" xml:space="preserve">
            <source>C. C&amp;#x23; Code Sample for EXE that Issues CREATE ASSEMBLY</source>
            <target state="new">C. C&amp;#x23; Code Sample for EXE that Issues CREATE ASSEMBLY</target>
          </trans-unit>
          <trans-unit id="131" xml:space="preserve">
            <source>The following sequence occurs when you run the EXE that is built from this C# sample:</source>
            <target state="new">The following sequence occurs when you run the EXE that is built from this C# sample:</target>
          </trans-unit>
          <trans-unit id="132" xml:space="preserve">
            <source>The command line run of the EXE calls the <bpt id="2">&lt;strong&gt;</bpt>Main<ept id="2">&lt;/strong&gt;</ept> method.</source>
            <target state="new">The command line run of the EXE calls the <bpt id="2">&lt;strong&gt;</bpt>Main<ept id="2">&lt;/strong&gt;</ept> method.</target>
          </trans-unit>
          <trans-unit id="133" xml:space="preserve">
            <source>Main calls the <bpt id="2">&lt;strong&gt;</bpt>ObtainHexStringOfAssembly<ept id="2">&lt;/strong&gt;</ept> method.</source>
            <target state="new">Main calls the <bpt id="2">&lt;strong&gt;</bpt>ObtainHexStringOfAssembly<ept id="2">&lt;/strong&gt;</ept> method.</target>
          </trans-unit>
          <trans-unit id="134" xml:space="preserve">
            <source>The method outputs a SqlString that stores the assembly as a hexadecimal number.</source>
            <target state="new">The method outputs a SqlString that stores the assembly as a hexadecimal number.</target>
          </trans-unit>
          <trans-unit id="135" xml:space="preserve">
            <source>Main calls the <bpt id="2">&lt;strong&gt;</bpt>SubmitCreateAssemblyToAzureSqlDb<ept id="2">&lt;/strong&gt;</ept> method.</source>
            <target state="new">Main calls the <bpt id="2">&lt;strong&gt;</bpt>SubmitCreateAssemblyToAzureSqlDb<ept id="2">&lt;/strong&gt;</ept> method.</target>
          </trans-unit>
          <trans-unit id="136" xml:space="preserve">
            <source>The primary input is the SqlString.</source>
            <target state="new">The primary input is the SqlString.</target>
          </trans-unit>
          <trans-unit id="137" xml:space="preserve">
            <source>The output is a CREATE ASSEMBLY call that is sent to Azure SQL Database.</source>
            <target state="new">The output is a CREATE ASSEMBLY call that is sent to Azure SQL Database.</target>
          </trans-unit>
          <trans-unit id="138" xml:space="preserve">
            <source>C.1 Compile References and Versions</source>
            <target state="new">C.1 Compile References and Versions</target>
          </trans-unit>
          <trans-unit id="139" xml:space="preserve">
            <source>When we compiled and tested the sample code for the EXE tool, we used the following:</source>
            <target state="new">When we compiled and tested the sample code for the EXE tool, we used the following:</target>
          </trans-unit>
          <trans-unit id="140" xml:space="preserve">
            <source>Visual Studio 2013, update 4</source>
            <target state="new">Visual Studio 2013, update 4</target>
          </trans-unit>
          <trans-unit id="141" xml:space="preserve">
            <source>Our project template type was the simple console application.</source>
            <target state="new">Our project template type was the simple console application.</target>
          </trans-unit>
          <trans-unit id="142" xml:space="preserve">
            <source>.NET Framework 4.5</source>
            <target state="new">.NET Framework 4.5</target>
          </trans-unit>
          <trans-unit id="143" xml:space="preserve">
            <source>Our Visual Studio project referenced the following assemblies for compile:</source>
            <target state="new">Our Visual Studio project referenced the following assemblies for compile:</target>
          </trans-unit>
          <trans-unit id="144" xml:space="preserve">
            <source>Microsoft.CSharp</source>
            <target state="new">Microsoft.CSharp</target>
          </trans-unit>
          <trans-unit id="145" xml:space="preserve">
            <source>System</source>
            <target state="new">System</target>
          </trans-unit>
          <trans-unit id="146" xml:space="preserve">
            <source>System.Core</source>
            <target state="new">System.Core</target>
          </trans-unit>
          <trans-unit id="147" xml:space="preserve">
            <source>System.Data</source>
            <target state="new">System.Data</target>
          </trans-unit>
          <trans-unit id="148" xml:space="preserve">
            <source>System.Data.DataSetExtensions</source>
            <target state="new">System.Data.DataSetExtensions</target>
          </trans-unit>
          <trans-unit id="149" xml:space="preserve">
            <source>System.Xml</source>
            <target state="new">System.Xml</target>
          </trans-unit>
          <trans-unit id="150" xml:space="preserve">
            <source>System.Xml.Linq</source>
            <target state="new">System.Xml.Linq</target>
          </trans-unit>
          <trans-unit id="151" xml:space="preserve">
            <source>C.2 Command Line to Run the EXE</source>
            <target state="new">C.2 Command Line to Run the EXE</target>
          </trans-unit>
          <trans-unit id="152" xml:space="preserve">
            <source>The following code block displays an example of the command line that you would enter to run the EXE from the console.</source>
            <target state="new">The following code block displays an example of the command line that you would enter to run the EXE from the console.</target>
          </trans-unit>
          <trans-unit id="153" xml:space="preserve">
            <source>The parameters in the command line are artificially wrapped here for better display.</source>
            <target state="new">The parameters in the command line are artificially wrapped here for better display.</target>
          </trans-unit>
          <trans-unit id="154" xml:space="preserve">
            <source>For simplicity of explanation this example passes the password as a command line parameter.</source>
            <target state="new">For simplicity of explanation this example passes the password as a command line parameter.</target>
          </trans-unit>
          <trans-unit id="155" xml:space="preserve">
            <source>A better design is to have the C# code obtain the password from a CONFIG file.</source>
            <target state="new">A better design is to have the C# code obtain the password from a CONFIG file.</target>
          </trans-unit>
          <trans-unit id="156" xml:space="preserve">
            <source>D. Run a CREATE FUNCTION Statement</source>
            <target state="new">D. Run a CREATE FUNCTION Statement</target>
          </trans-unit>
          <trans-unit id="157" xml:space="preserve">
            <source>After the assembly is stored in your Azure SQL Database server, you must run a Transact-SQL CREATE FUNCTION statement that references the method in the assembly.</source>
            <target state="new">After the assembly is stored in your Azure SQL Database server, you must run a Transact-SQL CREATE FUNCTION statement that references the method in the assembly.</target>
          </trans-unit>
          <trans-unit id="158" xml:space="preserve">
            <source>The following block of Transact-SQL code includes a couple of nonessential SELECT statements to show proof that the database system has records for your assembly and your function.</source>
            <target state="new">The following block of Transact-SQL code includes a couple of nonessential SELECT statements to show proof that the database system has records for your assembly and your function.</target>
          </trans-unit>
          <trans-unit id="159" xml:space="preserve">
            <source>Finally there is a SELECT that calls the function.</source>
            <target state="new">Finally there is a SELECT that calls the function.</target>
          </trans-unit>
          <trans-unit id="160" xml:space="preserve">
            <source>The preceding Transact-SQL code block ends with a SELECT statement that calls the new function.</source>
            <target state="new">The preceding Transact-SQL code block ends with a SELECT statement that calls the new function.</target>
          </trans-unit>
          <trans-unit id="161" xml:space="preserve">
            <source>You could place the SELECT statement into a stored procedure.</source>
            <target state="new">You could place the SELECT statement into a stored procedure.</target>
          </trans-unit>
        </group>
      </group>
    </body>
  </file>
</xliff>