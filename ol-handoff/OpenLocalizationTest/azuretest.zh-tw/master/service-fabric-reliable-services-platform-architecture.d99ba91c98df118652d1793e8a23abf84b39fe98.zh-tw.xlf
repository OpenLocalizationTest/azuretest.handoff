<?xml version="1.0" encoding="utf-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" source-language="en-us" target-language="zh-tw" original="2/20/2016 12:31:27 PM" tool-id="MarkdownTransformer" product-name="N/A" product-version="N/A" build-num="1">
    <header>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9c433d0a70bdb42521326a692219f51b9b4d3a79</xliffext:olfilehash>
      <tool tool-id="MarkdownTransformer" tool-name="MarkdownToXliff" tool-version="1.0" tool-company="Microsoft" />
    </header>
    <body>
      <group extype="content">
        <group id="101">
          <trans-unit id="101" xml:space="preserve">
            <source>Service Fabric Reliable Service Architecture</source>
            <target state="new">Service Fabric Reliable Service Architecture</target>
          </trans-unit>
          <trans-unit id="102" xml:space="preserve">
            <source>High-level overview of the reliable service architecture</source>
            <target state="new">High-level overview of the reliable service architecture</target>
          </trans-unit>
          <trans-unit id="103" xml:space="preserve">
            <source>Reliable Service Architecture</source>
            <target state="new">Reliable Service Architecture</target>
          </trans-unit>
          <trans-unit id="104" xml:space="preserve">
            <source>A Service Fabric Reliable Service may be stateful or stateless.</source>
            <target state="new">A Service Fabric Reliable Service may be stateful or stateless.</target>
          </trans-unit>
          <trans-unit id="105" xml:space="preserve">
            <source>Each type of service runs within a specific architecture described in this article.</source>
            <target state="new">Each type of service runs within a specific architecture described in this article.</target>
          </trans-unit>
          <trans-unit id="106" xml:space="preserve">
            <source>See <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Reliable Service Overview<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> for more information about the differences between stateful and stateless services.</source>
            <target state="new">See <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Reliable Service Overview<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> for more information about the differences between stateful and stateless services.</target>
          </trans-unit>
          <trans-unit id="107" xml:space="preserve">
            <source>Stateful Reliable Service</source>
            <target state="new">Stateful Reliable Service</target>
          </trans-unit>
          <trans-unit id="108" xml:space="preserve">
            <source>Stateful Reliable Service Architecture Diagram</source>
            <target state="new">Stateful Reliable Service Architecture Diagram</target>
          </trans-unit>
          <trans-unit id="109" xml:space="preserve">
            <source><bpt id="1">&lt;linkText&gt;</bpt>Architecture Diagram<ept id="1">&lt;/linkText&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;linkText&gt;</bpt>Architecture Diagram<ept id="1">&lt;/linkText&gt;</ept></target>
          </trans-unit>
          <trans-unit id="110" xml:space="preserve">
            <source>Stateful Reliable Service</source>
            <target state="new">Stateful Reliable Service</target>
          </trans-unit>
          <trans-unit id="111" xml:space="preserve">
            <source>A stateful reliable service can derive from either the StatefulService or StatefulServiceBase class.</source>
            <target state="new">A stateful reliable service can derive from either the StatefulService or StatefulServiceBase class.</target>
          </trans-unit>
          <trans-unit id="112" xml:space="preserve">
            <source>Both of these base classes are provided by Service Fabric and</source>
            <target state="new">Both of these base classes are provided by Service Fabric and</target>
          </trans-unit>
          <trans-unit id="113" xml:space="preserve">
            <source>provide various levels of support and abstraction for your stateful service to interface with Service Fabric, and to participate as a service within the Service Fabric Cluster.</source>
            <target state="new">provide various levels of support and abstraction for your stateful service to interface with Service Fabric, and to participate as a service within the Service Fabric Cluster.</target>
          </trans-unit>
          <trans-unit id="114" xml:space="preserve">
            <source>StatefulService derives from StatefulServiceBase; StatefulServiceBase offers services more flexibility but requires more understanding of the internals of Service Fabric.</source>
            <target state="new">StatefulService derives from StatefulServiceBase; StatefulServiceBase offers services more flexibility but requires more understanding of the internals of Service Fabric.</target>
          </trans-unit>
          <trans-unit id="115" xml:space="preserve">
            <source>See <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Reliable Service Overview<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> and <bpt id="4CapsExtId1">&lt;link&gt;</bpt><bpt id="4CapsExtId2">&lt;linkText&gt;</bpt>Reliable Service Advanced Usage<ept id="4CapsExtId2">&lt;/linkText&gt;</ept><bpt id="4CapsExtId3">&lt;title&gt;</bpt><ept id="4CapsExtId3">&lt;/title&gt;</ept><ept id="4CapsExtId1">&lt;/link&gt;</ept> for more information on the specifics</source>
            <target state="new">See <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Reliable Service Overview<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> and <bpt id="4CapsExtId1">&lt;link&gt;</bpt><bpt id="4CapsExtId2">&lt;linkText&gt;</bpt>Reliable Service Advanced Usage<ept id="4CapsExtId2">&lt;/linkText&gt;</ept><bpt id="4CapsExtId3">&lt;title&gt;</bpt><ept id="4CapsExtId3">&lt;/title&gt;</ept><ept id="4CapsExtId1">&lt;/link&gt;</ept> for more information on the specifics</target>
          </trans-unit>
          <trans-unit id="116" xml:space="preserve">
            <source>of writing services using StatefulService and StatefulServiceBase classes.</source>
            <target state="new">of writing services using StatefulService and StatefulServiceBase classes.</target>
          </trans-unit>
          <trans-unit id="117" xml:space="preserve">
            <source>Both base classes manage the lifetime and role of the service implementation.</source>
            <target state="new">Both base classes manage the lifetime and role of the service implementation.</target>
          </trans-unit>
          <trans-unit id="118" xml:space="preserve">
            <source>The service implementation may override virtual methods of either base class if the service implementation has work to do</source>
            <target state="new">The service implementation may override virtual methods of either base class if the service implementation has work to do</target>
          </trans-unit>
          <trans-unit id="119" xml:space="preserve">
            <source>at those points in the service implementation lifecycle or if it wants to create a communication listener object.</source>
            <target state="new">at those points in the service implementation lifecycle or if it wants to create a communication listener object.</target>
          </trans-unit>
          <trans-unit id="120" xml:space="preserve">
            <source>Note that although a service implementation</source>
            <target state="new">Note that although a service implementation</target>
          </trans-unit>
          <trans-unit id="121" xml:space="preserve">
            <source>may implement its own communication listener object exposing ICommunicationListener, in the diagram above, the communication listener is</source>
            <target state="new">may implement its own communication listener object exposing ICommunicationListener, in the diagram above, the communication listener is</target>
          </trans-unit>
          <trans-unit id="122" xml:space="preserve">
            <source>implemented by Service Fabric as the service implementation uses a communication listener implemented by Service Fabric.</source>
            <target state="new">implemented by Service Fabric as the service implementation uses a communication listener implemented by Service Fabric.</target>
          </trans-unit>
          <trans-unit id="123" xml:space="preserve">
            <source>Your stateful reliable service uses the reliable state manager to take advantage of reliable collections.</source>
            <target state="new">Your stateful reliable service uses the reliable state manager to take advantage of reliable collections.</target>
          </trans-unit>
          <trans-unit id="124" xml:space="preserve">
            <source>Reliable collections are local data structures that are highly available to your service,</source>
            <target state="new">Reliable collections are local data structures that are highly available to your service,</target>
          </trans-unit>
          <trans-unit id="125" xml:space="preserve">
            <source>that is, are always available regardless of service failovers.</source>
            <target state="new">that is, are always available regardless of service failovers.</target>
          </trans-unit>
          <trans-unit id="126" xml:space="preserve">
            <source>Each type of reliable collection is implemented by a reliable state provider.</source>
            <target state="new">Each type of reliable collection is implemented by a reliable state provider.</target>
          </trans-unit>
          <trans-unit id="127" xml:space="preserve">
            <source>For more information on reliable collections see <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>the Reliable Collections overview<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept></source>
            <target state="new">For more information on reliable collections see <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>the Reliable Collections overview<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept></target>
          </trans-unit>
          <trans-unit id="128" xml:space="preserve">
            <source>Reliable State Manager And Providers</source>
            <target state="new">Reliable State Manager And Providers</target>
          </trans-unit>
          <trans-unit id="129" xml:space="preserve">
            <source>The reliable state manager is the object that manages reliable state providers and has functionality to create, delete, enumerate and ensure that the reliable state providers are</source>
            <target state="new">The reliable state manager is the object that manages reliable state providers and has functionality to create, delete, enumerate and ensure that the reliable state providers are</target>
          </trans-unit>
          <trans-unit id="130" xml:space="preserve">
            <source>persisted and highly available.</source>
            <target state="new">persisted and highly available.</target>
          </trans-unit>
          <trans-unit id="131" xml:space="preserve">
            <source>A reliable state provider instance represents an instance of a persisted and highly available data structure such as a</source>
            <target state="new">A reliable state provider instance represents an instance of a persisted and highly available data structure such as a</target>
          </trans-unit>
          <trans-unit id="132" xml:space="preserve">
            <source>dictionary or a queue.</source>
            <target state="new">dictionary or a queue.</target>
          </trans-unit>
          <trans-unit id="133" xml:space="preserve">
            <source>Each reliable state provider exposes an interface that is used by your stateful service to interact with the reliable state provider.</source>
            <target state="new">Each reliable state provider exposes an interface that is used by your stateful service to interact with the reliable state provider.</target>
          </trans-unit>
          <trans-unit id="134" xml:space="preserve">
            <source>For example</source>
            <target state="new">For example</target>
          </trans-unit>
          <trans-unit id="135" xml:space="preserve">
            <source>IReliableDictionary is used to interface with the reliable dictionary while IReliableQueue is used to interface with the reliable queue.</source>
            <target state="new">IReliableDictionary is used to interface with the reliable dictionary while IReliableQueue is used to interface with the reliable queue.</target>
          </trans-unit>
          <trans-unit id="136" xml:space="preserve">
            <source>All reliable state providers implement the</source>
            <target state="new">All reliable state providers implement the</target>
          </trans-unit>
          <trans-unit id="137" xml:space="preserve">
            <source>IReliableState interface.</source>
            <target state="new">IReliableState interface.</target>
          </trans-unit>
          <trans-unit id="138" xml:space="preserve">
            <source>The reliable state manager has an interface named IReliableStateManager which allows access to it by the stateful service implementation.</source>
            <target state="new">The reliable state manager has an interface named IReliableStateManager which allows access to it by the stateful service implementation.</target>
          </trans-unit>
          <trans-unit id="139" xml:space="preserve">
            <source>Interfaces to reliable state providers</source>
            <target state="new">Interfaces to reliable state providers</target>
          </trans-unit>
          <trans-unit id="140" xml:space="preserve">
            <source>are returned through IReliableStateManager.</source>
            <target state="new">are returned through IReliableStateManager.</target>
          </trans-unit>
          <trans-unit id="141" xml:space="preserve">
            <source>The reliable state manager is architected with a dynamic plug-in architecture so that new types of reliable collections can be plugged in dynamically.</source>
            <target state="new">The reliable state manager is architected with a dynamic plug-in architecture so that new types of reliable collections can be plugged in dynamically.</target>
          </trans-unit>
          <trans-unit id="142" xml:space="preserve">
            <source>The reliable dictionary and reliable queue are built upon the implementation of a high performance versioned differential store.</source>
            <target state="new">The reliable dictionary and reliable queue are built upon the implementation of a high performance versioned differential store.</target>
          </trans-unit>
          <trans-unit id="143" xml:space="preserve">
            <source>Transactional Replicator</source>
            <target state="new">Transactional Replicator</target>
          </trans-unit>
          <trans-unit id="144" xml:space="preserve">
            <source>The transactional replicator component is responsible for ensuring that the state of the your service, that is the state within the reliable state manager and the reliable collections,</source>
            <target state="new">The transactional replicator component is responsible for ensuring that the state of the your service, that is the state within the reliable state manager and the reliable collections,</target>
          </trans-unit>
          <trans-unit id="145" xml:space="preserve">
            <source>is consistent across all replicas running your service and that state is also persisted in the log.</source>
            <target state="new">is consistent across all replicas running your service and that state is also persisted in the log.</target>
          </trans-unit>
          <trans-unit id="146" xml:space="preserve">
            <source>The reliable state manager interfaces with the transactional replicator</source>
            <target state="new">The reliable state manager interfaces with the transactional replicator</target>
          </trans-unit>
          <trans-unit id="147" xml:space="preserve">
            <source>via a private mechanism.</source>
            <target state="new">via a private mechanism.</target>
          </trans-unit>
          <trans-unit id="148" xml:space="preserve">
            <source>The transactional replicator uses a network protocol to communicate state with other replicas of the service instance so that all replicas have up to date state information.</source>
            <target state="new">The transactional replicator uses a network protocol to communicate state with other replicas of the service instance so that all replicas have up to date state information.</target>
          </trans-unit>
          <trans-unit id="149" xml:space="preserve">
            <source>The transactional replicator uses a log to persist state information so that the state information survives process or node crashes.</source>
            <target state="new">The transactional replicator uses a log to persist state information so that the state information survives process or node crashes.</target>
          </trans-unit>
          <trans-unit id="150" xml:space="preserve">
            <source>The interface to the log is via a private mechanism.</source>
            <target state="new">The interface to the log is via a private mechanism.</target>
          </trans-unit>
          <trans-unit id="151" xml:space="preserve">
            <source>Log</source>
            <target state="new">Log</target>
          </trans-unit>
          <trans-unit id="152" xml:space="preserve">
            <source>The log component provides a high performance persistent store that can be optimized for writing to spinning or solid state disks and also optimized for most efficient use of disk space.</source>
            <target state="new">The log component provides a high performance persistent store that can be optimized for writing to spinning or solid state disks and also optimized for most efficient use of disk space.</target>
          </trans-unit>
          <trans-unit id="153" xml:space="preserve">
            <source>The design</source>
            <target state="new">The design</target>
          </trans-unit>
          <trans-unit id="154" xml:space="preserve">
            <source>of the log is for the persistent storage (ie, hard disks)</source>
            <target state="new">of the log is for the persistent storage (ie, hard disks)</target>
          </trans-unit>
          <trans-unit id="155" xml:space="preserve">
            <source>to be local to the nodes that are running your stateful service to allow for low latencies and high throughput as compared to persistent storage that is not local to the node.</source>
            <target state="new">to be local to the nodes that are running your stateful service to allow for low latencies and high throughput as compared to persistent storage that is not local to the node.</target>
          </trans-unit>
          <trans-unit id="156" xml:space="preserve">
            <source>The log component uses two types of log files.</source>
            <target state="new">The log component uses two types of log files.</target>
          </trans-unit>
          <trans-unit id="157" xml:space="preserve">
            <source>There is a node-wide shared log file which should be on a disk that is only used for that log file.</source>
            <target state="new">There is a node-wide shared log file which should be on a disk that is only used for that log file.</target>
          </trans-unit>
          <trans-unit id="158" xml:space="preserve">
            <source>This file is placed in the Service Fabric node</source>
            <target state="new">This file is placed in the Service Fabric node</target>
          </trans-unit>
          <trans-unit id="159" xml:space="preserve">
            <source>work directory.</source>
            <target state="new">work directory.</target>
          </trans-unit>
          <trans-unit id="160" xml:space="preserve">
            <source>Each replica for your service also has a dedicated log file and is placed within the service's work directory.</source>
            <target state="new">Each replica for your service also has a dedicated log file and is placed within the service's work directory.</target>
          </trans-unit>
          <trans-unit id="161" xml:space="preserve">
            <source>The shared log is a transitional area for the state information</source>
            <target state="new">The shared log is a transitional area for the state information</target>
          </trans-unit>
          <trans-unit id="162" xml:space="preserve">
            <source>while the dedicated log file is its ultimate destination where it is persisted.</source>
            <target state="new">while the dedicated log file is its ultimate destination where it is persisted.</target>
          </trans-unit>
          <trans-unit id="163" xml:space="preserve">
            <source>In this design the state information is first written to the shared log file and then lazily destaged to the dedicated log</source>
            <target state="new">In this design the state information is first written to the shared log file and then lazily destaged to the dedicated log</target>
          </trans-unit>
          <trans-unit id="164" xml:space="preserve">
            <source>file in the background.</source>
            <target state="new">file in the background.</target>
          </trans-unit>
          <trans-unit id="165" xml:space="preserve">
            <source>In this way the write to the shared log would have the lowest latency and highest throughput to allow the service to make progress faster.</source>
            <target state="new">In this way the write to the shared log would have the lowest latency and highest throughput to allow the service to make progress faster.</target>
          </trans-unit>
          <trans-unit id="166" xml:space="preserve">
            <source>However when the log component is configured for optimizing for solid state disks using the OptimizeForLocalSSD setting, the state information is written directly to the dedicated</source>
            <target state="new">However when the log component is configured for optimizing for solid state disks using the OptimizeForLocalSSD setting, the state information is written directly to the dedicated</target>
          </trans-unit>
          <trans-unit id="167" xml:space="preserve">
            <source>log file and bypasses the shared log file.</source>
            <target state="new">log file and bypasses the shared log file.</target>
          </trans-unit>
          <trans-unit id="168" xml:space="preserve">
            <source>Since solid state disks do not suffer from delays due to head movement contention, there is no penalty for writing directly to the dedicated log file.</source>
            <target state="new">Since solid state disks do not suffer from delays due to head movement contention, there is no penalty for writing directly to the dedicated log file.</target>
          </trans-unit>
          <trans-unit id="169" xml:space="preserve">
            <source>When the log component is optimized to minimize the use of disk space using the OptimizeLogForLowerDiskUsage, the dedicated log files are created as NTFS sparse files.</source>
            <target state="new">When the log component is optimized to minimize the use of disk space using the OptimizeLogForLowerDiskUsage, the dedicated log files are created as NTFS sparse files.</target>
          </trans-unit>
          <trans-unit id="170" xml:space="preserve">
            <source>Since log files typically</source>
            <target state="new">Since log files typically</target>
          </trans-unit>
          <trans-unit id="171" xml:space="preserve">
            <source>are not always completely full of state information, the use of sparse files allows overprovisioning of the disk space available to more replicas.</source>
            <target state="new">are not always completely full of state information, the use of sparse files allows overprovisioning of the disk space available to more replicas.</target>
          </trans-unit>
          <trans-unit id="172" xml:space="preserve">
            <source>If not configured in this way the log file space</source>
            <target state="new">If not configured in this way the log file space</target>
          </trans-unit>
          <trans-unit id="173" xml:space="preserve">
            <source>is preallocated and the log component can write directly to the file with the highest performance.</source>
            <target state="new">is preallocated and the log component can write directly to the file with the highest performance.</target>
          </trans-unit>
          <trans-unit id="174" xml:space="preserve">
            <source>Aside from a minimal user mode interface to the log, the log is written as a kernel mode driver.</source>
            <target state="new">Aside from a minimal user mode interface to the log, the log is written as a kernel mode driver.</target>
          </trans-unit>
          <trans-unit id="175" xml:space="preserve">
            <source>By running as a kernel mode driver the log can provide the highest performance to all services that</source>
            <target state="new">By running as a kernel mode driver the log can provide the highest performance to all services that</target>
          </trans-unit>
          <trans-unit id="176" xml:space="preserve">
            <source>use it.</source>
            <target state="new">use it.</target>
          </trans-unit>
          <trans-unit id="177" xml:space="preserve">
            <source>For more information about configuring the log see <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>configuring stateful Reliable Services<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">For more information about configuring the log see <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>configuring stateful Reliable Services<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="178" xml:space="preserve">
            <source>Stateless Reliable Service</source>
            <target state="new">Stateless Reliable Service</target>
          </trans-unit>
          <trans-unit id="179" xml:space="preserve">
            <source>Stateless Reliable Service Architecture Diagram</source>
            <target state="new">Stateless Reliable Service Architecture Diagram</target>
          </trans-unit>
          <trans-unit id="180" xml:space="preserve">
            <source><bpt id="1">&lt;linkText&gt;</bpt>Architecture Diagram<ept id="1">&lt;/linkText&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;linkText&gt;</bpt>Architecture Diagram<ept id="1">&lt;/linkText&gt;</ept></target>
          </trans-unit>
          <trans-unit id="181" xml:space="preserve">
            <source>Stateless Reliable Service</source>
            <target state="new">Stateless Reliable Service</target>
          </trans-unit>
          <trans-unit id="182" xml:space="preserve">
            <source>Stateless service implementations derive from the StatelessService or StatelessServiceBase class where the StatelessServiceBase class allows more flexibility than the StatelessService.</source>
            <target state="new">Stateless service implementations derive from the StatelessService or StatelessServiceBase class where the StatelessServiceBase class allows more flexibility than the StatelessService.</target>
          </trans-unit>
          <trans-unit id="183" xml:space="preserve">
            <source>Both base classes manages the lifetime and role of the your service.</source>
            <target state="new">Both base classes manages the lifetime and role of the your service.</target>
          </trans-unit>
          <trans-unit id="184" xml:space="preserve">
            <source>The service implementation may override virtual methods of either base class if your service has work to do</source>
            <target state="new">The service implementation may override virtual methods of either base class if your service has work to do</target>
          </trans-unit>
          <trans-unit id="185" xml:space="preserve">
            <source>at those points in the service lifecycle or if it wants to create a communication listener object.</source>
            <target state="new">at those points in the service lifecycle or if it wants to create a communication listener object.</target>
          </trans-unit>
          <trans-unit id="186" xml:space="preserve">
            <source>Note that although your service may implement its own communication</source>
            <target state="new">Note that although your service may implement its own communication</target>
          </trans-unit>
          <trans-unit id="187" xml:space="preserve">
            <source>listener object exposing ICommunicationListener, in the diagram above, the communication listener is implemented by Service Fabric as that service implementation uses a</source>
            <target state="new">listener object exposing ICommunicationListener, in the diagram above, the communication listener is implemented by Service Fabric as that service implementation uses a</target>
          </trans-unit>
          <trans-unit id="188" xml:space="preserve">
            <source>communication listener implemented by Service Fabric.</source>
            <target state="new">communication listener implemented by Service Fabric.</target>
          </trans-unit>
          <trans-unit id="189" xml:space="preserve">
            <source>See <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Reliable Service Overview<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> and <bpt id="4CapsExtId1">&lt;link&gt;</bpt><bpt id="4CapsExtId2">&lt;linkText&gt;</bpt>Reliable Service Advanced Usage<ept id="4CapsExtId2">&lt;/linkText&gt;</ept><bpt id="4CapsExtId3">&lt;title&gt;</bpt><ept id="4CapsExtId3">&lt;/title&gt;</ept><ept id="4CapsExtId1">&lt;/link&gt;</ept> for more information on the specifics</source>
            <target state="new">See <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Reliable Service Overview<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> and <bpt id="4CapsExtId1">&lt;link&gt;</bpt><bpt id="4CapsExtId2">&lt;linkText&gt;</bpt>Reliable Service Advanced Usage<ept id="4CapsExtId2">&lt;/linkText&gt;</ept><bpt id="4CapsExtId3">&lt;title&gt;</bpt><ept id="4CapsExtId3">&lt;/title&gt;</ept><ept id="4CapsExtId1">&lt;/link&gt;</ept> for more information on the specifics</target>
          </trans-unit>
          <trans-unit id="190" xml:space="preserve">
            <source>of writing services using StatelessService and StatelessServiceBase classes.</source>
            <target state="new">of writing services using StatelessService and StatelessServiceBase classes.</target>
          </trans-unit>
          <trans-unit id="191" xml:space="preserve">
            <source>Next steps</source>
            <target state="new">Next steps</target>
          </trans-unit>
          <trans-unit id="192" xml:space="preserve">
            <source>For more information about Service Fabric, see:</source>
            <target state="new">For more information about Service Fabric, see:</target>
          </trans-unit>
          <trans-unit id="193" xml:space="preserve">
            <source><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Reliable Service Overview<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></source>
            <target state="new"><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Reliable Service Overview<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></target>
          </trans-unit>
          <trans-unit id="194" xml:space="preserve">
            <source><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Quick Start<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></source>
            <target state="new"><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Quick Start<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></target>
          </trans-unit>
          <trans-unit id="195" xml:space="preserve">
            <source><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Reliable Collections Overview<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></source>
            <target state="new"><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Reliable Collections Overview<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></target>
          </trans-unit>
          <trans-unit id="196" xml:space="preserve">
            <source><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Reliable Service Advanced Usage<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></source>
            <target state="new"><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Reliable Service Advanced Usage<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></target>
          </trans-unit>
          <trans-unit id="197" xml:space="preserve">
            <source><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Reliable Service Configuration<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></source>
            <target state="new"><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Reliable Service Configuration<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></target>
          </trans-unit>
        </group>
      </group>
    </body>
  </file>
</xliff>