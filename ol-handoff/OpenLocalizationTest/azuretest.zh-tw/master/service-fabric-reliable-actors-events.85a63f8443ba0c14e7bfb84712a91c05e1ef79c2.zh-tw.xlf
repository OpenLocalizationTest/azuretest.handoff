<?xml version="1.0" encoding="utf-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" source-language="en-us" target-language="zh-tw" original="2/20/2016 12:30:24 PM" tool-id="MarkdownTransformer" product-name="N/A" product-version="N/A" build-num="1">
    <header>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">52d6a6ffed3ce4ff416cb44e56eb8d8089e727eb</xliffext:olfilehash>
      <tool tool-id="MarkdownTransformer" tool-name="MarkdownToXliff" tool-version="1.0" tool-company="Microsoft" />
    </header>
    <body>
      <group extype="content">
        <group id="101">
          <trans-unit id="101" xml:space="preserve">
            <source>Reliable Actors Events</source>
            <target state="new">Reliable Actors Events</target>
          </trans-unit>
          <trans-unit id="102" xml:space="preserve">
            <source>Introduction to Events for Service Fabric Reliable Actors.</source>
            <target state="new">Introduction to Events for Service Fabric Reliable Actors.</target>
          </trans-unit>
          <trans-unit id="103" xml:space="preserve">
            <source>Actor Events</source>
            <target state="new">Actor Events</target>
          </trans-unit>
          <trans-unit id="104" xml:space="preserve">
            <source>Actor events provide a way to send best effort notifications from the Actor to the clients.</source>
            <target state="new">Actor events provide a way to send best effort notifications from the Actor to the clients.</target>
          </trans-unit>
          <trans-unit id="105" xml:space="preserve">
            <source>Actor events are designed for Actor-Client communication and should NOT be used for Actor-to-Actor communication.</source>
            <target state="new">Actor events are designed for Actor-Client communication and should NOT be used for Actor-to-Actor communication.</target>
          </trans-unit>
          <trans-unit id="106" xml:space="preserve">
            <source>Following code snippets shows how to use actor events in your application.</source>
            <target state="new">Following code snippets shows how to use actor events in your application.</target>
          </trans-unit>
          <trans-unit id="107" xml:space="preserve">
            <source>Define an interface that describes the events published by the actor.</source>
            <target state="new">Define an interface that describes the events published by the actor.</target>
          </trans-unit>
          <trans-unit id="108" xml:space="preserve">
            <source>This interface must be derived from the <bpt id="2">&lt;code&gt;</bpt>IActorEvents<ept id="2">&lt;/code&gt;</ept> interface.</source>
            <target state="new">This interface must be derived from the <bpt id="2">&lt;code&gt;</bpt>IActorEvents<ept id="2">&lt;/code&gt;</ept> interface.</target>
          </trans-unit>
          <trans-unit id="109" xml:space="preserve">
            <source>The arguments of the methods must be <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>data contract serializable<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">The arguments of the methods must be <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>data contract serializable<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="110" xml:space="preserve">
            <source>The methods must return void as event notifications are one-way and best effort.</source>
            <target state="new">The methods must return void as event notifications are one-way and best effort.</target>
          </trans-unit>
          <trans-unit id="111" xml:space="preserve">
            <source>Declare the events published by the actor in the actor interface.</source>
            <target state="new">Declare the events published by the actor in the actor interface.</target>
          </trans-unit>
          <trans-unit id="112" xml:space="preserve">
            <source>On the client side, implement the event handler.</source>
            <target state="new">On the client side, implement the event handler.</target>
          </trans-unit>
          <trans-unit id="113" xml:space="preserve">
            <source>On the client, create a proxy to the actor that publishes the event and subscribe to its events.</source>
            <target state="new">On the client, create a proxy to the actor that publishes the event and subscribe to its events.</target>
          </trans-unit>
          <trans-unit id="114" xml:space="preserve">
            <source>In the event of failovers the actor may failover to a different process or node. The actor proxy manages the active subscriptions and automatically re-subscribes them. You can control the re-subscription interval through the <bpt id="2">&lt;code&gt;</bpt>ActorProxyEventExtensions.SubscribeAsync&lt;TEvent&gt;<ept id="2">&lt;/code&gt;</ept> API. To unsubscribe use the <bpt id="4">&lt;code&gt;</bpt>ActorProxyEventExtensions.UnsubscribeAsync&lt;TEvent&gt;<ept id="4">&lt;/code&gt;</ept> API.</source>
            <target state="new">In the event of failovers the actor may failover to a different process or node. The actor proxy manages the active subscriptions and automatically re-subscribes them. You can control the re-subscription interval through the <bpt id="2">&lt;code&gt;</bpt>ActorProxyEventExtensions.SubscribeAsync&lt;TEvent&gt;<ept id="2">&lt;/code&gt;</ept> API. To unsubscribe use the <bpt id="4">&lt;code&gt;</bpt>ActorProxyEventExtensions.UnsubscribeAsync&lt;TEvent&gt;<ept id="4">&lt;/code&gt;</ept> API.</target>
          </trans-unit>
          <trans-unit id="115" xml:space="preserve">
            <source>On the actor, simply publish the events as they happen.</source>
            <target state="new">On the actor, simply publish the events as they happen.</target>
          </trans-unit>
          <trans-unit id="116" xml:space="preserve">
            <source>If there are subscribers subscribed to the event, the Actors runtime will send them the notification.</source>
            <target state="new">If there are subscribers subscribed to the event, the Actors runtime will send them the notification.</target>
          </trans-unit>
        </group>
      </group>
    </body>
  </file>
</xliff>