<?xml version="1.0" encoding="utf-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" source-language="en-us" target-language="zh-tw" original="2/20/2016 12:29:35 PM" tool-id="MarkdownTransformer" product-name="N/A" product-version="N/A" build-num="1">
    <header>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4177d9061ef9b2be9d7b8bfa1d9db8ce191b9cea</xliffext:olfilehash>
      <tool tool-id="MarkdownTransformer" tool-name="MarkdownToXliff" tool-version="1.0" tool-company="Microsoft" />
    </header>
    <body>
      <group extype="content">
        <group id="101">
          <trans-unit id="101" xml:space="preserve">
            <source>Microsoft Azure Service Fabric How to communicate with services</source>
            <target state="new">Microsoft Azure Service Fabric How to communicate with services</target>
          </trans-unit>
          <trans-unit id="102" xml:space="preserve">
            <source>This article describes how you can connect to and communicate with services in Service Fabric applications.</source>
            <target state="new">This article describes how you can connect to and communicate with services in Service Fabric applications.</target>
          </trans-unit>
          <trans-unit id="103" xml:space="preserve">
            <source>Communicating with services</source>
            <target state="new">Communicating with services</target>
          </trans-unit>
          <trans-unit id="104" xml:space="preserve">
            <source>In the microservices world the overall solution is composed of many different services where each one performs a specialized task.</source>
            <target state="new">In the microservices world the overall solution is composed of many different services where each one performs a specialized task.</target>
          </trans-unit>
          <trans-unit id="105" xml:space="preserve">
            <source>These microservices communicate with each other to enable the end-end workflow.</source>
            <target state="new">These microservices communicate with each other to enable the end-end workflow.</target>
          </trans-unit>
          <trans-unit id="106" xml:space="preserve">
            <source>There are also client applications that connect to and communicate with services.</source>
            <target state="new">There are also client applications that connect to and communicate with services.</target>
          </trans-unit>
          <trans-unit id="107" xml:space="preserve">
            <source>This document discusses how Service Fabric makes it easy for you to setup communication with services that you write with Service Fabric.</source>
            <target state="new">This document discusses how Service Fabric makes it easy for you to setup communication with services that you write with Service Fabric.</target>
          </trans-unit>
          <trans-unit id="108" xml:space="preserve">
            <source>Key concepts</source>
            <target state="new">Key concepts</target>
          </trans-unit>
          <trans-unit id="109" xml:space="preserve">
            <source>These are some of the key concepts that you need to be aware of as you setup communication to services.</source>
            <target state="new">These are some of the key concepts that you need to be aware of as you setup communication to services.</target>
          </trans-unit>
          <trans-unit id="110" xml:space="preserve">
            <source>Communication is represented as Client-Server</source>
            <target state="new">Communication is represented as Client-Server</target>
          </trans-unit>
          <trans-unit id="111" xml:space="preserve">
            <source>Service Fabric Communication APIs represent client-service type of interaction, even in the case where it is between two services running in the same cluster.</source>
            <target state="new">Service Fabric Communication APIs represent client-service type of interaction, even in the case where it is between two services running in the same cluster.</target>
          </trans-unit>
          <trans-unit id="112" xml:space="preserve">
            <source>A target service that will be connected to from a client or another service acts as a server and listens for incoming requests.</source>
            <target state="new">A target service that will be connected to from a client or another service acts as a server and listens for incoming requests.</target>
          </trans-unit>
          <trans-unit id="113" xml:space="preserve">
            <source>The client, which can be just another service in the cluster, connects to the server and makes calls to it.</source>
            <target state="new">The client, which can be just another service in the cluster, connects to the server and makes calls to it.</target>
          </trans-unit>
          <trans-unit id="114" xml:space="preserve">
            <source>Movement of services</source>
            <target state="new">Movement of services</target>
          </trans-unit>
          <trans-unit id="115" xml:space="preserve">
            <source>In a distributed system the service instances that you run may move from one machine to another over time for various reasons such as load balancing when configured with load metrics for resource balancing or due to upgrades, failovers, scale-out, and other various situations.</source>
            <target state="new">In a distributed system the service instances that you run may move from one machine to another over time for various reasons such as load balancing when configured with load metrics for resource balancing or due to upgrades, failovers, scale-out, and other various situations.</target>
          </trans-unit>
          <trans-unit id="116" xml:space="preserve">
            <source>The impact of this is that the endpoint addresses of a service instance can change and to setup communication with the service instance the following loop needs to be executed.</source>
            <target state="new">The impact of this is that the endpoint addresses of a service instance can change and to setup communication with the service instance the following loop needs to be executed.</target>
          </trans-unit>
          <trans-unit id="117" xml:space="preserve">
            <source>These details are abstracted from you if you use the Communication APIs provided by Service Fabric.</source>
            <target state="new">These details are abstracted from you if you use the Communication APIs provided by Service Fabric.</target>
          </trans-unit>
          <trans-unit id="118" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Resolve<ept id="1">&lt;/strong&gt;</ept>: All services instances in Service Fabric have unique URIs, for example "fabric:/MyApplication/MyService" and these URIs do not change over time.</source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Resolve<ept id="1">&lt;/strong&gt;</ept>: All services instances in Service Fabric have unique URIs, for example "fabric:/MyApplication/MyService" and these URIs do not change over time.</target>
          </trans-unit>
          <trans-unit id="119" xml:space="preserve">
            <source>Each service instance also exposes endpoints which can change when service instances are moved.</source>
            <target state="new">Each service instance also exposes endpoints which can change when service instances are moved.</target>
          </trans-unit>
          <trans-unit id="120" xml:space="preserve">
            <source>This is analogous to websites which have constant URLs but the IP Address may change.</source>
            <target state="new">This is analogous to websites which have constant URLs but the IP Address may change.</target>
          </trans-unit>
          <trans-unit id="121" xml:space="preserve">
            <source>And similar to the DNS in the world wide web which resolves website URLs to IP Addresses the Service Fabric platform also has a system service that resolves the URIs to the endpoints.</source>
            <target state="new">And similar to the DNS in the world wide web which resolves website URLs to IP Addresses the Service Fabric platform also has a system service that resolves the URIs to the endpoints.</target>
          </trans-unit>
          <trans-unit id="122" xml:space="preserve">
            <source>This step involves resolving the URI of the service instance to an endpoint.</source>
            <target state="new">This step involves resolving the URI of the service instance to an endpoint.</target>
          </trans-unit>
          <trans-unit id="123" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Connect<ept id="1">&lt;/strong&gt;</ept>: Once the Service URI has been resolved to endpoint addresses the next step is to attempt a connection with that service.</source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Connect<ept id="1">&lt;/strong&gt;</ept>: Once the Service URI has been resolved to endpoint addresses the next step is to attempt a connection with that service.</target>
          </trans-unit>
          <trans-unit id="124" xml:space="preserve">
            <source>This connection may fail if the endpoint address has changed due to a service movement, which, for example, may have been caused by a machine failure or due to load balancing.</source>
            <target state="new">This connection may fail if the endpoint address has changed due to a service movement, which, for example, may have been caused by a machine failure or due to load balancing.</target>
          </trans-unit>
          <trans-unit id="125" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Retry<ept id="1">&lt;/strong&gt;</ept>: If the connection attempt fails the preceding resolve and connect steps need to be retried and this cycle is repeated until the connection succeeds.</source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Retry<ept id="1">&lt;/strong&gt;</ept>: If the connection attempt fails the preceding resolve and connect steps need to be retried and this cycle is repeated until the connection succeeds.</target>
          </trans-unit>
          <trans-unit id="126" xml:space="preserve">
            <source>Deciding the Communication API to use</source>
            <target state="new">Deciding the Communication API to use</target>
          </trans-unit>
          <trans-unit id="127" xml:space="preserve">
            <source>As part of Service Fabric we provide a few different options for Communication APIs and the decision for which one will work best for you depends on the choice of the programming model, communication framework and programming language that your services are written in.</source>
            <target state="new">As part of Service Fabric we provide a few different options for Communication APIs and the decision for which one will work best for you depends on the choice of the programming model, communication framework and programming language that your services are written in.</target>
          </trans-unit>
          <trans-unit id="128" xml:space="preserve">
            <source>Communication for Reliable Actors</source>
            <target state="new">Communication for Reliable Actors</target>
          </trans-unit>
          <trans-unit id="129" xml:space="preserve">
            <source>For services written using Reliable Actors API all the communication details are abstracted and the communication happens as method calls on the ActorProxy and you can stop reading here.</source>
            <target state="new">For services written using Reliable Actors API all the communication details are abstracted and the communication happens as method calls on the ActorProxy and you can stop reading here.</target>
          </trans-unit>
          <trans-unit id="130" xml:space="preserve">
            <source>Communication options for Reliable Services</source>
            <target state="new">Communication options for Reliable Services</target>
          </trans-unit>
          <trans-unit id="131" xml:space="preserve">
            <source>There are a couple of different options if your service was written using Reliable Services API.</source>
            <target state="new">There are a couple of different options if your service was written using Reliable Services API.</target>
          </trans-unit>
          <trans-unit id="132" xml:space="preserve">
            <source>Your choice of a communication protocol will guide as to what Service Fabric communication APIs you may use.</source>
            <target state="new">Your choice of a communication protocol will guide as to what Service Fabric communication APIs you may use.</target>
          </trans-unit>
          <trans-unit id="133" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>There isn't a specific communication protocol that I need to use and I want something up and running quickly<ept id="1">&lt;/strong&gt;</ept>: If you don't have a particular choice of communication framework then the ideal option for you is to use the <bpt id="3CapsExtId1">&lt;link&gt;</bpt><bpt id="3CapsExtId2">&lt;linkText&gt;</bpt>Default stack<ept id="3CapsExtId2">&lt;/linkText&gt;</ept><bpt id="3CapsExtId3">&lt;title&gt;</bpt><ept id="3CapsExtId3">&lt;/title&gt;</ept><ept id="3CapsExtId1">&lt;/link&gt;</ept> that allows for a similar model as the Actor communication model.</source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>There isn't a specific communication protocol that I need to use and I want something up and running quickly<ept id="1">&lt;/strong&gt;</ept>: If you don't have a particular choice of communication framework then the ideal option for you is to use the <bpt id="3CapsExtId1">&lt;link&gt;</bpt><bpt id="3CapsExtId2">&lt;linkText&gt;</bpt>Default stack<ept id="3CapsExtId2">&lt;/linkText&gt;</ept><bpt id="3CapsExtId3">&lt;title&gt;</bpt><ept id="3CapsExtId3">&lt;/title&gt;</ept><ept id="3CapsExtId1">&lt;/link&gt;</ept> that allows for a similar model as the Actor communication model.</target>
          </trans-unit>
          <trans-unit id="134" xml:space="preserve">
            <source>This is the easiest and fastest way to get started with service communication.</source>
            <target state="new">This is the easiest and fastest way to get started with service communication.</target>
          </trans-unit>
          <trans-unit id="135" xml:space="preserve">
            <source>It provides strongly typed RPC communication that abstracts most of the communication details away so that invoking a method on a remote service in your code looks like calling a method on a local object instance.</source>
            <target state="new">It provides strongly typed RPC communication that abstracts most of the communication details away so that invoking a method on a remote service in your code looks like calling a method on a local object instance.</target>
          </trans-unit>
          <trans-unit id="136" xml:space="preserve">
            <source>These classes abstract the resolution, connection, retry and error handling while setting up the communication channel and allows for a method call based communication model.</source>
            <target state="new">These classes abstract the resolution, connection, retry and error handling while setting up the communication channel and allows for a method call based communication model.</target>
          </trans-unit>
          <trans-unit id="137" xml:space="preserve">
            <source>For this the <bpt id="2">&lt;code&gt;</bpt>ServiceCommunicationListener<ept id="2">&lt;/code&gt;</ept> class is to be used for the server side and the <bpt id="4">&lt;code&gt;</bpt>ServiceProxy<ept id="4">&lt;/code&gt;</ept> class on the client side of the communication.</source>
            <target state="new">For this the <bpt id="2">&lt;code&gt;</bpt>ServiceCommunicationListener<ept id="2">&lt;/code&gt;</ept> class is to be used for the server side and the <bpt id="4">&lt;code&gt;</bpt>ServiceProxy<ept id="4">&lt;/code&gt;</ept> class on the client side of the communication.</target>
          </trans-unit>
          <trans-unit id="138" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>HTTP<ept id="1">&lt;/strong&gt;</ept>: To leverage the flexibility that HTTP based communication provides you can use Service Fabric communication APIs that allow the communication mechanism to be defined while resolution, connection and retry logic is still abstracted from you.</source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>HTTP<ept id="1">&lt;/strong&gt;</ept>: To leverage the flexibility that HTTP based communication provides you can use Service Fabric communication APIs that allow the communication mechanism to be defined while resolution, connection and retry logic is still abstracted from you.</target>
          </trans-unit>
          <trans-unit id="139" xml:space="preserve">
            <source>For example you can use Web API for specifying the communication mechanism and leverage the [<bpt id="2">&lt;code&gt;</bpt>ICommunicationClient<ept id="2">&lt;/code&gt;</ept> and <bpt id="4">&lt;code&gt;</bpt>ServicePartitionClient<ept id="4">&lt;/code&gt;</ept> classes](service-fabric-reliable-services-communication.md) to setup communication.</source>
            <target state="new">For example you can use Web API for specifying the communication mechanism and leverage the [<bpt id="2">&lt;code&gt;</bpt>ICommunicationClient<ept id="2">&lt;/code&gt;</ept> and <bpt id="4">&lt;code&gt;</bpt>ServicePartitionClient<ept id="4">&lt;/code&gt;</ept> classes](service-fabric-reliable-services-communication.md) to setup communication.</target>
          </trans-unit>
          <trans-unit id="140" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>WCF<ept id="1">&lt;/strong&gt;</ept>: If you have existing code that uses WCF as your communication framework then you can use the WcfCommunicationListener for the server side, and WcfCommunicationClient and ServicePartitionClient classes for the client.</source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>WCF<ept id="1">&lt;/strong&gt;</ept>: If you have existing code that uses WCF as your communication framework then you can use the WcfCommunicationListener for the server side, and WcfCommunicationClient and ServicePartitionClient classes for the client.</target>
          </trans-unit>
          <trans-unit id="141" xml:space="preserve">
            <source>For more details see <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>this article<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">For more details see <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>this article<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="142" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Other communication frameworks including custom  protocols<ept id="1">&lt;/strong&gt;</ept>: If you are planning on using any other communication framework including custom communication protocols there are Service Fabric communication APIs which you can plugin your communication stack into while all the work to discover and connect is abstracted from you.</source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Other communication frameworks including custom  protocols<ept id="1">&lt;/strong&gt;</ept>: If you are planning on using any other communication framework including custom communication protocols there are Service Fabric communication APIs which you can plugin your communication stack into while all the work to discover and connect is abstracted from you.</target>
          </trans-unit>
          <trans-unit id="143" xml:space="preserve">
            <source>See <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>this article<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> for more details.</source>
            <target state="new">See <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>this article<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> for more details.</target>
          </trans-unit>
          <trans-unit id="144" xml:space="preserve">
            <source>Communication between services written in different programming languages</source>
            <target state="new">Communication between services written in different programming languages</target>
          </trans-unit>
          <trans-unit id="145" xml:space="preserve">
            <source>All ServiceFabric communication APIs are currently only available in C# so if have a service that is written in some other programming language such as Java or Node.JS then you will have to write your own communication mechanism.</source>
            <target state="new">All ServiceFabric communication APIs are currently only available in C# so if have a service that is written in some other programming language such as Java or Node.JS then you will have to write your own communication mechanism.</target>
          </trans-unit>
          <trans-unit id="146" xml:space="preserve">
            <source>Next Steps</source>
            <target state="new">Next Steps</target>
          </trans-unit>
          <trans-unit id="147" xml:space="preserve">
            <source><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Default communication stack provided by Reliable Services Framework <ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></source>
            <target state="new"><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Default communication stack provided by Reliable Services Framework <ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></target>
          </trans-unit>
          <trans-unit id="148" xml:space="preserve">
            <source><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Reliable Services communication model<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></source>
            <target state="new"><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Reliable Services communication model<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></target>
          </trans-unit>
          <trans-unit id="149" xml:space="preserve">
            <source><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Getting Started with Microsoft Azure Service Fabric Web API services with OWIN self-host<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></source>
            <target state="new"><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Getting Started with Microsoft Azure Service Fabric Web API services with OWIN self-host<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></target>
          </trans-unit>
          <trans-unit id="150" xml:space="preserve">
            <source><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>WCF based communication stack for Reliable Services<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></source>
            <target state="new"><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>WCF based communication stack for Reliable Services<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept></target>
          </trans-unit>
        </group>
      </group>
    </body>
  </file>
</xliff>