<?xml version="1.0" encoding="utf-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" source-language="en-us" target-language="zh-cn" original="2/18/2016 5:20:07 PM" tool-id="MarkdownTransformer" product-name="N/A" product-version="N/A" build-num="1">
    <header>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">09da738c1956c4154bf4c1a067cd4f7f7ce8fa83</xliffext:olfilehash>
      <tool tool-id="MarkdownTransformer" tool-name="MarkdownToXliff" tool-version="1.0" tool-company="Microsoft" />
    </header>
    <body>
      <group extype="content">
        <group id="101">
          <trans-unit id="101" xml:space="preserve">
            <source>Azure Mobile Engagement iOS SDK Reach Integration</source>
            <target state="new">Azure Mobile Engagement iOS SDK Reach Integration</target>
          </trans-unit>
          <trans-unit id="102" xml:space="preserve">
            <source>Latest updates and procedures for iOS SDK for Azure Mobile Engagement</source>
            <target state="new">Latest updates and procedures for iOS SDK for Azure Mobile Engagement</target>
          </trans-unit>
          <trans-unit id="103" xml:space="preserve">
            <source>How to Integrate Engagement Reach on iOS</source>
            <target state="new">How to Integrate Engagement Reach on iOS</target>
          </trans-unit>
          <trans-unit id="104" xml:space="preserve">
            <source>You must follow the integration procedure described in the How to Integrate Engagement on iOS document before following this guide.</source>
            <target state="new">You must follow the integration procedure described in the How to Integrate Engagement on iOS document before following this guide.</target>
          </trans-unit>
          <trans-unit id="105" xml:space="preserve">
            <source>Enable your app to receive Silent Push Notifications</source>
            <target state="new">Enable your app to receive Silent Push Notifications</target>
          </trans-unit>
          <trans-unit id="106" xml:space="preserve">
            <source><ph id="1">&lt;token href="../../includes/mobile-engagement-ios-silent-push.md"/&gt;</ph></source>
            <target state="new"><ph id="1">&lt;token href="../../includes/mobile-engagement-ios-silent-push.md"/&gt;</ph></target>
          </trans-unit>
          <trans-unit id="107" xml:space="preserve">
            <source>Integration steps</source>
            <target state="new">Integration steps</target>
          </trans-unit>
          <trans-unit id="108" xml:space="preserve">
            <source>Embed the Engagement Reach SDK into your iOS project</source>
            <target state="new">Embed the Engagement Reach SDK into your iOS project</target>
          </trans-unit>
          <trans-unit id="109" xml:space="preserve">
            <source>Add the Reach sdk in your Xcode project.</source>
            <target state="new">Add the Reach sdk in your Xcode project.</target>
          </trans-unit>
          <trans-unit id="110" xml:space="preserve">
            <source>In Xcode, go to <bpt id="2">&lt;strong&gt;</bpt>Project \&gt; Add to project<ept id="2">&lt;/strong&gt;</ept> and choose the <bpt id="4">&lt;code&gt;</bpt>EngagementReach<ept id="4">&lt;/code&gt;</ept> folder.</source>
            <target state="new">In Xcode, go to <bpt id="2">&lt;strong&gt;</bpt>Project \&gt; Add to project<ept id="2">&lt;/strong&gt;</ept> and choose the <bpt id="4">&lt;code&gt;</bpt>EngagementReach<ept id="4">&lt;/code&gt;</ept> folder.</target>
          </trans-unit>
          <trans-unit id="111" xml:space="preserve">
            <source>Modify your Application Delegate</source>
            <target state="new">Modify your Application Delegate</target>
          </trans-unit>
          <trans-unit id="112" xml:space="preserve">
            <source>At the top of your implementation file, import the Engagement Reach module:</source>
            <target state="new">At the top of your implementation file, import the Engagement Reach module:</target>
          </trans-unit>
          <trans-unit id="113" xml:space="preserve">
            <source>Inside method <bpt id="2">&lt;code&gt;</bpt>applicationDidFinishLaunching:<ept id="2">&lt;/code&gt;</ept> or <bpt id="4">&lt;code&gt;</bpt>application:didFinishLaunchingWithOptions:<ept id="4">&lt;/code&gt;</ept>, create a reach module and pass it to your existing Engagement initialization line:</source>
            <target state="new">Inside method <bpt id="2">&lt;code&gt;</bpt>applicationDidFinishLaunching:<ept id="2">&lt;/code&gt;</ept> or <bpt id="4">&lt;code&gt;</bpt>application:didFinishLaunchingWithOptions:<ept id="4">&lt;/code&gt;</ept>, create a reach module and pass it to your existing Engagement initialization line:</target>
          </trans-unit>
          <trans-unit id="114" xml:space="preserve">
            <source>Modify <bpt id="2">&lt;strong&gt;</bpt>'icon.png'<ept id="2">&lt;/strong&gt;</ept> string with the image name you want as your notification icon.</source>
            <target state="new">Modify <bpt id="2">&lt;strong&gt;</bpt>'icon.png'<ept id="2">&lt;/strong&gt;</ept> string with the image name you want as your notification icon.</target>
          </trans-unit>
          <trans-unit id="115" xml:space="preserve">
            <source>If you want to use the option <bpt id="2">&lt;em&gt;</bpt>Update badge value<ept id="2">&lt;/em&gt;</ept> in Reach campaigns or if you want to use native push \<bpt id="4">&lt;html&gt;</bpt><ept id="4">&lt;/html&gt;</ept> campaigns, you must let the Reach module manage the badge icon itself (it will automatically clear the application badge and also reset the value stored by Engagement every time the application is started or foregrounded). This is done by adding the following line after Reach module initialization:</source>
            <target state="new">If you want to use the option <bpt id="2">&lt;em&gt;</bpt>Update badge value<ept id="2">&lt;/em&gt;</ept> in Reach campaigns or if you want to use native push \<bpt id="4">&lt;html&gt;</bpt><ept id="4">&lt;/html&gt;</ept> campaigns, you must let the Reach module manage the badge icon itself (it will automatically clear the application badge and also reset the value stored by Engagement every time the application is started or foregrounded). This is done by adding the following line after Reach module initialization:</target>
          </trans-unit>
          <trans-unit id="116" xml:space="preserve">
            <source>If you want to handle Reach data push, you must let your Application delegate conform to the <bpt id="2">&lt;code&gt;</bpt>AEReachDataPushDelegate<ept id="2">&lt;/code&gt;</ept> protocol.</source>
            <target state="new">If you want to handle Reach data push, you must let your Application delegate conform to the <bpt id="2">&lt;code&gt;</bpt>AEReachDataPushDelegate<ept id="2">&lt;/code&gt;</ept> protocol.</target>
          </trans-unit>
          <trans-unit id="117" xml:space="preserve">
            <source>Add the following line after Reach module initialization:</source>
            <target state="new">Add the following line after Reach module initialization:</target>
          </trans-unit>
          <trans-unit id="118" xml:space="preserve">
            <source>Then you can implement the methods <bpt id="2">&lt;code&gt;</bpt>onDataPushStringReceived:<ept id="2">&lt;/code&gt;</ept> and <bpt id="4">&lt;code&gt;</bpt>onDataPushBase64ReceivedWithDecodedBody:andEncodedBody:<ept id="4">&lt;/code&gt;</ept> in your application delegate:</source>
            <target state="new">Then you can implement the methods <bpt id="2">&lt;code&gt;</bpt>onDataPushStringReceived:<ept id="2">&lt;/code&gt;</ept> and <bpt id="4">&lt;code&gt;</bpt>onDataPushBase64ReceivedWithDecodedBody:andEncodedBody:<ept id="4">&lt;/code&gt;</ept> in your application delegate:</target>
          </trans-unit>
          <trans-unit id="119" xml:space="preserve">
            <source>Category</source>
            <target state="new">Category</target>
          </trans-unit>
          <trans-unit id="120" xml:space="preserve">
            <source>The category parameter is optional when you create a Data Push campaign and allows you to filter data pushes.</source>
            <target state="new">The category parameter is optional when you create a Data Push campaign and allows you to filter data pushes.</target>
          </trans-unit>
          <trans-unit id="121" xml:space="preserve">
            <source>This is useful if you want to push different kinds of <bpt id="2">&lt;code&gt;</bpt>Base64<ept id="2">&lt;/code&gt;</ept> data and want to identify their type before parsing them.</source>
            <target state="new">This is useful if you want to push different kinds of <bpt id="2">&lt;code&gt;</bpt>Base64<ept id="2">&lt;/code&gt;</ept> data and want to identify their type before parsing them.</target>
          </trans-unit>
          <trans-unit id="122" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Your application is now ready to receive and display reach contents!<ept id="1">&lt;/strong&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Your application is now ready to receive and display reach contents!<ept id="1">&lt;/strong&gt;</ept></target>
          </trans-unit>
          <trans-unit id="123" xml:space="preserve">
            <source>How to receive announcements and polls at any time</source>
            <target state="new">How to receive announcements and polls at any time</target>
          </trans-unit>
          <trans-unit id="124" xml:space="preserve">
            <source>Engagement can send Reach notifications to your end users at any time by using the Apple Push Notification Service.</source>
            <target state="new">Engagement can send Reach notifications to your end users at any time by using the Apple Push Notification Service.</target>
          </trans-unit>
          <trans-unit id="125" xml:space="preserve">
            <source>To enable this functionality, you'll have to prepare your application for Apple push notifications and modify your application delegate.</source>
            <target state="new">To enable this functionality, you'll have to prepare your application for Apple push notifications and modify your application delegate.</target>
          </trans-unit>
          <trans-unit id="126" xml:space="preserve">
            <source>Prepare your application for Apple push notifications</source>
            <target state="new">Prepare your application for Apple push notifications</target>
          </trans-unit>
          <trans-unit id="127" xml:space="preserve">
            <source>Please follow the guide : How to Prepare your Application for Apple Push Notifications.</source>
            <target state="new">Please follow the guide : How to Prepare your Application for Apple Push Notifications.</target>
          </trans-unit>
          <trans-unit id="128" xml:space="preserve">
            <source>Add the necessary client code</source>
            <target state="new">Add the necessary client code</target>
          </trans-unit>
          <trans-unit id="129" xml:space="preserve">
            <source><bpt id="1">&lt;em&gt;</bpt>At this point your application should have a registered Apple push certificate in the Engagement frontend.<ept id="1">&lt;/em&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;em&gt;</bpt>At this point your application should have a registered Apple push certificate in the Engagement frontend.<ept id="1">&lt;/em&gt;</ept></target>
          </trans-unit>
          <trans-unit id="130" xml:space="preserve">
            <source>If it's not done already, you need to register your application to receive push notifications.</source>
            <target state="new">If it's not done already, you need to register your application to receive push notifications.</target>
          </trans-unit>
          <trans-unit id="131" xml:space="preserve">
            <source>Add the following line when your application starts (typically in <bpt id="2">&lt;code&gt;</bpt>application:didFinishLaunchingWithOptions:<ept id="2">&lt;/code&gt;</ept>):</source>
            <target state="new">Add the following line when your application starts (typically in <bpt id="2">&lt;code&gt;</bpt>application:didFinishLaunchingWithOptions:<ept id="2">&lt;/code&gt;</ept>):</target>
          </trans-unit>
          <trans-unit id="132" xml:space="preserve">
            <source>Then, You need to provide to Engagement the device token returned by Apple servers.</source>
            <target state="new">Then, You need to provide to Engagement the device token returned by Apple servers.</target>
          </trans-unit>
          <trans-unit id="133" xml:space="preserve">
            <source>This is done in the method named <bpt id="2">&lt;code&gt;</bpt>application:didRegisterForRemoteNotificationsWithDeviceToken:<ept id="2">&lt;/code&gt;</ept> in your application delegate:</source>
            <target state="new">This is done in the method named <bpt id="2">&lt;code&gt;</bpt>application:didRegisterForRemoteNotificationsWithDeviceToken:<ept id="2">&lt;/code&gt;</ept> in your application delegate:</target>
          </trans-unit>
          <trans-unit id="134" xml:space="preserve">
            <source>Finally, you have to inform the Engagement SDK when your application receives a remote notification.</source>
            <target state="new">Finally, you have to inform the Engagement SDK when your application receives a remote notification.</target>
          </trans-unit>
          <trans-unit id="135" xml:space="preserve">
            <source>To do that, call the method <bpt id="2">&lt;code&gt;</bpt>applicationDidReceiveRemoteNotification:fetchCompletionHandler:<ept id="2">&lt;/code&gt;</ept> in your application delegate:</source>
            <target state="new">To do that, call the method <bpt id="2">&lt;code&gt;</bpt>applicationDidReceiveRemoteNotification:fetchCompletionHandler:<ept id="2">&lt;/code&gt;</ept> in your application delegate:</target>
          </trans-unit>
          <trans-unit id="136" xml:space="preserve">
            <source>The method above is introduced in iOS 7. If you are targeting iOS &lt;7, make sure to implement method <bpt id="2">&lt;code&gt;</bpt>application:didReceiveRemoteNotification:<ept id="2">&lt;/code&gt;</ept> in your application delegate and call <bpt id="4">&lt;code&gt;</bpt>applicationDidReceiveRemoteNotification<ept id="4">&lt;/code&gt;</ept> on the EngagementAgent by passing nil instead of the <bpt id="6">&lt;code&gt;</bpt>handler<ept id="6">&lt;/code&gt;</ept> argument:</source>
            <target state="new">The method above is introduced in iOS 7. If you are targeting iOS &lt;7, make sure to implement method <bpt id="2">&lt;code&gt;</bpt>application:didReceiveRemoteNotification:<ept id="2">&lt;/code&gt;</ept> in your application delegate and call <bpt id="4">&lt;code&gt;</bpt>applicationDidReceiveRemoteNotification<ept id="4">&lt;/code&gt;</ept> on the EngagementAgent by passing nil instead of the <bpt id="6">&lt;code&gt;</bpt>handler<ept id="6">&lt;/code&gt;</ept> argument:</target>
          </trans-unit>
          <trans-unit id="137" xml:space="preserve">
            <source>By default, Engagement Reach controls the completionHandler.</source>
            <target state="new">By default, Engagement Reach controls the completionHandler.</target>
          </trans-unit>
          <trans-unit id="138" xml:space="preserve">
            <source>If you want to manually respond to the <bpt id="2">&lt;code&gt;</bpt>handler<ept id="2">&lt;/code&gt;</ept> block in your code, you can pass nil for the <bpt id="4">&lt;code&gt;</bpt>handler<ept id="4">&lt;/code&gt;</ept> argument and control the completion block yourself.</source>
            <target state="new">If you want to manually respond to the <bpt id="2">&lt;code&gt;</bpt>handler<ept id="2">&lt;/code&gt;</ept> block in your code, you can pass nil for the <bpt id="4">&lt;code&gt;</bpt>handler<ept id="4">&lt;/code&gt;</ept> argument and control the completion block yourself.</target>
          </trans-unit>
          <trans-unit id="139" xml:space="preserve">
            <source>See the <bpt id="2">&lt;code&gt;</bpt>UIBackgroundFetchResult<ept id="2">&lt;/code&gt;</ept> type for a list of possible values.</source>
            <target state="new">See the <bpt id="2">&lt;code&gt;</bpt>UIBackgroundFetchResult<ept id="2">&lt;/code&gt;</ept> type for a list of possible values.</target>
          </trans-unit>
          <trans-unit id="140" xml:space="preserve">
            <source>Full example</source>
            <target state="new">Full example</target>
          </trans-unit>
          <trans-unit id="141" xml:space="preserve">
            <source>Here is a full example of integration:</source>
            <target state="new">Here is a full example of integration:</target>
          </trans-unit>
          <trans-unit id="142" xml:space="preserve">
            <source>How to customize campaigns</source>
            <target state="new">How to customize campaigns</target>
          </trans-unit>
          <trans-unit id="143" xml:space="preserve">
            <source>Notifications</source>
            <target state="new">Notifications</target>
          </trans-unit>
          <trans-unit id="144" xml:space="preserve">
            <source>There are two types of notifications: system and in-app notifications.</source>
            <target state="new">There are two types of notifications: system and in-app notifications.</target>
          </trans-unit>
          <trans-unit id="145" xml:space="preserve">
            <source>System notifications are handled by iOS, and cannot be customized.</source>
            <target state="new">System notifications are handled by iOS, and cannot be customized.</target>
          </trans-unit>
          <trans-unit id="146" xml:space="preserve">
            <source>In-app notifications are made of a view that is dynamically added to the current application window.</source>
            <target state="new">In-app notifications are made of a view that is dynamically added to the current application window.</target>
          </trans-unit>
          <trans-unit id="147" xml:space="preserve">
            <source>This is called a notification overlay.</source>
            <target state="new">This is called a notification overlay.</target>
          </trans-unit>
          <trans-unit id="148" xml:space="preserve">
            <source>Notification overlays are great for a fast integration because they does not require you to modify any view in your application.</source>
            <target state="new">Notification overlays are great for a fast integration because they does not require you to modify any view in your application.</target>
          </trans-unit>
          <trans-unit id="149" xml:space="preserve">
            <source>Layout</source>
            <target state="new">Layout</target>
          </trans-unit>
          <trans-unit id="150" xml:space="preserve">
            <source>To modify the look of your in-app notifications, you can simply modify the file <bpt id="2">&lt;code&gt;</bpt>AENotificationView.xib<ept id="2">&lt;/code&gt;</ept> to your needs, as long as you keep the tag values and types of the existing subviews.</source>
            <target state="new">To modify the look of your in-app notifications, you can simply modify the file <bpt id="2">&lt;code&gt;</bpt>AENotificationView.xib<ept id="2">&lt;/code&gt;</ept> to your needs, as long as you keep the tag values and types of the existing subviews.</target>
          </trans-unit>
          <trans-unit id="151" xml:space="preserve">
            <source>By default, in-app notifications are presented at the bottom of the screen.</source>
            <target state="new">By default, in-app notifications are presented at the bottom of the screen.</target>
          </trans-unit>
          <trans-unit id="152" xml:space="preserve">
            <source>If you prefer to display them at the top of screen, edit the provided <bpt id="2">&lt;code&gt;</bpt>AENotificationView.xib<ept id="2">&lt;/code&gt;</ept> and change the <bpt id="4">&lt;code&gt;</bpt>AutoSizing<ept id="4">&lt;/code&gt;</ept> property of the main view so it can be kept at the top of its superview.</source>
            <target state="new">If you prefer to display them at the top of screen, edit the provided <bpt id="2">&lt;code&gt;</bpt>AENotificationView.xib<ept id="2">&lt;/code&gt;</ept> and change the <bpt id="4">&lt;code&gt;</bpt>AutoSizing<ept id="4">&lt;/code&gt;</ept> property of the main view so it can be kept at the top of its superview.</target>
          </trans-unit>
          <trans-unit id="153" xml:space="preserve">
            <source>Categories</source>
            <target state="new">Categories</target>
          </trans-unit>
          <trans-unit id="154" xml:space="preserve">
            <source>When you modify the provided layout, you modify the look of all your notifications.</source>
            <target state="new">When you modify the provided layout, you modify the look of all your notifications.</target>
          </trans-unit>
          <trans-unit id="155" xml:space="preserve">
            <source>Categories allow you to define various targeted looks (possibly behaviors) for notifications.</source>
            <target state="new">Categories allow you to define various targeted looks (possibly behaviors) for notifications.</target>
          </trans-unit>
          <trans-unit id="156" xml:space="preserve">
            <source>A category can be specified when you create a Reach campaign.</source>
            <target state="new">A category can be specified when you create a Reach campaign.</target>
          </trans-unit>
          <trans-unit id="157" xml:space="preserve">
            <source>Keep in mind that categories also let you customize announcements and polls, that is described later in this document.</source>
            <target state="new">Keep in mind that categories also let you customize announcements and polls, that is described later in this document.</target>
          </trans-unit>
          <trans-unit id="158" xml:space="preserve">
            <source>To register a category handler for your notifications, you need to add a call once the reach module is initialized.</source>
            <target state="new">To register a category handler for your notifications, you need to add a call once the reach module is initialized.</target>
          </trans-unit>
          <trans-unit id="159" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>myNotifier<ept id="1">&lt;/code&gt;</ept> must be an instance of an object that conforms to the protocol <bpt id="3">&lt;code&gt;</bpt>AENotifier<ept id="3">&lt;/code&gt;</ept>.</source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>myNotifier<ept id="1">&lt;/code&gt;</ept> must be an instance of an object that conforms to the protocol <bpt id="3">&lt;code&gt;</bpt>AENotifier<ept id="3">&lt;/code&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="160" xml:space="preserve">
            <source>You can implement the protocol methods by yourself or you can choose to reimplement the existing class <bpt id="2">&lt;code&gt;</bpt>AEDefaultNotifier<ept id="2">&lt;/code&gt;</ept> which already performs most of the work.</source>
            <target state="new">You can implement the protocol methods by yourself or you can choose to reimplement the existing class <bpt id="2">&lt;code&gt;</bpt>AEDefaultNotifier<ept id="2">&lt;/code&gt;</ept> which already performs most of the work.</target>
          </trans-unit>
          <trans-unit id="161" xml:space="preserve">
            <source>For example, if you want to redefine the notification view for a specific category, you can follow this example:</source>
            <target state="new">For example, if you want to redefine the notification view for a specific category, you can follow this example:</target>
          </trans-unit>
          <trans-unit id="162" xml:space="preserve">
            <source>This simple example of category assume that you have a file named <bpt id="2">&lt;code&gt;</bpt>MyNotificationView.xib<ept id="2">&lt;/code&gt;</ept> in your main application bundle.</source>
            <target state="new">This simple example of category assume that you have a file named <bpt id="2">&lt;code&gt;</bpt>MyNotificationView.xib<ept id="2">&lt;/code&gt;</ept> in your main application bundle.</target>
          </trans-unit>
          <trans-unit id="163" xml:space="preserve">
            <source>If the method is not able to find a corresponding <bpt id="2">&lt;code&gt;</bpt>.xib<ept id="2">&lt;/code&gt;</ept>, the notification will not be displayed and Engagement will output a message in the console.</source>
            <target state="new">If the method is not able to find a corresponding <bpt id="2">&lt;code&gt;</bpt>.xib<ept id="2">&lt;/code&gt;</ept>, the notification will not be displayed and Engagement will output a message in the console.</target>
          </trans-unit>
          <trans-unit id="164" xml:space="preserve">
            <source>The provided nib file should respect the following rules:</source>
            <target state="new">The provided nib file should respect the following rules:</target>
          </trans-unit>
          <trans-unit id="165" xml:space="preserve">
            <source>It should only contain one view.</source>
            <target state="new">It should only contain one view.</target>
          </trans-unit>
          <trans-unit id="166" xml:space="preserve">
            <source>Subviews should be of the same types as the ones inside the provided nib file named <bpt id="2">&lt;code&gt;</bpt>AENotificationView.xib<ept id="2">&lt;/code&gt;</ept></source>
            <target state="new">Subviews should be of the same types as the ones inside the provided nib file named <bpt id="2">&lt;code&gt;</bpt>AENotificationView.xib<ept id="2">&lt;/code&gt;</ept></target>
          </trans-unit>
          <trans-unit id="167" xml:space="preserve">
            <source>Subviews should have the same tags as the ones inside the provided nib file named <bpt id="2">&lt;code&gt;</bpt>AENotificationView.xib<ept id="2">&lt;/code&gt;</ept></source>
            <target state="new">Subviews should have the same tags as the ones inside the provided nib file named <bpt id="2">&lt;code&gt;</bpt>AENotificationView.xib<ept id="2">&lt;/code&gt;</ept></target>
          </trans-unit>
          <trans-unit id="168" xml:space="preserve">
            <source>Just copy the provided nib file, named <bpt id="2">&lt;code&gt;</bpt>AENotificationView.xib<ept id="2">&lt;/code&gt;</ept>, and start working from there.</source>
            <target state="new">Just copy the provided nib file, named <bpt id="2">&lt;code&gt;</bpt>AENotificationView.xib<ept id="2">&lt;/code&gt;</ept>, and start working from there.</target>
          </trans-unit>
          <trans-unit id="169" xml:space="preserve">
            <source>But be careful, the view inside this nib file is associated to the class <bpt id="2">&lt;code&gt;</bpt>AENotificationView<ept id="2">&lt;/code&gt;</ept>.</source>
            <target state="new">But be careful, the view inside this nib file is associated to the class <bpt id="2">&lt;code&gt;</bpt>AENotificationView<ept id="2">&lt;/code&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="170" xml:space="preserve">
            <source>This class redefined the method <bpt id="2">&lt;code&gt;</bpt>layoutSubViews<ept id="2">&lt;/code&gt;</ept> to move and resize its subviews according to context.</source>
            <target state="new">This class redefined the method <bpt id="2">&lt;code&gt;</bpt>layoutSubViews<ept id="2">&lt;/code&gt;</ept> to move and resize its subviews according to context.</target>
          </trans-unit>
          <trans-unit id="171" xml:space="preserve">
            <source>You may want to replace it with an <bpt id="2">&lt;code&gt;</bpt>UIView<ept id="2">&lt;/code&gt;</ept> or you custom view class.</source>
            <target state="new">You may want to replace it with an <bpt id="2">&lt;code&gt;</bpt>UIView<ept id="2">&lt;/code&gt;</ept> or you custom view class.</target>
          </trans-unit>
          <trans-unit id="172" xml:space="preserve">
            <source>If you need deeper customization of your notifications(if you want for instance to load your view directly from the code), it is recommended to take a look at the provided source code and class documentation of <bpt id="2">&lt;code&gt;</bpt>Protocol ReferencesDefaultNotifier<ept id="2">&lt;/code&gt;</ept> and <bpt id="4">&lt;code&gt;</bpt>AENotifier<ept id="4">&lt;/code&gt;</ept>.</source>
            <target state="new">If you need deeper customization of your notifications(if you want for instance to load your view directly from the code), it is recommended to take a look at the provided source code and class documentation of <bpt id="2">&lt;code&gt;</bpt>Protocol ReferencesDefaultNotifier<ept id="2">&lt;/code&gt;</ept> and <bpt id="4">&lt;code&gt;</bpt>AENotifier<ept id="4">&lt;/code&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="173" xml:space="preserve">
            <source>Note that you can use the same notifier for multiple categories.</source>
            <target state="new">Note that you can use the same notifier for multiple categories.</target>
          </trans-unit>
          <trans-unit id="174" xml:space="preserve">
            <source>You can also redefined the default notifier like this:</source>
            <target state="new">You can also redefined the default notifier like this:</target>
          </trans-unit>
          <trans-unit id="175" xml:space="preserve">
            <source>Notification handling</source>
            <target state="new">Notification handling</target>
          </trans-unit>
          <trans-unit id="176" xml:space="preserve">
            <source>When using the default category, some life cycle methods are called on the <bpt id="2">&lt;code&gt;</bpt>AEReachContent<ept id="2">&lt;/code&gt;</ept> object to report statistics and update the campaign state:</source>
            <target state="new">When using the default category, some life cycle methods are called on the <bpt id="2">&lt;code&gt;</bpt>AEReachContent<ept id="2">&lt;/code&gt;</ept> object to report statistics and update the campaign state:</target>
          </trans-unit>
          <trans-unit id="177" xml:space="preserve">
            <source>When the notification is displayed in application, the <bpt id="2">&lt;code&gt;</bpt>displayNotification<ept id="2">&lt;/code&gt;</ept> method is called (which reports statistics) by <bpt id="4">&lt;code&gt;</bpt>AEReachModule<ept id="4">&lt;/code&gt;</ept> if <bpt id="6">&lt;code&gt;</bpt>handleNotification:<ept id="6">&lt;/code&gt;</ept> returns <bpt id="8">&lt;code&gt;</bpt>YES<ept id="8">&lt;/code&gt;</ept>.</source>
            <target state="new">When the notification is displayed in application, the <bpt id="2">&lt;code&gt;</bpt>displayNotification<ept id="2">&lt;/code&gt;</ept> method is called (which reports statistics) by <bpt id="4">&lt;code&gt;</bpt>AEReachModule<ept id="4">&lt;/code&gt;</ept> if <bpt id="6">&lt;code&gt;</bpt>handleNotification:<ept id="6">&lt;/code&gt;</ept> returns <bpt id="8">&lt;code&gt;</bpt>YES<ept id="8">&lt;/code&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="178" xml:space="preserve">
            <source>If the notification is dismissed, the <bpt id="2">&lt;code&gt;</bpt>exitNotification<ept id="2">&lt;/code&gt;</ept> method is called, statistic is reported and next campaigns can now be processed.</source>
            <target state="new">If the notification is dismissed, the <bpt id="2">&lt;code&gt;</bpt>exitNotification<ept id="2">&lt;/code&gt;</ept> method is called, statistic is reported and next campaigns can now be processed.</target>
          </trans-unit>
          <trans-unit id="179" xml:space="preserve">
            <source>If the notification is clicked, <bpt id="2">&lt;code&gt;</bpt>actionNotification<ept id="2">&lt;/code&gt;</ept> is called, statistic is reported and the associated action is performed.</source>
            <target state="new">If the notification is clicked, <bpt id="2">&lt;code&gt;</bpt>actionNotification<ept id="2">&lt;/code&gt;</ept> is called, statistic is reported and the associated action is performed.</target>
          </trans-unit>
          <trans-unit id="180" xml:space="preserve">
            <source>If your implementation of <bpt id="2">&lt;code&gt;</bpt>AENotifier<ept id="2">&lt;/code&gt;</ept> bypasses the default behavior, you have to call these life cycle methods by yourself.</source>
            <target state="new">If your implementation of <bpt id="2">&lt;code&gt;</bpt>AENotifier<ept id="2">&lt;/code&gt;</ept> bypasses the default behavior, you have to call these life cycle methods by yourself.</target>
          </trans-unit>
          <trans-unit id="181" xml:space="preserve">
            <source>The following examples illustrate some cases where the default behavior is bypassed:</source>
            <target state="new">The following examples illustrate some cases where the default behavior is bypassed:</target>
          </trans-unit>
          <trans-unit id="182" xml:space="preserve">
            <source>You don't extend <bpt id="2">&lt;code&gt;</bpt>AEDefaultNotifier<ept id="2">&lt;/code&gt;</ept>, e.g. you implemented category handling from scratch.</source>
            <target state="new">You don't extend <bpt id="2">&lt;code&gt;</bpt>AEDefaultNotifier<ept id="2">&lt;/code&gt;</ept>, e.g. you implemented category handling from scratch.</target>
          </trans-unit>
          <trans-unit id="183" xml:space="preserve">
            <source>You overrode <bpt id="2">&lt;code&gt;</bpt>prepareNotificationView:forContent:<ept id="2">&lt;/code&gt;</ept>, be sure to map at least <bpt id="4">&lt;code&gt;</bpt>onNotificationActioned<ept id="4">&lt;/code&gt;</ept> or <bpt id="6">&lt;code&gt;</bpt>onNotificationExited<ept id="6">&lt;/code&gt;</ept> to one of your U.I controls.</source>
            <target state="new">You overrode <bpt id="2">&lt;code&gt;</bpt>prepareNotificationView:forContent:<ept id="2">&lt;/code&gt;</ept>, be sure to map at least <bpt id="4">&lt;code&gt;</bpt>onNotificationActioned<ept id="4">&lt;/code&gt;</ept> or <bpt id="6">&lt;code&gt;</bpt>onNotificationExited<ept id="6">&lt;/code&gt;</ept> to one of your U.I controls.</target>
          </trans-unit>
          <trans-unit id="184" xml:space="preserve">
            <source>If <bpt id="2">&lt;code&gt;</bpt>handleNotification:<ept id="2">&lt;/code&gt;</ept> throws an exception, the content is deleted and <bpt id="4">&lt;code&gt;</bpt>drop<ept id="4">&lt;/code&gt;</ept> is called, this is reported in statistics and next campaigns can now be processed.</source>
            <target state="new">If <bpt id="2">&lt;code&gt;</bpt>handleNotification:<ept id="2">&lt;/code&gt;</ept> throws an exception, the content is deleted and <bpt id="4">&lt;code&gt;</bpt>drop<ept id="4">&lt;/code&gt;</ept> is called, this is reported in statistics and next campaigns can now be processed.</target>
          </trans-unit>
          <trans-unit id="185" xml:space="preserve">
            <source>Include notification as part of an existing view</source>
            <target state="new">Include notification as part of an existing view</target>
          </trans-unit>
          <trans-unit id="186" xml:space="preserve">
            <source>Overlays are great for a fast integration but can be sometimes not convenient, or can have unwanted side effects.</source>
            <target state="new">Overlays are great for a fast integration but can be sometimes not convenient, or can have unwanted side effects.</target>
          </trans-unit>
          <trans-unit id="187" xml:space="preserve">
            <source>If you're not satisfied with the overlay system in some of your views, you can customize it for these views.</source>
            <target state="new">If you're not satisfied with the overlay system in some of your views, you can customize it for these views.</target>
          </trans-unit>
          <trans-unit id="188" xml:space="preserve">
            <source>You can decide to include our notification layout in your existing views.</source>
            <target state="new">You can decide to include our notification layout in your existing views.</target>
          </trans-unit>
          <trans-unit id="189" xml:space="preserve">
            <source>To do so, there is two implementation styles:</source>
            <target state="new">To do so, there is two implementation styles:</target>
          </trans-unit>
          <trans-unit id="190" xml:space="preserve">
            <source>Add the notification view using interface builder</source>
            <target state="new">Add the notification view using interface builder</target>
          </trans-unit>
          <trans-unit id="191" xml:space="preserve">
            <source>Open <bpt id="2">&lt;em&gt;</bpt>Interface Builder<ept id="2">&lt;/em&gt;</ept></source>
            <target state="new">Open <bpt id="2">&lt;em&gt;</bpt>Interface Builder<ept id="2">&lt;/em&gt;</ept></target>
          </trans-unit>
          <trans-unit id="192" xml:space="preserve">
            <source>Place a 320x60 (or 768x60 if you are on iPad) <bpt id="2">&lt;code&gt;</bpt>UIView<ept id="2">&lt;/code&gt;</ept> where you want the notification to appear</source>
            <target state="new">Place a 320x60 (or 768x60 if you are on iPad) <bpt id="2">&lt;code&gt;</bpt>UIView<ept id="2">&lt;/code&gt;</ept> where you want the notification to appear</target>
          </trans-unit>
          <trans-unit id="193" xml:space="preserve">
            <source>Set the Tag value for this view to : <bpt id="2">&lt;strong&gt;</bpt>36822491<ept id="2">&lt;/strong&gt;</ept></source>
            <target state="new">Set the Tag value for this view to : <bpt id="2">&lt;strong&gt;</bpt>36822491<ept id="2">&lt;/strong&gt;</ept></target>
          </trans-unit>
          <trans-unit id="194" xml:space="preserve">
            <source>Add the notification view programmatically.</source>
            <target state="new">Add the notification view programmatically.</target>
          </trans-unit>
          <trans-unit id="195" xml:space="preserve">
            <source>Just add the following code when your view has been initialized:</source>
            <target state="new">Just add the following code when your view has been initialized:</target>
          </trans-unit>
          <trans-unit id="196" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>NOTIFICATION_AREA_VIEW_TAG<ept id="1">&lt;/code&gt;</ept> macro can be found in <bpt id="3">&lt;code&gt;</bpt>AEDefaultNotifier.h<ept id="3">&lt;/code&gt;</ept>.</source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>NOTIFICATION_AREA_VIEW_TAG<ept id="1">&lt;/code&gt;</ept> macro can be found in <bpt id="3">&lt;code&gt;</bpt>AEDefaultNotifier.h<ept id="3">&lt;/code&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="197" xml:space="preserve">
            <source>The default notifier automatically detects that the notification layout is included in this view and will not add an overlay for it.</source>
            <target state="new">The default notifier automatically detects that the notification layout is included in this view and will not add an overlay for it.</target>
          </trans-unit>
          <trans-unit id="198" xml:space="preserve">
            <source>Announcements and polls</source>
            <target state="new">Announcements and polls</target>
          </trans-unit>
          <trans-unit id="199" xml:space="preserve">
            <source>Layouts</source>
            <target state="new">Layouts</target>
          </trans-unit>
          <trans-unit id="200" xml:space="preserve">
            <source>You can modify the files <bpt id="2">&lt;code&gt;</bpt>AEDefaultAnnouncementView.xib<ept id="2">&lt;/code&gt;</ept> and <bpt id="4">&lt;code&gt;</bpt>AEDefaultPollView.xib<ept id="4">&lt;/code&gt;</ept> as long as you keep the tag values and types of the existing subviews.</source>
            <target state="new">You can modify the files <bpt id="2">&lt;code&gt;</bpt>AEDefaultAnnouncementView.xib<ept id="2">&lt;/code&gt;</ept> and <bpt id="4">&lt;code&gt;</bpt>AEDefaultPollView.xib<ept id="4">&lt;/code&gt;</ept> as long as you keep the tag values and types of the existing subviews.</target>
          </trans-unit>
          <trans-unit id="201" xml:space="preserve">
            <source>Categories</source>
            <target state="new">Categories</target>
          </trans-unit>
          <trans-unit id="202" xml:space="preserve">
            <source>Alternate layouts</source>
            <target state="new">Alternate layouts</target>
          </trans-unit>
          <trans-unit id="203" xml:space="preserve">
            <source>Like notifications, the campaign's category can be used to have alternate layouts for your announcements and polls.</source>
            <target state="new">Like notifications, the campaign's category can be used to have alternate layouts for your announcements and polls.</target>
          </trans-unit>
          <trans-unit id="204" xml:space="preserve">
            <source>To create a category for an announcement, you must extend <bpt id="2">&lt;strong&gt;</bpt>AEAnnouncementViewController<ept id="2">&lt;/strong&gt;</ept> and register it once the reach module has been initialized:</source>
            <target state="new">To create a category for an announcement, you must extend <bpt id="2">&lt;strong&gt;</bpt>AEAnnouncementViewController<ept id="2">&lt;/strong&gt;</ept> and register it once the reach module has been initialized:</target>
          </trans-unit>
          <trans-unit id="205" xml:space="preserve">
            <source>Each time a user will click on a notification for an announcement with the category "my\_category", your registered view controller (in that case <bpt id="2">&lt;code&gt;</bpt>MyCustomAnnouncementViewController<ept id="2">&lt;/code&gt;</ept>) will be initialized by calling the method <bpt id="4">&lt;code&gt;</bpt>initWithAnnouncement:<ept id="4">&lt;/code&gt;</ept> and the view will be added to the current application window.</source>
            <target state="new">Each time a user will click on a notification for an announcement with the category "my\_category", your registered view controller (in that case <bpt id="2">&lt;code&gt;</bpt>MyCustomAnnouncementViewController<ept id="2">&lt;/code&gt;</ept>) will be initialized by calling the method <bpt id="4">&lt;code&gt;</bpt>initWithAnnouncement:<ept id="4">&lt;/code&gt;</ept> and the view will be added to the current application window.</target>
          </trans-unit>
          <trans-unit id="206" xml:space="preserve">
            <source>In your implementation of the <bpt id="2">&lt;code&gt;</bpt>AEAnnouncementViewController<ept id="2">&lt;/code&gt;</ept> class you will have to read the property <bpt id="4">&lt;code&gt;</bpt>announcement<ept id="4">&lt;/code&gt;</ept> to initialize your subviews.</source>
            <target state="new">In your implementation of the <bpt id="2">&lt;code&gt;</bpt>AEAnnouncementViewController<ept id="2">&lt;/code&gt;</ept> class you will have to read the property <bpt id="4">&lt;code&gt;</bpt>announcement<ept id="4">&lt;/code&gt;</ept> to initialize your subviews.</target>
          </trans-unit>
          <trans-unit id="207" xml:space="preserve">
            <source>Consider the example below, where two labels are initialized using <bpt id="2">&lt;code&gt;</bpt>title<ept id="2">&lt;/code&gt;</ept> and <bpt id="4">&lt;code&gt;</bpt>body<ept id="4">&lt;/code&gt;</ept> properties of the <bpt id="6">&lt;code&gt;</bpt>AEReachAnnouncement<ept id="6">&lt;/code&gt;</ept> class:</source>
            <target state="new">Consider the example below, where two labels are initialized using <bpt id="2">&lt;code&gt;</bpt>title<ept id="2">&lt;/code&gt;</ept> and <bpt id="4">&lt;code&gt;</bpt>body<ept id="4">&lt;/code&gt;</ept> properties of the <bpt id="6">&lt;code&gt;</bpt>AEReachAnnouncement<ept id="6">&lt;/code&gt;</ept> class:</target>
          </trans-unit>
          <trans-unit id="208" xml:space="preserve">
            <source>If you don't want to load your views by yourself but you just want to reuse the default announcement view layout, you can simply make your custom view controller extends the provided class <bpt id="2">&lt;code&gt;</bpt>AEDefaultAnnouncementViewController<ept id="2">&lt;/code&gt;</ept>.</source>
            <target state="new">If you don't want to load your views by yourself but you just want to reuse the default announcement view layout, you can simply make your custom view controller extends the provided class <bpt id="2">&lt;code&gt;</bpt>AEDefaultAnnouncementViewController<ept id="2">&lt;/code&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="209" xml:space="preserve">
            <source>In that case, duplicate the nib file <bpt id="2">&lt;code&gt;</bpt>AEDefaultAnnouncementView.xib<ept id="2">&lt;/code&gt;</ept> and rename it so it can be loaded by your custom view controller (for a controller named <bpt id="4">&lt;code&gt;</bpt>CustomAnnouncementViewController<ept id="4">&lt;/code&gt;</ept>, you should call your nib file <bpt id="6">&lt;code&gt;</bpt>CustomAnnouncementView.xib<ept id="6">&lt;/code&gt;</ept>).</source>
            <target state="new">In that case, duplicate the nib file <bpt id="2">&lt;code&gt;</bpt>AEDefaultAnnouncementView.xib<ept id="2">&lt;/code&gt;</ept> and rename it so it can be loaded by your custom view controller (for a controller named <bpt id="4">&lt;code&gt;</bpt>CustomAnnouncementViewController<ept id="4">&lt;/code&gt;</ept>, you should call your nib file <bpt id="6">&lt;code&gt;</bpt>CustomAnnouncementView.xib<ept id="6">&lt;/code&gt;</ept>).</target>
          </trans-unit>
          <trans-unit id="210" xml:space="preserve">
            <source>To replace the default category of announcements, simply register your custom view controller for the category defined in <bpt id="2">&lt;code&gt;</bpt>kAEReachDefaultCategory<ept id="2">&lt;/code&gt;</ept>:</source>
            <target state="new">To replace the default category of announcements, simply register your custom view controller for the category defined in <bpt id="2">&lt;code&gt;</bpt>kAEReachDefaultCategory<ept id="2">&lt;/code&gt;</ept>:</target>
          </trans-unit>
          <trans-unit id="211" xml:space="preserve">
            <source>Polls can be customized the same way :</source>
            <target state="new">Polls can be customized the same way :</target>
          </trans-unit>
          <trans-unit id="212" xml:space="preserve">
            <source>This time, the provided <bpt id="2">&lt;code&gt;</bpt>MyCustomPollViewController<ept id="2">&lt;/code&gt;</ept> must extend <bpt id="4">&lt;code&gt;</bpt>AEPollViewController<ept id="4">&lt;/code&gt;</ept>.</source>
            <target state="new">This time, the provided <bpt id="2">&lt;code&gt;</bpt>MyCustomPollViewController<ept id="2">&lt;/code&gt;</ept> must extend <bpt id="4">&lt;code&gt;</bpt>AEPollViewController<ept id="4">&lt;/code&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="213" xml:space="preserve">
            <source>Or you can choose to extend from the default controller: <bpt id="2">&lt;code&gt;</bpt>AEDefaultPollViewController<ept id="2">&lt;/code&gt;</ept>.</source>
            <target state="new">Or you can choose to extend from the default controller: <bpt id="2">&lt;code&gt;</bpt>AEDefaultPollViewController<ept id="2">&lt;/code&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="214" xml:space="preserve">
            <source>Don't forget to call either <bpt id="2">&lt;code&gt;</bpt>action<ept id="2">&lt;/code&gt;</ept> (<bpt id="4">&lt;code&gt;</bpt>submitAnswers:<ept id="4">&lt;/code&gt;</ept> for custom poll view controllers) or <bpt id="6">&lt;code&gt;</bpt>exit<ept id="6">&lt;/code&gt;</ept> method before the view controller is dismissed.</source>
            <target state="new">Don't forget to call either <bpt id="2">&lt;code&gt;</bpt>action<ept id="2">&lt;/code&gt;</ept> (<bpt id="4">&lt;code&gt;</bpt>submitAnswers:<ept id="4">&lt;/code&gt;</ept> for custom poll view controllers) or <bpt id="6">&lt;code&gt;</bpt>exit<ept id="6">&lt;/code&gt;</ept> method before the view controller is dismissed.</target>
          </trans-unit>
          <trans-unit id="215" xml:space="preserve">
            <source>Otherwise, statistics won't be sent (i.e. no analytics on the campaign) and more importantly next campaigns will not be notified until the application process is restarted.</source>
            <target state="new">Otherwise, statistics won't be sent (i.e. no analytics on the campaign) and more importantly next campaigns will not be notified until the application process is restarted.</target>
          </trans-unit>
          <trans-unit id="216" xml:space="preserve">
            <source>Implementation example</source>
            <target state="new">Implementation example</target>
          </trans-unit>
          <trans-unit id="217" xml:space="preserve">
            <source>In this implementation the custom announcement view is loaded from an external xib file.</source>
            <target state="new">In this implementation the custom announcement view is loaded from an external xib file.</target>
          </trans-unit>
          <trans-unit id="218" xml:space="preserve">
            <source>Like for advanced notification customization, it is recommended to look at the source code of the standard implementation.</source>
            <target state="new">Like for advanced notification customization, it is recommended to look at the source code of the standard implementation.</target>
          </trans-unit>
          <trans-unit id="219" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>CustomAnnouncementViewController.h<ept id="1">&lt;/code&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>CustomAnnouncementViewController.h<ept id="1">&lt;/code&gt;</ept></target>
          </trans-unit>
          <trans-unit id="220" xml:space="preserve">
            <source><bpt id="1">&lt;code&gt;</bpt>CustomAnnouncementViewController.m<ept id="1">&lt;/code&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;code&gt;</bpt>CustomAnnouncementViewController.m<ept id="1">&lt;/code&gt;</ept></target>
          </trans-unit>
        </group>
      </group>
    </body>
  </file>
</xliff>