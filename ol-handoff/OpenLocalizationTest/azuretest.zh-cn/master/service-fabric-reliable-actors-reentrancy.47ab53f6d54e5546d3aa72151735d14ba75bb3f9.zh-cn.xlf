<?xml version="1.0" encoding="utf-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" source-language="en-us" target-language="zh-cn" original="2/19/2016 5:17:57 PM" tool-id="MarkdownTransformer" product-name="N/A" product-version="N/A" build-num="1">
    <header>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0509b364958ce68d21e732c88c5f345d62dc970a</xliffext:olfilehash>
      <tool tool-id="MarkdownTransformer" tool-name="MarkdownToXliff" tool-version="1.0" tool-company="Microsoft" />
    </header>
    <body>
      <group extype="content">
        <group id="101">
          <trans-unit id="101" xml:space="preserve">
            <source>Reliable Actors Reentrancy</source>
            <target state="new">Reliable Actors Reentrancy</target>
          </trans-unit>
          <trans-unit id="102" xml:space="preserve">
            <source>Introduction to Reentrancy for Service Fabric Reliable Actors</source>
            <target state="new">Introduction to Reentrancy for Service Fabric Reliable Actors</target>
          </trans-unit>
          <trans-unit id="103" xml:space="preserve">
            <source>Reliable Actor Reentrancy</source>
            <target state="new">Reliable Actor Reentrancy</target>
          </trans-unit>
          <trans-unit id="104" xml:space="preserve">
            <source>Fabric Actors, by default, allow logical call context-based reentrancy.</source>
            <target state="new">Fabric Actors, by default, allow logical call context-based reentrancy.</target>
          </trans-unit>
          <trans-unit id="105" xml:space="preserve">
            <source>This allows for actors to be reentrant if they are in the same call context chain.</source>
            <target state="new">This allows for actors to be reentrant if they are in the same call context chain.</target>
          </trans-unit>
          <trans-unit id="106" xml:space="preserve">
            <source>For example if Actor A sends message to Actor B who sends message to Actor C. As part of the message processing if Actor C calls Actor A, the message is reentrant so will be allowed.</source>
            <target state="new">For example if Actor A sends message to Actor B who sends message to Actor C. As part of the message processing if Actor C calls Actor A, the message is reentrant so will be allowed.</target>
          </trans-unit>
          <trans-unit id="107" xml:space="preserve">
            <source>Any other messages that are part of different call context will be blocked on Actor A until it completes processing.</source>
            <target state="new">Any other messages that are part of different call context will be blocked on Actor A until it completes processing.</target>
          </trans-unit>
          <trans-unit id="108" xml:space="preserve">
            <source>Actors that want to disallow logical call context-based reentrancy can disable it by decorating the actor class with <bpt id="2">&lt;code&gt;</bpt>ReentrantAttribute(ReentrancyMode.Disallowed)<ept id="2">&lt;/code&gt;</ept>.</source>
            <target state="new">Actors that want to disallow logical call context-based reentrancy can disable it by decorating the actor class with <bpt id="2">&lt;code&gt;</bpt>ReentrantAttribute(ReentrancyMode.Disallowed)<ept id="2">&lt;/code&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="109" xml:space="preserve">
            <source>The following code shows actor class that sets the reentrancy mode to <bpt id="2">&lt;code&gt;</bpt>ReentrancyMode.Disallowed<ept id="2">&lt;/code&gt;</ept>.</source>
            <target state="new">The following code shows actor class that sets the reentrancy mode to <bpt id="2">&lt;code&gt;</bpt>ReentrancyMode.Disallowed<ept id="2">&lt;/code&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="110" xml:space="preserve">
            <source>In this case if an actor sends a reentrant message to another actor an exception of type <bpt id="2">&lt;code&gt;</bpt>FabricException<ept id="2">&lt;/code&gt;</ept> will be thrown.</source>
            <target state="new">In this case if an actor sends a reentrant message to another actor an exception of type <bpt id="2">&lt;code&gt;</bpt>FabricException<ept id="2">&lt;/code&gt;</ept> will be thrown.</target>
          </trans-unit>
        </group>
      </group>
    </body>
  </file>
</xliff>