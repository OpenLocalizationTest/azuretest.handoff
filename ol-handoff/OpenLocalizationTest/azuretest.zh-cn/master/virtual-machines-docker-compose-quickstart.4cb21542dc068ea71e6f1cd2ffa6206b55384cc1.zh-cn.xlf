<?xml version="1.0" encoding="utf-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" source-language="en-us" target-language="zh-cn" original="2/18/2016 5:32:47 PM" tool-id="MarkdownTransformer" product-name="N/A" product-version="N/A" build-num="1">
    <header>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a678f012c3ffb51d6170086227a267532188af2c</xliffext:olfilehash>
      <tool tool-id="MarkdownTransformer" tool-name="MarkdownToXliff" tool-version="1.0" tool-company="Microsoft" />
    </header>
    <body>
      <group extype="content">
        <group id="101">
          <trans-unit id="101" xml:space="preserve">
            <source>Get Started with Docker and Compose on an Azure virtual machine</source>
            <target state="new">Get Started with Docker and Compose on an Azure virtual machine</target>
          </trans-unit>
          <trans-unit id="102" xml:space="preserve">
            <source>Quick introduction to working with Compose and Docker on Azure</source>
            <target state="new">Quick introduction to working with Compose and Docker on Azure</target>
          </trans-unit>
          <trans-unit id="103" xml:space="preserve">
            <source>Get Started with Docker and Compose on an Azure virtual machine</source>
            <target state="new">Get Started with Docker and Compose on an Azure virtual machine</target>
          </trans-unit>
          <trans-unit id="104" xml:space="preserve">
            <source>This article shows you how to get started using Docker and <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Compose<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> to define and run a complex application on a Linux virtual machine in Azure.</source>
            <target state="new">This article shows you how to get started using Docker and <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Compose<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> to define and run a complex application on a Linux virtual machine in Azure.</target>
          </trans-unit>
          <trans-unit id="105" xml:space="preserve">
            <source>With Compose (the successor to <bpt id="2">&lt;em&gt;</bpt>Fig<ept id="2">&lt;/em&gt;</ept>), you use a simple text file to define an application consisting of multiple Docker containers.</source>
            <target state="new">With Compose (the successor to <bpt id="2">&lt;em&gt;</bpt>Fig<ept id="2">&lt;/em&gt;</ept>), you use a simple text file to define an application consisting of multiple Docker containers.</target>
          </trans-unit>
          <trans-unit id="106" xml:space="preserve">
            <source>Then you spin up your application in a single command which does everything to get it running on the VM.</source>
            <target state="new">Then you spin up your application in a single command which does everything to get it running on the VM.</target>
          </trans-unit>
          <trans-unit id="107" xml:space="preserve">
            <source>As an example, this article shows you how to quickly set up a WordPress blog with a backend MariaDB SQL database, but you can also use Compose to set up more complex applications.</source>
            <target state="new">As an example, this article shows you how to quickly set up a WordPress blog with a backend MariaDB SQL database, but you can also use Compose to set up more complex applications.</target>
          </trans-unit>
          <trans-unit id="108" xml:space="preserve">
            <source>If you're new to Docker and containers, see the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Docker high level whiteboard<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">If you're new to Docker and containers, see the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Docker high level whiteboard<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="109" xml:space="preserve">
            <source>Step 1: Set up a Linux VM as a Docker host</source>
            <target state="new">Step 1: Set up a Linux VM as a Docker host</target>
          </trans-unit>
          <trans-unit id="110" xml:space="preserve">
            <source>You can use a variety of Azure procedures and available images in the Azure Markeplace to create a Linux VM and set it up as a Docker host.</source>
            <target state="new">You can use a variety of Azure procedures and available images in the Azure Markeplace to create a Linux VM and set it up as a Docker host.</target>
          </trans-unit>
          <trans-unit id="111" xml:space="preserve">
            <source>For example, see <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Using the Docker VM Extension from the Azure Command-Line Interface<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> for a quick procedure to create an Ubuntu VM with the Docker VM extension.</source>
            <target state="new">For example, see <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Using the Docker VM Extension from the Azure Command-Line Interface<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> for a quick procedure to create an Ubuntu VM with the Docker VM extension.</target>
          </trans-unit>
          <trans-unit id="112" xml:space="preserve">
            <source>When you use the Docker VM extension, your VM is automatically set up as a Docker host.</source>
            <target state="new">When you use the Docker VM extension, your VM is automatically set up as a Docker host.</target>
          </trans-unit>
          <trans-unit id="113" xml:space="preserve">
            <source>The example in that article shows you how to use the the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Azure command-line interface for Mac, Linux, and Windows<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> (the Azure CLI) in Service Management mode to create the VM.</source>
            <target state="new">The example in that article shows you how to use the the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Azure command-line interface for Mac, Linux, and Windows<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> (the Azure CLI) in Service Management mode to create the VM.</target>
          </trans-unit>
          <trans-unit id="114" xml:space="preserve">
            <source>Step 2: Install Compose</source>
            <target state="new">Step 2: Install Compose</target>
          </trans-unit>
          <trans-unit id="115" xml:space="preserve">
            <source>After the Linux VM is running with Docker, connect to it from your client computer using SSH.</source>
            <target state="new">After the Linux VM is running with Docker, connect to it from your client computer using SSH.</target>
          </trans-unit>
          <trans-unit id="116" xml:space="preserve">
            <source>If you need to, install <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Compose<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> by running the following two commands.</source>
            <target state="new">If you need to, install <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Compose<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> by running the following two commands.</target>
          </trans-unit>
          <trans-unit id="117" xml:space="preserve">
            <source>If you used the Docker VM extension to create your VM, Compose is already installed for you.</source>
            <target state="new">If you used the Docker VM extension to create your VM, Compose is already installed for you.</target>
          </trans-unit>
          <trans-unit id="118" xml:space="preserve">
            <source>Skip these commands and go to Step 3.</source>
            <target state="new">Skip these commands and go to Step 3.</target>
          </trans-unit>
          <trans-unit id="119" xml:space="preserve">
            <source>You only need to install Compose if you installed Docker on the VM yourself.</source>
            <target state="new">You only need to install Compose if you installed Docker on the VM yourself.</target>
          </trans-unit>
          <trans-unit id="120" xml:space="preserve">
            <source>If you get a "Permission denied" error, your /usr/local/bin directory on the VM probably isn't writable and you'll need to install Compose as the superuser.</source>
            <target state="new">If you get a "Permission denied" error, your /usr/local/bin directory on the VM probably isn't writable and you'll need to install Compose as the superuser.</target>
          </trans-unit>
          <trans-unit id="121" xml:space="preserve">
            <source>Run <bpt id="2">&lt;code&gt;</bpt>sudo -i<ept id="2">&lt;/code&gt;</ept>, then the two commands above, then <bpt id="4">&lt;code&gt;</bpt>exit<ept id="4">&lt;/code&gt;</ept>.</source>
            <target state="new">Run <bpt id="2">&lt;code&gt;</bpt>sudo -i<ept id="2">&lt;/code&gt;</ept>, then the two commands above, then <bpt id="4">&lt;code&gt;</bpt>exit<ept id="4">&lt;/code&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="122" xml:space="preserve">
            <source>To test your installation of Compose, run the following command.</source>
            <target state="new">To test your installation of Compose, run the following command.</target>
          </trans-unit>
          <trans-unit id="123" xml:space="preserve">
            <source>You will see output similar to</source>
            <target state="new">You will see output similar to</target>
          </trans-unit>
          <trans-unit id="124" xml:space="preserve">
            <source>Step 3: Create a docker-compose.yml configuration file</source>
            <target state="new">Step 3: Create a docker-compose.yml configuration file</target>
          </trans-unit>
          <trans-unit id="125" xml:space="preserve">
            <source>Next you'll create a <bpt id="2">&lt;code&gt;</bpt>docker-compose.yml<ept id="2">&lt;/code&gt;</ept> file, which is just a text configuration file, to define the Docker containers to run on the VM.</source>
            <target state="new">Next you'll create a <bpt id="2">&lt;code&gt;</bpt>docker-compose.yml<ept id="2">&lt;/code&gt;</ept> file, which is just a text configuration file, to define the Docker containers to run on the VM.</target>
          </trans-unit>
          <trans-unit id="126" xml:space="preserve">
            <source>The file specifies the image to run on each container (or it could be a build from a Dockerfile), necessary environment variables and dependencies, ports, links between containers, and so on.</source>
            <target state="new">The file specifies the image to run on each container (or it could be a build from a Dockerfile), necessary environment variables and dependencies, ports, links between containers, and so on.</target>
          </trans-unit>
          <trans-unit id="127" xml:space="preserve">
            <source>For details on yml file syntax, see <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>docker-compose.yml reference<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">For details on yml file syntax, see <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>docker-compose.yml reference<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="128" xml:space="preserve">
            <source>Create a working directory on your VM, and use your favorite text editor to create <bpt id="2">&lt;code&gt;</bpt>docker-compose.yml<ept id="2">&lt;/code&gt;</ept>.</source>
            <target state="new">Create a working directory on your VM, and use your favorite text editor to create <bpt id="2">&lt;code&gt;</bpt>docker-compose.yml<ept id="2">&lt;/code&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="129" xml:space="preserve">
            <source>To try a simple example, copy the following text to the file.</source>
            <target state="new">To try a simple example, copy the following text to the file.</target>
          </trans-unit>
          <trans-unit id="130" xml:space="preserve">
            <source>This configuration uses images from the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>DockerHub Registry<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> to install WordPress (the open source blogging and content management system) and a linked backend MariaDB SQL database.</source>
            <target state="new">This configuration uses images from the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>DockerHub Registry<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> to install WordPress (the open source blogging and content management system) and a linked backend MariaDB SQL database.</target>
          </trans-unit>
          <trans-unit id="131" xml:space="preserve">
            <source>Step 4: Start the containers with Compose</source>
            <target state="new">Step 4: Start the containers with Compose</target>
          </trans-unit>
          <trans-unit id="132" xml:space="preserve">
            <source>In the working directory on your VM, simply run the following command.</source>
            <target state="new">In the working directory on your VM, simply run the following command.</target>
          </trans-unit>
          <trans-unit id="133" xml:space="preserve">
            <source>This starts the Docker containers specified in <bpt id="2">&lt;code&gt;</bpt>docker-compose.yml<ept id="2">&lt;/code&gt;</ept>.</source>
            <target state="new">This starts the Docker containers specified in <bpt id="2">&lt;code&gt;</bpt>docker-compose.yml<ept id="2">&lt;/code&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="134" xml:space="preserve">
            <source>You'll see output similar to:</source>
            <target state="new">You'll see output similar to:</target>
          </trans-unit>
          <trans-unit id="135" xml:space="preserve">
            <source>Be sure to use the <bpt id="2">&lt;strong&gt;</bpt>-d<ept id="2">&lt;/strong&gt;</ept> option on start-up so that the containers run in the background continuously.</source>
            <target state="new">Be sure to use the <bpt id="2">&lt;strong&gt;</bpt>-d<ept id="2">&lt;/strong&gt;</ept> option on start-up so that the containers run in the background continuously.</target>
          </trans-unit>
          <trans-unit id="136" xml:space="preserve">
            <source>To verify that the containers are up, type <bpt id="2">&lt;code&gt;</bpt>docker-compose ps<ept id="2">&lt;/code&gt;</ept>.</source>
            <target state="new">To verify that the containers are up, type <bpt id="2">&lt;code&gt;</bpt>docker-compose ps<ept id="2">&lt;/code&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="137" xml:space="preserve">
            <source>You should see something like:</source>
            <target state="new">You should see something like:</target>
          </trans-unit>
          <trans-unit id="138" xml:space="preserve">
            <source>You can now connect to WordPress directly on the VM by browsing to <bpt id="2">&lt;code&gt;</bpt>http://localhost:8080<ept id="2">&lt;/code&gt;</ept>.</source>
            <target state="new">You can now connect to WordPress directly on the VM by browsing to <bpt id="2">&lt;code&gt;</bpt>http://localhost:8080<ept id="2">&lt;/code&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="139" xml:space="preserve">
            <source>If you want to connect to the VM over the Internet, first configure an HTTP endpoint on the VM that maps public port 80 to private port 8080.</source>
            <target state="new">If you want to connect to the VM over the Internet, first configure an HTTP endpoint on the VM that maps public port 80 to private port 8080.</target>
          </trans-unit>
          <trans-unit id="140" xml:space="preserve">
            <source>For example, in an Azure Service Management deployment, run the following Azure CLI command:</source>
            <target state="new">For example, in an Azure Service Management deployment, run the following Azure CLI command:</target>
          </trans-unit>
          <trans-unit id="141" xml:space="preserve">
            <source>You should now see the WordPress start screen, where you can complete the installation and get started with the application.</source>
            <target state="new">You should now see the WordPress start screen, where you can complete the installation and get started with the application.</target>
          </trans-unit>
          <trans-unit id="142" xml:space="preserve">
            <source><bpt id="1">&lt;linkText&gt;</bpt>WordPress start screen<ept id="1">&lt;/linkText&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;linkText&gt;</bpt>WordPress start screen<ept id="1">&lt;/linkText&gt;</ept></target>
          </trans-unit>
          <trans-unit id="143" xml:space="preserve">
            <source>Next steps</source>
            <target state="new">Next steps</target>
          </trans-unit>
          <trans-unit id="144" xml:space="preserve">
            <source>Check out the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Compose CLI reference<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> and <bpt id="4CapsExtId1">&lt;link&gt;</bpt><bpt id="4CapsExtId2">&lt;linkText&gt;</bpt>user guide<ept id="4CapsExtId2">&lt;/linkText&gt;</ept><bpt id="4CapsExtId3">&lt;title&gt;</bpt><ept id="4CapsExtId3">&lt;/title&gt;</ept><ept id="4CapsExtId1">&lt;/link&gt;</ept> for more examples of building and deploying multi-container apps.</source>
            <target state="new">Check out the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Compose CLI reference<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> and <bpt id="4CapsExtId1">&lt;link&gt;</bpt><bpt id="4CapsExtId2">&lt;linkText&gt;</bpt>user guide<ept id="4CapsExtId2">&lt;/linkText&gt;</ept><bpt id="4CapsExtId3">&lt;title&gt;</bpt><ept id="4CapsExtId3">&lt;/title&gt;</ept><ept id="4CapsExtId1">&lt;/link&gt;</ept> for more examples of building and deploying multi-container apps.</target>
          </trans-unit>
          <trans-unit id="145" xml:space="preserve">
            <source>Use an Azure Resource Manager template, either your own or one contributed from the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>community<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>, to deploy an Azure VM with Docker and an application set up with Compose.</source>
            <target state="new">Use an Azure Resource Manager template, either your own or one contributed from the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>community<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>, to deploy an Azure VM with Docker and an application set up with Compose.</target>
          </trans-unit>
          <trans-unit id="146" xml:space="preserve">
            <source>For example, the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Deploy a WordPress blog with Docker<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> template uses Docker and Compose to quickly deploy WordPress with a MySQL backend on an Ubuntu VM.</source>
            <target state="new">For example, the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Deploy a WordPress blog with Docker<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> template uses Docker and Compose to quickly deploy WordPress with a MySQL backend on an Ubuntu VM.</target>
          </trans-unit>
          <trans-unit id="147" xml:space="preserve">
            <source>Try integrating Docker Compose with a <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Docker Swarm<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> cluster.</source>
            <target state="new">Try integrating Docker Compose with a <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Docker Swarm<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> cluster.</target>
          </trans-unit>
          <trans-unit id="148" xml:space="preserve">
            <source>See</source>
            <target state="new">See</target>
          </trans-unit>
          <trans-unit id="149" xml:space="preserve">
            <source><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Docker Compose/Swarm integration<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept> for scenarios.</source>
            <target state="new"><bpt id="1CapsExtId1">&lt;link&gt;</bpt><bpt id="1CapsExtId2">&lt;linkText&gt;</bpt>Docker Compose/Swarm integration<ept id="1CapsExtId2">&lt;/linkText&gt;</ept><bpt id="1CapsExtId3">&lt;title&gt;</bpt><ept id="1CapsExtId3">&lt;/title&gt;</ept><ept id="1CapsExtId1">&lt;/link&gt;</ept> for scenarios.</target>
          </trans-unit>
        </group>
      </group>
    </body>
  </file>
</xliff>