<?xml version="1.0" encoding="utf-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" source-language="en-us" target-language="zh-cn" original="2/18/2016 5:25:50 PM" tool-id="MarkdownTransformer" product-name="N/A" product-version="N/A" build-num="1">
    <header>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0fa2b4d501aba47f1ab77c8eea93cde1ca2c443e</xliffext:olfilehash>
      <tool tool-id="MarkdownTransformer" tool-name="MarkdownToXliff" tool-version="1.0" tool-company="Microsoft" />
    </header>
    <body>
      <group extype="content">
        <group id="101">
          <trans-unit id="101" xml:space="preserve">
            <source>How to use Service Bus topics (Node.js) | Microsoft Azure</source>
            <target state="new">How to use Service Bus topics (Node.js) | Microsoft Azure</target>
          </trans-unit>
          <trans-unit id="102" xml:space="preserve">
            <source>Learn how to use Service Bus topics and subscriptions in Azure from a Node.js app.</source>
            <target state="new">Learn how to use Service Bus topics and subscriptions in Azure from a Node.js app.</target>
          </trans-unit>
          <trans-unit id="103" xml:space="preserve">
            <source>How to Use Service Bus topics and subscriptions</source>
            <target state="new">How to Use Service Bus topics and subscriptions</target>
          </trans-unit>
          <trans-unit id="104" xml:space="preserve">
            <source>This guide describes how to use Service Bus topics and subscriptions</source>
            <target state="new">This guide describes how to use Service Bus topics and subscriptions</target>
          </trans-unit>
          <trans-unit id="105" xml:space="preserve">
            <source>from Node.js applications.</source>
            <target state="new">from Node.js applications.</target>
          </trans-unit>
          <trans-unit id="106" xml:space="preserve">
            <source>The scenarios covered include **creating</source>
            <target state="new">The scenarios covered include **creating</target>
          </trans-unit>
          <trans-unit id="107" xml:space="preserve">
            <source>topics and subscriptions, creating subscription filters, sending</source>
            <target state="new">topics and subscriptions, creating subscription filters, sending</target>
          </trans-unit>
          <trans-unit id="108" xml:space="preserve">
            <source>messages** to a topic, <bpt id="2">&lt;strong&gt;</bpt>receiving messages from a subscription<ept id="2">&lt;/strong&gt;</ept>, and</source>
            <target state="new">messages** to a topic, <bpt id="2">&lt;strong&gt;</bpt>receiving messages from a subscription<ept id="2">&lt;/strong&gt;</ept>, and</target>
          </trans-unit>
          <trans-unit id="109" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>deleting topics and subscriptions<ept id="1">&lt;/strong&gt;</ept>.</source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>deleting topics and subscriptions<ept id="1">&lt;/strong&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="110" xml:space="preserve">
            <source>For more information on topics</source>
            <target state="new">For more information on topics</target>
          </trans-unit>
          <trans-unit id="111" xml:space="preserve">
            <source>and subscriptions, see the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Next steps<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> section.</source>
            <target state="new">and subscriptions, see the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Next steps<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> section.</target>
          </trans-unit>
          <trans-unit id="112" xml:space="preserve">
            <source><ph id="1">&lt;token href="../../includes/howto-service-bus-topics.md"/&gt;</ph></source>
            <target state="new"><ph id="1">&lt;token href="../../includes/howto-service-bus-topics.md"/&gt;</ph></target>
          </trans-unit>
          <trans-unit id="113" xml:space="preserve">
            <source>Create a Node.js application</source>
            <target state="new">Create a Node.js application</target>
          </trans-unit>
          <trans-unit id="114" xml:space="preserve">
            <source>Create a blank Node.js application.</source>
            <target state="new">Create a blank Node.js application.</target>
          </trans-unit>
          <trans-unit id="115" xml:space="preserve">
            <source>For instructions on creating a Node.js application, see [Create and deploy a Node.js application to an Azure Web Site], <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Node.js Cloud Service[node.js cloud service]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> (using Windows PowerShell), or Web Site with WebMatrix.</source>
            <target state="new">For instructions on creating a Node.js application, see [Create and deploy a Node.js application to an Azure Web Site], <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Node.js Cloud Service[node.js cloud service]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> (using Windows PowerShell), or Web Site with WebMatrix.</target>
          </trans-unit>
          <trans-unit id="116" xml:space="preserve">
            <source>Configure your application to use Service Bus</source>
            <target state="new">Configure your application to use Service Bus</target>
          </trans-unit>
          <trans-unit id="117" xml:space="preserve">
            <source>To use Service Bus, download the Node.js azure package.</source>
            <target state="new">To use Service Bus, download the Node.js azure package.</target>
          </trans-unit>
          <trans-unit id="118" xml:space="preserve">
            <source>This package includes a set of libraries that</source>
            <target state="new">This package includes a set of libraries that</target>
          </trans-unit>
          <trans-unit id="119" xml:space="preserve">
            <source>communicate with the Service Bus REST services.</source>
            <target state="new">communicate with the Service Bus REST services.</target>
          </trans-unit>
          <trans-unit id="120" xml:space="preserve">
            <source>Use Node Package Manager (NPM) to obtain the package</source>
            <target state="new">Use Node Package Manager (NPM) to obtain the package</target>
          </trans-unit>
          <trans-unit id="121" xml:space="preserve">
            <source>Use a command-line interface such as <bpt id="2">&lt;strong&gt;</bpt>PowerShell<ept id="2">&lt;/strong&gt;</ept> (Windows,) <bpt id="4">&lt;strong&gt;</bpt>Terminal<ept id="4">&lt;/strong&gt;</ept> (Mac,) or <bpt id="6">&lt;strong&gt;</bpt>Bash<ept id="6">&lt;/strong&gt;</ept> (Unix), navigate to the folder where you created your sample application.</source>
            <target state="new">Use a command-line interface such as <bpt id="2">&lt;strong&gt;</bpt>PowerShell<ept id="2">&lt;/strong&gt;</ept> (Windows,) <bpt id="4">&lt;strong&gt;</bpt>Terminal<ept id="4">&lt;/strong&gt;</ept> (Mac,) or <bpt id="6">&lt;strong&gt;</bpt>Bash<ept id="6">&lt;/strong&gt;</ept> (Unix), navigate to the folder where you created your sample application.</target>
          </trans-unit>
          <trans-unit id="122" xml:space="preserve">
            <source>Type <bpt id="2">&lt;strong&gt;</bpt>npm install azure<ept id="2">&lt;/strong&gt;</ept> in the command window, which should</source>
            <target state="new">Type <bpt id="2">&lt;strong&gt;</bpt>npm install azure<ept id="2">&lt;/strong&gt;</ept> in the command window, which should</target>
          </trans-unit>
          <trans-unit id="123" xml:space="preserve">
            <source>result in the following output:</source>
            <target state="new">result in the following output:</target>
          </trans-unit>
          <trans-unit id="124" xml:space="preserve">
            <source>You can manually run the <bpt id="2">&lt;strong&gt;</bpt>ls<ept id="2">&lt;/strong&gt;</ept> command to verify that a</source>
            <target state="new">You can manually run the <bpt id="2">&lt;strong&gt;</bpt>ls<ept id="2">&lt;/strong&gt;</ept> command to verify that a</target>
          </trans-unit>
          <trans-unit id="125" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>node\_modules<ept id="1">&lt;/strong&gt;</ept> folder was created.</source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>node\_modules<ept id="1">&lt;/strong&gt;</ept> folder was created.</target>
          </trans-unit>
          <trans-unit id="126" xml:space="preserve">
            <source>Inside that folder find the</source>
            <target state="new">Inside that folder find the</target>
          </trans-unit>
          <trans-unit id="127" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>azure<ept id="1">&lt;/strong&gt;</ept> package, which contains the libraries you need to access</source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>azure<ept id="1">&lt;/strong&gt;</ept> package, which contains the libraries you need to access</target>
          </trans-unit>
          <trans-unit id="128" xml:space="preserve">
            <source>Service Bus topics.</source>
            <target state="new">Service Bus topics.</target>
          </trans-unit>
          <trans-unit id="129" xml:space="preserve">
            <source>Import the module</source>
            <target state="new">Import the module</target>
          </trans-unit>
          <trans-unit id="130" xml:space="preserve">
            <source>Using Notepad or another text editor, add the following to the top of</source>
            <target state="new">Using Notepad or another text editor, add the following to the top of</target>
          </trans-unit>
          <trans-unit id="131" xml:space="preserve">
            <source>the <bpt id="2">&lt;strong&gt;</bpt>server.js<ept id="2">&lt;/strong&gt;</ept> file of the application:</source>
            <target state="new">the <bpt id="2">&lt;strong&gt;</bpt>server.js<ept id="2">&lt;/strong&gt;</ept> file of the application:</target>
          </trans-unit>
          <trans-unit id="132" xml:space="preserve">
            <source>Set up a Service Bus connection</source>
            <target state="new">Set up a Service Bus connection</target>
          </trans-unit>
          <trans-unit id="133" xml:space="preserve">
            <source>The azure module will read the environment variables AZURE\_SERVICEBUS\_NAMESPACE and AZURE\_SERVICEBUS\_ACCESS\_KEY for information required to connect to your Azure Service Bus.</source>
            <target state="new">The azure module will read the environment variables AZURE\_SERVICEBUS\_NAMESPACE and AZURE\_SERVICEBUS\_ACCESS\_KEY for information required to connect to your Azure Service Bus.</target>
          </trans-unit>
          <trans-unit id="134" xml:space="preserve">
            <source>If these environment variables are not set, you must specify the account information when calling <bpt id="2">&lt;strong&gt;</bpt>createServiceBusService<ept id="2">&lt;/strong&gt;</ept>.</source>
            <target state="new">If these environment variables are not set, you must specify the account information when calling <bpt id="2">&lt;strong&gt;</bpt>createServiceBusService<ept id="2">&lt;/strong&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="135" xml:space="preserve">
            <source>For an example of setting the environment variables in a configuration file for an Azure Cloud Service, see [Node.js Cloud Service with Storage].</source>
            <target state="new">For an example of setting the environment variables in a configuration file for an Azure Cloud Service, see [Node.js Cloud Service with Storage].</target>
          </trans-unit>
          <trans-unit id="136" xml:space="preserve">
            <source>For an example of setting the environment variables in the management portal for an Azure Website, see [Node.js Web Application with Storage]</source>
            <target state="new">For an example of setting the environment variables in the management portal for an Azure Website, see [Node.js Web Application with Storage]</target>
          </trans-unit>
          <trans-unit id="137" xml:space="preserve">
            <source>How to create a topic</source>
            <target state="new">How to create a topic</target>
          </trans-unit>
          <trans-unit id="138" xml:space="preserve">
            <source>The <bpt id="2">&lt;strong&gt;</bpt>ServiceBusService<ept id="2">&lt;/strong&gt;</ept> object lets you work with topics.</source>
            <target state="new">The <bpt id="2">&lt;strong&gt;</bpt>ServiceBusService<ept id="2">&lt;/strong&gt;</ept> object lets you work with topics.</target>
          </trans-unit>
          <trans-unit id="139" xml:space="preserve">
            <source>The</source>
            <target state="new">The</target>
          </trans-unit>
          <trans-unit id="140" xml:space="preserve">
            <source>following code creates a <bpt id="2">&lt;strong&gt;</bpt>ServiceBusService<ept id="2">&lt;/strong&gt;</ept> object.</source>
            <target state="new">following code creates a <bpt id="2">&lt;strong&gt;</bpt>ServiceBusService<ept id="2">&lt;/strong&gt;</ept> object.</target>
          </trans-unit>
          <trans-unit id="141" xml:space="preserve">
            <source>Add it near the</source>
            <target state="new">Add it near the</target>
          </trans-unit>
          <trans-unit id="142" xml:space="preserve">
            <source>top of the <bpt id="2">&lt;strong&gt;</bpt>server.js<ept id="2">&lt;/strong&gt;</ept> file, after the statement to import the azure</source>
            <target state="new">top of the <bpt id="2">&lt;strong&gt;</bpt>server.js<ept id="2">&lt;/strong&gt;</ept> file, after the statement to import the azure</target>
          </trans-unit>
          <trans-unit id="143" xml:space="preserve">
            <source>module:</source>
            <target state="new">module:</target>
          </trans-unit>
          <trans-unit id="144" xml:space="preserve">
            <source>By calling <bpt id="2">&lt;strong&gt;</bpt>createTopicIfNotExists<ept id="2">&lt;/strong&gt;</ept> on the <bpt id="4">&lt;strong&gt;</bpt>ServiceBusService<ept id="4">&lt;/strong&gt;</ept></source>
            <target state="new">By calling <bpt id="2">&lt;strong&gt;</bpt>createTopicIfNotExists<ept id="2">&lt;/strong&gt;</ept> on the <bpt id="4">&lt;strong&gt;</bpt>ServiceBusService<ept id="4">&lt;/strong&gt;</ept></target>
          </trans-unit>
          <trans-unit id="145" xml:space="preserve">
            <source>object, the specified topic will be returned (if it exists,) or a new</source>
            <target state="new">object, the specified topic will be returned (if it exists,) or a new</target>
          </trans-unit>
          <trans-unit id="146" xml:space="preserve">
            <source>topic with the specified name will be created.</source>
            <target state="new">topic with the specified name will be created.</target>
          </trans-unit>
          <trans-unit id="147" xml:space="preserve">
            <source>The following code uses</source>
            <target state="new">The following code uses</target>
          </trans-unit>
          <trans-unit id="148" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>createTopicIfNotExists<ept id="1">&lt;/strong&gt;</ept> to create or connect to the topic named</source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>createTopicIfNotExists<ept id="1">&lt;/strong&gt;</ept> to create or connect to the topic named</target>
          </trans-unit>
          <trans-unit id="149" xml:space="preserve">
            <source>'MyTopic':</source>
            <target state="new">'MyTopic':</target>
          </trans-unit>
          <trans-unit id="150" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>createServiceBusService<ept id="1">&lt;/strong&gt;</ept> also supports additional options, which</source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>createServiceBusService<ept id="1">&lt;/strong&gt;</ept> also supports additional options, which</target>
          </trans-unit>
          <trans-unit id="151" xml:space="preserve">
            <source>allow you to override default topic settings such as message time to</source>
            <target state="new">allow you to override default topic settings such as message time to</target>
          </trans-unit>
          <trans-unit id="152" xml:space="preserve">
            <source>live or maximum topic size.</source>
            <target state="new">live or maximum topic size.</target>
          </trans-unit>
          <trans-unit id="153" xml:space="preserve">
            <source>The following example shows demonstrates</source>
            <target state="new">The following example shows demonstrates</target>
          </trans-unit>
          <trans-unit id="154" xml:space="preserve">
            <source>setting the maximum topic size to 5GB a time to live of 1 minute:</source>
            <target state="new">setting the maximum topic size to 5GB a time to live of 1 minute:</target>
          </trans-unit>
          <trans-unit id="155" xml:space="preserve">
            <source>Filters</source>
            <target state="new">Filters</target>
          </trans-unit>
          <trans-unit id="156" xml:space="preserve">
            <source>Optional filtering operations can be applied to operations performed using <bpt id="2">&lt;strong&gt;</bpt>ServiceBusService<ept id="2">&lt;/strong&gt;</ept>.</source>
            <target state="new">Optional filtering operations can be applied to operations performed using <bpt id="2">&lt;strong&gt;</bpt>ServiceBusService<ept id="2">&lt;/strong&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="157" xml:space="preserve">
            <source>Filtering operations can include logging, automatically retrying, etc. Filters are objects that implement a method with the signature:</source>
            <target state="new">Filtering operations can include logging, automatically retrying, etc. Filters are objects that implement a method with the signature:</target>
          </trans-unit>
          <trans-unit id="158" xml:space="preserve">
            <source>After doing its preprocessing on the request options, the method needs to call "next" passing a callback with the following signature:</source>
            <target state="new">After doing its preprocessing on the request options, the method needs to call "next" passing a callback with the following signature:</target>
          </trans-unit>
          <trans-unit id="159" xml:space="preserve">
            <source>In this callback, and after processing the returnObject (the response from the request to the server), the callback needs to either invoke next if it exists to continue processing other filters or simply invoke finalCallback otherwise to end up the service invocation.</source>
            <target state="new">In this callback, and after processing the returnObject (the response from the request to the server), the callback needs to either invoke next if it exists to continue processing other filters or simply invoke finalCallback otherwise to end up the service invocation.</target>
          </trans-unit>
          <trans-unit id="160" xml:space="preserve">
            <source>Two filters that implement retry logic are included with the Azure SDK for Node.js, <bpt id="2">&lt;strong&gt;</bpt>ExponentialRetryPolicyFilter<ept id="2">&lt;/strong&gt;</ept> and <bpt id="4">&lt;strong&gt;</bpt>LinearRetryPolicyFilter<ept id="4">&lt;/strong&gt;</ept>.</source>
            <target state="new">Two filters that implement retry logic are included with the Azure SDK for Node.js, <bpt id="2">&lt;strong&gt;</bpt>ExponentialRetryPolicyFilter<ept id="2">&lt;/strong&gt;</ept> and <bpt id="4">&lt;strong&gt;</bpt>LinearRetryPolicyFilter<ept id="4">&lt;/strong&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="161" xml:space="preserve">
            <source>The following creates a <bpt id="2">&lt;strong&gt;</bpt>ServiceBusService<ept id="2">&lt;/strong&gt;</ept> object that uses the <bpt id="4">&lt;strong&gt;</bpt>ExponentialRetryPolicyFilter<ept id="4">&lt;/strong&gt;</ept>:</source>
            <target state="new">The following creates a <bpt id="2">&lt;strong&gt;</bpt>ServiceBusService<ept id="2">&lt;/strong&gt;</ept> object that uses the <bpt id="4">&lt;strong&gt;</bpt>ExponentialRetryPolicyFilter<ept id="4">&lt;/strong&gt;</ept>:</target>
          </trans-unit>
          <trans-unit id="162" xml:space="preserve">
            <source>How to create subscriptions</source>
            <target state="new">How to create subscriptions</target>
          </trans-unit>
          <trans-unit id="163" xml:space="preserve">
            <source>Topic subscriptions are also created with the <bpt id="2">&lt;strong&gt;</bpt>ServiceBusService<ept id="2">&lt;/strong&gt;</ept></source>
            <target state="new">Topic subscriptions are also created with the <bpt id="2">&lt;strong&gt;</bpt>ServiceBusService<ept id="2">&lt;/strong&gt;</ept></target>
          </trans-unit>
          <trans-unit id="164" xml:space="preserve">
            <source>object.</source>
            <target state="new">object.</target>
          </trans-unit>
          <trans-unit id="165" xml:space="preserve">
            <source>Subscriptions are named and can have an optional filter that</source>
            <target state="new">Subscriptions are named and can have an optional filter that</target>
          </trans-unit>
          <trans-unit id="166" xml:space="preserve">
            <source>restricts the set of messages delivered to the subscription's virtual</source>
            <target state="new">restricts the set of messages delivered to the subscription's virtual</target>
          </trans-unit>
          <trans-unit id="167" xml:space="preserve">
            <source>queue.</source>
            <target state="new">queue.</target>
          </trans-unit>
          <trans-unit id="168" xml:space="preserve">
            <source>Subscriptions are persistent and will continue to exist until</source>
            <target state="new">Subscriptions are persistent and will continue to exist until</target>
          </trans-unit>
          <trans-unit id="169" xml:space="preserve">
            <source>either they, or the topic they are associated with, are deleted.</source>
            <target state="new">either they, or the topic they are associated with, are deleted.</target>
          </trans-unit>
          <trans-unit id="170" xml:space="preserve">
            <source>If your</source>
            <target state="new">If your</target>
          </trans-unit>
          <trans-unit id="171" xml:space="preserve">
            <source>application contains logic to create a subscription, it should first</source>
            <target state="new">application contains logic to create a subscription, it should first</target>
          </trans-unit>
          <trans-unit id="172" xml:space="preserve">
            <source>check if the subscription already exists by using the</source>
            <target state="new">check if the subscription already exists by using the</target>
          </trans-unit>
          <trans-unit id="173" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>getSubscription<ept id="1">&lt;/strong&gt;</ept> method.</source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>getSubscription<ept id="1">&lt;/strong&gt;</ept> method.</target>
          </trans-unit>
          <trans-unit id="174" xml:space="preserve">
            <source>Create a subscription with the default (MatchAll) filter</source>
            <target state="new">Create a subscription with the default (MatchAll) filter</target>
          </trans-unit>
          <trans-unit id="175" xml:space="preserve">
            <source>The <bpt id="2">&lt;strong&gt;</bpt>MatchAll<ept id="2">&lt;/strong&gt;</ept> filter is the default filter that is used if no filter</source>
            <target state="new">The <bpt id="2">&lt;strong&gt;</bpt>MatchAll<ept id="2">&lt;/strong&gt;</ept> filter is the default filter that is used if no filter</target>
          </trans-unit>
          <trans-unit id="176" xml:space="preserve">
            <source>is specified when a new subscription is created.</source>
            <target state="new">is specified when a new subscription is created.</target>
          </trans-unit>
          <trans-unit id="177" xml:space="preserve">
            <source>When the <bpt id="2">&lt;strong&gt;</bpt>MatchAll<ept id="2">&lt;/strong&gt;</ept></source>
            <target state="new">When the <bpt id="2">&lt;strong&gt;</bpt>MatchAll<ept id="2">&lt;/strong&gt;</ept></target>
          </trans-unit>
          <trans-unit id="178" xml:space="preserve">
            <source>filter is used, all messages published to the topic are placed in the</source>
            <target state="new">filter is used, all messages published to the topic are placed in the</target>
          </trans-unit>
          <trans-unit id="179" xml:space="preserve">
            <source>subscription's virtual queue.</source>
            <target state="new">subscription's virtual queue.</target>
          </trans-unit>
          <trans-unit id="180" xml:space="preserve">
            <source>The following example creates a</source>
            <target state="new">The following example creates a</target>
          </trans-unit>
          <trans-unit id="181" xml:space="preserve">
            <source>subscription named 'AllMessages' and uses the default <bpt id="2">&lt;strong&gt;</bpt>MatchAll<ept id="2">&lt;/strong&gt;</ept></source>
            <target state="new">subscription named 'AllMessages' and uses the default <bpt id="2">&lt;strong&gt;</bpt>MatchAll<ept id="2">&lt;/strong&gt;</ept></target>
          </trans-unit>
          <trans-unit id="182" xml:space="preserve">
            <source>filter.</source>
            <target state="new">filter.</target>
          </trans-unit>
          <trans-unit id="183" xml:space="preserve">
            <source>Create subscriptions with filters</source>
            <target state="new">Create subscriptions with filters</target>
          </trans-unit>
          <trans-unit id="184" xml:space="preserve">
            <source>You can also create filters that allow you to scope which messages sent</source>
            <target state="new">You can also create filters that allow you to scope which messages sent</target>
          </trans-unit>
          <trans-unit id="185" xml:space="preserve">
            <source>to a topic should show up within a specific topic subscription.</source>
            <target state="new">to a topic should show up within a specific topic subscription.</target>
          </trans-unit>
          <trans-unit id="186" xml:space="preserve">
            <source>The most flexible type of filter supported by subscriptions is the</source>
            <target state="new">The most flexible type of filter supported by subscriptions is the</target>
          </trans-unit>
          <trans-unit id="187" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>SqlFilter<ept id="1">&lt;/strong&gt;</ept>, which implements a subset of SQL92.</source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>SqlFilter<ept id="1">&lt;/strong&gt;</ept>, which implements a subset of SQL92.</target>
          </trans-unit>
          <trans-unit id="188" xml:space="preserve">
            <source>SQL filters operate</source>
            <target state="new">SQL filters operate</target>
          </trans-unit>
          <trans-unit id="189" xml:space="preserve">
            <source>on the properties of the messages that are published to the topic.</source>
            <target state="new">on the properties of the messages that are published to the topic.</target>
          </trans-unit>
          <trans-unit id="190" xml:space="preserve">
            <source>For</source>
            <target state="new">For</target>
          </trans-unit>
          <trans-unit id="191" xml:space="preserve">
            <source>more details about the expressions that can be used with a SQL filter,</source>
            <target state="new">more details about the expressions that can be used with a SQL filter,</target>
          </trans-unit>
          <trans-unit id="192" xml:space="preserve">
            <source>review the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>SqlFilter.SqlExpression[sqlfilter.sqlexpression]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> syntax.</source>
            <target state="new">review the <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>SqlFilter.SqlExpression[sqlfilter.sqlexpression]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept> syntax.</target>
          </trans-unit>
          <trans-unit id="193" xml:space="preserve">
            <source>Filters can be added to a subscription by using the <bpt id="2">&lt;strong&gt;</bpt>createRule<ept id="2">&lt;/strong&gt;</ept></source>
            <target state="new">Filters can be added to a subscription by using the <bpt id="2">&lt;strong&gt;</bpt>createRule<ept id="2">&lt;/strong&gt;</ept></target>
          </trans-unit>
          <trans-unit id="194" xml:space="preserve">
            <source>method of the <bpt id="2">&lt;strong&gt;</bpt>ServiceBusService<ept id="2">&lt;/strong&gt;</ept> object.</source>
            <target state="new">method of the <bpt id="2">&lt;strong&gt;</bpt>ServiceBusService<ept id="2">&lt;/strong&gt;</ept> object.</target>
          </trans-unit>
          <trans-unit id="195" xml:space="preserve">
            <source>This method allows you to</source>
            <target state="new">This method allows you to</target>
          </trans-unit>
          <trans-unit id="196" xml:space="preserve">
            <source>add new filters to an existing subscription.</source>
            <target state="new">add new filters to an existing subscription.</target>
          </trans-unit>
          <trans-unit id="197" xml:space="preserve">
            <source>Since the default filter is applied automatically to all new</source>
            <target state="new">Since the default filter is applied automatically to all new</target>
          </trans-unit>
          <trans-unit id="198" xml:space="preserve">
            <source>subscriptions, you must first remove the default filter or the</source>
            <target state="new">subscriptions, you must first remove the default filter or the</target>
          </trans-unit>
          <trans-unit id="199" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>MatchAll<ept id="1">&lt;/strong&gt;</ept> will override any other filters you may specify.</source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>MatchAll<ept id="1">&lt;/strong&gt;</ept> will override any other filters you may specify.</target>
          </trans-unit>
          <trans-unit id="200" xml:space="preserve">
            <source>You can</source>
            <target state="new">You can</target>
          </trans-unit>
          <trans-unit id="201" xml:space="preserve">
            <source>remove the default rule by using the <bpt id="2">&lt;strong&gt;</bpt>deleteRule<ept id="2">&lt;/strong&gt;</ept> method of the</source>
            <target state="new">remove the default rule by using the <bpt id="2">&lt;strong&gt;</bpt>deleteRule<ept id="2">&lt;/strong&gt;</ept> method of the</target>
          </trans-unit>
          <trans-unit id="202" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>ServiceBusService<ept id="1">&lt;/strong&gt;</ept> object.</source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>ServiceBusService<ept id="1">&lt;/strong&gt;</ept> object.</target>
          </trans-unit>
          <trans-unit id="203" xml:space="preserve">
            <source>The example below creates a subscription named 'HighMessages' with a</source>
            <target state="new">The example below creates a subscription named 'HighMessages' with a</target>
          </trans-unit>
          <trans-unit id="204" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>SqlFilter<ept id="1">&lt;/strong&gt;</ept> that only selects messages that have a custom</source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>SqlFilter<ept id="1">&lt;/strong&gt;</ept> that only selects messages that have a custom</target>
          </trans-unit>
          <trans-unit id="205" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>messagenumber<ept id="1">&lt;/strong&gt;</ept> property greater than 3:</source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>messagenumber<ept id="1">&lt;/strong&gt;</ept> property greater than 3:</target>
          </trans-unit>
          <trans-unit id="206" xml:space="preserve">
            <source>Similarly, the following example creates a subscription named</source>
            <target state="new">Similarly, the following example creates a subscription named</target>
          </trans-unit>
          <trans-unit id="207" xml:space="preserve">
            <source>'LowMessages' with a <bpt id="2">&lt;strong&gt;</bpt>SqlFilter<ept id="2">&lt;/strong&gt;</ept> that only selects messages that have</source>
            <target state="new">'LowMessages' with a <bpt id="2">&lt;strong&gt;</bpt>SqlFilter<ept id="2">&lt;/strong&gt;</ept> that only selects messages that have</target>
          </trans-unit>
          <trans-unit id="208" xml:space="preserve">
            <source>a <bpt id="2">&lt;strong&gt;</bpt>messagenumber<ept id="2">&lt;/strong&gt;</ept> property less than or equal to 3:</source>
            <target state="new">a <bpt id="2">&lt;strong&gt;</bpt>messagenumber<ept id="2">&lt;/strong&gt;</ept> property less than or equal to 3:</target>
          </trans-unit>
          <trans-unit id="209" xml:space="preserve">
            <source>When a message is now sent to 'MyTopic', it will always be delivered to</source>
            <target state="new">When a message is now sent to 'MyTopic', it will always be delivered to</target>
          </trans-unit>
          <trans-unit id="210" xml:space="preserve">
            <source>receivers subscribed to the 'AllMessages' topic subscription, and</source>
            <target state="new">receivers subscribed to the 'AllMessages' topic subscription, and</target>
          </trans-unit>
          <trans-unit id="211" xml:space="preserve">
            <source>selectively delivered to receivers subscribed to the 'HighMessages' and</source>
            <target state="new">selectively delivered to receivers subscribed to the 'HighMessages' and</target>
          </trans-unit>
          <trans-unit id="212" xml:space="preserve">
            <source>'LowMessages' topic subscriptions (depending upon the message content).</source>
            <target state="new">'LowMessages' topic subscriptions (depending upon the message content).</target>
          </trans-unit>
          <trans-unit id="213" xml:space="preserve">
            <source>How to send messages to a topic</source>
            <target state="new">How to send messages to a topic</target>
          </trans-unit>
          <trans-unit id="214" xml:space="preserve">
            <source>To send a message to a Service Bus topic, your application must use the</source>
            <target state="new">To send a message to a Service Bus topic, your application must use the</target>
          </trans-unit>
          <trans-unit id="215" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>sendTopicMessage<ept id="1">&lt;/strong&gt;</ept> method of the <bpt id="3">&lt;strong&gt;</bpt>ServiceBusService<ept id="3">&lt;/strong&gt;</ept> object.</source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>sendTopicMessage<ept id="1">&lt;/strong&gt;</ept> method of the <bpt id="3">&lt;strong&gt;</bpt>ServiceBusService<ept id="3">&lt;/strong&gt;</ept> object.</target>
          </trans-unit>
          <trans-unit id="216" xml:space="preserve">
            <source>Messages sent to Service Bus Topics are <bpt id="2">&lt;strong&gt;</bpt>BrokeredMessage<ept id="2">&lt;/strong&gt;</ept> objects.</source>
            <target state="new">Messages sent to Service Bus Topics are <bpt id="2">&lt;strong&gt;</bpt>BrokeredMessage<ept id="2">&lt;/strong&gt;</ept> objects.</target>
          </trans-unit>
          <trans-unit id="217" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>BrokeredMessage<ept id="1">&lt;/strong&gt;</ept> objects have a set of standard properties (such as</source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>BrokeredMessage<ept id="1">&lt;/strong&gt;</ept> objects have a set of standard properties (such as</target>
          </trans-unit>
          <trans-unit id="218" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>Label<ept id="1">&lt;/strong&gt;</ept> and <bpt id="3">&lt;strong&gt;</bpt>TimeToLive<ept id="3">&lt;/strong&gt;</ept>), a dictionary that is used to hold custom</source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>Label<ept id="1">&lt;/strong&gt;</ept> and <bpt id="3">&lt;strong&gt;</bpt>TimeToLive<ept id="3">&lt;/strong&gt;</ept>), a dictionary that is used to hold custom</target>
          </trans-unit>
          <trans-unit id="219" xml:space="preserve">
            <source>application specific properties, and a body of string data.</source>
            <target state="new">application specific properties, and a body of string data.</target>
          </trans-unit>
          <trans-unit id="220" xml:space="preserve">
            <source>An</source>
            <target state="new">An</target>
          </trans-unit>
          <trans-unit id="221" xml:space="preserve">
            <source>application can set the body of the message by passing a string value to</source>
            <target state="new">application can set the body of the message by passing a string value to</target>
          </trans-unit>
          <trans-unit id="222" xml:space="preserve">
            <source>the <bpt id="2">&lt;strong&gt;</bpt>sendTopicMessage<ept id="2">&lt;/strong&gt;</ept> and any required standard properties will be</source>
            <target state="new">the <bpt id="2">&lt;strong&gt;</bpt>sendTopicMessage<ept id="2">&lt;/strong&gt;</ept> and any required standard properties will be</target>
          </trans-unit>
          <trans-unit id="223" xml:space="preserve">
            <source>populated by default values.</source>
            <target state="new">populated by default values.</target>
          </trans-unit>
          <trans-unit id="224" xml:space="preserve">
            <source>The following example demonstrates how to send five test messages to</source>
            <target state="new">The following example demonstrates how to send five test messages to</target>
          </trans-unit>
          <trans-unit id="225" xml:space="preserve">
            <source>'MyTopic'.</source>
            <target state="new">'MyTopic'.</target>
          </trans-unit>
          <trans-unit id="226" xml:space="preserve">
            <source>Note that the <bpt id="2">&lt;strong&gt;</bpt>messagenumber<ept id="2">&lt;/strong&gt;</ept> property value of each</source>
            <target state="new">Note that the <bpt id="2">&lt;strong&gt;</bpt>messagenumber<ept id="2">&lt;/strong&gt;</ept> property value of each</target>
          </trans-unit>
          <trans-unit id="227" xml:space="preserve">
            <source>message varies on the iteration of the loop (this will determine which</source>
            <target state="new">message varies on the iteration of the loop (this will determine which</target>
          </trans-unit>
          <trans-unit id="228" xml:space="preserve">
            <source>subscriptions receive it):</source>
            <target state="new">subscriptions receive it):</target>
          </trans-unit>
          <trans-unit id="229" xml:space="preserve">
            <source>Service Bus topics support a maximum message size of 256 MB (the header,</source>
            <target state="new">Service Bus topics support a maximum message size of 256 MB (the header,</target>
          </trans-unit>
          <trans-unit id="230" xml:space="preserve">
            <source>which includes the standard and custom application properties, can have</source>
            <target state="new">which includes the standard and custom application properties, can have</target>
          </trans-unit>
          <trans-unit id="231" xml:space="preserve">
            <source>a maximum size of 64 MB).</source>
            <target state="new">a maximum size of 64 MB).</target>
          </trans-unit>
          <trans-unit id="232" xml:space="preserve">
            <source>There is no limit on the number of messages</source>
            <target state="new">There is no limit on the number of messages</target>
          </trans-unit>
          <trans-unit id="233" xml:space="preserve">
            <source>held in a topic but there is a cap on the total size of the messages</source>
            <target state="new">held in a topic but there is a cap on the total size of the messages</target>
          </trans-unit>
          <trans-unit id="234" xml:space="preserve">
            <source>held by a topic.</source>
            <target state="new">held by a topic.</target>
          </trans-unit>
          <trans-unit id="235" xml:space="preserve">
            <source>This topic size is defined at creation time, with an</source>
            <target state="new">This topic size is defined at creation time, with an</target>
          </trans-unit>
          <trans-unit id="236" xml:space="preserve">
            <source>upper limit of 5 GB.</source>
            <target state="new">upper limit of 5 GB.</target>
          </trans-unit>
          <trans-unit id="237" xml:space="preserve">
            <source>How to receive messages from a subscription</source>
            <target state="new">How to receive messages from a subscription</target>
          </trans-unit>
          <trans-unit id="238" xml:space="preserve">
            <source>Messages are received from a subscription using the</source>
            <target state="new">Messages are received from a subscription using the</target>
          </trans-unit>
          <trans-unit id="239" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>receiveSubscriptionMessage<ept id="1">&lt;/strong&gt;</ept> method on the <bpt id="3">&lt;strong&gt;</bpt>ServiceBusService<ept id="3">&lt;/strong&gt;</ept></source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>receiveSubscriptionMessage<ept id="1">&lt;/strong&gt;</ept> method on the <bpt id="3">&lt;strong&gt;</bpt>ServiceBusService<ept id="3">&lt;/strong&gt;</ept></target>
          </trans-unit>
          <trans-unit id="240" xml:space="preserve">
            <source>object.</source>
            <target state="new">object.</target>
          </trans-unit>
          <trans-unit id="241" xml:space="preserve">
            <source>By default, messages are deleted from the subscription as they</source>
            <target state="new">By default, messages are deleted from the subscription as they</target>
          </trans-unit>
          <trans-unit id="242" xml:space="preserve">
            <source>are read; however, you can read (peek) and lock the message without</source>
            <target state="new">are read; however, you can read (peek) and lock the message without</target>
          </trans-unit>
          <trans-unit id="243" xml:space="preserve">
            <source>deleting it from the subscription by setting the optional parameter</source>
            <target state="new">deleting it from the subscription by setting the optional parameter</target>
          </trans-unit>
          <trans-unit id="244" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>isPeekLock<ept id="1">&lt;/strong&gt;</ept> to <bpt id="3">&lt;strong&gt;</bpt>true<ept id="3">&lt;/strong&gt;</ept>.</source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>isPeekLock<ept id="1">&lt;/strong&gt;</ept> to <bpt id="3">&lt;strong&gt;</bpt>true<ept id="3">&lt;/strong&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="245" xml:space="preserve">
            <source>The default behavior of reading and deleting the message as part of the</source>
            <target state="new">The default behavior of reading and deleting the message as part of the</target>
          </trans-unit>
          <trans-unit id="246" xml:space="preserve">
            <source>receive operation is the simplest model, and works best for scenarios in</source>
            <target state="new">receive operation is the simplest model, and works best for scenarios in</target>
          </trans-unit>
          <trans-unit id="247" xml:space="preserve">
            <source>which an application can tolerate not processing a message in the event</source>
            <target state="new">which an application can tolerate not processing a message in the event</target>
          </trans-unit>
          <trans-unit id="248" xml:space="preserve">
            <source>of a failure.</source>
            <target state="new">of a failure.</target>
          </trans-unit>
          <trans-unit id="249" xml:space="preserve">
            <source>To understand this, consider a scenario in which the</source>
            <target state="new">To understand this, consider a scenario in which the</target>
          </trans-unit>
          <trans-unit id="250" xml:space="preserve">
            <source>consumer issues the receive request and then crashes before processing</source>
            <target state="new">consumer issues the receive request and then crashes before processing</target>
          </trans-unit>
          <trans-unit id="251" xml:space="preserve">
            <source>it.</source>
            <target state="new">it.</target>
          </trans-unit>
          <trans-unit id="252" xml:space="preserve">
            <source>Because Service Bus will have marked the message as being consumed,</source>
            <target state="new">Because Service Bus will have marked the message as being consumed,</target>
          </trans-unit>
          <trans-unit id="253" xml:space="preserve">
            <source>then when the application restarts and begins consuming messages again,</source>
            <target state="new">then when the application restarts and begins consuming messages again,</target>
          </trans-unit>
          <trans-unit id="254" xml:space="preserve">
            <source>it will have missed the message that was consumed prior to the crash.</source>
            <target state="new">it will have missed the message that was consumed prior to the crash.</target>
          </trans-unit>
          <trans-unit id="255" xml:space="preserve">
            <source>If the <bpt id="2">&lt;strong&gt;</bpt>isPeekLock<ept id="2">&lt;/strong&gt;</ept> parameter is set to <bpt id="4">&lt;strong&gt;</bpt>true<ept id="4">&lt;/strong&gt;</ept>, the receive becomes</source>
            <target state="new">If the <bpt id="2">&lt;strong&gt;</bpt>isPeekLock<ept id="2">&lt;/strong&gt;</ept> parameter is set to <bpt id="4">&lt;strong&gt;</bpt>true<ept id="4">&lt;/strong&gt;</ept>, the receive becomes</target>
          </trans-unit>
          <trans-unit id="256" xml:space="preserve">
            <source>a two stage operation, which makes it possible to support applications</source>
            <target state="new">a two stage operation, which makes it possible to support applications</target>
          </trans-unit>
          <trans-unit id="257" xml:space="preserve">
            <source>that cannot tolerate missing messages.</source>
            <target state="new">that cannot tolerate missing messages.</target>
          </trans-unit>
          <trans-unit id="258" xml:space="preserve">
            <source>When Service Bus receives a</source>
            <target state="new">When Service Bus receives a</target>
          </trans-unit>
          <trans-unit id="259" xml:space="preserve">
            <source>request, it finds the next message to be consumed, locks it to prevent</source>
            <target state="new">request, it finds the next message to be consumed, locks it to prevent</target>
          </trans-unit>
          <trans-unit id="260" xml:space="preserve">
            <source>other consumers receiving it, and then returns it to the application.</source>
            <target state="new">other consumers receiving it, and then returns it to the application.</target>
          </trans-unit>
          <trans-unit id="261" xml:space="preserve">
            <source>After the application finishes processing the message (or stores it</source>
            <target state="new">After the application finishes processing the message (or stores it</target>
          </trans-unit>
          <trans-unit id="262" xml:space="preserve">
            <source>reliably for future processing), it completes the second stage of the</source>
            <target state="new">reliably for future processing), it completes the second stage of the</target>
          </trans-unit>
          <trans-unit id="263" xml:space="preserve">
            <source>receive process by calling <bpt id="2">&lt;strong&gt;</bpt>deleteMessage<ept id="2">&lt;/strong&gt;</ept> method and providing the</source>
            <target state="new">receive process by calling <bpt id="2">&lt;strong&gt;</bpt>deleteMessage<ept id="2">&lt;/strong&gt;</ept> method and providing the</target>
          </trans-unit>
          <trans-unit id="264" xml:space="preserve">
            <source>message to be deleted as a parameter.</source>
            <target state="new">message to be deleted as a parameter.</target>
          </trans-unit>
          <trans-unit id="265" xml:space="preserve">
            <source>The <bpt id="2">&lt;strong&gt;</bpt>deleteMessage<ept id="2">&lt;/strong&gt;</ept> method will</source>
            <target state="new">The <bpt id="2">&lt;strong&gt;</bpt>deleteMessage<ept id="2">&lt;/strong&gt;</ept> method will</target>
          </trans-unit>
          <trans-unit id="266" xml:space="preserve">
            <source>mark the message as being consumed and remove it from the subscription.</source>
            <target state="new">mark the message as being consumed and remove it from the subscription.</target>
          </trans-unit>
          <trans-unit id="267" xml:space="preserve">
            <source>The example below demonstrates how messages can be received and</source>
            <target state="new">The example below demonstrates how messages can be received and</target>
          </trans-unit>
          <trans-unit id="268" xml:space="preserve">
            <source>processed using <bpt id="2">&lt;strong&gt;</bpt>receiveSubscriptionMessage<ept id="2">&lt;/strong&gt;</ept>.</source>
            <target state="new">processed using <bpt id="2">&lt;strong&gt;</bpt>receiveSubscriptionMessage<ept id="2">&lt;/strong&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="269" xml:space="preserve">
            <source>The example first</source>
            <target state="new">The example first</target>
          </trans-unit>
          <trans-unit id="270" xml:space="preserve">
            <source>receives and deletes a message from the 'LowMessages' subscription, and</source>
            <target state="new">receives and deletes a message from the 'LowMessages' subscription, and</target>
          </trans-unit>
          <trans-unit id="271" xml:space="preserve">
            <source>then receives a message from the 'HighMessages' subscription using</source>
            <target state="new">then receives a message from the 'HighMessages' subscription using</target>
          </trans-unit>
          <trans-unit id="272" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>isPeekLock<ept id="1">&lt;/strong&gt;</ept> set to true.</source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>isPeekLock<ept id="1">&lt;/strong&gt;</ept> set to true.</target>
          </trans-unit>
          <trans-unit id="273" xml:space="preserve">
            <source>It then deletes the message using</source>
            <target state="new">It then deletes the message using</target>
          </trans-unit>
          <trans-unit id="274" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>deleteMessage<ept id="1">&lt;/strong&gt;</ept>:</source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>deleteMessage<ept id="1">&lt;/strong&gt;</ept>:</target>
          </trans-unit>
          <trans-unit id="275" xml:space="preserve">
            <source>How to handle application crashes and unreadable messages</source>
            <target state="new">How to handle application crashes and unreadable messages</target>
          </trans-unit>
          <trans-unit id="276" xml:space="preserve">
            <source>Service Bus provides functionality to help you gracefully recover from</source>
            <target state="new">Service Bus provides functionality to help you gracefully recover from</target>
          </trans-unit>
          <trans-unit id="277" xml:space="preserve">
            <source>errors in your application or difficulties processing a message.</source>
            <target state="new">errors in your application or difficulties processing a message.</target>
          </trans-unit>
          <trans-unit id="278" xml:space="preserve">
            <source>If a</source>
            <target state="new">If a</target>
          </trans-unit>
          <trans-unit id="279" xml:space="preserve">
            <source>receiver application is unable to process the message for some reason,</source>
            <target state="new">receiver application is unable to process the message for some reason,</target>
          </trans-unit>
          <trans-unit id="280" xml:space="preserve">
            <source>then it can call the <bpt id="2">&lt;strong&gt;</bpt>unlockMessage<ept id="2">&lt;/strong&gt;</ept> method on the</source>
            <target state="new">then it can call the <bpt id="2">&lt;strong&gt;</bpt>unlockMessage<ept id="2">&lt;/strong&gt;</ept> method on the</target>
          </trans-unit>
          <trans-unit id="281" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>ServiceBusService<ept id="1">&lt;/strong&gt;</ept> object.</source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>ServiceBusService<ept id="1">&lt;/strong&gt;</ept> object.</target>
          </trans-unit>
          <trans-unit id="282" xml:space="preserve">
            <source>This will cause Service Bus to unlock the</source>
            <target state="new">This will cause Service Bus to unlock the</target>
          </trans-unit>
          <trans-unit id="283" xml:space="preserve">
            <source>message within the subscription and make it available to be received</source>
            <target state="new">message within the subscription and make it available to be received</target>
          </trans-unit>
          <trans-unit id="284" xml:space="preserve">
            <source>again, either by the same consuming application or by another consuming</source>
            <target state="new">again, either by the same consuming application or by another consuming</target>
          </trans-unit>
          <trans-unit id="285" xml:space="preserve">
            <source>application.</source>
            <target state="new">application.</target>
          </trans-unit>
          <trans-unit id="286" xml:space="preserve">
            <source>There is also a timeout associated with a message locked within the</source>
            <target state="new">There is also a timeout associated with a message locked within the</target>
          </trans-unit>
          <trans-unit id="287" xml:space="preserve">
            <source>subscription, and if the application fails to process the message before</source>
            <target state="new">subscription, and if the application fails to process the message before</target>
          </trans-unit>
          <trans-unit id="288" xml:space="preserve">
            <source>the lock timeout expires (e.g., if the application crashes), then</source>
            <target state="new">the lock timeout expires (e.g., if the application crashes), then</target>
          </trans-unit>
          <trans-unit id="289" xml:space="preserve">
            <source>Service Bus will unlock the message automatically and make it available</source>
            <target state="new">Service Bus will unlock the message automatically and make it available</target>
          </trans-unit>
          <trans-unit id="290" xml:space="preserve">
            <source>to be received again.</source>
            <target state="new">to be received again.</target>
          </trans-unit>
          <trans-unit id="291" xml:space="preserve">
            <source>In the event that the application crashes after processing the message</source>
            <target state="new">In the event that the application crashes after processing the message</target>
          </trans-unit>
          <trans-unit id="292" xml:space="preserve">
            <source>but before the <bpt id="2">&lt;strong&gt;</bpt>deleteMessage<ept id="2">&lt;/strong&gt;</ept> method is called, then the message will</source>
            <target state="new">but before the <bpt id="2">&lt;strong&gt;</bpt>deleteMessage<ept id="2">&lt;/strong&gt;</ept> method is called, then the message will</target>
          </trans-unit>
          <trans-unit id="293" xml:space="preserve">
            <source>be redelivered to the application when it restarts.</source>
            <target state="new">be redelivered to the application when it restarts.</target>
          </trans-unit>
          <trans-unit id="294" xml:space="preserve">
            <source>This is often called</source>
            <target state="new">This is often called</target>
          </trans-unit>
          <trans-unit id="295" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>At Least Once Processing<ept id="1">&lt;/strong&gt;</ept>, that is, each message will be processed at</source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>At Least Once Processing<ept id="1">&lt;/strong&gt;</ept>, that is, each message will be processed at</target>
          </trans-unit>
          <trans-unit id="296" xml:space="preserve">
            <source>least once but in certain situations the same message may be</source>
            <target state="new">least once but in certain situations the same message may be</target>
          </trans-unit>
          <trans-unit id="297" xml:space="preserve">
            <source>redelivered.</source>
            <target state="new">redelivered.</target>
          </trans-unit>
          <trans-unit id="298" xml:space="preserve">
            <source>If the scenario cannot tolerate duplicate processing, then</source>
            <target state="new">If the scenario cannot tolerate duplicate processing, then</target>
          </trans-unit>
          <trans-unit id="299" xml:space="preserve">
            <source>application developers should add additional logic to their application</source>
            <target state="new">application developers should add additional logic to their application</target>
          </trans-unit>
          <trans-unit id="300" xml:space="preserve">
            <source>to handle duplicate message delivery.</source>
            <target state="new">to handle duplicate message delivery.</target>
          </trans-unit>
          <trans-unit id="301" xml:space="preserve">
            <source>This is often achieved using the</source>
            <target state="new">This is often achieved using the</target>
          </trans-unit>
          <trans-unit id="302" xml:space="preserve">
            <source><bpt id="1">&lt;strong&gt;</bpt>MessageId<ept id="1">&lt;/strong&gt;</ept> property of the message, which will remain constant across</source>
            <target state="new"><bpt id="1">&lt;strong&gt;</bpt>MessageId<ept id="1">&lt;/strong&gt;</ept> property of the message, which will remain constant across</target>
          </trans-unit>
          <trans-unit id="303" xml:space="preserve">
            <source>delivery attempts.</source>
            <target state="new">delivery attempts.</target>
          </trans-unit>
          <trans-unit id="304" xml:space="preserve">
            <source>How to delete topics and subscriptions</source>
            <target state="new">How to delete topics and subscriptions</target>
          </trans-unit>
          <trans-unit id="305" xml:space="preserve">
            <source>Topics and subscriptions are persistent, and must be explicitly deleted</source>
            <target state="new">Topics and subscriptions are persistent, and must be explicitly deleted</target>
          </trans-unit>
          <trans-unit id="306" xml:space="preserve">
            <source>either through the Azure Management portal or programmatically.</source>
            <target state="new">either through the Azure Management portal or programmatically.</target>
          </trans-unit>
          <trans-unit id="307" xml:space="preserve">
            <source>The example below demonstrates how to delete the topic named 'MyTopic':</source>
            <target state="new">The example below demonstrates how to delete the topic named 'MyTopic':</target>
          </trans-unit>
          <trans-unit id="308" xml:space="preserve">
            <source>Deleting a topic will also delete any subscriptions that are registered</source>
            <target state="new">Deleting a topic will also delete any subscriptions that are registered</target>
          </trans-unit>
          <trans-unit id="309" xml:space="preserve">
            <source>with the topic.</source>
            <target state="new">with the topic.</target>
          </trans-unit>
          <trans-unit id="310" xml:space="preserve">
            <source>Subscriptions can also be deleted independently.</source>
            <target state="new">Subscriptions can also be deleted independently.</target>
          </trans-unit>
          <trans-unit id="311" xml:space="preserve">
            <source>The</source>
            <target state="new">The</target>
          </trans-unit>
          <trans-unit id="312" xml:space="preserve">
            <source>following code demonstrates how to delete a subscription named</source>
            <target state="new">following code demonstrates how to delete a subscription named</target>
          </trans-unit>
          <trans-unit id="313" xml:space="preserve">
            <source>'HighMessages' from the 'MyTopic' topic:</source>
            <target state="new">'HighMessages' from the 'MyTopic' topic:</target>
          </trans-unit>
          <trans-unit id="314" xml:space="preserve">
            <source>Next Steps</source>
            <target state="new">Next Steps</target>
          </trans-unit>
          <trans-unit id="315" xml:space="preserve">
            <source>Now that you've learned the basics of Service Bus topics, follow these</source>
            <target state="new">Now that you've learned the basics of Service Bus topics, follow these</target>
          </trans-unit>
          <trans-unit id="316" xml:space="preserve">
            <source>links to learn more.</source>
            <target state="new">links to learn more.</target>
          </trans-unit>
          <trans-unit id="317" xml:space="preserve">
            <source>See the MSDN Reference: <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Queues, Topics, and Subscriptions[]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">See the MSDN Reference: <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>Queues, Topics, and Subscriptions[]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="318" xml:space="preserve">
            <source>API reference for <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>SqlFilter[]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</source>
            <target state="new">API reference for <bpt id="2CapsExtId1">&lt;link&gt;</bpt><bpt id="2CapsExtId2">&lt;linkText&gt;</bpt>SqlFilter[]<ept id="2CapsExtId2">&lt;/linkText&gt;</ept><bpt id="2CapsExtId3">&lt;title&gt;</bpt><ept id="2CapsExtId3">&lt;/title&gt;</ept><ept id="2CapsExtId1">&lt;/link&gt;</ept>.</target>
          </trans-unit>
          <trans-unit id="319" xml:space="preserve">
            <source>Visit the [Azure SDK for Node] repository on GitHub.</source>
            <target state="new">Visit the [Azure SDK for Node] repository on GitHub.</target>
          </trans-unit>
        </group>
      </group>
    </body>
  </file>
</xliff>